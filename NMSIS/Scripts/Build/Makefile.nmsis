TARGET ?= DSP
LIB_PREFIX ?= nmsis
LIBIRAY_ROOT ?= Library
BUILD_ROOT ?= build
# Previous LIBTYPE is TOOLCHAIN, but now changed to LIBTYPE to avoid mis-usage with SDK TOOLCHAIN var
LIBTYPE ?= GCC
BUILD_TARGET ?= all
PARALLEL_OPTS ?= -j8
REBUILD ?= 1
STRIP ?= 1
SIMU ?= qemu
# supported options
# N1: turn on only N1 extension
# N2: turn on N1/N2 extension
# N3: turn on N1/N2/N3 extension
NUCLEI_DSP ?=
EXTRAOPTS ?=

LOGDIR ?= logs/nmsis

# CMake Configuration
# ON or OFF
NUCLEI_DSP_N1 ?= ON
NUCLEI_DSP_N2 ?= ON
NUCLEI_DSP_N3 ?= ON
LOOPUNROLL ?= ON
ROUNDING ?= OFF
MATRIXCHECK ?= OFF
RISCV_UNALIGN ?= OFF
DSP_ATTRIBUTE ?= ON

DSP_JSON_CONFIG ?= Scripts/Build/nmsis_dsp.json
NN_JSON_CONFIG ?= Scripts/Build/nmsis_nn.json
UNALIGN_DSP_JSON_CONFIG ?= Scripts/Build/nmsis_dsp_unalign.json
UNALIGN_NN_JSON_CONFIG ?= Scripts/Build/nmsis_nn_unalign.json
NNREF_JSON_CONFIG ?= Scripts/Build/nmsis_nnref.json

CMAKE_INFO +=  \
	LOOPUNROLL=$(LOOPUNROLL) ROUNDING=$(ROUNDING) MATRIXCHECK=$(MATRIXCHECK) RISCV_UNALIGN=$(RISCV_UNALIGN) DSP_ATTRIBUTE=$(DSP_ATTRIBUTE)

ifeq ($(REBUILD),0)
EXTRA_NLOPTS += --norebuild
else
EXTRA_NLOPTS +=
endif

ifeq ($(STRIP),1)
EXTRA_NLOPTS += --strip
else
EXTRA_NLOPTS +=
endif

ifneq ($(EXTRAOPTS),)
EXTRA_NLOPTS += --extraopts ${EXTRAOPTS}
endif

.PHONY: nmsis_help gen_dsp_lib gen_nn_lib gen_unalign_dsp_lib gen_unalign_nn_lib gen gen_unalign envsetup check_build check_run check view_report view_logs

nmsis_help:
	@echo "Help about build and install NMSIS Library"
	@echo "Here are a list of make target we supported."
	@echo "gen           generate all configurations of NMSIS DSP and NN Library"
	@echo "gen_nnref_lib generate all configurations for NMSIS NN Reference Library"
	@echo "envsetup      show how to setup environment"
	@echo "check_build   Run simple build test for DSP and NN example and test"
	@echo "check_run     Run simple run test for DSP and NN example and test"
	@echo "view_report   View report of check_build or check_run"
	@echo "view_logs     View logs of check_build or check_run"

gen_dsp_lib:
	@echo "Generated DSP library for configuration file $(DSP_JSON_CONFIG)"
	./Scripts/Build/nlbuild.py --config $(DSP_JSON_CONFIG) --lib_src DSP/Source --lib_prefix nmsis_dsp \
		--lib_root $(LIBIRAY_ROOT)/DSP/$(LIBTYPE) --target $(BUILD_TARGET) --parallel="$(PARALLEL_OPTS)" \
		$(EXTRA_NLOPTS)

gen_nn_lib:
	@echo "Generated NN library for configuration file $(NN_JSON_CONFIG)"
	./Scripts/Build/nlbuild.py --config $(NN_JSON_CONFIG) --lib_src NN/Source --lib_prefix nmsis_nn \
		--lib_root $(LIBIRAY_ROOT)/NN/$(LIBTYPE) --target $(BUILD_TARGET)  --parallel="$(PARALLEL_OPTS)" \
		$(EXTRA_NLOPTS)

gen_nnref_lib:
	@echo "Generated NN Reference library for configuration file $(NNREF_JSON_CONFIG)"
	./Scripts/Build/nlbuild.py --config $(NNREF_JSON_CONFIG) --lib_src NN/Tests/Ref \
	--lib_prefix nmsis_nnref --lib_root $(LIBIRAY_ROOT)/NNREF/$(LIBTYPE) --target $(BUILD_TARGET) \
	--parallel="$(PARALLEL_OPTS)" $(EXTRA_NLOPTS)

gen_unalign_dsp_lib:
	@echo "Generated DSP library for configuration file $(UNALIGN_DSP_JSON_CONFIG)"
	./Scripts/Build/nlbuild.py --config $(UNALIGN_DSP_JSON_CONFIG) --lib_src DSP/Source --lib_prefix nmsis_dsp \
		--lib_root $(LIBIRAY_ROOT)/DSP/$(LIBTYPE) --target $(BUILD_TARGET) --parallel="$(PARALLEL_OPTS)" \
		$(EXTRA_NLOPTS)

gen_unalign_nn_lib:
	@echo "Generated NN library for configuration file $(UNALIGN_NN_JSON_CONFIG)"
	./Scripts/Build/nlbuild.py --config $(UNALIGN_NN_JSON_CONFIG) --lib_src NN/Source --lib_prefix nmsis_nn \
		--lib_root $(LIBIRAY_ROOT)/NN/$(LIBTYPE) --target $(BUILD_TARGET) --parallel="$(PARALLEL_OPTS)" \
		$(EXTRA_NLOPTS)

gen_unalign: gen_unalign_dsp_lib gen_unalign_nn_lib
	@echo "All libraries are generated into $(LIBIRAY_ROOT)"

gen: gen_dsp_lib gen_nn_lib
	@echo "All libraries are generated into $(LIBIRAY_ROOT)"

envsetup:
	@echo "Please run following command to setup NMSIS environment"
	@echo "source Scripts/Configs/fpga/setup.sh"

check: check_run

check_build:
	rm -rf $(LOGDIR)
	-python3 $(NUCLEI_SDK_ROOT)/tools/scripts/nsdk_cli/nsdk_bench.py --appcfg Scripts/Runner/nmsis_dsp_mini.json --logdir $(LOGDIR)/dsp --parallel=-j --make_options "SIMU=$(SIMU)"
	-python3 $(NUCLEI_SDK_ROOT)/tools/scripts/nsdk_cli/nsdk_bench.py --appcfg Scripts/Runner/nmsis_nn_mini.json --logdir $(LOGDIR)/nn --parallel=-j --make_options "SIMU=$(SIMU)"
	-python3 $(NUCLEI_SDK_ROOT)/tools/scripts/nsdk_cli/nsdk_report.py --logdir $(LOGDIR)
	@echo "Check build status for NMSIS, please find build logs in $(LOGDIR)"

check_run:
	rm -rf $(LOGDIR)
	-python3 $(NUCLEI_SDK_ROOT)/tools/scripts/nsdk_cli/nsdk_bench.py --appcfg Scripts/Runner/nmsis_dsp_mini.json --logdir $(LOGDIR)/dsp --parallel=-j --make_options "SIMU=$(SIMU)" --run_target $(SIMU) --run
	-python3 $(NUCLEI_SDK_ROOT)/tools/scripts/nsdk_cli/nsdk_bench.py --appcfg Scripts/Runner/nmsis_nn_mini.json --logdir $(LOGDIR)/nn --parallel=-j --make_options "SIMU=$(SIMU)" --run_target $(SIMU) --run
	-python3 $(NUCLEI_SDK_ROOT)/tools/scripts/nsdk_cli/nsdk_report.py --logdir $(LOGDIR) --run
	@echo "Check run status for NMSIS, please find run logs in $(LOGDIR)"

view_report:
	@echo "Preview report $(LOGDIR) in web"
	-python3 $(NUCLEI_SDK_ROOT)/tools/scripts/nsdk_cli/report_preview.py --logdir $(LOGDIR)

view_logs:
	@echo "Preview logs $(LOGDIR) in web"
	-python3 $(NUCLEI_SDK_ROOT)/tools/scripts/nsdk_cli/httpserver.py --directory $(LOGDIR)

