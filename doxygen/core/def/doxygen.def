AutoGen Definitions dummy;
struct = {
  cp-id     = 'structCacheInfo__Type';
  cp-name   = 'CacheInfo_Type';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structCacheInfo__Type_1aca857f59d80919532a355a0508a0e236';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'linesize';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      sec-mem-desc-line = '100';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Cache Line size in bytes.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = 'core__feature__cache_8h_1gacc2be57be2e95f62a5381ba1f87977b3';
        sec-mem-ref-line = '821';
        sec-mem-ref-name = 'GetDCacheInfo';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = 'core__feature__cache_8h_1ga69a3a0ce8c5e4494161991074387162e';
        sec-mem-ref-line = '257';
        sec-mem-ref-name = 'GetICacheInfo';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structCacheInfo__Type_1a963618b4e0fa8b89df750f8170a2a8ed';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ways';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      sec-mem-desc-line = '101';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Cache ways.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = 'core__feature__cache_8h_1gacc2be57be2e95f62a5381ba1f87977b3';
        sec-mem-ref-line = '821';
        sec-mem-ref-name = 'GetDCacheInfo';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = 'core__feature__cache_8h_1ga69a3a0ce8c5e4494161991074387162e';
        sec-mem-ref-line = '257';
        sec-mem-ref-name = 'GetICacheInfo';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structCacheInfo__Type_1a4921aea5a2a5e4527c06cd00e63e4ed5';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setperway';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      sec-mem-desc-line = '102';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Cache set per way.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = 'core__feature__cache_8h_1gacc2be57be2e95f62a5381ba1f87977b3';
        sec-mem-ref-line = '821';
        sec-mem-ref-name = 'GetDCacheInfo';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = 'core__feature__cache_8h_1ga69a3a0ce8c5e4494161991074387162e';
        sec-mem-ref-line = '257';
        sec-mem-ref-name = 'GetICacheInfo';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structCacheInfo__Type_1aead3d43e2bd952914a9b81aacb86b94e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'size';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      sec-mem-desc-line = '103';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Cache total size in bytes.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = 'core__feature__cache_8h_1gacc2be57be2e95f62a5381ba1f87977b3';
        sec-mem-ref-line = '821';
        sec-mem-ref-name = 'GetDCacheInfo';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = 'core__feature__cache_8h_1ga69a3a0ce8c5e4494161991074387162e';
        sec-mem-ref-line = '257';
        sec-mem-ref-name = 'GetICacheInfo';
    };
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
  cp-fileline  = '99';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Cache Information Type.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
struct = {
  cp-id     = 'structCLIC__CTRL__Type';
  cp-name   = 'CLIC_CTRL_Type';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structCLIC__CTRL__Type_1a2ab3b945b0ce453aa15d4a351d25bb53';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
__IOM uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'INTIP';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      sec-mem-desc-line = '84';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Offset: 0x000 (R/W)  Interrupt set pending register.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structCLIC__CTRL__Type_1a310d842768a67e1bc5c65d5fd16bc557';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
__IOM uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'INTIE';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      sec-mem-desc-line = '85';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Offset: 0x001 (R/W)  Interrupt set enable register.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structCLIC__CTRL__Type_1a7613a5dd2e5cc4a52a58cc38eeb6cb8f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
__IOM uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'INTATTR';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      sec-mem-desc-line = '86';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Offset: 0x002 (R/W)  Interrupt set attributes register.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structCLIC__CTRL__Type_1a934752e513e2fae6ab47d361331058cc';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
__IOM uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'INTCTRL';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      sec-mem-desc-line = '87';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Offset: 0x003 (R/W)  Interrupt configure register.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
  cp-fileline  = '83';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Access to the machine mode register structure of INTIP, INTIE, INTATTR, INTCTL.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
struct = {
  cp-id     = 'structCLIC__Type';
  cp-name   = 'CLIC_Type';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structCLIC__Type_1a9fd72fa34c705b1555a830e3563d29c4';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
__IOM uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'CFG';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      sec-mem-desc-line = '94';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Offset: 0x000 (R/W)  CLIC configuration register.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structCLIC__Type_1a60cac733dbb7d6bcf57e5a7ad5756dcd';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
__IM uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RESERVED0';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      sec-mem-desc-line = '95';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structCLIC__Type_1a72d9ef18be12cf79121c196e454bc4e7';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
__IM uint32_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'INFO';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      sec-mem-desc-line = '96';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Offset: 0x004 (R/ )  CLIC information register.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structCLIC__Type_1a8148a5d321c024c3c8e8c733f3e42a5e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
__IM uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RESERVED1';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      sec-mem-desc-line = '97';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structCLIC__Type_1aa723c3b11e73638d4752bf512a279286';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
__IOM uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'STH';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      sec-mem-desc-line = '99';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Offset: 0x009 (R/W )  CLIC supervisor mode interrupt-level threshold.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structCLIC__Type_1a544bf5d8c304f1d874fd70e986e1522b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
__IM uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RESERVED3';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      sec-mem-desc-line = '103';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structCLIC__Type_1afb6fd4c418a7d2394ee740231685698c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
__IOM uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'MTH';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      sec-mem-desc-line = '104';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Offset: 0x00B(R/W)  CLIC machine mode interrupt-level threshold.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structCLIC__Type_1aae155f9b30ba3b6dfef937344ec1316d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RESERVED4';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      sec-mem-desc-line = '105';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structCLIC__Type_1ad6e0c94489a1a942a97f49c7eb39ebc4';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
CLIC_CTRL_Type
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'CTRL';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      sec-mem-desc-line = '107';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Offset: 0x1000 (R/W) CLIC machine mode register structure for INTIP, INTIE, INTATTR, INTCTL.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structCLIC__Type_1a614ad6ed76963fa6cd25c8959e757771';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
__IM uint32_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RESERVED5';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      sec-mem-desc-line = '108';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structCLIC__Type_1af3f46282f0d6ad9e61baa37520a4b21b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
__IM uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RESERVED6';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      sec-mem-desc-line = '109';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structCLIC__Type_1a5c4496ec9a640cd25069f32098e81e78';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
__IOM uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'SSTH';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      sec-mem-desc-line = '110';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Offset: 0x2009 (R)  CLIC supervisor mode threshold register, which is a mirror to mintthresh.sth.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structCLIC__Type_1a4a3c4a6adbf38b09ff2818e999229737';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
__IM uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RESERVED7';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      sec-mem-desc-line = '111';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structCLIC__Type_1a96e5b575f5ab7eae12df625050fd42c2';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
__IM uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RESERVED8';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      sec-mem-desc-line = '112';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structCLIC__Type_1ac5f62e27311276cfd134ed9bf36d39e4';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
__IM uint32_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RESERVED9';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      sec-mem-desc-line = '113';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structCLIC__Type_1a87d4cec6a709fb149ad00feec8ebb326';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
CLIC_CTRL_Type
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'SCTRL';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      sec-mem-desc-line = '114';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Offset: 0x3000 (R/W) CLIC supervisor mode register structure for INTIP, INTIE, INTATTR, INTCTL.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
  cp-fileline  = '93';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Access to the structure of ECLIC Memory Map, which is compatible with TEE.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 1;
        node-label = 'CLIC_Type';
        node-link = {
          node-link-id = 'structCLIC__Type';
        };
        node-child = {
          child-id = '2';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
CTRL
SCTRL
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 2;
        node-label = 'CLIC_CTRL_Type';
        node-link = {
          node-link-id = 'structCLIC__CTRL__Type';
        };
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'unionCLICCFG__Type';
  cp-name   = 'CLICCFG_Type';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCLICCFG__Type_1abfefd8d2f3d6c6285dc6093a307e8414';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
__IM uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved0';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      sec-mem-desc-line = '59';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCLICCFG__Type_1af1f002d800e3df7a10a5b5edb386b8ca';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
__IOM uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'nlbits';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      sec-mem-desc-line = '60';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     1..4 specified the bit-width of level and priority in the register clicintctl[i]
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCLICCFG__Type_1a306023bce6e2993fb79bddca2fe59775';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
__IM uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'nmbits';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      sec-mem-desc-line = '61';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     5..6 ties to 1 if supervisor-level interrupt supported, or else it's reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCLICCFG__Type_1ac07d94abc0180afa954f67af68f742b4';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
__IM uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved1';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      sec-mem-desc-line = '62';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCLICCFG__Type_1a3170c7a56e3be1594ae681c975c040c9';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct CLICCFG_Type::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'b';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      sec-mem-desc-line = '63';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Structure used for bit  access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCLICCFG__Type_1ac27ac739e0794f9a8cdaf303adea6bc0';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'w';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      sec-mem-desc-line = '64';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Type      used for byte access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
  cp-fileline  = '56';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Union type to access CLICFG configure register.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* union */
union = {
  cp-id     = 'unionCLICINFO__Type';
  cp-name   = 'CLICINFO_Type';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCLICINFO__Type_1aee14c127c03ae38f72b592f942b5bc85';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
__IM uint32_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'numint';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      sec-mem-desc-line = '72';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:  0..12   number of maximum interrupt inputs supported
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCLICINFO__Type_1a99b721d3a2424844819a679e4f1238f5';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
__IM uint32_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'version';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      sec-mem-desc-line = '73';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:  13..20  20:17 for architecture version,16:13 for implementation version
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCLICINFO__Type_1a271572c7f01329ab557690754c0fc26d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
__IM uint32_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'intctlbits';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      sec-mem-desc-line = '74';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:  21..24  specifies how many hardware bits are actually implemented in the clicintctl registers
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCLICINFO__Type_1a0a410c625d55e29a4bb178dfd29e5ec2';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
__IM uint32_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved0';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      sec-mem-desc-line = '75';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:  25..31  Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCLICINFO__Type_1ab86b6a7c36e83a8fc92845f95ffcda3a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct CLICINFO_Type::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'b';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      sec-mem-desc-line = '76';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Structure used for bit  access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCLICINFO__Type_1a6af7e800ecd61939ffe40e0cfa39f9a0';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
__IM uint32_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'w';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      sec-mem-desc-line = '77';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Type      used for word access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
  cp-fileline  = '70';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Union type to access CLICINFO information register.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* union */
union = {
  cp-id     = 'unionCSR__MCACHECTL__Type';
  cp-name   = 'CSR_MCACHECTL_Type';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCACHECTL__Type_1a7398a02e986db63fe68ffdc03ad87cc6';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ic_en';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '271';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 0 I-Cache enable
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCACHECTL__Type_1a1b0609a9cc0d369b71cb1b444905d8b8';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ic_scpd_mod';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '272';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 1 Scratchpad mode, 0: Scratchpad as ICache Data RAM, 1: Scratchpad as ILM SRAM
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCACHECTL__Type_1a86e99f8eeffa4d51b4947d0f2f458397';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ic_ecc_en';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '273';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 2 I-Cache ECC enable
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCACHECTL__Type_1ac62d18e3aea0b24660201b2e029cdb6c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ic_ecc_excp_en';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '274';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 3 I-Cache 2bit ECC error exception enable
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCACHECTL__Type_1a356268c2e14a2b979923b4e247cc4f7e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ic_rwtecc';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '275';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 4 Control I-Cache Tag Ram ECC code injection
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCACHECTL__Type_1a4a87581325e9c55c525ad1c7a179c2a4';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ic_rwdecc';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '276';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 5 Control I-Cache Data Ram ECC code injection
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCACHECTL__Type_1a28fed72b496a3d61941c95598978327c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ic_pf_en';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '277';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 6 I-Cache prefetch enable
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCACHECTL__Type_1a85eaf0126000911c1cb12da40412d5e5';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ic_cancel_en';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '278';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 7 I-Cache change flow canceling enable control
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCACHECTL__Type_1a5618bb37716349bf2885dd2eb2540737';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ic_ecc_chk_en';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '279';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 8 I-Cache check ECC codes enable
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCACHECTL__Type_1abb80ed9438f86f2e25bf4fb0c039b14b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ic_prefetch_en';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '280';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 9 I-Cache CMO prefetch enable control
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCACHECTL__Type_1a10016c0cdac820ddaabb46614a5ffae8';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ic_burst_type';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '281';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 10 I-Cache Burst type control
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCACHECTL__Type_1a4f186396041a45e5192b2884946694c3';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved0';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '282';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 11..15 Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCACHECTL__Type_1acb7d5418b6e9562883657c691d998989';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'dc_en';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '283';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 16 DCache enable
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCACHECTL__Type_1ac1d1cb9764a25b7c6cdc3cc691b8cbf6';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'dc_ecc_en';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '284';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 17 D-Cache ECC enable
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCACHECTL__Type_1a84b8a5a58cf75f886b21a90763ec2f86';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'dc_ecc_excp_en';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '285';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 18 D-Cache 2bit ECC error exception enable
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCACHECTL__Type_1a2ca3c9c38e7cc9afdb16ed1bdb135951';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'dc_rwtecc';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '286';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 19 Control D-Cache Tag Ram ECC code injection
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCACHECTL__Type_1a0ab28a3d063e3e969cf0a73ca1a2832b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'dc_rwdecc';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '287';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 20 Control D-Cache Data Ram ECC code injection
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCACHECTL__Type_1afb3da891baf7ac0238c17cc4134e90ea';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'dc_ecc_chk_en';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '288';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 21 D-Cache check ECC codes enable
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCACHECTL__Type_1a49666e7789f362cead3d7c9a39eea575';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'dc_prefetch_en';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '289';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 22 D-Cache CMO prefetch enable control
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCACHECTL__Type_1a08264ca4c4b572c8bcd6b3bca9116f00';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'dc_burst_type';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '290';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 23 D-Cache Burst type control
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCACHECTL__Type_1a73cc081f5608c93a0afc796f9512a84a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved1';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '291';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 24..XLEN-1 Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCACHECTL__Type_1a591c3ed92950787aef0ea2c4e49932b2';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct CSR_MCACHECTL_Type::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'b';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '292';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Structure used for bit  access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCACHECTL__Type_1a4b815d0133f4cd0dee7a321028800caf';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '293';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Type      used for csr data access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
  cp-fileline  = '269';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Union type to access MCACHE_CTL CSR register.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* union */
union = {
  cp-id     = 'unionCSR__MCAUSE__Type';
  cp-name   = 'CSR_MCAUSE_Type';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCAUSE__Type_1a1cb072e5e7ddb5d23103e5b7ccd4754b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'exccode';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '185';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 0..11  exception or interrupt code
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCAUSE__Type_1a219408dc82a540a8f1984de4754103c5';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved0';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '186';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 12..15  Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCAUSE__Type_1a12e8d8f10c411011485f89d8c8096adb';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'mpil';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '187';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 16..23  Previous interrupt level
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCAUSE__Type_1a71022f579628a81dc0ac558cbc513421';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved1';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '188';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 24..26  Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCAUSE__Type_1a4c04623f4c35a7b546e42c0b39d37d5e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'mpie';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '189';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 27  Interrupt enable flag before enter interrupt
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCAUSE__Type_1a00a27e55a870e69d2747ee2d78b5d3e6';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'mpp';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '190';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 28..29  Privilede mode flag before enter interrupt
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCAUSE__Type_1ab67f23d9962f57913aa683f01a8a2008';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'minhv';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '191';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 30  Machine interrupt vector table
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCAUSE__Type_1ae7500724c75e2815c3624f91df4e7e1d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'interrupt';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '195';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: XLEN-1  trap type.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 0 means exception and 1 means interrupt 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCAUSE__Type_1a5f169f432a12b1211361bdfc6879a42a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct CSR_MCAUSE_Type::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'b';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '196';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Structure used for bit  access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCAUSE__Type_1ae5bdc279496969b722055aae0c118460';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '197';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Type      used for csr data access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
  cp-fileline  = '183';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Union type to access MCAUSE CSR register.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* union */
union = {
  cp-id     = 'unionCSR__MCFGINFO__Type';
  cp-name   = 'CSR_MCFGINFO_Type';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCFGINFO__Type_1a0cabeec34cf8e2a11c9c59221f855164';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'tee';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '358';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 0 TEE present
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCFGINFO__Type_1a5b360486d7355839b07d1d19960b9fb4';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ecc';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '359';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 1 ECC present
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCFGINFO__Type_1a73946e52a5708c7b47db9cd06d913838';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'clic';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '360';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 2 CLIC present
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCFGINFO__Type_1a63fec79c30424766b3597579b9a06f0e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'plic';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '361';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 3 PLIC present
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCFGINFO__Type_1aff4ecb10cddcc291ee6ab6070de0d1a6';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'fio';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '362';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 4 FIO present
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCFGINFO__Type_1a6fbc432ae53334fb3276a2daca081d15';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ppi';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '363';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 5 PPI present
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCFGINFO__Type_1a852a362daa1ccb36d779a07764e844e6';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'nice';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '364';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 6 NICE present
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCFGINFO__Type_1aae8758186672b5ef00e04346322e2fe9';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ilm';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '365';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 7 ILM present
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCFGINFO__Type_1adb720ece0db9e5c82b381a6af4944fea';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'dlm';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '366';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 8 DLM present
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCFGINFO__Type_1a1a0b0e69e1a487c28babba52092e2940';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'icache';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '367';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 9 ICache present
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCFGINFO__Type_1abbcd95938dd7523fe44c94f88fc2772b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'dcache';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '368';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 10 DCache present
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCFGINFO__Type_1ae76db2effd13a5b8f0f2d2f50a9506ca';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'smp';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '369';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 11 SMP present
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCFGINFO__Type_1a3dcf8c30a9b56eff282c695f64d43c97';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'dsp_n1';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '370';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 12 DSP N1 present
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCFGINFO__Type_1a68be817db3303c8e0ca9b1eccfe46adf';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'dsp_n2';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '371';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 13 DSP N2 present
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCFGINFO__Type_1a9840435a97352913ad583922ddfd5b29';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'dsp_n3';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '372';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 14 DSP N3 present
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCFGINFO__Type_1ac9eb6656a07fd2c345ce18f820920a29';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'zc_xlcz';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '373';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 15 Zc and xlcz extension present
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCFGINFO__Type_1af56bc4800128869b13a08afb9346887c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'iregion';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '374';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 16 IREGION present
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCFGINFO__Type_1af395e0516cb28681c02c5d7c3604cc70';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'vpu_degree';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '375';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 17..18 Indicate the VPU degree of parallel
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCFGINFO__Type_1a0478f4bfc2c5e0565cfb69987694368b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'sec_mode';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '376';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 19 Smwg extension present
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCFGINFO__Type_1a2de0695caa0d88565fd5c75d1f0e60fc';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'etrace';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '377';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 20 Etrace present
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCFGINFO__Type_1adaf2286826e7eaea3993bad7ded36b02';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'safety_mecha';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '378';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 21..22 Indicate Core's safety mechanism
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCFGINFO__Type_1ab6504694ad10a2b70ed2d2e3a2cca7dc';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'vnice';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '379';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 23 VNICE present
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCFGINFO__Type_1ab981fc079b6fc29b6e6731a1445b2102';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'xlcz';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '380';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 24 XLCZ extension present
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCFGINFO__Type_1af68b362f003adb1c59cf69a39af9b75f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'zilsd';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '381';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 25 Zilsd/Zclsd extension present
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCFGINFO__Type_1aaa6434af1a27daf01405f9c7056e493e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'sstc';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '382';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 26 SSTC extension present
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCFGINFO__Type_1aa71b20ca9b3732f4c46e4f3366948397';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved1';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '383';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 27..XLEN-1 Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCFGINFO__Type_1a292630f1a7e6f6a1e0ec6d9efbd110c6';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct CSR_MCFGINFO_Type::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'b';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '384';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Structure used for bit  access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCFGINFO__Type_1a50dd63592fa2d4e4540132f068cee0cd';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '385';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Type      used for csr data access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
  cp-fileline  = '356';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Union type to access MCFG_INFO CSR register.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* union */
union = {
  cp-id     = 'unionCSR__MCOUNTINHIBIT__Type';
  cp-name   = 'CSR_MCOUNTINHIBIT_Type';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCOUNTINHIBIT__Type_1a254ee53372453cbf96ed0626ba892748';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'cy';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '205';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 0     1 means disable mcycle counter
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCOUNTINHIBIT__Type_1ac263b873022f7faf2083ef0e200ddc6e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved0';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '206';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 1     Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCOUNTINHIBIT__Type_1aa701cdd635c06458c4a2857f709be409';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ir';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '207';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 2     1 means disable minstret counter
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCOUNTINHIBIT__Type_1aab234a4dac2d08f648cb47df509efaeb';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved1';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '208';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 3..XLEN-1 Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCOUNTINHIBIT__Type_1a54ff68dd3ad3b1589d68c6371e0b0537';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct CSR_MCOUNTINHIBIT_Type::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'b';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '209';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Structure used for bit  access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCOUNTINHIBIT__Type_1aa9ba6784709e8ba39c6e094156916dc2';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '210';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Type      used for csr data access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
  cp-fileline  = '203';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Union type to access MCOUNTINHIBIT CSR register.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* union */
union = {
  cp-id     = 'unionCSR__MDCAUSE__Type';
  cp-name   = 'CSR_MDCAUSE_Type';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MDCAUSE__Type_1aea660f37d75c94912e4d9aeb883885e0';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'mdcause';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '231';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 0..2   More detailed exception information as MCAUSE supplement
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MDCAUSE__Type_1afb35b39064208f0ebcba3d508899178d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved0';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '232';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 3..XLEN-1 Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MDCAUSE__Type_1a554065c9c7dca2aa36c4cc0ec0def426';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct CSR_MDCAUSE_Type::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'b';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '233';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Structure used for bit  access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MDCAUSE__Type_1ad6457904e00ed5093adaf60dc65a478c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '234';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Type      used for csr data access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
  cp-fileline  = '229';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Union type to access MDCAUSE CSR register.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* union */
union = {
  cp-id     = 'unionCSR__MDCFGINFO__Type';
  cp-name   = 'CSR_MDCFGINFO_Type';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MDCFGINFO__Type_1a023b173b517068119914ee656fc7a95b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'set';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '415';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 0..3 D-Cache sets per way
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = 'core__feature__cache_8h_1gacc2be57be2e95f62a5381ba1f87977b3';
        sec-mem-ref-line = '821';
        sec-mem-ref-name = 'GetDCacheInfo';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MDCFGINFO__Type_1af9523adb1cddd68b9ebcf3684c676373';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'way';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '416';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 4..6 D-Cache way
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = 'core__feature__cache_8h_1gacc2be57be2e95f62a5381ba1f87977b3';
        sec-mem-ref-line = '821';
        sec-mem-ref-name = 'GetDCacheInfo';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MDCFGINFO__Type_1ab3ce74a5f243a63facff399be7643d89';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'lsize';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '417';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 7..9 D-Cache line size
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = 'core__feature__cache_8h_1gacc2be57be2e95f62a5381ba1f87977b3';
        sec-mem-ref-line = '821';
        sec-mem-ref-name = 'GetDCacheInfo';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MDCFGINFO__Type_1afb1f66c3b3d1dd8fb52690091392eb96';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ecc';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '418';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 10   D-Cache ECC support
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MDCFGINFO__Type_1a333717d8ebf97d34c4b16376165d75d6';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved0';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '419';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 11..15 Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MDCFGINFO__Type_1adca07e70d18b1ff255415c6addcec359';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'lm_size';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '420';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 16..20 DLM size, need to be 2^n size
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MDCFGINFO__Type_1a21c2b66473db29a108862083aa33ee99';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'lm_ecc';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '421';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 21 DLM ECC present
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MDCFGINFO__Type_1a6b960e8dad7dc4765ccecd3bc39b8324';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved1';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '422';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 22..XLEN-1 Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MDCFGINFO__Type_1aa4a0f61c638dd81abdeca242b79dce72';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct CSR_MDCFGINFO_Type::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'b';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '423';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Structure used for bit  access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = 'core__feature__cache_8h_1gacc2be57be2e95f62a5381ba1f87977b3';
        sec-mem-ref-line = '821';
        sec-mem-ref-name = 'GetDCacheInfo';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MDCFGINFO__Type_1a458a2abb27aa334c0fda73efc7972aad';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '424';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Type      used for csr data access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = 'core__feature__cache_8h_1gacc2be57be2e95f62a5381ba1f87977b3';
        sec-mem-ref-line = '821';
        sec-mem-ref-name = 'GetDCacheInfo';
    };
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
  cp-fileline  = '413';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Union type to access MDCFG_INFO CSR register.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* union */
union = {
  cp-id     = 'unionCSR__MDLMCTL__Type';
  cp-name   = 'CSR_MDLMCTL_Type';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MDLMCTL__Type_1a18b13acd38c328d22c3dd8278bb76501';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'dlm_en';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '340';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 0 DLM enable
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MDLMCTL__Type_1a649937c80a8243f16fdd2194d019bacb';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'dlm_ecc_en';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '341';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 1 DLM ECC eanble
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MDLMCTL__Type_1afdd466303d9baded6a1f3808aa61a115';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'dlm_ecc_excp_en';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '342';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 2 DLM ECC exception enable
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MDLMCTL__Type_1a32b840f5de8f452ac8ed32b2bac1b3d1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'dlm_rwecc';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '343';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 3 Control mecc_code write to dlm, simulate error injection
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MDLMCTL__Type_1aae0f0e7fcdf9e82b94d9acfd776e27ad';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'dlm_ecc_chk_en';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '344';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 4 DLM check ECC codes enable
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MDLMCTL__Type_1a178d709c71080cf5977c08734963c2f6';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved0';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '345';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 5..9 Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MDLMCTL__Type_1a2818a047f0411e86358ee943206000c1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'dlm_bpa';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '346';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 10..XLEN-1 DLM base address
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MDLMCTL__Type_1afe1b05212d58c159da4f260be19d60fc';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct CSR_MDLMCTL_Type::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'b';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '347';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Structure used for bit  access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MDLMCTL__Type_1af387f099dd532d49257a478b27123b52';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '348';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Type      used for csr data access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
  cp-fileline  = '338';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Union type to access MDLM_CTL CSR register.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* union */
union = {
  cp-id     = 'unionCSR__MECC__CTL__Type';
  cp-name   = 'CSR_MECC_CTL_Type';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MECC__CTL__Type_1ad7d7fca8ba55e419239da1b4baf2e2e3';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ilm_fch_msk';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '515';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 0 Write 1 to disable aggregate ILM fetch ECC fatal error to safety_error output
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MECC__CTL__Type_1a0a3b768e8ce315b1bee3aaf953ee9393';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ilm_acc_msk';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '516';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 1 Write 1 to disable aggregate ILM load/store access ECC fatal error to safety_error output
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MECC__CTL__Type_1a98a69ad485c4f6fa0b13509b8bc31539';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'dlm_acc_msk';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '517';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 2 Write 1 to disable aggregate DLM access ECC fatal error to safety_error output
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MECC__CTL__Type_1a795d1a8848a89df9ceb41d59a3f5fc16';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ic_fch_msk';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '518';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 3 Write 1 to disable aggregate ICache fetch ECC fatal error to safety_error output
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MECC__CTL__Type_1a7a58ec22e4f7d4f8b5ec33015afd97a3';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'dc_acc_msk';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '519';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 4 Write 1 to disable aggregate DCache access ECC fatal error to safety_error output
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MECC__CTL__Type_1ae230f7c4f846f24a60d2f5a25db91d2c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ilm_ext_msk';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '520';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 5 Write 1 to disable aggregate ILM external access ECC fatal error to safety_error output
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MECC__CTL__Type_1a07a06e46b0848dae0f307c0f9ca5febf';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'dlm_ext_msk';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '521';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 6 Write 1 to disable aggregate DLM external access ECC fatal error to safety_error output
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MECC__CTL__Type_1acfe4d0ae586403c66415752e84f1d1be';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ic_ccm_msk';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '522';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 7 Write 1 to disable aggregate ICache CCM ECC fatal error to safety_error output
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MECC__CTL__Type_1a2850b95ca377be9b4425409e84f7f182';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'dc_ccm_msk';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '523';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 8 Write 1 to disable aggregate DCache CCM ECC fatal error to safety_error output
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MECC__CTL__Type_1abec012c7e3927abe8ad0a1922450c3b8';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'dc_cpbk_msk';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '524';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 9 Write 1 to disable aggregate DCache CPBK ECC fatal error to safety_error output
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MECC__CTL__Type_1a32e0746799374d1fc6f1387081fdaf1e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved0';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '525';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 10..XLEN-1 Reserved 0
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MECC__CTL__Type_1a6fa1f5ef88a27842d2089ce58b47905e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct CSR_MECC_CTL_Type::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'b';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '526';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Structure used for bit  access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MECC__CTL__Type_1a9043c86fb6450622220c92bab270e973';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '527';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Type      used for csr data access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
  cp-fileline  = '513';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Union type to access MECC_CTL CSR register.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* union */
union = {
  cp-id     = 'unionCSR__MECC__STATUS__Type';
  cp-name   = 'CSR_MECC_STATUS_Type';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MECC__STATUS__Type_1a9a7314fef6c975941768b10f6aa68736';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ilm_fch_err';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '535';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 0 ILM fetch ECC fatal error has occurred
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MECC__STATUS__Type_1a30e24a06127ee42383c1d7be04bc0243';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ilm_acc_err';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '536';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 1 ILM load/store access ECC fatal error has occurred
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MECC__STATUS__Type_1a2bd0b584ef91472a71226f7cb5fc3036';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'dlm_acc_err';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '537';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 2 DLM access ECC fatal error has occurred
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MECC__STATUS__Type_1af9c886211080b666de6884e05d0dfac4';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ic_fch_err';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '538';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 3 ICache fetch ECC fatal error has occurred
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MECC__STATUS__Type_1ab992757be7da7f73821fb56c53ca1ffa';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'dc_acc_err';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '539';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 4 DCache access ECC fatal error has occurred
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MECC__STATUS__Type_1acc59312e77b9248de6ed08cee9d5ae61';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ilm_ext_err';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '540';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 5 ILM external access ECC fatal error has occurred
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MECC__STATUS__Type_1a4bef4e63099a9ee304877c669d0329fa';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'dlm_ext_err';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '541';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 6 DLM external access ECC fatal error has occurred
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MECC__STATUS__Type_1a0fdcadbd39817851a8930f185d2addc1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ic_ccm_err';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '542';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 7 ICache CCM ECC fatal error has occurred
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MECC__STATUS__Type_1a9d11c59719b01e7836ec46a82e9026f2';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'dc_ccm_err';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '543';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 8 DCache CCM ECC fatal error has occurred
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MECC__STATUS__Type_1a28f5936a08e69ceb71ff251a0675af93';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'dc_cpbk_err';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '544';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 9 DCache CPBK ECC fatal error has occurred
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MECC__STATUS__Type_1a658a5b6f48ef3cb0d26dc11b75338c3f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved0';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '545';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 10..XLEN-1 Reserved 0
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MECC__STATUS__Type_1ad52fb1f68d8487e3ab0e4efd42cc1ef3';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct CSR_MECC_STATUS_Type::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'b';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '546';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Structure used for bit  access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MECC__STATUS__Type_1aecea8435c2ec9c7bc39302e1403ce526';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '547';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Type      used for csr data access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
  cp-fileline  = '533';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Union type to access MECC_STATUS CSR register.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* union */
union = {
  cp-id     = 'unionCSR__MECCCODE__Type';
  cp-name   = 'CSR_MECCCODE_Type';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MECCCODE__Type_1a8f0640f2f7cd3312e462c9692121ed22';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'code';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '498';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 0..8 Used to inject ECC check code
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MECCCODE__Type_1ae0f74ab89c67ddddee98564a153c9b7b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved0';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '499';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 9..15 Reserved 0
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MECCCODE__Type_1a2dece93fddce6fe3b986cae29302e028';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ramid';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '500';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 16..20 The ID of RAM that has 2bit ECC error, software can clear these bits
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MECCCODE__Type_1a1405a793cf94059253bc6447436fcf66';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved1';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '501';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 21..23 Reserved 0
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MECCCODE__Type_1ae1440a1a88e3b3e63b7f8c1e27cd83af';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'sramid';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '502';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 24..28 The ID of RAM that has 1bit ECC error, software can clear these bits
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MECCCODE__Type_1a5f360471c0c32ea33589a76118b8beac';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved2';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '503';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 29..XLEN-1 Reserved 0
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MECCCODE__Type_1a69194b896273d10ef28d08cdbf4102b1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct CSR_MECCCODE_Type::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'b';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '504';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Structure used for bit  access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MECCCODE__Type_1a3de5a1b1edf2ca4f244fb8f949fe3467';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '505';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Type      used for csr data access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
  cp-fileline  = '496';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Union type to access MECC_CODE CSR register.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* union */
union = {
  cp-id     = 'unionCSR__MECCLOCK__Type';
  cp-name   = 'CSR_MECCLOCK_Type';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MECCLOCK__Type_1a26ac4f59d6c768f1bd04bd0cb64e74fa';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ecc_lock';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '485';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 0 RW permission, ECC Lock configure
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MECCLOCK__Type_1a88140d21b5b24147761737d4b9cd5d85';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved0';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '486';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 1..XLEN-1 Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MECCLOCK__Type_1a369df1b5eb2aba3ec7d826d33b639388';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct CSR_MECCLOCK_Type::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'b';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '487';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Structure used for bit  access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MECCLOCK__Type_1adb7a90a3e474201d9461a572240eddaf';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '488';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Type      used for csr data access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
  cp-fileline  = '483';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Union type to access MECC_LOCK CSR register.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* union */
union = {
  cp-id     = 'unionCSR__MFIOCFGINFO__Type';
  cp-name   = 'CSR_MFIOCFGINFO_Type';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MFIOCFGINFO__Type_1a19c4f0a9343bbb22d854c96b16f8a83f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved0';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '470';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 0 Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MFIOCFGINFO__Type_1a1f0e485583d3413b162d757e37e7cbef';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'fio_size';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '471';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 1..5 FIO size, need to be 2^n size
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MFIOCFGINFO__Type_1aa96095fc84dafdb6399212fccb2aa26e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved1';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '472';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 6..9 Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MFIOCFGINFO__Type_1abd5dbf580d3e19843d2cbef403a4cb58';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'fio_bpa';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '473';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 10..XLEN-1 FIO base address
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MFIOCFGINFO__Type_1a3e1f394cfd8f635d6bd090ad48b9312a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct CSR_MFIOCFGINFO_Type::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'b';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '474';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Structure used for bit  access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MFIOCFGINFO__Type_1a5c2b9f4806e17df73af867d7e9c41d52';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '475';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Type      used for csr data access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
  cp-fileline  = '468';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Union type to access MFIOCFG_INFO CSR register.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* union */
union = {
  cp-id     = 'unionCSR__MICFGINFO__Type';
  cp-name   = 'CSR_MICFGINFO_Type';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MICFGINFO__Type_1a2071a4d9337c8db3b55419e531c0f095';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'set';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '395';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 0..3 I-Cache sets per way
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = 'core__feature__cache_8h_1ga69a3a0ce8c5e4494161991074387162e';
        sec-mem-ref-line = '257';
        sec-mem-ref-name = 'GetICacheInfo';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MICFGINFO__Type_1aff94588787995de0fdbf41a2cee027a7';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'way';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '396';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 4..6 I-Cache way
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = 'core__feature__cache_8h_1ga69a3a0ce8c5e4494161991074387162e';
        sec-mem-ref-line = '257';
        sec-mem-ref-name = 'GetICacheInfo';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MICFGINFO__Type_1aa4534ca8d572c6ad46ab5d36fcf4ef8b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'lsize';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '397';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 7..9 I-Cache line size
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = 'core__feature__cache_8h_1ga69a3a0ce8c5e4494161991074387162e';
        sec-mem-ref-line = '257';
        sec-mem-ref-name = 'GetICacheInfo';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MICFGINFO__Type_1a435c3557d2f4ba2390776df2875671ca';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ecc';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '398';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 10   I-Cache ECC support
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MICFGINFO__Type_1a75f76b3f8eea0ed1ff1e358f639a8db5';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved0';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '399';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 11..15 Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MICFGINFO__Type_1a124f5dd34305eceb2fe7444328b714c2';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'lm_size';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '400';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 16..20 ILM size, need to be 2^n size
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MICFGINFO__Type_1aeaab24911ca8c0c5dd80d2daffe88c8c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'lm_xonly';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '401';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 21 ILM Execute only permission or Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MICFGINFO__Type_1a420f1ef39fa0ce7165a4c22ab0a9696e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'lm_ecc';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '402';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 22 ILM ECC support
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MICFGINFO__Type_1a95f943b3ddce6a9e910d75da888d9d23';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved1';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '403';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 23..XLEN-1 Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MICFGINFO__Type_1a82948b5361e0e9583dea5d3ecd073bd8';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct CSR_MICFGINFO_Type::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'b';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '404';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Structure used for bit  access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = 'core__feature__cache_8h_1ga69a3a0ce8c5e4494161991074387162e';
        sec-mem-ref-line = '257';
        sec-mem-ref-name = 'GetICacheInfo';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MICFGINFO__Type_1a019a0f2a482a3f2c7cf882a4295ac322';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '405';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Type      used for csr data access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = 'core__feature__cache_8h_1ga69a3a0ce8c5e4494161991074387162e';
        sec-mem-ref-line = '257';
        sec-mem-ref-name = 'GetICacheInfo';
    };
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
  cp-fileline  = '393';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Union type to access MICFG_INFO CSR register.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* union */
union = {
  cp-id     = 'unionCSR__MILMCTL__Type';
  cp-name   = 'CSR_MILMCTL_Type';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MILMCTL__Type_1ac892992420e34c4990a7e85ed034260e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ilm_en';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '321';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 0 ILM enable
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MILMCTL__Type_1a79054a48492cc7cac50cb8f125a11c3a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ilm_ecc_en';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '322';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 1 ILM ECC eanble
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MILMCTL__Type_1a7507f7d08202fed762566b3cbd6984b1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ilm_ecc_excp_en';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '323';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 2 ILM ECC exception enable
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MILMCTL__Type_1a77cb8ee0a260c92560375825903c791b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ilm_rwecc';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '324';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 3 Control mecc_code write to ilm, simulate error injection
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MILMCTL__Type_1a3259e2512c1cc6fba9c67e8b15026830';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ilm_ecc_chk_en';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '325';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 4 ILM check ECC codes enable
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MILMCTL__Type_1ac8524a1bad0aa92241fa5160aa110b32';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ilm_va_en';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '326';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 5 Using virtual address to judge ILM access
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MILMCTL__Type_1a31c9512c856b4285967a7a1d0bdceab2';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved0';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '327';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 6..9 Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MILMCTL__Type_1af90ed19eceb2b20a7eb2974e59d0a5ae';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ilm_bpa';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '328';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 10..XLEN-1 ILM base address
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MILMCTL__Type_1a14c4b0e5035de1692f27f12af66b43ff';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct CSR_MILMCTL_Type::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'b';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '329';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Structure used for bit  access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MILMCTL__Type_1a0568601f07d8122b6791cb832c3c43ec';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '330';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Type      used for csr data access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
  cp-fileline  = '319';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Union type to access MILM_CTL CSR register.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* union */
union = {
  cp-id     = 'unionCSR__MIRGB__INFO__Type';
  cp-name   = 'CSR_MIRGB_INFO_Type';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MIRGB__INFO__Type_1aab832fa3bdb9a53da8ce5fe94ae90820';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved0';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '555';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 0 Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MIRGB__INFO__Type_1aaffffbfdf633c4975ebb9155ea5fe91d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'iregion_size';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '556';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 1..5 Indicates the size of IREGION and it should be power of 2
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MIRGB__INFO__Type_1af3b68187f6706f2a8755fc97a56c97e2';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved1';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '557';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 6..9 Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MIRGB__INFO__Type_1aa70bb3ee4371c0d35b2e690eca18158c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'iregion_base';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '558';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 10..PA_SIZE IREGION Base Address
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MIRGB__INFO__Type_1a1e2cc10bb97763bcc016382cbf58e2b3';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct CSR_MIRGB_INFO_Type::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'b';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '559';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Structure used for bit  access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MIRGB__INFO__Type_1a924ae7b00ab48fadebc42d2a45302edf';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '560';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Type      used for csr data access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
  cp-fileline  = '553';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Union type to access MIRGB_INFO CSR register.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* union */
union = {
  cp-id     = 'unionCSR__MISA__Type';
  cp-name   = 'CSR_MISA_Type';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MISA__Type_1a7d03318d070023b589d0493a6fc0c77c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'a';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '70';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 0  Atomic extension
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MISA__Type_1aa79af012ee1e6de37eae3bb515ee01ea';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'b';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '71';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 1  B extension
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MISA__Type_1affcb644a18834c71c22c7a3d0717d3f3';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'c';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '72';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 2  Compressed extension
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MISA__Type_1a25171c57dba66f92acc7166020e095cd';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '73';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 3  Double-precision floating-point extension
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Type      used for csr data access.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MISA__Type_1a745359a52dfafcf113c23bcd8c29ec8c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'e';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '74';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 4  RV32E/64E base ISA
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MISA__Type_1a4023363711be3ef80da807a0728930ea';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'f';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '75';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 5  Single-precision floating-point extension
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MISA__Type_1a5ffa39768567ee68ba9ddca749749094';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'g';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '76';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 6  Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MISA__Type_1add06ba0ef4b0e8b34c94b7d097c5b8b6';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'h';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '77';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 7  Hypervisor extension
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MISA__Type_1a388f9e4fdb069e9c0f3853ef8f9f3a04';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'i';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '78';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 8  RV32I/64I/128I base ISA
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MISA__Type_1a4256c5f7bf0017aa46de265af7ad2e73';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'j';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '79';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 9  Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MISA__Type_1ab808ab27c96f3f372e447575a62813c4';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'k';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '80';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 10 Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MISA__Type_1ad3eee1620420ed061491fd48c9483a33';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'l';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '81';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 11 Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MISA__Type_1ae9efe222b556250575bbdb7754ee4df0';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'm';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '82';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 12 Integer Multiply/Divide extension
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MISA__Type_1a08ef7ab18dc90635a062fc702a5b9839';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'n';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '83';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 13 Tentatively reserved for User-Level Interrupts extension
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MISA__Type_1aa97a5dc61257bcfdae1604c6ef6ba6c9';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'o';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '84';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 14 Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MISA__Type_1a1aeda1a8f5b0920ce7fb005fd45851b1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'p';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '85';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 15 Tentatively reserved for Packed-SIMD extension  <br>
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MISA__Type_1a293b7c69518f3fd68f566485d50e83e2';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'q';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '86';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 16 Quad-precision floating-point extension  <br>
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MISA__Type_1a4af1e46cb98249e83a129bdfa5a6ef4f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'r';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '87';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 17 Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MISA__Type_1a79e1df39597bf8184932682bba4e59b1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 's';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '88';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 18 Supervisor mode implemented  <br>
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MISA__Type_1a8bf50ec00d685519fd3238a4b2222b50';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 't';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '89';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 19 Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MISA__Type_1a746597b02ac481d6f16e9f10c311d85b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'u';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '90';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 20 User mode implemented  <br>
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MISA__Type_1a24a555a6f05561ed548f05b37ad48df9';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'v';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '91';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 21 Vector extension  <br>
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MISA__Type_1a39416f3c10c3163479f2d9a7ba5f6ff7';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'w';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '92';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 22 Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MISA__Type_1ad127ca5673c61354060d7eb77f31ecb4';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'x';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '93';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 23 Non-standard extensions present  <br>
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MISA__Type_1a18e01414bd4c6c97e469f7c35ac47caa';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'y';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '94';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 24 Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MISA__Type_1a6444017e8a7030df113538409511c55a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'z';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '95';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 25 Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MISA__Type_1a71e4706fbac8a8165aeb561b19871e1c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved0';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '96';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 26..XLEN-3 Reserved  <br>
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MISA__Type_1a6f3250a719eb460653f2f4f6f2bc76f8';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'mxl';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '97';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: XLEN-2..XLEN-1 Machine XLEN  <br>
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MISA__Type_1a32ca93354e943e47f23e6b82ea611721';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct CSR_MISA_Type::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'b';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '98';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Structure used for bit  access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
  cp-fileline  = '68';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Union type to access MISA CSR register.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* union */
union = {
  cp-id     = 'unionCSR__MMISCCTRL__Type';
  cp-name   = 'CSR_MMISCCTRL_Type';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MMISCCTRL__Type_1aa6e5c778c686f03d8b7f050bb6558f73';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved0';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '242';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 0     Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MMISCCTRL__Type_1aa11c937e6f7ac008171e6c96ab899957';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'zclsd_en';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '243';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 1     Control the Zclsd will uses the Zcf extension encoding or not
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MMISCCTRL__Type_1a2ec8d9def938eec6f784c348308dd153';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved1';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '244';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 2     Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MMISCCTRL__Type_1ab4bb604620ef0eb2b13778e892f3b44c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'bpu';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '245';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 3     dynamic prediction enable flag
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MMISCCTRL__Type_1a7cf36aebc77aad6f2e9daaa99048d6ce';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved2';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '246';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 4..5  Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MMISCCTRL__Type_1abfbd87cd64cdc521f49d43ab17c7dd7a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'misalign';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '247';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 6     misaligned access support flag
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MMISCCTRL__Type_1ad20c7afe28fcc19d9a7b2e937d1e313f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'zcmt_zcmp';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '248';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 7     Zc Ext uses the cfdsp of D Ext’s encoding or not
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MMISCCTRL__Type_1a43f6c4fad9bdde27464c503f11e73ea6';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'core_buserr';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '249';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 8     core bus error exception or interrupt
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MMISCCTRL__Type_1ab819b8f5dc4a6ad8256834fdae9c952f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'nmi_cause';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '250';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 9     mnvec control and nmi mcase exccode
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MMISCCTRL__Type_1aa0b5b3bc13cd6ca0e606d001aecbcc9f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'imreturn_en';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '251';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 10    IMRETURN mode of trace
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MMISCCTRL__Type_1a331e3691aba2ecb1ceb777982184e306';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'sijump_en';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '252';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 11    SIJUMP mode of trace
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MMISCCTRL__Type_1ad17bb293d037b02b9f1e088b1cf4fa9d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ldspec_en';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '253';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 12    enable load speculative goes to mem interface
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MMISCCTRL__Type_1a22bacba1282cd1dba8e3a1b8f3ee8458';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved3';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '254';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 13    Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MMISCCTRL__Type_1ab346e40a2a8e6302a759ab74d39d2b59';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'dbg_sec';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '255';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 14    debug access mode, removed in latest releases
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MMISCCTRL__Type_1a768c3696bb333e6e9725314316962271';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved4';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '256';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 15..16 Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MMISCCTRL__Type_1a7fde68d99dff5c40a5f6ca4796b89745';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'csr_excl_enable';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '257';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 17    Exclusive instruction(lr,sc) on Non-cacheable/Device memory can send exclusive flag in memory bus
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MMISCCTRL__Type_1a4a0c322b0f2bf0317082570bf8f0be17';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved5';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '258';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 18..XLEN-1 Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MMISCCTRL__Type_1a98e8c61a4f2d94e3b2ca1baa6ac9e547';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct CSR_MMISCCTRL_Type::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'b';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '259';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Structure used for bit  access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MMISCCTRL__Type_1a17abdfbefca3554c1cf1f8c86a5c3925';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '260';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Type      used for csr data access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
  cp-fileline  = '240';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Union type to access MMISC_CTRL CSR register.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* union */
union = {
  cp-id     = 'unionCSR__MPPICFGINFO__Type';
  cp-name   = 'CSR_MPPICFGINFO_Type';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MPPICFGINFO__Type_1a0eb2a7df3561ad735893f146d2a8486c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved0';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '454';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 0 Reserved 1
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MPPICFGINFO__Type_1a3651fb2680625f58d1f89dedcd4e4893';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ppi_size';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '455';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 1..5 PPI size, need to be 2^n size
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MPPICFGINFO__Type_1a3399bfc423e7ae9922c4230aa30f1e5b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved1';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '456';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 6..8 Reserved 0
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MPPICFGINFO__Type_1a8f2e49d91fe80fce4de7e1a7ab7d3582';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ppi_en';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '457';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 9 PPI Enable.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Software can write this bit to control PPI 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MPPICFGINFO__Type_1a0231d5290407e502a3beeae1446ada69';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ppi_bpa';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '458';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 10..XLEN-1 PPI base address
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MPPICFGINFO__Type_1a4d539b75d6ad82b3a2c30ad5c4b2043a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct CSR_MPPICFGINFO_Type::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'b';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '459';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Structure used for bit  access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MPPICFGINFO__Type_1a3acaa252a892479c3374d93f3cbe136b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '460';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Type      used for csr data access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
  cp-fileline  = '452';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Union type to access MPPICFG_INFO CSR register.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* union */
union = {
  cp-id     = 'unionCSR__MSAVESTATUS__Type';
  cp-name   = 'CSR_MSAVESTATUS_Type';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSAVESTATUS__Type_1aea49d991ccf84140f2871c3d2e9577a1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'mpie1';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '303';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 0     interrupt enable flag of fisrt level NMI/exception nestting
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSAVESTATUS__Type_1a5d06b2cf1ffb09a323db34953a1a1117';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'mpp1';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '304';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 1..2  privilede mode of fisrt level NMI/exception nestting
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSAVESTATUS__Type_1abe13779fb93f296a38bc80cc75d7ffbc';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved0';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '305';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 3..5  Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSAVESTATUS__Type_1a71bcf16bcab565b98e2cd135054daceb';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ptyp1';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '306';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 6..7  NMI/exception type of before first nestting
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSAVESTATUS__Type_1a3b59f01dc6696bb3861f392e12cd83a1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'mpie2';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '307';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 8     interrupt enable flag of second level NMI/exception nestting
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSAVESTATUS__Type_1a507ac66274667f23d4c1c8fb175456b0';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'mpp2';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '308';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 9..10 privilede mode of second level NMI/exception nestting
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSAVESTATUS__Type_1a60c203ffddd944222ed36856c707b51c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved1';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '309';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 11..13     Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSAVESTATUS__Type_1a98cbf02beb8dc8fc1eee27ada6ebf5a4';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ptyp2';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '310';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 14..15     NMI/exception type of before second nestting
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSAVESTATUS__Type_1a8e050bc641728ef17037ab95a2b64293';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved2';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '311';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 16..XLEN-1 Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSAVESTATUS__Type_1a9d0a36736657fe9424a52ea064c8a5ef';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct CSR_MSAVESTATUS_Type::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'b';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '312';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Structure used for bit  access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSAVESTATUS__Type_1a3830cba893f489931a838102f870bb54';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'w';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '313';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Type      used for csr data access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
  cp-fileline  = '301';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Union type to access MSAVESTATUS CSR register.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* union */
union = {
  cp-id     = 'unionCSR__MSTACK__CTL__Type';
  cp-name   = 'CSR_MSTACK_CTL_Type';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSTACK__CTL__Type_1a5517c4798789a646ba40dc47e577a98e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ovf_track_en';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '568';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 0 Stack overflow check or track enable
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSTACK__CTL__Type_1ae6b9d4e6153580d40f5fe54b0e41b254';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'udf_en';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '569';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 1 Stack underflow check enable
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSTACK__CTL__Type_1a7863f390ce07b3e8a8e4ad6cade59e41';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'mode';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '570';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 2 Mode of stack checking
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSTACK__CTL__Type_1a0733b25c4514160f60aada0715a78ade';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved0';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '571';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 3..XLEN-1 Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSTACK__CTL__Type_1ad1c125546857f563769be64c88efed27';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct CSR_MSTACK_CTL_Type::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'b';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '572';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Structure used for bit  access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSTACK__CTL__Type_1abc5f002ae1d6aceac3823f40225f1cfc';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '573';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Type      used for csr data access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
  cp-fileline  = '566';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Union type to access MSTACK_CTL CSR register.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* union */
union = {
  cp-id     = 'unionCSR__MSTATUS__Type';
  cp-name   = 'CSR_MSTATUS_Type';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSTATUS__Type_1ae8ca70d836ff92b95d206e681d081329';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved0';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '107';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 0  Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSTATUS__Type_1a39782c19cb5e81a9bb2ac6231b11edcd';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'sie';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '108';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 1  supervisor interrupt enable flag
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSTATUS__Type_1a3f2fb6067e213b937b77c8c72b5a2793';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved1';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '109';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 2  Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSTATUS__Type_1a8fe9b86b3d0ddb66537db55e8fe1b96b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'mie';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '110';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 3  machine mode interrupt enable flag
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSTATUS__Type_1a6ec97869161f24ac6ccdf52d0d9bf2de';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved2';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '111';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 4  Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSTATUS__Type_1a2da21bb426da143dfba005be019592b3';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'spie';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '112';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 5  supervisor mode interrupt enable flag
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSTATUS__Type_1a812b2d696021536a241c4edd7d2c59e3';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ube';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '113';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 6  U-mode non-instruction-fetch memory accesse big-endian enable flag
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSTATUS__Type_1a1053ed8fd8525df9fbd32c4890bcfe42';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'mpie';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '114';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 7  machine mode previous interrupt enable flag
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSTATUS__Type_1a810012b49fdefb3d342a51a02d5b0a2a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'spp';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '115';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 8  supervisor previous privilede mode
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSTATUS__Type_1aa0226cb85131866229d29d268186d0bc';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'vs';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '116';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 9..10  vector status flag
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSTATUS__Type_1a54f1b11a82d0c710c8568703e006bbe8';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'mpp';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '117';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 11..12 machine previous privilede mode  <br>
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSTATUS__Type_1a0b85d89e89118380007d94c4c2adb0f2';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'fs';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '118';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 13..14 FS status flag
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSTATUS__Type_1ab2648a5652adc6cd1dd02e3e47d4cd87';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'xs';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '119';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 15..16 XS status flag
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSTATUS__Type_1a5319b79ff9ccab347d70716fc7ad5bf5';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'mprv';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '120';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 17 Modify PRiVilege
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSTATUS__Type_1aa7bf6ccb81c68ffcda46390640774413';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'sum';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '121';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 18 Supervisor Mode load and store protection
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSTATUS__Type_1a4c828879e02d7be229d648b40375120e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'mxr';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '122';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 19 Make eXecutable Readable
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSTATUS__Type_1a075c6caa79d9fcd57fa15dafaef41b7d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'tvm';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '123';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 20 Trap Virtual Memory
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSTATUS__Type_1a60b6fee42efcd5978cb1d00901a45643';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'tw';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '124';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 21 Timeout Wait
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSTATUS__Type_1ae77bc388c3d8fa3dacac1855abc43b00';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'tsr';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '125';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 22 Trap SRET
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSTATUS__Type_1af524f82bcb6ed7720a61f6484f187adc';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'spelp';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '126';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 23 Supervisor mode Previous Expected Landing Pad (ELP) State
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSTATUS__Type_1aea6302d5cf4907afd60dd1af5568e0d9';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'sdt';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '127';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 24 S-mode-disable-trap
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSTATUS__Type_1a3c5132f10bbe90eef8a8256edd1e2907';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved3';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '142';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 25..30 Reserved  <br>
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSTATUS__Type_1a07006b8b4c0dc88ca1e1a2145a9bce36';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'sd';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '143';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 31 Dirty status for XS or FS
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSTATUS__Type_1a338328337a8d991b1e5feb213083e732';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct CSR_MSTATUS_Type::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'b';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '145';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Structure used for bit  access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSTATUS__Type_1ad6ccdd78fc15b0b10a9e82e3c25dd98a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '146';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Type      used for csr data access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
  cp-fileline  = '105';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Union type to access MSTATUS CSR register.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* union */
union = {
  cp-id     = 'unionCSR__MSTATUSH__Type';
  cp-name   = 'CSR_MSTATUSH_Type';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSTATUSH__Type_1a302c0006275c52d7ddc5c5e6d83d1dd3';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved0';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '155';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 0..3  Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSTATUSH__Type_1a66f3e89f76b11316f020dceccfcae03c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'sbe';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '156';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 4 S-mode non-instruction-fetch memory accesse big-endian enable flag
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSTATUSH__Type_1a66f3344e822d037ec1c8d5cfd9d2d44f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'mbe';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '157';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 5 M-mode non-instruction-fetch memory accesse big-endian enable flag
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSTATUSH__Type_1aa233a31211fe4b27d8e569ff0578c6a1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'gva';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '158';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 6 Guest Virtual Address
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSTATUSH__Type_1aa81b1cb7a083e4903c727efacedaad79';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'mpv';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '159';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 7 Machine Previous Virtualization Mode
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSTATUSH__Type_1ad4a6cf8414c43baf20343eb3b512ac70';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved1';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '160';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 8 Reserved  <br>
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSTATUSH__Type_1a0a8f2670b84655f5725588a8ddeac07d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'mpelp';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '161';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 9 Machine mode Previous Expected Landing Pad (ELP) State
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSTATUSH__Type_1ab624b0ae6e60783d0e29394fbe37e650';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'mdt';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '162';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 10 M-mode-disable-trap
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSTATUSH__Type_1ab1b3658830e94b37d4fac6aaa1d328a0';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved5';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '163';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 11..31 Reserved  <br>
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSTATUSH__Type_1a1363d711f4703efc10ac35a65bc9bd08';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct CSR_MSTATUSH_Type::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'b';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '164';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Structure used for bit  access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSTATUSH__Type_1aed9b3f3686362c8ea133d7c509647b29';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '165';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Type      used for csr data access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
  cp-fileline  = '153';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Union type to access MSTATUSH CSR register.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* union */
union = {
  cp-id     = 'unionCSR__MSUBM__Type';
  cp-name   = 'CSR_MSUBM_Type';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSUBM__Type_1a4df7db7411e57be8ab1826f81ca37514';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved0';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '218';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 0..5   Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSUBM__Type_1a1bea0e7308519e40a3134f8d92bca435';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'typ';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '219';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 6..7   current trap type
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSUBM__Type_1a77220967d0a04f29fb37b9730afc8059';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ptyp';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '220';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 8..9   previous trap type
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSUBM__Type_1a1d0316c0cbd4c58115811939f05334d0';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved1';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '221';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 10..XLEN-1 Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSUBM__Type_1ad0e29681d9659a328950a1d20f469bd2';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct CSR_MSUBM_Type::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'b';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '222';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Structure used for bit  access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSUBM__Type_1ab188dee35d91c5cd832a5295b4e21e98';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '223';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Type      used for csr data access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
  cp-fileline  = '216';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Union type to access MSUBM CSR register.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* union */
union = {
  cp-id     = 'unionCSR__MTLB__CTL__Type';
  cp-name   = 'CSR_MTLB_CTL_Type';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MTLB__CTL__Type_1a4031181405bb997817a18291c31dcc55';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'tlb_ecc_en';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '581';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 0 MTLB ECC eanble
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MTLB__CTL__Type_1aa13bfe503a522b881d5cd05fd6d0ddc0';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'tlb_ecc_excp_en';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '582';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 1 MTLB double bit ECC exception enable control
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MTLB__CTL__Type_1abb380c7b66bbe31ce364eb72a4d1cf97';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'tlb_tram_ecc_inj_en';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '583';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 2 Controls to inject the ECC Code in CSR mecc_code to MTLB tag rams
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MTLB__CTL__Type_1a69d675ef0572afb99f317ddef2a412ec';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'tlb_dram_ecc_inj_en';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '584';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 3 Controls to inject the ECC Code in CSR mecc_code to MTLB data rams
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MTLB__CTL__Type_1abe58e9ada24e98179788bb9024af6e08';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved0';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '585';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 4..5 Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MTLB__CTL__Type_1a10130a0d6191762b29072d6aee0554de';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'tlb_ecc_chk_en';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '586';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 6 Controls to check the ECC when core access to MTLB
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MTLB__CTL__Type_1ad98c71684ae3ea89bbcc5f11eebe2d33';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'napot_en';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '587';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 7 NAPOT page enable
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MTLB__CTL__Type_1ae8aa1dc36cffe2d196327bd44303ce11';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved1';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '588';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 8..XLEN-1 Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MTLB__CTL__Type_1adca91ff704b46d47500b303043eabdfa';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct CSR_MTLB_CTL_Type::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'b';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '589';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Structure used for bit  access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MTLB__CTL__Type_1a12f9dd6672786418cd43ad7f9252f227';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '590';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Type      used for csr data access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
  cp-fileline  = '579';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Union type to access MTLB_CTL CSR register.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* union */
union = {
  cp-id     = 'unionCSR__MTLBCFGINFO__Type';
  cp-name   = 'CSR_MTLBCFGINFO_Type';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MTLBCFGINFO__Type_1a5048615bc37a371bfe34cde473b09072';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'set';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '434';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 0..3  Main TLB entry per way
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MTLBCFGINFO__Type_1acb0913f34ada32153b5835e09fab71e1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'way';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '435';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 4..6  Main TLB ways
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MTLBCFGINFO__Type_1a32212e64fa6a124c1ab40b3e800a975f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'lsize';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '436';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 7..9  Main TLB line size or Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MTLBCFGINFO__Type_1ae29298513d1a08aec4f954361ac21832';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ecc';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '437';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 10  Main TLB supports ECC or not
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MTLBCFGINFO__Type_1a9839f02c59a8890411c496adf0c2c2a3';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'napot';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '438';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 11  TLB supports Svnapot or not
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MTLBCFGINFO__Type_1a3a0e1c98a2d9bcb03c240883b0426244';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved1';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '439';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 12..15  Reserved 0
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MTLBCFGINFO__Type_1a0a56325498cb8f8e666cd4fc0d3ddad6';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'i_size';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '440';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 16..18  ITLB size
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MTLBCFGINFO__Type_1a656b7500b989ec2b9556a5dda0819818';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd_size';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '441';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 19..21  DTLB size
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MTLBCFGINFO__Type_1a25ebe7fa3b1bf20b57fadf9265419757';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved2';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '442';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 22..XLEN-1  Reserved 0
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MTLBCFGINFO__Type_1a32529ca195abfd4faabd637d5d49a0ac';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct CSR_MTLBCFGINFO_Type::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'b';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '443';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Structure used for bit  access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MTLBCFGINFO__Type_1a1f6a7eca0ad4b275beaac6603851c9c2';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '444';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Type      used for csr data access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
  cp-fileline  = '432';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Union type to access MTLBCFG_INFO CSR register.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* union */
union = {
  cp-id     = 'unionCSR__MTVEC__Type';
  cp-name   = 'CSR_MTVEC_Type';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MTVEC__Type_1aaedacb992928db5f3486342eadf944e8';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'mode';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '174';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 0..5   interrupt mode control
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MTVEC__Type_1a0d0fea678e6ad934c29011cfd49e9271';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'addr';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '175';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit: 6..XLEN-1  mtvec address
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MTVEC__Type_1ab0209e485e55a504eda9f88f5eab2ee9';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct CSR_MTVEC_Type::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'b';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '176';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Structure used for bit  access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MTVEC__Type_1a78064f13f73bd2c7367fd6dbc8cf356e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '177';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Type      used for csr data access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
  cp-fileline  = '172';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Union type to access MTVEC CSR register.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'structpma__config';
  cp-name   = 'pma_config';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structpma__config_1a4088b4572e7b416bef628c75fd392f1e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'region_base';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_pma.h';
      sec-mem-desc-line = '64';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Base physical address, which needs to be 4K byte aligned.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = 'core__feature__pma_8h_1gab5a3a608cd726a10cab2afede8692db8';
        sec-mem-ref-line = '139';
        sec-mem-ref-name = 'PMA_GetRegion';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = 'core__feature__pma_8h_1ga49870460aa6f6e52002b87cc40623c3a';
        sec-mem-ref-line = '219';
        sec-mem-ref-name = 'PMA_GetRegion_S';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = 'core__feature__pma_8h_1ga9abb7b023f70b051c8fbe2ac78b0f7fa';
        sec-mem-ref-line = '99';
        sec-mem-ref-name = 'PMA_SetRegion';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = 'core__feature__pma_8h_1gaeec2d0e18906c33d8fef4dc5a609bb96';
        sec-mem-ref-line = '181';
        sec-mem-ref-name = 'PMA_SetRegion_S';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structpma__config_1ad25354f7c4fbcdd1f144726b732f23fd';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'region_size';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_pma.h';
      sec-mem-desc-line = '68';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Region size, which needs to be 4K byte aligned; the \ref region_base should be integer multiples of \ref region_size.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = 'core__feature__pma_8h_1gab5a3a608cd726a10cab2afede8692db8';
        sec-mem-ref-line = '139';
        sec-mem-ref-name = 'PMA_GetRegion';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = 'core__feature__pma_8h_1ga49870460aa6f6e52002b87cc40623c3a';
        sec-mem-ref-line = '219';
        sec-mem-ref-name = 'PMA_GetRegion_S';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = 'core__feature__pma_8h_1ga9abb7b023f70b051c8fbe2ac78b0f7fa';
        sec-mem-ref-line = '99';
        sec-mem-ref-name = 'PMA_SetRegion';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = 'core__feature__pma_8h_1gaeec2d0e18906c33d8fef4dc5a609bb96';
        sec-mem-ref-line = '181';
        sec-mem-ref-name = 'PMA_SetRegion_S';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structpma__config_1a4b6762ec3aa81bd46fe46b02a10b0d6c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'region_type';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_pma.h';
      sec-mem-desc-line = '75';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Type could be \ref PMA_REGION_TYPE_SECSHARE, \ref PMA_REGION_TYPE_NC, \ref PMA_REGION_TYPE_DEV, \ref PMA_REGION_TYPE_CA
\ref PMA_REGION_TYPE_SECSHARE could be combined with one of \ref PMA_REGION_TYPE_NC \ref PMA_REGION_TYPE_DEV \ref PMA_REGION_TYPE_CA
 such as \ref PMA_REGION_TYPE_SECSHARE | \ref PMA_REGION_TYPE_NC
Reserved for sattri(n)_base.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = 'core__feature__pma_8h_1gab5a3a608cd726a10cab2afede8692db8';
        sec-mem-ref-line = '139';
        sec-mem-ref-name = 'PMA_GetRegion';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = 'core__feature__pma_8h_1ga9abb7b023f70b051c8fbe2ac78b0f7fa';
        sec-mem-ref-line = '99';
        sec-mem-ref-name = 'PMA_SetRegion';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structpma__config_1a563ebc36c226f9639695464dc70cf7c9';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'region_enable';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_pma.h';
      sec-mem-desc-line = '79';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Enable or disable the region, could be \ref PMA_REGION_ENA, \ref PMA_REGION_DIS.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = 'core__feature__pma_8h_1gab5a3a608cd726a10cab2afede8692db8';
        sec-mem-ref-line = '139';
        sec-mem-ref-name = 'PMA_GetRegion';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = 'core__feature__pma_8h_1ga49870460aa6f6e52002b87cc40623c3a';
        sec-mem-ref-line = '219';
        sec-mem-ref-name = 'PMA_GetRegion_S';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = 'core__feature__pma_8h_1ga9abb7b023f70b051c8fbe2ac78b0f7fa';
        sec-mem-ref-line = '99';
        sec-mem-ref-name = 'PMA_SetRegion';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = 'core__feature__pma_8h_1gaeec2d0e18906c33d8fef4dc5a609bb96';
        sec-mem-ref-line = '181';
        sec-mem-ref-name = 'PMA_SetRegion_S';
    };
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_pma.h';
  cp-fileline  = '60';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
struct = {
  cp-id     = 'structpmp__config';
  cp-name   = 'pmp_config';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structpmp__config_1ab8409f7cb22187657b0ef0fe24059be1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'protection';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_pmp.h';
      sec-mem-desc-line = '63';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
set locking bit, addressing mode, read, write, and instruction execution permissions,
see \ref PMP_L, \ref PMP_R, \ref PMP_W, \ref PMP_X, .etc in <riscv_encoding.h>
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = 'core__feature__pmp_8h_1gabf18aa5a4518fc791dfaad084cab69e1';
        sec-mem-ref-line = '330';
        sec-mem-ref-name = '__get_PMPENTRYx';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = 'core__feature__pmp_8h_1gae7ea6ac8551665dec5e8df52a3a2b51f';
        sec-mem-ref-line = '269';
        sec-mem-ref-name = '__set_PMPENTRYx';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structpmp__config_1a45cc066917b2cada129373b05dec9707';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'order';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_pmp.h';
      sec-mem-desc-line = '69';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Size of memory region as power of 2, it has to be minimum 2 and maxium \ref __RISCV_XLEN according to the
hard-wired granularity 2^N bytes, if N = 12, then order has to be at least 12; if not, the order read out
is N though you configure less than N.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = 'core__feature__pmp_8h_1gabf18aa5a4518fc791dfaad084cab69e1';
        sec-mem-ref-line = '330';
        sec-mem-ref-name = '__get_PMPENTRYx';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = 'core__feature__pmp_8h_1gae7ea6ac8551665dec5e8df52a3a2b51f';
        sec-mem-ref-line = '269';
        sec-mem-ref-name = '__set_PMPENTRYx';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structpmp__config_1a5bf81f40c43ab0f1010561c60ae0458c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'base_addr';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_pmp.h';
      sec-mem-desc-line = '74';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Base address of memory region
It must be 2^order aligned address.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = 'core__feature__pmp_8h_1gabf18aa5a4518fc791dfaad084cab69e1';
        sec-mem-ref-line = '330';
        sec-mem-ref-name = '__get_PMPENTRYx';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = 'core__feature__pmp_8h_1gae7ea6ac8551665dec5e8df52a3a2b51f';
        sec-mem-ref-line = '269';
        sec-mem-ref-name = '__set_PMPENTRYx';
    };
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_pmp.h';
  cp-fileline  = '58';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
struct = {
  cp-id     = 'structspmp__config';
  cp-name   = 'spmp_config';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structspmp__config_1aae2dfe2799f910ed4bb08eb98aa46fa4';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'protection';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_spmp.h';
      sec-mem-desc-line = '69';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set permissions using macros \ref SMPU_S/\ref SMPU_R/\ref SMPU_W/\ref SMPU_X of SMPU;
\ref SPMP_L/\ref SPMP_U/\ref SPMP_R/\ref SPMP_W/\ref SPMP_X of sPMP,
see details in riscv spec of SMPU/sPMP.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = 'core__feature__spmp_8h_1ga34656997d11753ea521266fb6f34f0be';
        sec-mem-ref-line = '336';
        sec-mem-ref-name = '__get_sPMPENTRYx';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = 'core__feature__spmp_8h_1gac5d192a1d325f624cb65ca501fab6b3a';
        sec-mem-ref-line = '275';
        sec-mem-ref-name = '__set_sPMPENTRYx';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structspmp__config_1ac00650f4922ce3aba873d2f75137e3e3';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'order';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_spmp.h';
      sec-mem-desc-line = '75';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Size of memory region as power of 2, it has to be minimum 2 and maxium \ref __RISCV_XLEN according to the
hardwired granularity 2^N bytes, if N = 12, then order has to be at least 12; if not, the order read out
is N though you configure less than N.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = 'core__feature__spmp_8h_1ga34656997d11753ea521266fb6f34f0be';
        sec-mem-ref-line = '336';
        sec-mem-ref-name = '__get_sPMPENTRYx';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = 'core__feature__spmp_8h_1gac5d192a1d325f624cb65ca501fab6b3a';
        sec-mem-ref-line = '275';
        sec-mem-ref-name = '__set_sPMPENTRYx';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structspmp__config_1a38f0cac1ade030c9b1e4763a1610b07b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'base_addr';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_spmp.h';
      sec-mem-desc-line = '80';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Base address of memory region
It must be 2^order aligned address.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referencedby = {
        sec-mem-ref-id = 'core__feature__spmp_8h_1ga34656997d11753ea521266fb6f34f0be';
        sec-mem-ref-line = '336';
        sec-mem-ref-name = '__get_sPMPENTRYx';
    };
      sec-mem-referencedby = {
        sec-mem-ref-id = 'core__feature__spmp_8h_1gac5d192a1d325f624cb65ca501fab6b3a';
        sec-mem-ref-line = '275';
        sec-mem-ref-name = '__set_sPMPENTRYx';
    };
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_spmp.h';
  cp-fileline  = '63';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
struct = {
  cp-id     = 'structSysTimer__Type';
  cp-name   = 'SysTimer_Type';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structSysTimer__Type_1a37a77647021a3ac0325d9337aa063cc7';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
__IOM uint64_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'MTIMER';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      sec-mem-desc-line = '56';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Offset: 0x000 (R/W)  System Timer current value 64bits Register.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structSysTimer__Type_1a6dee6a8430c65e88e458d9fb90d4d8c7';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
__IOM uint64_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'MTIMERCMP';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      sec-mem-desc-line = '57';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Offset: 0x008 (R/W)  System Timer compare Value 64bits Register.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structSysTimer__Type_1a29aef47d4f3df0468d7233a5507686bc';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
__IOM uint32_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RESERVED0';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      sec-mem-desc-line = '58';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Offset: 0x010 - 0xFE8 Reserved.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structSysTimer__Type_1a72664ee09f4dc1e32b234337e2bc1bba';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
__IOM uint32_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'MTIME_SRW_CTRL';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      sec-mem-desc-line = '59';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Offset: 0xFEC (R/W)  Control S-mode can access this timer or not.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structSysTimer__Type_1a4bc27f5c3a0fefa7063ffbcf2b148f78';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
__IOM uint32_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'MSFTRST';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      sec-mem-desc-line = '60';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Offset: 0xFF0 (R/W)  System Timer Software Core Reset Register.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structSysTimer__Type_1a577c4cb78d58cdefea827702c24a25c0';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
__IOM uint32_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'SSIP';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      sec-mem-desc-line = '61';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Offset: 0xFF4 (R/W)  S-Mode System Timer SW interrupt Register.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structSysTimer__Type_1a2e64638a3327d7932455185033bab733';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
__IOM uint32_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'MTIMECTL';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      sec-mem-desc-line = '62';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Offset: 0xFF8 (R/W)  System Timer Control Register, previously MSTOP register.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structSysTimer__Type_1a5e43fade844d5c21f68c9bace205ef47';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
__IOM uint32_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'MSIP';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      sec-mem-desc-line = '63';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Offset: 0xFFC (R/W)  M-Mode System Timer SW interrupt Register.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
  cp-fileline  = '55';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Structure type to access the System Timer (SysTimer).
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
Structure definition to access the system timer(SysTimer).
\remarks
- MSFTRST register is introduced in Nuclei N Core version 1.3(\ref __NUCLEI_N_REV >= 0x0103)
- MSTOP register is renamed to MTIMECTL register in Nuclei N Core version 1.4(\ref __NUCLEI_N_REV >= 0x0104)
- CMPCLREN and CLKSRC bit in MTIMECTL register is introduced in Nuclei N Core version 1.4(\ref __NUCLEI_N_REV >= 0x0104)
_EnD_oF_dEf_TeXt_;
}; /* struct */
file = {
  file-id   = 'core__compatiable_8h';
  file-name = 'core_compatiable.h';
    define = {
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ARMCompatiable__Functions_1gaad233022e850a009fc6f7602be1182f6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__ISB';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RWMB()
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_compatiable.h';
      define-mem-desc-line = '42';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Instruction Synchronization Barrier, compatiable with ARM.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ARMCompatiable__Functions_1ga067d257a2b34565410acefb5afef2203';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__DSB';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RWMB()
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_compatiable.h';
      define-mem-desc-line = '45';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Data Synchronization Barrier, compatiable with ARM.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ARMCompatiable__Functions_1ga671101179b5943990785f36f8c1e2269';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__DMB';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RWMB()
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_compatiable.h';
      define-mem-desc-line = '48';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Data Memory Barrier, compatiable with ARM.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ARMCompatiable__Functions_1gacf0a70f77355b4e92cbcf33294a2b834';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__LDRBT';
      define-mem-param  = {
        define-mem-def-name = 'ptr';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__LB((ptr))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_compatiable.h';
      define-mem-desc-line = '51';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
LDRT Unprivileged (8 bit), ARM Compatiable.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ARMCompatiable__Functions_1gaa16005628f00d6fadfc10a51b47df494';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__LDRHT';
      define-mem-param  = {
        define-mem-def-name = 'ptr';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__LH((ptr))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_compatiable.h';
      define-mem-desc-line = '53';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
LDRT Unprivileged (16 bit), ARM Compatiable.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ARMCompatiable__Functions_1ga40e9941f772bbbe5b0d7aa39dbdbd256';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__LDRT';
      define-mem-param  = {
        define-mem-def-name = 'ptr';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__LW((ptr))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_compatiable.h';
      define-mem-desc-line = '55';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
LDRT Unprivileged (32 bit), ARM Compatiable.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ARMCompatiable__Functions_1ga264313e3689fafe2a3f580c338e96c19';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__STRBT';
      define-mem-param  = {
        define-mem-def-name = 'val';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'ptr';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__SB((ptr), (val))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_compatiable.h';
      define-mem-desc-line = '58';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
STRT Unprivileged (8 bit), ARM Compatiable.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ARMCompatiable__Functions_1ga2558a8bb23c4df33bdd206f36c46a911';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__STRHT';
      define-mem-param  = {
        define-mem-def-name = 'val';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'ptr';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__SH((ptr), (val))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_compatiable.h';
      define-mem-desc-line = '60';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
STRT Unprivileged (16 bit), ARM Compatiable.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ARMCompatiable__Functions_1ga643d41aafbfc031d31e1eac1d3b8f6fe';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__STRT';
      define-mem-param  = {
        define-mem-def-name = 'val';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'ptr';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__SW((ptr), (val))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_compatiable.h';
      define-mem-desc-line = '62';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
STRT Unprivileged (32 bit), ARM Compatiable.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ARMCompatiable__Functions_1ga2ca2b1eeec054ee2b02a5e8cb3c88cbf';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__SSAT';
      define-mem-param  = {
        define-mem-def-name = 'val';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'sat';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_SCLIP32((val), (sat-1))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_compatiable.h';
      define-mem-desc-line = '73';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Signed Saturate.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Saturates a signed value.
@param [in]  value  Value to be saturated
@param [in]    sat  Bit position to saturate to (1..32)
\return             Saturated value
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ARMCompatiable__Functions_1ga80269b6402db8ba034a5a1b04d88fdd6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__USAT';
      define-mem-param  = {
        define-mem-def-name = 'val';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'sat';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_UCLIP32((val), (sat))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_compatiable.h';
      define-mem-desc-line = '98';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Unsigned Saturate.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Saturates an unsigned value.
@param [in]  value  Value to be saturated
@param [in]    sat  Bit position to saturate to (0..31)
\return             Saturated value
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ARMCompatiable__Functions_1ga0ffdc7f8b90076408f400768a7f5e372';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RBIT';
      define-mem-param  = {
        define-mem-def-name = 'value';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_BITREVI((value), 31)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_compatiable.h';
      define-mem-desc-line = '210';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Reverse bit order of value.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Reverses the bit order of the given value.
@param [in]    value  Value to reverse
\return               Reversed value
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ARMCompatiable__Functions_1gacac866989a2f4d87628d02fd33fdc61d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__CLZ';
      define-mem-param  = {
        define-mem-def-name = 'data';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_CLZ32(data)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_compatiable.h';
      define-mem-desc-line = '235';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Count leading zeros.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Counts the number of leading zeros of a data value.
@param [in]  data  Value to count the leading zeros
\return             number of leading zeros in value
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ARMCompatiable__Functions_1ga7a54a5469bbc314d1de6afb7b3387b52';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__EXPD_BYTE';
      define-mem-param  = {
        define-mem-def-name = 'x';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
                                    ((unsigned long)(((unsigned long)(x) <<  0) | \
                                    ((unsigned long)(x) <<  8) | \
                                    ((unsigned long)(x) << 16) | \
                                    ((unsigned long)(x) << 24)))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_compatiable.h';
      define-mem-desc-line = '276';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Expand byte to unsigned long value.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Expand byte value x to unsigned long value's each byte.
@param [in] x   the byte value to be expand, the input must be uint8_t type
\return         Expanded value in unsigned long
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    };
    func = {
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__ARMCompatiable__Functions_1gadb92679719950635fba8b1b954072695';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__REV';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'value';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_compatiable.h';
      func-mem-desc-line = '122';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Reverse byte order (32 bit)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Reverses the byte order in unsigned integer value.
For example, 0x12345678 becomes 0x78563412.
@param [in]    value  Value to reverse
\return               Reversed value
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__ARMCompatiable__Functions_1gaa12aedd096506c9639c1581acd5c6a78';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__REV16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'value';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_compatiable.h';
      func-mem-desc-line = '140';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Reverse byte order (16 bit)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Reverses the byte order within each halfword of a word.
For example, 0x12345678 becomes 0x34127856.
@param [in]    value  Value to reverse
\return               Reversed value
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__ARMCompatiable__Functions_1gacb695341318226a5f69ed508166622ac';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE int16_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__REVSH';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int16_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'value';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_compatiable.h';
      func-mem-desc-line = '159';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Reverse byte order (16 bit)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Reverses the byte order in a 16-bit value
and returns the signed 16-bit result.
For example, 0x0080 becomes 0x8000.
@param [in]    value  Value to reverse
\return               Reversed value
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__ARMCompatiable__Functions_1gab16acb6456176f1e87a4f2724c2b6028';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ROR';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'op1';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'op2';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_compatiable.h';
      func-mem-desc-line = '174';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Rotate Right in unsigned value (32 bit)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Rotate Right (immediate) provides the value of
the contents of a register rotated by a variable number of bits.
@param [in]    op1  Value to rotate
@param [in]    op2  Number of Bits to rotate(0-31)
\return               Rotated value
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__ARMCompatiable__Functions_1ga762973ad3371557fda54236d44ea6b14';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint64_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ROR64';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint64_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'op1';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'op2';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_compatiable.h';
      func-mem-desc-line = '191';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Rotate Right in uint32x2 value (64 bit)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Rotate Right (immediate) provides the value of
the contents of a register rotated by a variable number of bits.
@param [in]    op1  Value to rotate([63:32] and [31:0] rotate separately)
@param [in]    op2  Number of Bits to rotate
\return        Rotated value([63:32] | [31:0])
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__ARMCompatiable__Functions_1ga211738702768401adf8308c35e854ef3';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__CTZ';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'data';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_compatiable.h';
      func-mem-desc-line = '257';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Count tailing zero.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Return the count of least-significant bit zero.for example, return 3 if x=0bxxx1000
@param [in] data   Value to count the tailing zeros
\return            number of tailing zeros in value
\remark
- The value mustn't be 0, or else it will spin here
_EnD_oF_dEf_TeXt_;
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__pmp_8h_1gabf18aa5a4518fc791dfaad084cab69e1';
        func-mem-ref-line = '330';
        func-mem-ref-name = '__get_PMPENTRYx';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__spmp_8h_1ga34656997d11753ea521266fb6f34f0be';
        func-mem-ref-line = '336';
        func-mem-ref-name = '__get_sPMPENTRYx';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__pma_8h_1gab5a3a608cd726a10cab2afede8692db8';
        func-mem-ref-line = '139';
        func-mem-ref-name = 'PMA_GetRegion';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__pma_8h_1ga49870460aa6f6e52002b87cc40623c3a';
        func-mem-ref-line = '219';
        func-mem-ref-name = 'PMA_GetRegion_S';
    };
    }; /* func-member */
    };
  file-full-name  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_compatiable.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
ARM compatiable function definitions header file.
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_



_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'core__feature__base_8h';
  file-name = 'core_feature_base.h';
    define = {
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Registers_1ga768dc3bf3c5e4e75e117c4a053b6d0f7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RISCV_XLEN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
32
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      define-mem-desc-line = '48';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Refer to the width of an integer register in bits(either 32 or 64)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Register__Access_1gab68e26f20086bc54e8fc3af533c8ed7f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_CSR_SWAP';
      define-mem-param  = {
        define-mem-def-name = 'csr';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'val';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    ({                                                          \
        rv_csr_t __v = (unsigned long)(val);                    \
        __ASM volatile("csrrw %0, " STRINGIFY(csr) ", %1"       \
                     : "=r"(__v)                                \
                     : "rK"(__v)                                \
                     : "memory");                               \
        __v;                                                    \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      define-mem-desc-line = '624';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CSR operation Macro for csrrw instruction.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Read the content of csr register to __v,
then write content of val into csr register, then return __v
@param csr   CSR macro definition defined in
             \ref NMSIS_Core_CSR_Registers, eg. \ref CSR_MSTATUS
@param val   value to store into the CSR register
\return the CSR register value before written
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Register__Access_1ga355c96e5bd1ab3df0203e23a887c00c0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_CSR_READ';
      define-mem-param  = {
        define-mem-def-name = 'csr';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    ({                                                          \
        rv_csr_t __v;                                           \
        __ASM volatile("csrr %0, " STRINGIFY(csr)               \
                     : "=r"(__v)                                \
                     :                                          \
                     : "memory");                               \
        __v;                                                    \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      define-mem-desc-line = '642';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CSR operation Macro for csrr instruction.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Read the content of csr register to __v and return it
@param csr   CSR macro definition defined in
             \ref NMSIS_Core_CSR_Registers, eg. \ref CSR_MSTATUS
\return the CSR register value
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Register__Access_1gaa2d43f43f3f333cfd8e5a326a2aed413';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_CSR_WRITE';
      define-mem-param  = {
        define-mem-def-name = 'csr';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'val';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    ({                                                          \
        rv_csr_t __v = (rv_csr_t)(val);                         \
        __ASM volatile("csrw " STRINGIFY(csr) ", %0"            \
                     :                                          \
                     : "rK"(__v)                                \
                     : "memory");                               \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      define-mem-desc-line = '660';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CSR operation Macro for csrw instruction.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Write the content of val to csr register
@param csr   CSR macro definition defined in
             \ref NMSIS_Core_CSR_Registers, eg. \ref CSR_MSTATUS
@param val   value to store into the CSR register
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Register__Access_1ga01a3710ed5d399eec664b69fd01b33fb';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_CSR_READ_SET';
      define-mem-param  = {
        define-mem-def-name = 'csr';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'val';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    ({                                                          \
        rv_csr_t __v = (rv_csr_t)(val);                         \
        __ASM volatile("csrrs %0, " STRINGIFY(csr) ", %1"       \
                     : "=r"(__v)                                \
                     : "rK"(__v)                                \
                     : "memory");                               \
        __v;                                                    \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      define-mem-desc-line = '679';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CSR operation Macro for csrrs instruction.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Read the content of csr register to __v,
then set csr register to be __v | val, then return __v
@param csr   CSR macro definition defined in
             \ref NMSIS_Core_CSR_Registers, eg. \ref CSR_MSTATUS
@param val   Mask value to be used wih csrrs instruction
\return the CSR register value before written
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Register__Access_1gafdbd9b5a14b44913675d0fa73ca6716f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_CSR_SET';
      define-mem-param  = {
        define-mem-def-name = 'csr';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'val';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    ({                                                          \
        rv_csr_t __v = (rv_csr_t)(val);                         \
        __ASM volatile("csrs " STRINGIFY(csr) ", %0"            \
                     :                                          \
                     : "rK"(__v)                                \
                     : "memory");                               \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      define-mem-desc-line = '697';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CSR operation Macro for csrs instruction.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Set csr register to be csr_content | val
@param csr   CSR macro definition defined in
             \ref NMSIS_Core_CSR_Registers, eg. \ref CSR_MSTATUS
@param val   Mask value to be used wih csrs instruction
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Register__Access_1ga1ead73950cec4e7221a24500846f39a2';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_CSR_READ_CLEAR';
      define-mem-param  = {
        define-mem-def-name = 'csr';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'val';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    ({                                                          \
        rv_csr_t __v = (rv_csr_t)(val);                         \
        __ASM volatile("csrrc %0, " STRINGIFY(csr) ", %1"       \
                     : "=r"(__v)                                \
                     : "rK"(__v)                                \
                     : "memory");                               \
        __v;                                                    \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      define-mem-desc-line = '716';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CSR operation Macro for csrrc instruction.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Read the content of csr register to __v,
then set csr register to be __v & ~val, then return __v
@param csr   CSR macro definition defined in
             \ref NMSIS_Core_CSR_Registers, eg. \ref CSR_MSTATUS
@param val   Mask value to be used wih csrrc instruction
\return the CSR register value before written
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Register__Access_1ga14cf0513f6b576fcd1ff700b08f65543';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_CSR_CLEAR';
      define-mem-param  = {
        define-mem-def-name = 'csr';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'val';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    ({                                                          \
        rv_csr_t __v = (rv_csr_t)(val);                         \
        __ASM volatile("csrc " STRINGIFY(csr) ", %0"            \
                     :                                          \
                     : "rK"(__v)                                \
                     : "memory");                               \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      define-mem-desc-line = '734';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CSR operation Macro for csrc instruction.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Set csr register to be csr_content & ~val
@param csr   CSR macro definition defined in
             \ref NMSIS_Core_CSR_Registers, eg. \ref CSR_MSTATUS
@param val   Mask value to be used wih csrc instruction
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga101db0d567f4403490117d9bb0a8c9c0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__FENCE';
      define-mem-param  = {
        define-mem-def-name = 'p';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 's';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ASM volatile ("fence " #p "," #s : : : "memory")
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      define-mem-desc-line = '2032';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Execute fence instruction, p -> pred, s -> succ.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
the FENCE instruction ensures that all memory accesses from instructions preceding
the fence in program order (the <tt>predecessor set</tt>) appear earlier in the global memory order than
memory accesses from instructions appearing after the fence in program order (the <tt>successor set</tt>).
For details, please refer to The RISC-V Instruction Set Manual
@param p     predecessor set, such as iorw, rw, r, w
@param s     successor set, such as iorw, rw, r, w
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga683c246c3fdba09511675365a2fa8bd3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RWMB';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__FENCE(iorw,iorw)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      define-mem-desc-line = '2046';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Read & Write Memory barrier.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga74918217f0fe94af72bfe5d406d4164b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RMB';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__FENCE(ir,ir)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      define-mem-desc-line = '2049';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Read Memory barrier.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga4063a0176acd66b4cdad567b45f3249b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__WMB';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__FENCE(ow,ow)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      define-mem-desc-line = '2052';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Write Memory barrier.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga4e8baf26c3f68696f2b2ad0510eafdb5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__SMP_RWMB';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__FENCE(rw,rw)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      define-mem-desc-line = '2055';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMP Read & Write Memory barrier.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga78c8abb848ec15a6e9dcce8c9e4dc1ba';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__SMP_RMB';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__FENCE(r,r)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      define-mem-desc-line = '2058';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMP Read Memory barrier.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga96d95139b3239e90fad24caf26da2160';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__SMP_WMB';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__FENCE(w,w)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      define-mem-desc-line = '2061';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMP Write Memory barrier.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga653c374f1130650b2f115a92bdf23f7b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__CPU_RELAX';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ASM volatile ("" : : : "memory")
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      define-mem-desc-line = '2064';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CPU relax for busy loop.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    };
    typedef = {
    typedef-member = {
      typedef-mem-kind = 'typedef';
      typedef-mem-id   = 'group__NMSIS__Core__Registers_1ga4dee6b95a366e4c3162d814d81a1301b';
      typedef-mem-virt = normal;
      typedef-mem-prot = public;
      typedef-mem-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
      typedef-mem-name = 'rv_csr_t';
      typedef-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      typedef-mem-desc-line = '55';
      typedef-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Type of Control and Status Register(CSR), depends on the XLEN defined in RISC-V.
_EnD_oF_dEf_TeXt_;
      typedef-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* typedef-member */
    typedef-member = {
      typedef-mem-kind = 'typedef';
      typedef-mem-id   = 'group__NMSIS__Core__Base__Registers_1ga56f425a6599bc28e3921326cf5bbd040';
      typedef-mem-virt = normal;
      typedef-mem-prot = public;
      typedef-mem-type = <<_EnD_oF_dEf_TeXt_
CSR_MMISCCTRL_Type
_EnD_oF_dEf_TeXt_;
      typedef-mem-name = 'CSR_MMISCCTL_Type';
      typedef-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      typedef-mem-desc-line = '263';
      typedef-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      typedef-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* typedef-member */
    typedef-member = {
      typedef-mem-kind = 'typedef';
      typedef-mem-id   = 'group__NMSIS__Core__Base__Registers_1gac923fc287ca756bc4311ce522dd704ce';
      typedef-mem-virt = normal;
      typedef-mem-prot = public;
      typedef-mem-type = <<_EnD_oF_dEf_TeXt_
CSR_MMISCCTRL_Type
_EnD_oF_dEf_TeXt_;
      typedef-mem-name = 'CSR_MMISC_CTL_Type';
      typedef-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      typedef-mem-desc-line = '264';
      typedef-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      typedef-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* typedef-member */
    typedef-member = {
      typedef-mem-kind = 'typedef';
      typedef-mem-id   = 'group__NMSIS__Core__Base__Registers_1ga291b64797fbd8741439aa3e742c5bc12';
      typedef-mem-virt = normal;
      typedef-mem-prot = public;
      typedef-mem-type = <<_EnD_oF_dEf_TeXt_
CSR_MCACHECTL_Type
_EnD_oF_dEf_TeXt_;
      typedef-mem-name = 'CSR_MCACHE_CTL_Type';
      typedef-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      typedef-mem-desc-line = '296';
      typedef-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      typedef-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* typedef-member */
    typedef-member = {
      typedef-mem-kind = 'typedef';
      typedef-mem-id   = 'group__NMSIS__Core__Base__Registers_1gab68155929308995f1c32ded66b09ac96';
      typedef-mem-virt = normal;
      typedef-mem-prot = public;
      typedef-mem-type = <<_EnD_oF_dEf_TeXt_
CSR_MILMCTL_Type
_EnD_oF_dEf_TeXt_;
      typedef-mem-name = 'CSR_MILM_CTL_Type';
      typedef-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      typedef-mem-desc-line = '333';
      typedef-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      typedef-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* typedef-member */
    typedef-member = {
      typedef-mem-kind = 'typedef';
      typedef-mem-id   = 'group__NMSIS__Core__Base__Registers_1ga4fc80c65450a26b0f7d176f21554ce76';
      typedef-mem-virt = normal;
      typedef-mem-prot = public;
      typedef-mem-type = <<_EnD_oF_dEf_TeXt_
CSR_MDLMCTL_Type
_EnD_oF_dEf_TeXt_;
      typedef-mem-name = 'CSR_DILM_CTL_Type';
      typedef-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      typedef-mem-desc-line = '351';
      typedef-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      typedef-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* typedef-member */
    typedef-member = {
      typedef-mem-kind = 'typedef';
      typedef-mem-id   = 'group__NMSIS__Core__Base__Registers_1ga733d3088f43b6c6d9152957b7740303f';
      typedef-mem-virt = normal;
      typedef-mem-prot = public;
      typedef-mem-type = <<_EnD_oF_dEf_TeXt_
CSR_MCFGINFO_Type
_EnD_oF_dEf_TeXt_;
      typedef-mem-name = 'CSR_MCFG_INFO_Type';
      typedef-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      typedef-mem-desc-line = '388';
      typedef-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      typedef-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* typedef-member */
    typedef-member = {
      typedef-mem-kind = 'typedef';
      typedef-mem-id   = 'group__NMSIS__Core__Base__Registers_1ga8f34d541c5e58a61c3dc25e4874bfc14';
      typedef-mem-virt = normal;
      typedef-mem-prot = public;
      typedef-mem-type = <<_EnD_oF_dEf_TeXt_
CSR_MICFGINFO_Type
_EnD_oF_dEf_TeXt_;
      typedef-mem-name = 'CSR_MICFG_INFO_Type';
      typedef-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      typedef-mem-desc-line = '408';
      typedef-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      typedef-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* typedef-member */
    typedef-member = {
      typedef-mem-kind = 'typedef';
      typedef-mem-id   = 'group__NMSIS__Core__Base__Registers_1gaa3d9a47a21fae24c9b4147ed03135321';
      typedef-mem-virt = normal;
      typedef-mem-prot = public;
      typedef-mem-type = <<_EnD_oF_dEf_TeXt_
CSR_MDCFGINFO_Type
_EnD_oF_dEf_TeXt_;
      typedef-mem-name = 'CSR_MDCFG_INFO_Type';
      typedef-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      typedef-mem-desc-line = '427';
      typedef-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      typedef-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* typedef-member */
    typedef-member = {
      typedef-mem-kind = 'typedef';
      typedef-mem-id   = 'group__NMSIS__Core__Base__Registers_1ga4fcf1f4065748cfd66643095529c15c3';
      typedef-mem-virt = normal;
      typedef-mem-prot = public;
      typedef-mem-type = <<_EnD_oF_dEf_TeXt_
CSR_MTLBCFGINFO_Type
_EnD_oF_dEf_TeXt_;
      typedef-mem-name = 'CSR_MTLBCFG_INFO_Type';
      typedef-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      typedef-mem-desc-line = '447';
      typedef-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      typedef-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* typedef-member */
    typedef-member = {
      typedef-mem-kind = 'typedef';
      typedef-mem-id   = 'group__NMSIS__Core__Base__Registers_1ga2a197e255270c7d0871ba191f06b5c6c';
      typedef-mem-virt = normal;
      typedef-mem-prot = public;
      typedef-mem-type = <<_EnD_oF_dEf_TeXt_
CSR_MPPICFGINFO_Type
_EnD_oF_dEf_TeXt_;
      typedef-mem-name = 'CSR_MPPICFG_INFO_Type';
      typedef-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      typedef-mem-desc-line = '463';
      typedef-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      typedef-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* typedef-member */
    typedef-member = {
      typedef-mem-kind = 'typedef';
      typedef-mem-id   = 'group__NMSIS__Core__Base__Registers_1gaf45ee826db105de0be1ecd7441589919';
      typedef-mem-virt = normal;
      typedef-mem-prot = public;
      typedef-mem-type = <<_EnD_oF_dEf_TeXt_
CSR_MFIOCFGINFO_Type
_EnD_oF_dEf_TeXt_;
      typedef-mem-name = 'CSR_MFIOCFG_INFO_Type';
      typedef-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      typedef-mem-desc-line = '478';
      typedef-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      typedef-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* typedef-member */
    typedef-member = {
      typedef-mem-kind = 'typedef';
      typedef-mem-id   = 'group__NMSIS__Core__Base__Registers_1ga610f3467339fbb23bef3974015550b10';
      typedef-mem-virt = normal;
      typedef-mem-prot = public;
      typedef-mem-type = <<_EnD_oF_dEf_TeXt_
CSR_MECCLOCK_Type
_EnD_oF_dEf_TeXt_;
      typedef-mem-name = 'CSR_MECC_LOCK_Type';
      typedef-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      typedef-mem-desc-line = '491';
      typedef-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      typedef-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* typedef-member */
    typedef-member = {
      typedef-mem-kind = 'typedef';
      typedef-mem-id   = 'group__NMSIS__Core__Base__Registers_1ga388a1935ecb4990587d63264ad87dc7c';
      typedef-mem-virt = normal;
      typedef-mem-prot = public;
      typedef-mem-type = <<_EnD_oF_dEf_TeXt_
CSR_MECCCODE_Type
_EnD_oF_dEf_TeXt_;
      typedef-mem-name = 'CSR_MECC_CODE_Type';
      typedef-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      typedef-mem-desc-line = '508';
      typedef-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      typedef-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* typedef-member */
    };
    enum = {
    enum-member = {
      enum-mem-kind = 'enum';
      enum-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga5d9cca8c88cb703c619aff084e4e7648';
      enum-mem-virt = normal;
      enum-mem-prot = public;
      enum-mem-name = 'WFI_SleepMode_Type';
      enum-mem-enum = { enum-name = WFI_SHALLOW_SLEEP; enum-value = '= 0'; };
      enum-mem-enum = { enum-name = WFI_DEEP_SLEEP; enum-value = '= 1'; };
      enum-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      enum-mem-desc-line = '1390';
      enum-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
WFI Sleep Mode enumeration.
_EnD_oF_dEf_TeXt_;
      enum-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* enum-member */
    };
    func = {
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CSR__Register__Access_1gac3c2aa01863c7b015e1fbfb4b0f334b7';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__switch_mode';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'mode';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uintptr_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'stack';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void(*)(void)
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'entry_point';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '766';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
switch privilege from machine mode to others.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Execute into \ref entry_point in \ref mode(supervisor or user) with given stack
@param mode   privilege mode
@param stack   predefined stack, size should set enough
@param entry_point   a function pointer to execute
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '642';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga53d62065ed74fd3583cca895e6157c5f';
        func-mem-ref-line = '642';
        func-mem-ref-name = 'CSR_MEPC';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga7086e667c65affe87d2c32115193d736';
        func-mem-ref-line = '627';
        func-mem-ref-name = 'CSR_MSTATUS';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga05fc511bb3d22b5e1abe8b9ccb30e7b3';
        func-mem-ref-line = '44';
        func-mem-ref-name = 'MSTATUS_MPIE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga2acf460f4ceda869c88c00878cb44314';
        func-mem-ref-line = '47';
        func-mem-ref-name = 'MSTATUS_MPP';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CSR__Register__Access_1gae84bf4e95944e61937f4ed2453e5ef23';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__enable_irq';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '794';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Enable IRQ Interrupts.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Enables IRQ interrupts by setting the MIE-bit in the MSTATUS Register.
\remarks
         Can only be executed in Privileged modes.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gafdbd9b5a14b44913675d0fa73ca6716f';
        func-mem-ref-line = '697';
        func-mem-ref-name = '__RV_CSR_SET';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga7086e667c65affe87d2c32115193d736';
        func-mem-ref-line = '627';
        func-mem-ref-name = 'CSR_MSTATUS';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga225cb34e3b991318fa87f090cfc3fc5f';
        func-mem-ref-line = '40';
        func-mem-ref-name = 'MSTATUS_MIE';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CSR__Register__Access_1ga2299877e4ba3e162ca9dbabd6e0abef6';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__disable_irq';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '805';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Disable IRQ Interrupts.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Disables IRQ interrupts by clearing the MIE-bit in the MSTATUS Register.
\remarks
         Can only be executed in Privileged modes.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga14cf0513f6b576fcd1ff700b08f65543';
        func-mem-ref-line = '734';
        func-mem-ref-name = '__RV_CSR_CLEAR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga7086e667c65affe87d2c32115193d736';
        func-mem-ref-line = '627';
        func-mem-ref-name = 'CSR_MSTATUS';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga225cb34e3b991318fa87f090cfc3fc5f';
        func-mem-ref-line = '40';
        func-mem-ref-name = 'MSTATUS_MIE';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CSR__Register__Access_1ga2b540a739c0e8cec2f2b0349aaa2c8ee';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__enable_ext_irq';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '816';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Enable External IRQ Interrupts.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Enables External IRQ interrupts by setting the MEIE-bit in the MIE Register.
\remarks
         Can only be executed in Privileged modes, available for plic interrupt mode.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gafdbd9b5a14b44913675d0fa73ca6716f';
        func-mem-ref-line = '697';
        func-mem-ref-name = '__RV_CSR_SET';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gae75a38ea833c5507d942fad1c98132e1';
        func-mem-ref-line = '631';
        func-mem-ref-name = 'CSR_MIE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gab4e2e4b72ec1e13b315dcdc910f5595b';
        func-mem-ref-line = '169';
        func-mem-ref-name = 'MIE_MEIE';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'system__Device_8c_1gaa6d9a05c4ea29dce5179b6d4e26bb9a5';
        func-mem-ref-line = '1143';
        func-mem-ref-name = 'PLIC_Register_IRQ';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CSR__Register__Access_1ga4103c4b1c2e4b9962998f784ef25a9b2';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__disable_ext_irq';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '827';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Disable External IRQ Interrupts.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Disables External IRQ interrupts by clearing the MEIE-bit in the MIE Register.
\remarks
         Can only be executed in Privileged modes, available for plic interrupt mode.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga14cf0513f6b576fcd1ff700b08f65543';
        func-mem-ref-line = '734';
        func-mem-ref-name = '__RV_CSR_CLEAR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gae75a38ea833c5507d942fad1c98132e1';
        func-mem-ref-line = '631';
        func-mem-ref-name = 'CSR_MIE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gab4e2e4b72ec1e13b315dcdc910f5595b';
        func-mem-ref-line = '169';
        func-mem-ref-name = 'MIE_MEIE';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CSR__Register__Access_1gac83f8b12ddd74b8afab96b8b932ad7c3';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__enable_timer_irq';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '838';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Enable Timer IRQ Interrupts.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Enables Timer IRQ interrupts by setting the MTIE-bit in the MIE Register.
\remarks
         Can only be executed in Privileged modes, available for plic interrupt mode.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gafdbd9b5a14b44913675d0fa73ca6716f';
        func-mem-ref-line = '697';
        func-mem-ref-name = '__RV_CSR_SET';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gae75a38ea833c5507d942fad1c98132e1';
        func-mem-ref-line = '631';
        func-mem-ref-name = 'CSR_MIE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga88f0c7a5a13f0570ecbaa43b912b0fe4';
        func-mem-ref-line = '166';
        func-mem-ref-name = 'MIE_MTIE';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'system__Device_8c_1gab7a197a47f395e2bbdf447ac0fbd79df';
        func-mem-ref-line = '1069';
        func-mem-ref-name = 'Core_Register_IRQ';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CSR__Register__Access_1ga136e4932ffd82e965d6a527b82b630f9';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__disable_timer_irq';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '849';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Disable Timer IRQ Interrupts.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Disables Timer IRQ interrupts by clearing the MTIE-bit in the MIE Register.
\remarks
         Can only be executed in Privileged modes, available for plic interrupt mode.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga14cf0513f6b576fcd1ff700b08f65543';
        func-mem-ref-line = '734';
        func-mem-ref-name = '__RV_CSR_CLEAR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gae75a38ea833c5507d942fad1c98132e1';
        func-mem-ref-line = '631';
        func-mem-ref-name = 'CSR_MIE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga88f0c7a5a13f0570ecbaa43b912b0fe4';
        func-mem-ref-line = '166';
        func-mem-ref-name = 'MIE_MTIE';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CSR__Register__Access_1gaad0ea08da14cd5c2a31ddc9144be1fb0';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__enable_sw_irq';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '860';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Enable software IRQ Interrupts.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Enables software IRQ interrupts by setting the MSIE-bit in the MIE Register.
\remarks
         Can only be executed in Privileged modes, available for plic interrupt mode.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gafdbd9b5a14b44913675d0fa73ca6716f';
        func-mem-ref-line = '697';
        func-mem-ref-name = '__RV_CSR_SET';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gae75a38ea833c5507d942fad1c98132e1';
        func-mem-ref-line = '631';
        func-mem-ref-name = 'CSR_MIE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gacdb82cffb46911d1a236dcf651b24b05';
        func-mem-ref-line = '163';
        func-mem-ref-name = 'MIE_MSIE';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'system__Device_8c_1gab7a197a47f395e2bbdf447ac0fbd79df';
        func-mem-ref-line = '1069';
        func-mem-ref-name = 'Core_Register_IRQ';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CSR__Register__Access_1ga3bb4080ce969f16989baa90e69124508';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__disable_sw_irq';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '871';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Disable software IRQ Interrupts.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Disables software IRQ interrupts by clearing the MSIE-bit in the MIE Register.
\remarks
         Can only be executed in Privileged modes, available for plic interrupt mode.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga14cf0513f6b576fcd1ff700b08f65543';
        func-mem-ref-line = '734';
        func-mem-ref-name = '__RV_CSR_CLEAR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gae75a38ea833c5507d942fad1c98132e1';
        func-mem-ref-line = '631';
        func-mem-ref-name = 'CSR_MIE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gacdb82cffb46911d1a236dcf651b24b05';
        func-mem-ref-line = '163';
        func-mem-ref-name = 'MIE_MSIE';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CSR__Register__Access_1ga061f0fa106bc1129069ad7d5d2b3be61';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__disable_core_irq';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'irq';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '882';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Disable Core IRQ Interrupt.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Disable Core IRQ interrupt by clearing the irq bit in the MIE Register.
\remarks
         Can only be executed in Privileged modes, available for plic interrupt mode.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga14cf0513f6b576fcd1ff700b08f65543';
        func-mem-ref-line = '734';
        func-mem-ref-name = '__RV_CSR_CLEAR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gae75a38ea833c5507d942fad1c98132e1';
        func-mem-ref-line = '631';
        func-mem-ref-name = 'CSR_MIE';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CSR__Register__Access_1gae1cb25bff3cbb12f5459f49de99b1068';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__enable_core_irq';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'irq';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '893';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Enable Core IRQ Interrupt.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Enable Core IRQ interrupt by setting the irq bit in the MIE Register.
\remarks
         Can only be executed in Privileged modes, available for plic interrupt mode.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gafdbd9b5a14b44913675d0fa73ca6716f';
        func-mem-ref-line = '697';
        func-mem-ref-name = '__RV_CSR_SET';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gae75a38ea833c5507d942fad1c98132e1';
        func-mem-ref-line = '631';
        func-mem-ref-name = 'CSR_MIE';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CSR__Register__Access_1gacc0f396555d7b12dab980369df502f68';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__get_core_irq_pending';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'irq';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '904';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get Core IRQ Interrupt Pending status.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Get Core IRQ interrupt pending status of irq bit.
\remarks
         Can only be executed in Privileged modes, available for plic interrupt mode.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '642';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga38c553936313dfc3d00ff68083f7c7fa';
        func-mem-ref-line = '646';
        func-mem-ref-name = 'CSR_MIP';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CSR__Register__Access_1ga21dd6e4dde6e10acc36b7b3d96095e3d';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__clear_core_irq_pending';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'irq';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '915';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Clear Core IRQ Interrupt Pending status.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Clear Core IRQ interrupt pending status of irq bit.
\remarks
         Can only be executed in Privileged modes, available for plic interrupt mode.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga14cf0513f6b576fcd1ff700b08f65543';
        func-mem-ref-line = '734';
        func-mem-ref-name = '__RV_CSR_CLEAR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga38c553936313dfc3d00ff68083f7c7fa';
        func-mem-ref-line = '646';
        func-mem-ref-name = 'CSR_MIP';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CSR__Register__Access_1gacc0386fc9e9c11c88d51c0e0d8c90ccd';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__enable_irq_s';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '926';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Enable IRQ Interrupts in supervisor mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Enables IRQ interrupts by setting the SIE-bit in the SSTATUS Register.
\remarks
         Can only be executed in Privileged modes.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gafdbd9b5a14b44913675d0fa73ca6716f';
        func-mem-ref-line = '697';
        func-mem-ref-name = '__RV_CSR_SET';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga651e65251cc54d4a553702e4cf061ca7';
        func-mem-ref-line = '561';
        func-mem-ref-name = 'CSR_SSTATUS';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga1c1f1da0ecfca5bc4fc4db3acadf1bc8';
        func-mem-ref-line = '79';
        func-mem-ref-name = 'SSTATUS_SIE';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CSR__Register__Access_1ga07252f56dc721bb8077300ea77973393';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__disable_irq_s';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '937';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Disable IRQ Interrupts in supervisor mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Disables IRQ interrupts by clearing the SIE-bit in the SSTATUS Register.
\remarks
         Can only be executed in Privileged modes.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga14cf0513f6b576fcd1ff700b08f65543';
        func-mem-ref-line = '734';
        func-mem-ref-name = '__RV_CSR_CLEAR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga651e65251cc54d4a553702e4cf061ca7';
        func-mem-ref-line = '561';
        func-mem-ref-name = 'CSR_SSTATUS';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga1c1f1da0ecfca5bc4fc4db3acadf1bc8';
        func-mem-ref-line = '79';
        func-mem-ref-name = 'SSTATUS_SIE';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CSR__Register__Access_1ga11c7677eb827e32da6d94df6c61c8ae8';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__enable_ext_irq_s';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '948';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Enable External IRQ Interrupts in supervisor mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Enables External IRQ interrupts by setting the SEIE-bit in the SIE Register.
\remarks
         Can only be executed in Privileged modes, available for plic interrupt mode.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gafdbd9b5a14b44913675d0fa73ca6716f';
        func-mem-ref-line = '697';
        func-mem-ref-name = '__RV_CSR_SET';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gafe9299d8a7d0f21e963ab621a6a5a5cf';
        func-mem-ref-line = '564';
        func-mem-ref-name = 'CSR_SIE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga25eb65aea38f4aa1feeef2bf854cea74';
        func-mem-ref-line = '167';
        func-mem-ref-name = 'MIE_SEIE';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'system__Device_8c_1gadec79146bddf812bc9c38bebdbf9dd6d';
        func-mem-ref-line = '1174';
        func-mem-ref-name = 'PLIC_Register_IRQ_S';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CSR__Register__Access_1ga6a8568344a12d20b3733fa4b2b6f547a';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__disable_ext_irq_s';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '959';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Disable External IRQ Interrupts in supervisor mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Disables External IRQ interrupts by clearing the SEIE-bit in the SIE Register.
\remarks
         Can only be executed in Privileged modes, available for plic interrupt mode.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga14cf0513f6b576fcd1ff700b08f65543';
        func-mem-ref-line = '734';
        func-mem-ref-name = '__RV_CSR_CLEAR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gafe9299d8a7d0f21e963ab621a6a5a5cf';
        func-mem-ref-line = '564';
        func-mem-ref-name = 'CSR_SIE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga25eb65aea38f4aa1feeef2bf854cea74';
        func-mem-ref-line = '167';
        func-mem-ref-name = 'MIE_SEIE';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CSR__Register__Access_1ga577c6ced2f4de640257240f21e9fa10c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__enable_timer_irq_s';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '970';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Enable Timer IRQ Interrupts in supervisor mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Enables Timer IRQ interrupts by setting the STIE-bit in the SIE Register.
\remarks
         Can only be executed in Privileged modes, available for plic interrupt mode.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gafdbd9b5a14b44913675d0fa73ca6716f';
        func-mem-ref-line = '697';
        func-mem-ref-name = '__RV_CSR_SET';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gafe9299d8a7d0f21e963ab621a6a5a5cf';
        func-mem-ref-line = '564';
        func-mem-ref-name = 'CSR_SIE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gac5a9c8dcdb454fa5593b61b192b06c1d';
        func-mem-ref-line = '164';
        func-mem-ref-name = 'MIE_STIE';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'system__Device_8c_1ga7b4e3e9a3ff7b408d7e31939a07ac3d7';
        func-mem-ref-line = '1105';
        func-mem-ref-name = 'Core_Register_IRQ_S';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CSR__Register__Access_1ga526dcfd6dc414f707dd2fc8f4c6aa406';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__disable_timer_irq_s';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '981';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Disable Timer IRQ Interrupts in supervisor mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Disables Timer IRQ interrupts by clearing the STIE-bit in the SIE Register.
\remarks
         Can only be executed in Privileged modes, available for plic interrupt mode.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga14cf0513f6b576fcd1ff700b08f65543';
        func-mem-ref-line = '734';
        func-mem-ref-name = '__RV_CSR_CLEAR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gafe9299d8a7d0f21e963ab621a6a5a5cf';
        func-mem-ref-line = '564';
        func-mem-ref-name = 'CSR_SIE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gac5a9c8dcdb454fa5593b61b192b06c1d';
        func-mem-ref-line = '164';
        func-mem-ref-name = 'MIE_STIE';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CSR__Register__Access_1gaeb9d68b22521e7aeac5466d501e65e64';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__enable_sw_irq_s';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '992';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Enable software IRQ Interrupts in supervisor mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Enables software IRQ interrupts by setting the SSIE-bit in the SIE Register.
\remarks
         Can only be executed in Privileged modes, available for plic interrupt mode.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gafdbd9b5a14b44913675d0fa73ca6716f';
        func-mem-ref-line = '697';
        func-mem-ref-name = '__RV_CSR_SET';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gafe9299d8a7d0f21e963ab621a6a5a5cf';
        func-mem-ref-line = '564';
        func-mem-ref-name = 'CSR_SIE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga581a15bf4b80b485ca87f80d3bcfe110';
        func-mem-ref-line = '161';
        func-mem-ref-name = 'MIE_SSIE';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'system__Device_8c_1ga7b4e3e9a3ff7b408d7e31939a07ac3d7';
        func-mem-ref-line = '1105';
        func-mem-ref-name = 'Core_Register_IRQ_S';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CSR__Register__Access_1ga80a72183ae010504ec0fcf82e86caf93';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__disable_sw_irq_s';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '1003';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Disable software IRQ Interrupts in supervisor mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Disables software IRQ interrupts by clearing the SSIE-bit in the SIE Register.
\remarks
         Can only be executed in Privileged modes, available for plic interrupt mode.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga14cf0513f6b576fcd1ff700b08f65543';
        func-mem-ref-line = '734';
        func-mem-ref-name = '__RV_CSR_CLEAR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gafe9299d8a7d0f21e963ab621a6a5a5cf';
        func-mem-ref-line = '564';
        func-mem-ref-name = 'CSR_SIE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga581a15bf4b80b485ca87f80d3bcfe110';
        func-mem-ref-line = '161';
        func-mem-ref-name = 'MIE_SSIE';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CSR__Register__Access_1gabe5b4aa3150e3d7c869b3b6ad0f811c2';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__disable_core_irq_s';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'irq';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '1014';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Disable Core IRQ Interrupt in supervisor mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Disable Core IRQ interrupt by clearing the irq bit in the SIE Register.
\remarks
         Can only be executed in Privileged modes, available for plic interrupt mode.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga14cf0513f6b576fcd1ff700b08f65543';
        func-mem-ref-line = '734';
        func-mem-ref-name = '__RV_CSR_CLEAR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gafe9299d8a7d0f21e963ab621a6a5a5cf';
        func-mem-ref-line = '564';
        func-mem-ref-name = 'CSR_SIE';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CSR__Register__Access_1gad4e7aa90cd41117a8894e1ae02d37dcd';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__enable_core_irq_s';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'irq';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '1025';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Enable Core IRQ Interrupt in supervisor mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Enable Core IRQ interrupt by setting the irq bit in the MIE Register.
\remarks
         Can only be executed in Privileged modes, available for plic interrupt mode.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gafdbd9b5a14b44913675d0fa73ca6716f';
        func-mem-ref-line = '697';
        func-mem-ref-name = '__RV_CSR_SET';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gafe9299d8a7d0f21e963ab621a6a5a5cf';
        func-mem-ref-line = '564';
        func-mem-ref-name = 'CSR_SIE';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CSR__Register__Access_1ga2c11307de1c273f425cf343b2b987131';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__get_core_irq_pending_s';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'irq';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '1036';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get Core IRQ Interrupt Pending status in supervisor mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Get Core IRQ interrupt pending status of irq bit.
\remarks
         Can only be executed in Privileged modes, available for plic interrupt mode.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '642';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gac79e54d601a25a8eed4e0c985fd30315';
        func-mem-ref-line = '577';
        func-mem-ref-name = 'CSR_SIP';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CSR__Register__Access_1ga30c6368aca2a84d0bbf7922ada3e9dee';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__clear_core_irq_pending_s';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'irq';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '1047';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Clear Core IRQ Interrupt Pending status in supervisor mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Clear Core IRQ interrupt pending status of irq bit.
\remarks
         Can only be executed in Privileged modes, available for plic interrupt mode.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga14cf0513f6b576fcd1ff700b08f65543';
        func-mem-ref-line = '734';
        func-mem-ref-name = '__RV_CSR_CLEAR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gac79e54d601a25a8eed4e0c985fd30315';
        func-mem-ref-line = '577';
        func-mem-ref-name = 'CSR_SIP';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CSR__Register__Access_1ga0d524220141962c60352cfe0a219bdb4';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint64_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__get_rv_cycle';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '1058';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Read whole 64 bits value of mcycle counter.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 This function will read the whole 64 bits of MCYCLE register
\return  The whole 64 bits value of MCYCLE
\remarks It will work for both RV32 and RV64 to get full 64bits value of MCYCLE
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '642';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga5a7abfd3679706088142a50995c1bdb8';
        func-mem-ref-line = '742';
        func-mem-ref-name = 'CSR_MCYCLE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gae3368bea588a2fcdf2e7d24707ef4dda';
        func-mem-ref-line = '883';
        func-mem-ref-name = 'CSR_MCYCLEH';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__base_8h_1ga2878ee5f411422141d9f22192a2e81a7';
        func-mem-ref-line = '1756';
        func-mem-ref-name = '__get_hpm_counter';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CSR__Register__Access_1gae7293e3a50f5e918fafe45834c18ea19';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__set_rv_cycle';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint64_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'cycle';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '1084';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set whole 64 bits value of mcycle counter.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 This function will set the whole 64 bits of MCYCLE register
\remarks It will work for both RV32 and RV64 to set full 64bits value of MCYCLE
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga5a7abfd3679706088142a50995c1bdb8';
        func-mem-ref-line = '742';
        func-mem-ref-name = 'CSR_MCYCLE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gae3368bea588a2fcdf2e7d24707ef4dda';
        func-mem-ref-line = '883';
        func-mem-ref-name = 'CSR_MCYCLEH';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CSR__Register__Access_1ga0755f3835c1d5788f99547c185dab2d2';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint64_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__get_rv_instret';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '1102';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Read whole 64 bits value of machine instruction-retired counter.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 This function will read the whole 64 bits of MINSTRET register
\return  The whole 64 bits value of MINSTRET
\remarks It will work for both RV32 and RV64 to get full 64bits value of MINSTRET
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '642';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga204b84adcbccada25ecd7aff3c5a31f5';
        func-mem-ref-line = '743';
        func-mem-ref-name = 'CSR_MINSTRET';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaa59d1f570770dc3be6cd493cbb5a12e4';
        func-mem-ref-line = '884';
        func-mem-ref-name = 'CSR_MINSTRETH';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__base_8h_1ga2878ee5f411422141d9f22192a2e81a7';
        func-mem-ref-line = '1756';
        func-mem-ref-name = '__get_hpm_counter';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CSR__Register__Access_1gafbcab76f105522ac283601fb6433afce';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__set_rv_instret';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint64_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'instret';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '1128';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set whole 64 bits value of machine instruction-retired counter.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 This function will set the whole 64 bits of MINSTRET register
\remarks It will work for both RV32 and RV64 to set full 64bits value of MINSTRET
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga204b84adcbccada25ecd7aff3c5a31f5';
        func-mem-ref-line = '743';
        func-mem-ref-name = 'CSR_MINSTRET';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaa59d1f570770dc3be6cd493cbb5a12e4';
        func-mem-ref-line = '884';
        func-mem-ref-name = 'CSR_MINSTRETH';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CSR__Register__Access_1ga5f54b26adf57d254f6a589dab36bd28a';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint64_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__get_rv_time';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '1147';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Read whole 64 bits value of real-time clock.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 This function will read the whole 64 bits of TIME register
\return  The whole 64 bits value of TIME CSR
\remarks It will work for both RV32 and RV64 to get full 64bits value of TIME
\attention only available when user mode available
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '642';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga4bbdf33e8b20f4cb020869e7394e388a';
        func-mem-ref-line = '526';
        func-mem-ref-name = 'CSR_TIME';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga2e2ce9bac3d1ad2128a4eb9438a1022d';
        func-mem-ref-line = '816';
        func-mem-ref-name = 'CSR_TIMEH';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__timer_8h_1gaab738f70ca127c297831dae43d6fd9ed';
        func-mem-ref-line = '967';
        func-mem-ref-name = 'SysTick_Config_S';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga32b43080c94026bf4d5f4309bb1167fd';
        func-mem-ref-line = '990';
        func-mem-ref-name = 'SysTick_Reload_S';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CSR__Register__Access_1gad33b21b25bffd28f91e64e47a8ef650e';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__read_cycle_csr';
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '1176';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Read the CYCLE register.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 This function will read the CYCLE register without taking the
         CYCLEH register into account
\return  32 bits value when XLEN=32
         64 bits value when XLEN=64
         TODO: XLEN=128 need to be supported
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '642';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga9e9434c8a5b1f157f1a7b800c26321bb';
        func-mem-ref-line = '525';
        func-mem-ref-name = 'CSR_CYCLE';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__base_8h_1gab19152c0245f0d9944681879bfd4c47b';
        func-mem-ref-line = '1960';
        func-mem-ref-name = '__read_hpm_counter';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CSR__Register__Access_1ga7907e9d961d4239be0f6bf5d6b6f50c6';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__read_instret_csr';
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '1189';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Read the INSTRET register.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 This function will read the INSTRET register without taking the
         INSTRETH register into account
\return  32 bits value when XLEN=32
         64 bits value when XLEN=64
         TODO: XLEN=128 need to be supported
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '642';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga053f87dc2e911eb74a904232a0db20f5';
        func-mem-ref-line = '527';
        func-mem-ref-name = 'CSR_INSTRET';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__base_8h_1gab19152c0245f0d9944681879bfd4c47b';
        func-mem-ref-line = '1960';
        func-mem-ref-name = '__read_hpm_counter';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CSR__Register__Access_1ga05a71f70ffb9a9481b77396949e3b9ba';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__read_time_csr';
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '1202';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Read the TIME register.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 This function will read the TIME register without taking the
         TIMEH register into account
\return  32 bits value when XLEN=32
         64 bits value when XLEN=64
         TODO: XLEN=128 need to be supported
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '642';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga4bbdf33e8b20f4cb020869e7394e388a';
        func-mem-ref-line = '526';
        func-mem-ref-name = 'CSR_TIME';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CSR__Register__Access_1ga1ebd0892b55a32c86214b81989e3c929';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__get_cluster_id';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '1214';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get cluster id of current cluster.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 This function will get cluster id of current cluster in a multiple cluster system
\return  The cluster id of current cluster
\remarks mhartid bit 15-8 is designed for cluster id in nuclei subsystem reference design
\attention function is allowed in machine mode only
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '642';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga50cb52c60a3472620a819765e593f67e';
        func-mem-ref-line = '805';
        func-mem-ref-name = 'CSR_MHARTID';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CSR__Register__Access_1ga834d34ef7d8b4425f3f69485cc666320';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__get_hart_index';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '1230';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get hart index of current cluster.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 This function will get hart index of current cluster in a multiple cluster system,
hart index is hartid - hartid offset, for example if your hartid is 1, and offset is 1, then
hart index is 0
\return  The hart index of current cluster
\attention function is allowed in machine mode only
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '642';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga50cb52c60a3472620a819765e593f67e';
        func-mem-ref-line = '805';
        func-mem-ref-name = 'CSR_MHARTID';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CSR__Register__Access_1ga578d4ba2532485995190134b2beb03ff';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__get_hart_id';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '1250';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get hart id of current cluster.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 This function will get hart id of current cluster in a multiple cluster system
\return  The hart id of current cluster
\remarks it will return full hartid not part of it for reference subsystem design,
if your reference subsystem design has hartid offset, please define __HARTID_OFFSET in
<Device>.h
\attention function is allowed in machine mode only
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '642';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga50cb52c60a3472620a819765e593f67e';
        func-mem-ref-line = '805';
        func-mem-ref-name = 'CSR_MHARTID';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'system__Device_8c_1gad13ba247efe59bbe2b6004d9bd0f10db';
        func-mem-ref-line = '1324';
        func-mem-ref-name = '_premain_init';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'system__Device_8c_1ga97971400b10d2cdd33f0d1fb59f9d0c8';
        func-mem-ref-line = '331';
        func-mem-ref-name = 'system_default_exception_handler';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'system__Device_8c_1ga650b0aff4d3e3c20d326fbc558b6f90f';
        func-mem-ref-line = '847';
        func-mem-ref-name = 'SystemBannerPrint';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CSR__Register__Access_1ga458d5d9df600c0e98f6112dbcadf8a56';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__get_cluster_id_s';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '1266';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get cluster id of current cluster in supervisor mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 This function will get cluster id of current cluster in a multiple cluster system
\return  The cluster id of current cluster
\remarks hartid bit 15-8 is designed for cluster id in nuclei subsystem reference design
\attention function is allowed in machine/supervisor mode,
currently only present in 600/900 series from 2024 released version
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '642';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga573c8e8d248d3c9a25837ed3473e8973';
        func-mem-ref-line = '1088';
        func-mem-ref-name = 'CSR_SHARTID';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CSR__Register__Access_1ga4b0f221e2b94d8f3160a6d3db8d67b86';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__get_hart_index_s';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '1283';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get hart index of current cluster in supervisor mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 This function will get hart index of current cluster in a multiple cluster system,
hart index is hartid - hartid offset, for example if your hartid is 1, and offset is 1, then
hart index is 0
\return  The hart index of current cluster
\attention function is allowed in machine/supervisor mode,
currently only present in 600/900 series from 2024 released version
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '642';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga573c8e8d248d3c9a25837ed3473e8973';
        func-mem-ref-line = '1088';
        func-mem-ref-name = 'CSR_SHARTID';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CSR__Register__Access_1ga5a48d35fb9d6187a30b3bd5064468f1c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__get_hart_id_s';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '1304';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get hart id of current cluster in supervisor mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 This function will get hart id of current cluster in a multiple cluster system
\return  The hart id of current cluster
\remarks it will return full hartid not part of it for reference subsystem design,
if your reference subsystem design has hartid offset, please define __HARTID_OFFSET in
<Device>.h
\attention function is allowed in machine/supervisor mode,
currently only present in 600/900 series from 2024 released version
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '642';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga573c8e8d248d3c9a25837ed3473e8973';
        func-mem-ref-line = '1088';
        func-mem-ref-name = 'CSR_SHARTID';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga3113efdf11b109a9cbd50fae783d1adc';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__NOP';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '1330';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
NOP Instruction.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
No Operation does nothing.
This instruction can be used for code alignment purposes.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga8bc0687a967ccba8e8adbe7abe5fe2f7';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__WFI';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '1344';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Wait For Interrupt.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Wait For Interrupt is is executed using CSR_WFE.WFE=0 and WFI instruction.
It will suspends execution until interrupt, NMI or Debug happened.
When Core is waked up by interrupt, if
1. mstatus.MIE == 1(interrupt enabled), Core will enter ISR code
2. mstatus.MIE == 0(interrupt disabled), Core will resume previous execution
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga14cf0513f6b576fcd1ff700b08f65543';
        func-mem-ref-line = '734';
        func-mem-ref-name = '__RV_CSR_CLEAR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga9852d0d6221b272f8f5290c3445ee1ba';
        func-mem-ref-line = '1050';
        func-mem-ref-name = 'CSR_WFE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga20aa60b214851659e139accdc108f131';
        func-mem-ref-line = '224';
        func-mem-ref-name = 'WFE_WFE';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1gaca38170721a2eefd87017ed350162c4c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__WFE';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '1357';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Wait For Event.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Wait For Event is executed using CSR_WFE.WFE=1 and WFI instruction.
It will suspends execution until event, NMI or Debug happened.
When Core is waked up, Core will resume previous execution
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga14cf0513f6b576fcd1ff700b08f65543';
        func-mem-ref-line = '734';
        func-mem-ref-name = '__RV_CSR_CLEAR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gafdbd9b5a14b44913675d0fa73ca6716f';
        func-mem-ref-line = '697';
        func-mem-ref-name = '__RV_CSR_SET';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga9852d0d6221b272f8f5290c3445ee1ba';
        func-mem-ref-line = '1050';
        func-mem-ref-name = 'CSR_WFE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga20aa60b214851659e139accdc108f131';
        func-mem-ref-line = '224';
        func-mem-ref-name = 'WFE_WFE';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga2d22b9286eefbf1e1b73ed50ce443183';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__EBREAK';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '1371';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Breakpoint Instruction.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Causes the processor to enter Debug state.
Debug tools can use this to investigate system state
when the instruction at a particular address is reached.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga639ad274fdb079a1219006725d772c6c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECALL';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '1382';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Environment Call Instruction.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
The ECALL instruction is used to make a service request to
the execution environment.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga1a1db7d1454df1cf7b1214d18349cac1';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__set_wfi_sleepmode';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
WFI_SleepMode_Type
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'mode';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '1402';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set Sleep mode of WFI.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Set the SLEEPVALUE CSR register to control the
WFI Sleep mode.
@param [in] mode      The sleep mode to be set
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga7ee7f2cce602b8b3e2943bc2d0ca65cb';
        func-mem-ref-line = '1048';
        func-mem-ref-name = 'CSR_SLEEPVALUE';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1gaa60612c5e378681f32e815743823ba15';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__TXEVT';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '1413';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Send TX Event.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Set the CSR TXEVT to control send a TX Event.
The Core will output signal tx_evt as output event signal.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gafdbd9b5a14b44913675d0fa73ca6716f';
        func-mem-ref-line = '697';
        func-mem-ref-name = '__RV_CSR_SET';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga730f164e5d79c6b27d2187a1e7a17e25';
        func-mem-ref-line = '1049';
        func-mem-ref-name = 'CSR_TXEVT';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1gadba90c4a57befeb5e4f739295af55e73';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__enable_mcycle_counter';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '1423';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Enable MCYCLE counter.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Clear the CY bit of MCOUNTINHIBIT to 0 to enable MCYCLE Counter
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga14cf0513f6b576fcd1ff700b08f65543';
        func-mem-ref-line = '734';
        func-mem-ref-name = '__RV_CSR_CLEAR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga9643607a23d4bc6a50a562d0a1f5a8f3';
        func-mem-ref-line = '640';
        func-mem-ref-name = 'CSR_MCOUNTINHIBIT';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga675e4d52a85bafc0a1663cf2f431583a';
        func-mem-ref-line = '236';
        func-mem-ref-name = 'MCOUNTINHIBIT_CY';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1gaf9ada8a615338120fa38a6e193fd7517';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__disable_mcycle_counter';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '1433';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Disable MCYCLE counter.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Set the CY bit of MCOUNTINHIBIT to 1 to disable MCYCLE Counter
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gafdbd9b5a14b44913675d0fa73ca6716f';
        func-mem-ref-line = '697';
        func-mem-ref-name = '__RV_CSR_SET';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga9643607a23d4bc6a50a562d0a1f5a8f3';
        func-mem-ref-line = '640';
        func-mem-ref-name = 'CSR_MCOUNTINHIBIT';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga675e4d52a85bafc0a1663cf2f431583a';
        func-mem-ref-line = '236';
        func-mem-ref-name = 'MCOUNTINHIBIT_CY';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1gae7bb45974eee5b66ea6332ba0ccf23d5';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__enable_minstret_counter';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '1443';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Enable MINSTRET counter.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Clear the IR bit of MCOUNTINHIBIT to 0 to enable MINSTRET Counter
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga14cf0513f6b576fcd1ff700b08f65543';
        func-mem-ref-line = '734';
        func-mem-ref-name = '__RV_CSR_CLEAR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga9643607a23d4bc6a50a562d0a1f5a8f3';
        func-mem-ref-line = '640';
        func-mem-ref-name = 'CSR_MCOUNTINHIBIT';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gae8693a1f795a0f752391c609ce011cbf';
        func-mem-ref-line = '237';
        func-mem-ref-name = 'MCOUNTINHIBIT_IR';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1gae1cb8d99e36d784e9071fec80e1f02fe';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__disable_minstret_counter';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '1453';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Disable MINSTRET counter.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Set the IR bit of MCOUNTINHIBIT to 1 to disable MINSTRET Counter
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gafdbd9b5a14b44913675d0fa73ca6716f';
        func-mem-ref-line = '697';
        func-mem-ref-name = '__RV_CSR_SET';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga9643607a23d4bc6a50a562d0a1f5a8f3';
        func-mem-ref-line = '640';
        func-mem-ref-name = 'CSR_MCOUNTINHIBIT';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gae8693a1f795a0f752391c609ce011cbf';
        func-mem-ref-line = '237';
        func-mem-ref-name = 'MCOUNTINHIBIT_IR';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga5a8ff7c7305e1d6def94c439bc43db3f';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__enable_mhpm_counter';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'idx';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '1464';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Enable selected hardware performance monitor counter.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param [in]    idx   the index of the hardware performance monitor counter
\ilinebr\ilinebr 
enable selected hardware performance monitor counter mhpmcounterx.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga14cf0513f6b576fcd1ff700b08f65543';
        func-mem-ref-line = '734';
        func-mem-ref-name = '__RV_CSR_CLEAR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga9643607a23d4bc6a50a562d0a1f5a8f3';
        func-mem-ref-line = '640';
        func-mem-ref-name = 'CSR_MCOUNTINHIBIT';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga578746fae952736a1135a84c0406d1ed';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__disable_mhpm_counter';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'idx';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '1475';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Disable selected hardware performance monitor counter.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param [in]    idx   the index of the hardware performance monitor counter
\ilinebr\ilinebr 
Disable selected hardware performance monitor counter mhpmcounterx.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gafdbd9b5a14b44913675d0fa73ca6716f';
        func-mem-ref-line = '697';
        func-mem-ref-name = '__RV_CSR_SET';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga9643607a23d4bc6a50a562d0a1f5a8f3';
        func-mem-ref-line = '640';
        func-mem-ref-name = 'CSR_MCOUNTINHIBIT';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga54dc0a15da89357104b701436c855fcb';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__enable_mhpm_counters';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'mask';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '1487';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Enable hardware performance counters with mask.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param [in]    mask   mask of selected hardware performance monitor counters
\ilinebr\ilinebr 
enable mhpmcounterx with mask, only the masked ones will be enabled.
mhpmcounter3-mhpmcount31 are for high performance monitor counters.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga14cf0513f6b576fcd1ff700b08f65543';
        func-mem-ref-line = '734';
        func-mem-ref-name = '__RV_CSR_CLEAR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga9643607a23d4bc6a50a562d0a1f5a8f3';
        func-mem-ref-line = '640';
        func-mem-ref-name = 'CSR_MCOUNTINHIBIT';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga38a61ad6e8972bbcb6ed68a7f2cd321d';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__disable_mhpm_counters';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'mask';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '1499';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Disable hardware performance counters with mask.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param [in]    mask   mask of selected hardware performance monitor counters
\ilinebr\ilinebr 
Disable mhpmcounterx with mask, only the masked ones will be disabled.
mhpmcounter3-mhpmcount31 are for high performance monitor counters.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gafdbd9b5a14b44913675d0fa73ca6716f';
        func-mem-ref-line = '697';
        func-mem-ref-name = '__RV_CSR_SET';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga9643607a23d4bc6a50a562d0a1f5a8f3';
        func-mem-ref-line = '640';
        func-mem-ref-name = 'CSR_MCOUNTINHIBIT';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga1b25cc01665431cd509fd3c1be93a811';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__enable_all_counter';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '1510';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Enable all MCYCLE & MINSTRET & MHPMCOUNTER counter.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Clear all to zero to enable all counters,
such as cycle, instret, high performance monitor counters
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga14cf0513f6b576fcd1ff700b08f65543';
        func-mem-ref-line = '734';
        func-mem-ref-name = '__RV_CSR_CLEAR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga9643607a23d4bc6a50a562d0a1f5a8f3';
        func-mem-ref-line = '640';
        func-mem-ref-name = 'CSR_MCOUNTINHIBIT';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'nmsis__bench_8h_1ga22c7627db75a45ce728e0cb0fc1fe758';
        func-mem-ref-line = '73';
        func-mem-ref-name = '__prepare_bench_env';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga16f715797bba0ac2ed2e1820c63443cd';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__disable_all_counter';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '1521';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Disable all MCYCLE & MINSTRET & MHPMCOUNTER counter.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Set all to one to disable all counters,
such as cycle, instret, high performance monitor counters
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gafdbd9b5a14b44913675d0fa73ca6716f';
        func-mem-ref-line = '697';
        func-mem-ref-name = '__RV_CSR_SET';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga9643607a23d4bc6a50a562d0a1f5a8f3';
        func-mem-ref-line = '640';
        func-mem-ref-name = 'CSR_MCOUNTINHIBIT';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga86132d5a3cc78b87d205f1fa9acbaf78';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__set_hpm_event';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'idx';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'event';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '1533';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set event for selected high performance monitor event.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param [in]    idx     HPMEVENTx CSR index(3-31)
@param [in]    event   HPMEVENTx Register value to set
\ilinebr\ilinebr 
Set event for high performance monitor event register
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaf45e26868117973a085e36d7eff5450e';
        func-mem-ref-line = '780';
        func-mem-ref-name = 'CSR_MHPMEVENT10';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga92f0189e5bd365e0841d4e940873bb0e';
        func-mem-ref-line = '781';
        func-mem-ref-name = 'CSR_MHPMEVENT11';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gac3be9181730b41f7569d3a02c0678476';
        func-mem-ref-line = '782';
        func-mem-ref-name = 'CSR_MHPMEVENT12';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga1bdcead9d6986e83ca841b77f1415221';
        func-mem-ref-line = '783';
        func-mem-ref-name = 'CSR_MHPMEVENT13';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga6402b2179f54e39374218708378ecb18';
        func-mem-ref-line = '784';
        func-mem-ref-name = 'CSR_MHPMEVENT14';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga88a2a649e6aa85e22c858ebfd4a66c90';
        func-mem-ref-line = '785';
        func-mem-ref-name = 'CSR_MHPMEVENT15';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga249efb1593f74ed9766c736e61355339';
        func-mem-ref-line = '786';
        func-mem-ref-name = 'CSR_MHPMEVENT16';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga09f2b4ed516486729cb6db6086dd6ba6';
        func-mem-ref-line = '787';
        func-mem-ref-name = 'CSR_MHPMEVENT17';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga04248ecdb3aac0efecfbc223b2825234';
        func-mem-ref-line = '788';
        func-mem-ref-name = 'CSR_MHPMEVENT18';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga7e9fd10959094ccdb2b39849d4f212ae';
        func-mem-ref-line = '789';
        func-mem-ref-name = 'CSR_MHPMEVENT19';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga13974efd9157cf121ae2120665581f85';
        func-mem-ref-line = '790';
        func-mem-ref-name = 'CSR_MHPMEVENT20';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga4eb02f09ac37938aa2d02d45055dbd6d';
        func-mem-ref-line = '791';
        func-mem-ref-name = 'CSR_MHPMEVENT21';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaef9531dd9a69b3954f4f190416e3ff3a';
        func-mem-ref-line = '792';
        func-mem-ref-name = 'CSR_MHPMEVENT22';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gafd99ce5c3b4ced37a6b5033ad6d122dc';
        func-mem-ref-line = '793';
        func-mem-ref-name = 'CSR_MHPMEVENT23';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga28b1616c2743a2f9e3aa758ddeb40ad9';
        func-mem-ref-line = '794';
        func-mem-ref-name = 'CSR_MHPMEVENT24';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gacd3ce65244335f6031e43511889ebb24';
        func-mem-ref-line = '795';
        func-mem-ref-name = 'CSR_MHPMEVENT25';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga49d6c659bd31caa0940d6bccfe6cf690';
        func-mem-ref-line = '796';
        func-mem-ref-name = 'CSR_MHPMEVENT26';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga68721e96a48b16f479ed3b3d3f49f503';
        func-mem-ref-line = '797';
        func-mem-ref-name = 'CSR_MHPMEVENT27';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaffa9684a64c5f062c3021c3cdbabfd51';
        func-mem-ref-line = '798';
        func-mem-ref-name = 'CSR_MHPMEVENT28';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga03c74342e3b565bab5d4e9a2d24bc4c2';
        func-mem-ref-line = '799';
        func-mem-ref-name = 'CSR_MHPMEVENT29';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga5c0638be852bb8fe266552e903e5d086';
        func-mem-ref-line = '773';
        func-mem-ref-name = 'CSR_MHPMEVENT3';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaf2942b3e343ffa1e98ef0c4e66a5c2cb';
        func-mem-ref-line = '800';
        func-mem-ref-name = 'CSR_MHPMEVENT30';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga05fceefba02c81fb7a391a39335b22b0';
        func-mem-ref-line = '801';
        func-mem-ref-name = 'CSR_MHPMEVENT31';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga938f602cf4785d7063da6c853c051c78';
        func-mem-ref-line = '774';
        func-mem-ref-name = 'CSR_MHPMEVENT4';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga15162dd8d541a809e6fbeef1ed01d09a';
        func-mem-ref-line = '775';
        func-mem-ref-name = 'CSR_MHPMEVENT5';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga0185093eb5946c8137708e21916dc65e';
        func-mem-ref-line = '776';
        func-mem-ref-name = 'CSR_MHPMEVENT6';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaacfba0d92c494d8e83a7e13f183ebf2f';
        func-mem-ref-line = '777';
        func-mem-ref-name = 'CSR_MHPMEVENT7';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaa64bbdd12c51cc1bba742dac6dc4fd59';
        func-mem-ref-line = '778';
        func-mem-ref-name = 'CSR_MHPMEVENT8';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga177a9b634120f0f0eb54e0469970d9c4';
        func-mem-ref-line = '779';
        func-mem-ref-name = 'CSR_MHPMEVENT9';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga19a00a72927b46426db73dc8138e1958';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__get_hpm_event';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'idx';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '1577';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get event for selected high performance monitor event.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param [in]    idx     HPMEVENTx CSR index(3-31)
@param [in]    event   HPMEVENTx Register value to set
\ilinebr\ilinebr 
Get high performance monitor event register value
\return               HPMEVENTx Register value
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '642';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaf45e26868117973a085e36d7eff5450e';
        func-mem-ref-line = '780';
        func-mem-ref-name = 'CSR_MHPMEVENT10';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga92f0189e5bd365e0841d4e940873bb0e';
        func-mem-ref-line = '781';
        func-mem-ref-name = 'CSR_MHPMEVENT11';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gac3be9181730b41f7569d3a02c0678476';
        func-mem-ref-line = '782';
        func-mem-ref-name = 'CSR_MHPMEVENT12';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga1bdcead9d6986e83ca841b77f1415221';
        func-mem-ref-line = '783';
        func-mem-ref-name = 'CSR_MHPMEVENT13';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga6402b2179f54e39374218708378ecb18';
        func-mem-ref-line = '784';
        func-mem-ref-name = 'CSR_MHPMEVENT14';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga88a2a649e6aa85e22c858ebfd4a66c90';
        func-mem-ref-line = '785';
        func-mem-ref-name = 'CSR_MHPMEVENT15';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga249efb1593f74ed9766c736e61355339';
        func-mem-ref-line = '786';
        func-mem-ref-name = 'CSR_MHPMEVENT16';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga09f2b4ed516486729cb6db6086dd6ba6';
        func-mem-ref-line = '787';
        func-mem-ref-name = 'CSR_MHPMEVENT17';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga04248ecdb3aac0efecfbc223b2825234';
        func-mem-ref-line = '788';
        func-mem-ref-name = 'CSR_MHPMEVENT18';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga7e9fd10959094ccdb2b39849d4f212ae';
        func-mem-ref-line = '789';
        func-mem-ref-name = 'CSR_MHPMEVENT19';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga13974efd9157cf121ae2120665581f85';
        func-mem-ref-line = '790';
        func-mem-ref-name = 'CSR_MHPMEVENT20';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga4eb02f09ac37938aa2d02d45055dbd6d';
        func-mem-ref-line = '791';
        func-mem-ref-name = 'CSR_MHPMEVENT21';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaef9531dd9a69b3954f4f190416e3ff3a';
        func-mem-ref-line = '792';
        func-mem-ref-name = 'CSR_MHPMEVENT22';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gafd99ce5c3b4ced37a6b5033ad6d122dc';
        func-mem-ref-line = '793';
        func-mem-ref-name = 'CSR_MHPMEVENT23';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga28b1616c2743a2f9e3aa758ddeb40ad9';
        func-mem-ref-line = '794';
        func-mem-ref-name = 'CSR_MHPMEVENT24';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gacd3ce65244335f6031e43511889ebb24';
        func-mem-ref-line = '795';
        func-mem-ref-name = 'CSR_MHPMEVENT25';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga49d6c659bd31caa0940d6bccfe6cf690';
        func-mem-ref-line = '796';
        func-mem-ref-name = 'CSR_MHPMEVENT26';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga68721e96a48b16f479ed3b3d3f49f503';
        func-mem-ref-line = '797';
        func-mem-ref-name = 'CSR_MHPMEVENT27';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaffa9684a64c5f062c3021c3cdbabfd51';
        func-mem-ref-line = '798';
        func-mem-ref-name = 'CSR_MHPMEVENT28';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga03c74342e3b565bab5d4e9a2d24bc4c2';
        func-mem-ref-line = '799';
        func-mem-ref-name = 'CSR_MHPMEVENT29';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga5c0638be852bb8fe266552e903e5d086';
        func-mem-ref-line = '773';
        func-mem-ref-name = 'CSR_MHPMEVENT3';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaf2942b3e343ffa1e98ef0c4e66a5c2cb';
        func-mem-ref-line = '800';
        func-mem-ref-name = 'CSR_MHPMEVENT30';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga05fceefba02c81fb7a391a39335b22b0';
        func-mem-ref-line = '801';
        func-mem-ref-name = 'CSR_MHPMEVENT31';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga938f602cf4785d7063da6c853c051c78';
        func-mem-ref-line = '774';
        func-mem-ref-name = 'CSR_MHPMEVENT4';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga15162dd8d541a809e6fbeef1ed01d09a';
        func-mem-ref-line = '775';
        func-mem-ref-name = 'CSR_MHPMEVENT5';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga0185093eb5946c8137708e21916dc65e';
        func-mem-ref-line = '776';
        func-mem-ref-name = 'CSR_MHPMEVENT6';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaacfba0d92c494d8e83a7e13f183ebf2f';
        func-mem-ref-line = '777';
        func-mem-ref-name = 'CSR_MHPMEVENT7';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaa64bbdd12c51cc1bba742dac6dc4fd59';
        func-mem-ref-line = '778';
        func-mem-ref-name = 'CSR_MHPMEVENT8';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga177a9b634120f0f0eb54e0469970d9c4';
        func-mem-ref-line = '779';
        func-mem-ref-name = 'CSR_MHPMEVENT9';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1gacb51eaf168bb0f0176879ada656a47a8';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__set_hpm_counter';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'idx';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint64_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'value';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '1620';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set value for selected high performance monitor counter.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param [in]    idx     HPMCOUNTERx CSR index(3-31)
@param [in]    value   HPMCOUNTERx Register value to set
\ilinebr\ilinebr 
Set value for high performance monitor couner register
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gab595d3f65afc6cc114e9441a79a72eb5';
        func-mem-ref-line = '751';
        func-mem-ref-name = 'CSR_MHPMCOUNTER10';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga3f9e5f23fba4ba95afe9062e6d0223a7';
        func-mem-ref-line = '892';
        func-mem-ref-name = 'CSR_MHPMCOUNTER10H';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaa6c748eba850b6d58630a718f9e01b82';
        func-mem-ref-line = '752';
        func-mem-ref-name = 'CSR_MHPMCOUNTER11';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga4996bb6dff4a8a8fba71fbbb32b24265';
        func-mem-ref-line = '893';
        func-mem-ref-name = 'CSR_MHPMCOUNTER11H';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga76832c0780249855bcc916fe79e420b0';
        func-mem-ref-line = '753';
        func-mem-ref-name = 'CSR_MHPMCOUNTER12';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga4d7f86d7ae204e3b66e0613c62a9fc31';
        func-mem-ref-line = '894';
        func-mem-ref-name = 'CSR_MHPMCOUNTER12H';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gae389f784655a09fba7f6ec2899b70215';
        func-mem-ref-line = '754';
        func-mem-ref-name = 'CSR_MHPMCOUNTER13';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gacd5ef2cf1d55e5c3fcbb52775c7cd477';
        func-mem-ref-line = '895';
        func-mem-ref-name = 'CSR_MHPMCOUNTER13H';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga3e2db0c2ff1141b64d8a56c1a31b77da';
        func-mem-ref-line = '755';
        func-mem-ref-name = 'CSR_MHPMCOUNTER14';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gab67d71859f9a6e6f8a5e451202c56cb2';
        func-mem-ref-line = '896';
        func-mem-ref-name = 'CSR_MHPMCOUNTER14H';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gadfd273016afeb9771172c9cbeb9887cb';
        func-mem-ref-line = '756';
        func-mem-ref-name = 'CSR_MHPMCOUNTER15';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gab017401b380bbcdada167739e3919fcd';
        func-mem-ref-line = '897';
        func-mem-ref-name = 'CSR_MHPMCOUNTER15H';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga0b418296b63cdfe99dd9507cc778d14d';
        func-mem-ref-line = '757';
        func-mem-ref-name = 'CSR_MHPMCOUNTER16';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaf6ea9d5fb6d713634806841349668001';
        func-mem-ref-line = '898';
        func-mem-ref-name = 'CSR_MHPMCOUNTER16H';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaa67f519b1e39b1868822afe663f497fb';
        func-mem-ref-line = '758';
        func-mem-ref-name = 'CSR_MHPMCOUNTER17';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga05f60a41153dd6f018f5d04d3b3b63cd';
        func-mem-ref-line = '899';
        func-mem-ref-name = 'CSR_MHPMCOUNTER17H';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gacb72065967f51ecdd5a22122d572bb43';
        func-mem-ref-line = '759';
        func-mem-ref-name = 'CSR_MHPMCOUNTER18';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga1c58c573e08d2a34dfe351f176d06453';
        func-mem-ref-line = '900';
        func-mem-ref-name = 'CSR_MHPMCOUNTER18H';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gafd2f303ac1c97e4b17b4bdb6dae67a9d';
        func-mem-ref-line = '760';
        func-mem-ref-name = 'CSR_MHPMCOUNTER19';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaf5cfdbc7dae21c267f94defc1e3a1555';
        func-mem-ref-line = '901';
        func-mem-ref-name = 'CSR_MHPMCOUNTER19H';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga161acddb79ddb855b1656fe1df53a2c5';
        func-mem-ref-line = '761';
        func-mem-ref-name = 'CSR_MHPMCOUNTER20';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga76e93d1d9471f643e3143697c6b707f1';
        func-mem-ref-line = '902';
        func-mem-ref-name = 'CSR_MHPMCOUNTER20H';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga31a807d6ee1b32481ca97966c92e65ef';
        func-mem-ref-line = '762';
        func-mem-ref-name = 'CSR_MHPMCOUNTER21';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga1e0e9a36456b7da7b88093c83dd5a034';
        func-mem-ref-line = '903';
        func-mem-ref-name = 'CSR_MHPMCOUNTER21H';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gae1cb810c77b3327c2b1e779fb7124ca1';
        func-mem-ref-line = '763';
        func-mem-ref-name = 'CSR_MHPMCOUNTER22';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaf39358f2113b1786aafa46fa377efe02';
        func-mem-ref-line = '904';
        func-mem-ref-name = 'CSR_MHPMCOUNTER22H';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gad4027543fbea60925a8176cf89d3c7cb';
        func-mem-ref-line = '764';
        func-mem-ref-name = 'CSR_MHPMCOUNTER23';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaa4611c3b746127c7d163c77c795a1284';
        func-mem-ref-line = '905';
        func-mem-ref-name = 'CSR_MHPMCOUNTER23H';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gad7959c95f4f7ecf46f5cb51fe107f472';
        func-mem-ref-line = '765';
        func-mem-ref-name = 'CSR_MHPMCOUNTER24';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga693b26559f45e12a02b4e0c3c30895f7';
        func-mem-ref-line = '906';
        func-mem-ref-name = 'CSR_MHPMCOUNTER24H';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga15fe826bd77b6a1629dbae680a88ae48';
        func-mem-ref-line = '766';
        func-mem-ref-name = 'CSR_MHPMCOUNTER25';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga553f8532cccee7b82a78ec77abc99291';
        func-mem-ref-line = '907';
        func-mem-ref-name = 'CSR_MHPMCOUNTER25H';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga3dfea6cfc090a5e550891fdab8c0528b';
        func-mem-ref-line = '767';
        func-mem-ref-name = 'CSR_MHPMCOUNTER26';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga5d702fc0207d53d7b5a04c83831a1f93';
        func-mem-ref-line = '908';
        func-mem-ref-name = 'CSR_MHPMCOUNTER26H';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaca3e84b0ed73b0953076df2f499ccb11';
        func-mem-ref-line = '768';
        func-mem-ref-name = 'CSR_MHPMCOUNTER27';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga13b74054c104d2cb7ee55257d1a812cf';
        func-mem-ref-line = '909';
        func-mem-ref-name = 'CSR_MHPMCOUNTER27H';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga18303fb4cc48e05ab7e437e44eafe039';
        func-mem-ref-line = '769';
        func-mem-ref-name = 'CSR_MHPMCOUNTER28';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga2fab81807863c7cd55737ab7a1b525f6';
        func-mem-ref-line = '910';
        func-mem-ref-name = 'CSR_MHPMCOUNTER28H';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaba156c344a498a4297a0cda3c0eba8e0';
        func-mem-ref-line = '770';
        func-mem-ref-name = 'CSR_MHPMCOUNTER29';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga3b046d583c1f3e2f2f55c3b4d176598a';
        func-mem-ref-line = '911';
        func-mem-ref-name = 'CSR_MHPMCOUNTER29H';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gab4ecf0c0a94e6890a7f66b24a3d90570';
        func-mem-ref-line = '744';
        func-mem-ref-name = 'CSR_MHPMCOUNTER3';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gae87e12f28b2b84e3356cf2edb4995ddd';
        func-mem-ref-line = '771';
        func-mem-ref-name = 'CSR_MHPMCOUNTER30';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaf9fdd0098699ae5c0b46405a7824795a';
        func-mem-ref-line = '912';
        func-mem-ref-name = 'CSR_MHPMCOUNTER30H';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga19cf5f645d0ecfdaddabd24f3d24fad0';
        func-mem-ref-line = '772';
        func-mem-ref-name = 'CSR_MHPMCOUNTER31';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga943048489f909d6abba06c7fd38075bd';
        func-mem-ref-line = '913';
        func-mem-ref-name = 'CSR_MHPMCOUNTER31H';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga723ef168d1e7ffe66875303075956376';
        func-mem-ref-line = '885';
        func-mem-ref-name = 'CSR_MHPMCOUNTER3H';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaba211e449cb5c1f19d356d6aae77fed6';
        func-mem-ref-line = '745';
        func-mem-ref-name = 'CSR_MHPMCOUNTER4';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gad31a1402ff7146c42b2018c35f91fff8';
        func-mem-ref-line = '886';
        func-mem-ref-name = 'CSR_MHPMCOUNTER4H';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga49744f82c2fd9ba5952bee02fee31d4c';
        func-mem-ref-line = '746';
        func-mem-ref-name = 'CSR_MHPMCOUNTER5';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga60c30dce15b7a2be53a146006b555e89';
        func-mem-ref-line = '887';
        func-mem-ref-name = 'CSR_MHPMCOUNTER5H';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga44bebd12dfb75d1230904599bacfd084';
        func-mem-ref-line = '747';
        func-mem-ref-name = 'CSR_MHPMCOUNTER6';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga9e13742a1cdd2859c114d53e957d1479';
        func-mem-ref-line = '888';
        func-mem-ref-name = 'CSR_MHPMCOUNTER6H';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga33e5707deb3a7dc9e1de6b3f272ba482';
        func-mem-ref-line = '748';
        func-mem-ref-name = 'CSR_MHPMCOUNTER7';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga12c3fe1c5311dfddb62fc22f974979a5';
        func-mem-ref-line = '889';
        func-mem-ref-name = 'CSR_MHPMCOUNTER7H';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga947ebb26a8cedc08182e1dd1b12a5f52';
        func-mem-ref-line = '749';
        func-mem-ref-name = 'CSR_MHPMCOUNTER8';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga70fcf0b335621e50d6f717658c502ab7';
        func-mem-ref-line = '890';
        func-mem-ref-name = 'CSR_MHPMCOUNTER8H';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga96af9e0956e30a5c177526d32dec3da2';
        func-mem-ref-line = '750';
        func-mem-ref-name = 'CSR_MHPMCOUNTER9';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga33e415199dbfe9bceb11b02fd05f05e2';
        func-mem-ref-line = '891';
        func-mem-ref-name = 'CSR_MHPMCOUNTER9H';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga2878ee5f411422141d9f22192a2e81a7';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint64_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__get_hpm_counter';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'idx';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '1756';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get value of selected high performance monitor counter.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param [in]    idx     HPMCOUNTERx CSR index(3-31)
\ilinebr\ilinebr 
Get high performance monitor counter register value
\return               HPMCOUNTERx Register value
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga0d524220141962c60352cfe0a219bdb4';
        func-mem-ref-line = '1058';
        func-mem-ref-name = '__get_rv_cycle';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga0755f3835c1d5788f99547c185dab2d2';
        func-mem-ref-line = '1102';
        func-mem-ref-name = '__get_rv_instret';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '642';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gab595d3f65afc6cc114e9441a79a72eb5';
        func-mem-ref-line = '751';
        func-mem-ref-name = 'CSR_MHPMCOUNTER10';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga3f9e5f23fba4ba95afe9062e6d0223a7';
        func-mem-ref-line = '892';
        func-mem-ref-name = 'CSR_MHPMCOUNTER10H';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaa6c748eba850b6d58630a718f9e01b82';
        func-mem-ref-line = '752';
        func-mem-ref-name = 'CSR_MHPMCOUNTER11';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga4996bb6dff4a8a8fba71fbbb32b24265';
        func-mem-ref-line = '893';
        func-mem-ref-name = 'CSR_MHPMCOUNTER11H';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga76832c0780249855bcc916fe79e420b0';
        func-mem-ref-line = '753';
        func-mem-ref-name = 'CSR_MHPMCOUNTER12';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga4d7f86d7ae204e3b66e0613c62a9fc31';
        func-mem-ref-line = '894';
        func-mem-ref-name = 'CSR_MHPMCOUNTER12H';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gae389f784655a09fba7f6ec2899b70215';
        func-mem-ref-line = '754';
        func-mem-ref-name = 'CSR_MHPMCOUNTER13';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gacd5ef2cf1d55e5c3fcbb52775c7cd477';
        func-mem-ref-line = '895';
        func-mem-ref-name = 'CSR_MHPMCOUNTER13H';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga3e2db0c2ff1141b64d8a56c1a31b77da';
        func-mem-ref-line = '755';
        func-mem-ref-name = 'CSR_MHPMCOUNTER14';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gab67d71859f9a6e6f8a5e451202c56cb2';
        func-mem-ref-line = '896';
        func-mem-ref-name = 'CSR_MHPMCOUNTER14H';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gadfd273016afeb9771172c9cbeb9887cb';
        func-mem-ref-line = '756';
        func-mem-ref-name = 'CSR_MHPMCOUNTER15';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gab017401b380bbcdada167739e3919fcd';
        func-mem-ref-line = '897';
        func-mem-ref-name = 'CSR_MHPMCOUNTER15H';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga0b418296b63cdfe99dd9507cc778d14d';
        func-mem-ref-line = '757';
        func-mem-ref-name = 'CSR_MHPMCOUNTER16';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaf6ea9d5fb6d713634806841349668001';
        func-mem-ref-line = '898';
        func-mem-ref-name = 'CSR_MHPMCOUNTER16H';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaa67f519b1e39b1868822afe663f497fb';
        func-mem-ref-line = '758';
        func-mem-ref-name = 'CSR_MHPMCOUNTER17';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga05f60a41153dd6f018f5d04d3b3b63cd';
        func-mem-ref-line = '899';
        func-mem-ref-name = 'CSR_MHPMCOUNTER17H';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gacb72065967f51ecdd5a22122d572bb43';
        func-mem-ref-line = '759';
        func-mem-ref-name = 'CSR_MHPMCOUNTER18';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga1c58c573e08d2a34dfe351f176d06453';
        func-mem-ref-line = '900';
        func-mem-ref-name = 'CSR_MHPMCOUNTER18H';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gafd2f303ac1c97e4b17b4bdb6dae67a9d';
        func-mem-ref-line = '760';
        func-mem-ref-name = 'CSR_MHPMCOUNTER19';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaf5cfdbc7dae21c267f94defc1e3a1555';
        func-mem-ref-line = '901';
        func-mem-ref-name = 'CSR_MHPMCOUNTER19H';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga161acddb79ddb855b1656fe1df53a2c5';
        func-mem-ref-line = '761';
        func-mem-ref-name = 'CSR_MHPMCOUNTER20';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga76e93d1d9471f643e3143697c6b707f1';
        func-mem-ref-line = '902';
        func-mem-ref-name = 'CSR_MHPMCOUNTER20H';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga31a807d6ee1b32481ca97966c92e65ef';
        func-mem-ref-line = '762';
        func-mem-ref-name = 'CSR_MHPMCOUNTER21';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga1e0e9a36456b7da7b88093c83dd5a034';
        func-mem-ref-line = '903';
        func-mem-ref-name = 'CSR_MHPMCOUNTER21H';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gae1cb810c77b3327c2b1e779fb7124ca1';
        func-mem-ref-line = '763';
        func-mem-ref-name = 'CSR_MHPMCOUNTER22';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaf39358f2113b1786aafa46fa377efe02';
        func-mem-ref-line = '904';
        func-mem-ref-name = 'CSR_MHPMCOUNTER22H';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gad4027543fbea60925a8176cf89d3c7cb';
        func-mem-ref-line = '764';
        func-mem-ref-name = 'CSR_MHPMCOUNTER23';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaa4611c3b746127c7d163c77c795a1284';
        func-mem-ref-line = '905';
        func-mem-ref-name = 'CSR_MHPMCOUNTER23H';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gad7959c95f4f7ecf46f5cb51fe107f472';
        func-mem-ref-line = '765';
        func-mem-ref-name = 'CSR_MHPMCOUNTER24';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga693b26559f45e12a02b4e0c3c30895f7';
        func-mem-ref-line = '906';
        func-mem-ref-name = 'CSR_MHPMCOUNTER24H';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga15fe826bd77b6a1629dbae680a88ae48';
        func-mem-ref-line = '766';
        func-mem-ref-name = 'CSR_MHPMCOUNTER25';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga553f8532cccee7b82a78ec77abc99291';
        func-mem-ref-line = '907';
        func-mem-ref-name = 'CSR_MHPMCOUNTER25H';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga3dfea6cfc090a5e550891fdab8c0528b';
        func-mem-ref-line = '767';
        func-mem-ref-name = 'CSR_MHPMCOUNTER26';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga5d702fc0207d53d7b5a04c83831a1f93';
        func-mem-ref-line = '908';
        func-mem-ref-name = 'CSR_MHPMCOUNTER26H';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaca3e84b0ed73b0953076df2f499ccb11';
        func-mem-ref-line = '768';
        func-mem-ref-name = 'CSR_MHPMCOUNTER27';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga13b74054c104d2cb7ee55257d1a812cf';
        func-mem-ref-line = '909';
        func-mem-ref-name = 'CSR_MHPMCOUNTER27H';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga18303fb4cc48e05ab7e437e44eafe039';
        func-mem-ref-line = '769';
        func-mem-ref-name = 'CSR_MHPMCOUNTER28';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga2fab81807863c7cd55737ab7a1b525f6';
        func-mem-ref-line = '910';
        func-mem-ref-name = 'CSR_MHPMCOUNTER28H';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaba156c344a498a4297a0cda3c0eba8e0';
        func-mem-ref-line = '770';
        func-mem-ref-name = 'CSR_MHPMCOUNTER29';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga3b046d583c1f3e2f2f55c3b4d176598a';
        func-mem-ref-line = '911';
        func-mem-ref-name = 'CSR_MHPMCOUNTER29H';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gab4ecf0c0a94e6890a7f66b24a3d90570';
        func-mem-ref-line = '744';
        func-mem-ref-name = 'CSR_MHPMCOUNTER3';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gae87e12f28b2b84e3356cf2edb4995ddd';
        func-mem-ref-line = '771';
        func-mem-ref-name = 'CSR_MHPMCOUNTER30';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaf9fdd0098699ae5c0b46405a7824795a';
        func-mem-ref-line = '912';
        func-mem-ref-name = 'CSR_MHPMCOUNTER30H';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga19cf5f645d0ecfdaddabd24f3d24fad0';
        func-mem-ref-line = '772';
        func-mem-ref-name = 'CSR_MHPMCOUNTER31';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga943048489f909d6abba06c7fd38075bd';
        func-mem-ref-line = '913';
        func-mem-ref-name = 'CSR_MHPMCOUNTER31H';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga723ef168d1e7ffe66875303075956376';
        func-mem-ref-line = '885';
        func-mem-ref-name = 'CSR_MHPMCOUNTER3H';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaba211e449cb5c1f19d356d6aae77fed6';
        func-mem-ref-line = '745';
        func-mem-ref-name = 'CSR_MHPMCOUNTER4';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gad31a1402ff7146c42b2018c35f91fff8';
        func-mem-ref-line = '886';
        func-mem-ref-name = 'CSR_MHPMCOUNTER4H';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga49744f82c2fd9ba5952bee02fee31d4c';
        func-mem-ref-line = '746';
        func-mem-ref-name = 'CSR_MHPMCOUNTER5';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga60c30dce15b7a2be53a146006b555e89';
        func-mem-ref-line = '887';
        func-mem-ref-name = 'CSR_MHPMCOUNTER5H';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga44bebd12dfb75d1230904599bacfd084';
        func-mem-ref-line = '747';
        func-mem-ref-name = 'CSR_MHPMCOUNTER6';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga9e13742a1cdd2859c114d53e957d1479';
        func-mem-ref-line = '888';
        func-mem-ref-name = 'CSR_MHPMCOUNTER6H';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga33e5707deb3a7dc9e1de6b3f272ba482';
        func-mem-ref-line = '748';
        func-mem-ref-name = 'CSR_MHPMCOUNTER7';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga12c3fe1c5311dfddb62fc22f974979a5';
        func-mem-ref-line = '889';
        func-mem-ref-name = 'CSR_MHPMCOUNTER7H';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga947ebb26a8cedc08182e1dd1b12a5f52';
        func-mem-ref-line = '749';
        func-mem-ref-name = 'CSR_MHPMCOUNTER8';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga70fcf0b335621e50d6f717658c502ab7';
        func-mem-ref-line = '890';
        func-mem-ref-name = 'CSR_MHPMCOUNTER8H';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga96af9e0956e30a5c177526d32dec3da2';
        func-mem-ref-line = '750';
        func-mem-ref-name = 'CSR_MHPMCOUNTER9';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga33e415199dbfe9bceb11b02fd05f05e2';
        func-mem-ref-line = '891';
        func-mem-ref-name = 'CSR_MHPMCOUNTER9H';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1gab19152c0245f0d9944681879bfd4c47b';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__read_hpm_counter';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'idx';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '1960';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get value of selected high performance monitor counter.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param [in]    idx     HPMCOUNTERx CSR index(3-31)
\ilinebr\ilinebr 
Get high performance monitor counter register value without high
         32 bits when XLEN=32
\return               HPMCOUNTERx Register value
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gad33b21b25bffd28f91e64e47a8ef650e';
        func-mem-ref-line = '1176';
        func-mem-ref-name = '__read_cycle_csr';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga7907e9d961d4239be0f6bf5d6b6f50c6';
        func-mem-ref-line = '1189';
        func-mem-ref-name = '__read_instret_csr';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '642';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gab595d3f65afc6cc114e9441a79a72eb5';
        func-mem-ref-line = '751';
        func-mem-ref-name = 'CSR_MHPMCOUNTER10';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaa6c748eba850b6d58630a718f9e01b82';
        func-mem-ref-line = '752';
        func-mem-ref-name = 'CSR_MHPMCOUNTER11';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga76832c0780249855bcc916fe79e420b0';
        func-mem-ref-line = '753';
        func-mem-ref-name = 'CSR_MHPMCOUNTER12';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gae389f784655a09fba7f6ec2899b70215';
        func-mem-ref-line = '754';
        func-mem-ref-name = 'CSR_MHPMCOUNTER13';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga3e2db0c2ff1141b64d8a56c1a31b77da';
        func-mem-ref-line = '755';
        func-mem-ref-name = 'CSR_MHPMCOUNTER14';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gadfd273016afeb9771172c9cbeb9887cb';
        func-mem-ref-line = '756';
        func-mem-ref-name = 'CSR_MHPMCOUNTER15';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga0b418296b63cdfe99dd9507cc778d14d';
        func-mem-ref-line = '757';
        func-mem-ref-name = 'CSR_MHPMCOUNTER16';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaa67f519b1e39b1868822afe663f497fb';
        func-mem-ref-line = '758';
        func-mem-ref-name = 'CSR_MHPMCOUNTER17';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gacb72065967f51ecdd5a22122d572bb43';
        func-mem-ref-line = '759';
        func-mem-ref-name = 'CSR_MHPMCOUNTER18';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gafd2f303ac1c97e4b17b4bdb6dae67a9d';
        func-mem-ref-line = '760';
        func-mem-ref-name = 'CSR_MHPMCOUNTER19';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga161acddb79ddb855b1656fe1df53a2c5';
        func-mem-ref-line = '761';
        func-mem-ref-name = 'CSR_MHPMCOUNTER20';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga31a807d6ee1b32481ca97966c92e65ef';
        func-mem-ref-line = '762';
        func-mem-ref-name = 'CSR_MHPMCOUNTER21';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gae1cb810c77b3327c2b1e779fb7124ca1';
        func-mem-ref-line = '763';
        func-mem-ref-name = 'CSR_MHPMCOUNTER22';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gad4027543fbea60925a8176cf89d3c7cb';
        func-mem-ref-line = '764';
        func-mem-ref-name = 'CSR_MHPMCOUNTER23';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gad7959c95f4f7ecf46f5cb51fe107f472';
        func-mem-ref-line = '765';
        func-mem-ref-name = 'CSR_MHPMCOUNTER24';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga15fe826bd77b6a1629dbae680a88ae48';
        func-mem-ref-line = '766';
        func-mem-ref-name = 'CSR_MHPMCOUNTER25';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga3dfea6cfc090a5e550891fdab8c0528b';
        func-mem-ref-line = '767';
        func-mem-ref-name = 'CSR_MHPMCOUNTER26';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaca3e84b0ed73b0953076df2f499ccb11';
        func-mem-ref-line = '768';
        func-mem-ref-name = 'CSR_MHPMCOUNTER27';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga18303fb4cc48e05ab7e437e44eafe039';
        func-mem-ref-line = '769';
        func-mem-ref-name = 'CSR_MHPMCOUNTER28';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaba156c344a498a4297a0cda3c0eba8e0';
        func-mem-ref-line = '770';
        func-mem-ref-name = 'CSR_MHPMCOUNTER29';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gab4ecf0c0a94e6890a7f66b24a3d90570';
        func-mem-ref-line = '744';
        func-mem-ref-name = 'CSR_MHPMCOUNTER3';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gae87e12f28b2b84e3356cf2edb4995ddd';
        func-mem-ref-line = '771';
        func-mem-ref-name = 'CSR_MHPMCOUNTER30';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga19cf5f645d0ecfdaddabd24f3d24fad0';
        func-mem-ref-line = '772';
        func-mem-ref-name = 'CSR_MHPMCOUNTER31';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaba211e449cb5c1f19d356d6aae77fed6';
        func-mem-ref-line = '745';
        func-mem-ref-name = 'CSR_MHPMCOUNTER4';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga49744f82c2fd9ba5952bee02fee31d4c';
        func-mem-ref-line = '746';
        func-mem-ref-name = 'CSR_MHPMCOUNTER5';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga44bebd12dfb75d1230904599bacfd084';
        func-mem-ref-line = '747';
        func-mem-ref-name = 'CSR_MHPMCOUNTER6';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga33e5707deb3a7dc9e1de6b3f272ba482';
        func-mem-ref-line = '748';
        func-mem-ref-name = 'CSR_MHPMCOUNTER7';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga947ebb26a8cedc08182e1dd1b12a5f52';
        func-mem-ref-line = '749';
        func-mem-ref-name = 'CSR_MHPMCOUNTER8';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga96af9e0956e30a5c177526d32dec3da2';
        func-mem-ref-line = '750';
        func-mem-ref-name = 'CSR_MHPMCOUNTER9';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga8d342af8b94b73f0dc85c2c058d8dfb6';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__set_medeleg';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'mask';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '2005';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set exceptions delegation to S mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Set certain exceptions of supervisor mode or user mode
         delegated from machined mode to supervisor mode.
\remarks
         Exception should trigger in supervisor mode or user mode.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gab3139a6af26d85bf8d30330397d4a8c0';
        func-mem-ref-line = '629';
        func-mem-ref-name = 'CSR_MEDELEG';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga56fc20f71b7713bd0933ac272a0f8c79';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__set_mideleg';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'mask';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '2017';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set interrupt delegation to S mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Set certain interrupt of supervisor mode or user mode
         delegated from machined mode to supervisor mode.
\remarks
         interrupt should trigger in supervisor mode or user mode.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gae447b7b078204874a2606d32097e017a';
        func-mem-ref-line = '630';
        func-mem-ref-name = 'CSR_MIDELEG';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga5b4c34e720fb0c9e939540333dd640e6';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__FENCE_I';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '2040';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Fence.i Instruction.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
The FENCE.I instruction is used to synchronize the instruction
and data streams.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga2e80049df57b285d4dd43454377c0845';
        func-mem-ref-line = '769';
        func-mem-ref-name = '__ECLIC_SetVector';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gac0167f1dee592e0950b0ea4e1ea47e46';
        func-mem-ref-line = '1176';
        func-mem-ref-name = '__ECLIC_SetVector_S';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'system__Device_8c_1gad13ba247efe59bbe2b6004d9bd0f10db';
        func-mem-ref-line = '1324';
        func-mem-ref-name = '_premain_init';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga7f225699061594cd9a4d905a39cb9ae8';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint8_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__LB';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
volatile void *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '2074';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Load 8bit value from address (8 bit)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Load 8 bit value.
@param [in]    addr  Address pointer to data
\return              value of type uint8_t at (*addr)
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga08a0019225f8ecc2e0a5bdcefa77ec6f';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint16_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__LH';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
volatile void *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '2088';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Load 16bit value from address (16 bit)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Load 16 bit value.
@param [in]    addr  Address pointer to data
\return              value of type uint16_t at (*addr)
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1gaf898279e3db81302391a698214744865';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__LW';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
volatile void *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '2102';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Load 32bit value from address (32 bit)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Load 32 bit value.
@param [in]    addr  Address pointer to data
\return              value of type uint32_t at (*addr)
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cidu_8h_1ga13cce48cc832844b7c6e6c1670fec6be';
        func-mem-ref-line = '161';
        func-mem-ref-name = 'CIDU_GetBroadcastModeStatus';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cidu_8h_1ga7a2eaf87e06963639772f525791fc245';
        func-mem-ref-line = '235';
        func-mem-ref-name = 'CIDU_GetClaimStatus';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cidu_8h_1ga3cf311a569953e97ae258745ee5939f3';
        func-mem-ref-line = '97';
        func-mem-ref-name = 'CIDU_GetCoreNum';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cidu_8h_1ga71bedb5c6d0cff2b2584eaec2cfe65a9';
        func-mem-ref-line = '114';
        func-mem-ref-name = 'CIDU_GetIntNum';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cidu_8h_1ga4d7167adf7d931c90d5166493edd2136';
        func-mem-ref-line = '339';
        func-mem-ref-name = 'CIDU_GetSemaphoreStatus';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cidu_8h_1gaf8f4e2bb0f3d586d663193f2d1aa6cfb';
        func-mem-ref-line = '290';
        func-mem-ref-name = 'CIDU_QueryCoreIntSenderMask';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cidu_8h_1gaad3d84a98774ac6b419cf30f0f778aec';
        func-mem-ref-line = '186';
        func-mem-ref-name = 'CIDU_SetFirstClaimMode';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga8eefb2f5a30b75be91ff43b4be5bd7a8';
        func-mem-ref-line = '259';
        func-mem-ref-name = 'SysTimer_GetHartCompareValue';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga6786ed8d4caa04737daff206de804252';
        func-mem-ref-line = '435';
        func-mem-ref-name = 'SysTimer_GetHartMsipValue';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga39e1bb261100d0867e0706b9623170c5';
        func-mem-ref-line = '627';
        func-mem-ref-name = 'SysTimer_GetHartSsipValue';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga5b454e48769abd7a88c2cc65fe53ac7a';
        func-mem-ref-line = '171';
        func-mem-ref-name = 'SysTimer_GetLoadValue';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga85ee6d049f3b807b7c5f37513f6b95bd';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__SB';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
volatile void *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'val';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '2132';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Write 8bit value to address (8 bit)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Write 8 bit value.
@param [in]    addr  Address pointer to data
@param [in]    val   Value to set
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga10e81b063600f3abb562f7a6efa3aaca';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__SH';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
volatile void *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'val';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '2143';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Write 16bit value to address (16 bit)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Write 16 bit value.
@param [in]    addr  Address pointer to data
@param [in]    val   Value to set
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga9df58a7326fee34b546cae7d7d6e6de3';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__SW';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
volatile void *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'val';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '2154';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Write 32bit value to address (32 bit)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Write 32 bit value.
@param [in]    addr  Address pointer to data
@param [in]    val   Value to set
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cidu_8h_1ga5ae65dd908c2d1d32f75b51b7e9604df';
        func-mem-ref-line = '386';
        func-mem-ref-name = 'CIDU_AcquireSemaphore';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cidu_8h_1gaf46502569035e649d43c156b1e074953';
        func-mem-ref-line = '143';
        func-mem-ref-name = 'CIDU_BroadcastExtInterrupt';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cidu_8h_1gae9dcf1e1edd9c2d022cf5868be2d8414';
        func-mem-ref-line = '309';
        func-mem-ref-name = 'CIDU_ClearInterCoreIntReq';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cidu_8h_1gad10936095a4511f08bc0ec50ee17b7af';
        func-mem-ref-line = '427';
        func-mem-ref-name = 'CIDU_ReleaseSemaphore';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cidu_8h_1gaad4e4acd736bddbc41c58a4bb567132f';
        func-mem-ref-line = '212';
        func-mem-ref-name = 'CIDU_ResetFirstClaimMode';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cidu_8h_1gaad3d84a98774ac6b419cf30f0f778aec';
        func-mem-ref-line = '186';
        func-mem-ref-name = 'CIDU_SetFirstClaimMode';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cidu_8h_1ga81c7f6d07f2860a36698b6d097ba5c47';
        func-mem-ref-line = '271';
        func-mem-ref-name = 'CIDU_TriggerInterCoreInt';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga83ec6487e80a3cb739b8ca3a8fe5cc65';
        func-mem-ref-line = '396';
        func-mem-ref-name = 'SysTimer_ClearHartSWIRQ';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga55fb26c34a274cd093195814d7098299';
        func-mem-ref-line = '589';
        func-mem-ref-name = 'SysTimer_ClearHartSWIRQ_S';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga58daddd80dd220f8d98286d0f9c13163';
        func-mem-ref-line = '780';
        func-mem-ref-name = 'SysTimer_ClearIPI';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga2f5720e1c3c1700f438f7b8640c6fe7e';
        func-mem-ref-line = '705';
        func-mem-ref-name = 'SysTimer_ClearIPI_S';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga43dd8978cd97fc86bbf4c32a39c51899';
        func-mem-ref-line = '768';
        func-mem-ref-name = 'SysTimer_SendIPI';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__timer_8h_1gada2ed50ccf3544deb4acd62e4637f6d1';
        func-mem-ref-line = '693';
        func-mem-ref-name = 'SysTimer_SendIPI_S';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__timer_8h_1gab9fb66405cec7ea36873619c67d7840f';
        func-mem-ref-line = '206';
        func-mem-ref-name = 'SysTimer_SetHartCompareValue';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga9364dd3f609f276e4e1d9e8ca99dcc4e';
        func-mem-ref-line = '473';
        func-mem-ref-name = 'SysTimer_SetHartMsipValue';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga851e2cafb99a02f2f25349d16626b52b';
        func-mem-ref-line = '664';
        func-mem-ref-name = 'SysTimer_SetHartSsipValue';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga0886abb528d78a26909e2d087a668a85';
        func-mem-ref-line = '360';
        func-mem-ref-name = 'SysTimer_SetHartSWIRQ';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga73ecb0abd4458c5fbe2d5b9bcb2d347b';
        func-mem-ref-line = '554';
        func-mem-ref-name = 'SysTimer_SetHartSWIRQ_S';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga08c74ffae27d46218ae11321ff5e1673';
        func-mem-ref-line = '149';
        func-mem-ref-name = 'SysTimer_SetLoadValue';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga8dab656e3251b574311b852efa785109';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__CAS_W';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
volatile uint32_t *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'oldval';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'newval';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '2183';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Compare and Swap 32bit value using LR and SC.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Compare old value with memory, if identical,
store new value in memory. Return the initial value in memory.
Success is indicated by comparing return value with OLD.
memory address, return 0 if successful, otherwise return !0
@param [in]    addr      Address pointer to data, address need to be 4byte aligned
@param [in]    oldval    Old value of the data in address
@param [in]    newval    New value to be stored into the address
\return  return the initial value in memory
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga68f1ebfff49ba330ac04996d3e2b9df8';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__AMOSWAP_W';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
volatile uint32_t *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'newval';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '2207';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Atomic Swap 32bit value into memory.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Atomically swap new 32bit value into memory using amoswap.d.
@param [in]    addr      Address pointer to data, address need to be 4byte aligned
@param [in]    newval    New value to be stored into the address
\return  return the original value in memory
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1gac12ad95ec020f1c2c83c46231468a40e';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE int32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__AMOADD_W';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
volatile int32_t *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'value';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '2223';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Atomic Add with 32bit value.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Atomically ADD 32bit value with value in memory using amoadd.d.
@param [in]    addr   Address pointer to data, address need to be 4byte aligned
@param [in]    value  value to be ADDed
\return  return memory value + add value
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga927482a006985e82d90512f19ea68f67';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE int32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__AMOAND_W';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
volatile int32_t *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'value';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '2239';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Atomic And with 32bit value.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Atomically AND 32bit value with value in memory using amoand.d.
@param [in]    addr   Address pointer to data, address need to be 4byte aligned
@param [in]    value  value to be ANDed
\return  return memory value & and value
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1gaa6f71a398756f05bbc1ef4b4a548174f';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE int32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__AMOOR_W';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
volatile int32_t *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'value';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '2255';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Atomic OR with 32bit value.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Atomically OR 32bit value with value in memory using amoor.d.
@param [in]    addr   Address pointer to data, address need to be 4byte aligned
@param [in]    value  value to be ORed
\return  return memory value | and value
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga69a2e79b90f42d82c236fae1aced5c73';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE int32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__AMOXOR_W';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
volatile int32_t *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'value';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '2271';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Atomic XOR with 32bit value.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Atomically XOR 32bit value with value in memory using amoxor.d.
@param [in]    addr   Address pointer to data, address need to be 4byte aligned
@param [in]    value  value to be XORed
\return  return memory value ^ and value
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga75a6dc5418991df25ef66de5e16dbd46';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__AMOMAXU_W';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
volatile uint32_t *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'value';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '2287';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Atomic unsigned MAX with 32bit value.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Atomically unsigned max compare 32bit value with value in memory using amomaxu.d.
@param [in]    addr   Address pointer to data, address need to be 4byte aligned
@param [in]    value  value to be compared
\return  return the bigger value
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga13034a453b85372f85974b178bd3ee6f';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE int32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__AMOMAX_W';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
volatile int32_t *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'value';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '2303';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Atomic signed MAX with 32bit value.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Atomically signed max compare 32bit value with value in memory using amomax.d.
@param [in]    addr   Address pointer to data, address need to be 4byte aligned
@param [in]    value  value to be compared
\return the bigger value
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga75515ac6719d3abca5030cb4fd2f4c2a';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__AMOMINU_W';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
volatile uint32_t *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'value';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '2319';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Atomic unsigned MIN with 32bit value.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Atomically unsigned min compare 32bit value with value in memory using amominu.d.
@param [in]    addr   Address pointer to data, address need to be 4byte aligned
@param [in]    value  value to be compared
\return the smaller value
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1gadd554cdf00f5417208433154e9c9228e';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE int32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__AMOMIN_W';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
volatile int32_t *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'value';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '2335';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Atomic signed MIN with 32bit value.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Atomically signed min compare 32bit value with value in memory using amomin.d.
@param [in]    addr   Address pointer to data, address need to be 4byte aligned
@param [in]    value  value to be compared
\return  the smaller value
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    };
  file-full-name  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
Base core feature API for Nuclei N/NX Core.
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_



_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'core__feature__bitmanip_8h';
  file-name = 'core_feature_bitmanip.h';
  file-full-name  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_bitmanip.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
Bitmanipulation feature API header file for Nuclei N/NX Core.
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_



_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'core__feature__cache_8h';
  file-name = 'core_feature_cache.h';
    define = {
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Cache_1gabf38a15eb94b31efda1bd45aca351911';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CCM_SUEN_SUEN_Msk';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0xFFFFFFFFFFFFFFFFUL)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      define-mem-desc-line = '109';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CSR CCM_SUEN: SUEN Mask.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    };
    enum = {
    enum-member = {
      enum-mem-kind = 'enum';
      enum-mem-id   = 'group__NMSIS__Core__Cache_1ga0a94b900668f476abc0587b061b7afca';
      enum-mem-virt = normal;
      enum-mem-prot = public;
      enum-mem-name = 'CCM_OP_FINFO_Type';
      enum-mem-enum = { enum-name = CCM_OP_SUCCESS; enum-value = '= 0x0'; };
      enum-mem-enum = { enum-name = CCM_OP_EXCEED_ERR; enum-value = '= 0x1'; };
      enum-mem-enum = { enum-name = CCM_OP_PERM_CHECK_ERR; enum-value = '= 0x2'; };
      enum-mem-enum = { enum-name = CCM_OP_REFILL_BUS_ERR; enum-value = '= 0x3'; };
      enum-mem-enum = { enum-name = CCM_OP_ECC_ERR; enum-value = '= 0x4'; };
      enum-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      enum-mem-desc-line = '70';
      enum-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Cache CCM Operation Fail Info.
_EnD_oF_dEf_TeXt_;
      enum-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* enum-member */
    enum-member = {
      enum-mem-kind = 'enum';
      enum-mem-id   = 'group__NMSIS__Core__Cache_1ga700ee5ca80d2777b38c6d8c963e4e5a9';
      enum-mem-virt = normal;
      enum-mem-prot = public;
      enum-mem-name = 'CCM_CMD_Type';
      enum-mem-enum = { enum-name = CCM_DC_INVAL; enum-value = '= 0x0'; };
      enum-mem-enum = { enum-name = CCM_DC_WB; enum-value = '= 0x1'; };
      enum-mem-enum = { enum-name = CCM_DC_WBINVAL; enum-value = '= 0x2'; };
      enum-mem-enum = { enum-name = CCM_DC_LOCK; enum-value = '= 0x3'; };
      enum-mem-enum = { enum-name = CCM_DC_UNLOCK; enum-value = '= 0x4'; };
      enum-mem-enum = { enum-name = CCM_DC_WBINVAL_ALL; enum-value = '= 0x6'; };
      enum-mem-enum = { enum-name = CCM_DC_WB_ALL; enum-value = '= 0x7'; };
      enum-mem-enum = { enum-name = CCM_DC_INVAL_ALL; enum-value = '= 0x17'; };
      enum-mem-enum = { enum-name = CCM_IC_INVAL; enum-value = '= 0x8'; };
      enum-mem-enum = { enum-name = CCM_IC_LOCK; enum-value = '= 0xb'; };
      enum-mem-enum = { enum-name = CCM_IC_UNLOCK; enum-value = '= 0xc'; };
      enum-mem-enum = { enum-name = CCM_IC_INVAL_ALL; enum-value = '= 0xd'; };
      enum-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      enum-mem-desc-line = '81';
      enum-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Cache CCM Command Types.
_EnD_oF_dEf_TeXt_;
      enum-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* enum-member */
    };
    func = {
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__Cache_1gae688fd9a26b86cd4bd8b78242b3f2e43';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'EnableSUCCM';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '123';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Enable CCM operation in Supervisor/User Mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function enable CCM operation in Supervisor/User Mode.
If enabled, CCM operations in supervisor/user mode will
be allowed.
\remarks
- This function can be called in M-Mode only.
\sa
- \ref DisableSUCCM
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gafdbd9b5a14b44913675d0fa73ca6716f';
        func-mem-ref-line = '697';
        func-mem-ref-name = '__RV_CSR_SET';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gabf38a15eb94b31efda1bd45aca351911';
        func-mem-ref-line = '109';
        func-mem-ref-name = 'CCM_SUEN_SUEN_Msk';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga59e75e3573eb567358b1037a7076de37';
        func-mem-ref-line = '1079';
        func-mem-ref-name = 'CSR_CCM_SUEN';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'system__Device_8c_1gad13ba247efe59bbe2b6004d9bd0f10db';
        func-mem-ref-line = '1324';
        func-mem-ref-name = '_premain_init';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__Cache_1ga9392351a7d8e9e80be4b87c4860be086';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'DisableSUCCM';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '139';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Disable CCM operation in Supervisor/User Mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function disable CCM operation in Supervisor/User Mode.
If not enabled, CCM operations in supervisor/user mode will
trigger a <em>illegal intruction</em> exception.
\remarks
- This function can be called in M-Mode only.
\sa
- \ref EnableSUCCM
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga14cf0513f6b576fcd1ff700b08f65543';
        func-mem-ref-line = '734';
        func-mem-ref-name = '__RV_CSR_CLEAR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gabf38a15eb94b31efda1bd45aca351911';
        func-mem-ref-line = '109';
        func-mem-ref-name = 'CCM_SUEN_SUEN_Msk';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga59e75e3573eb567358b1037a7076de37';
        func-mem-ref-line = '1079';
        func-mem-ref-name = 'CSR_CCM_SUEN';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__Cache_1ga5fb9682e1f64a554b42c5fe7cf6f5aca';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'FlushPipeCCM';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '153';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Flush pipeline after CCM operation.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function is used to flush pipeline after CCM operations
on Cache, it will ensure latest instructions or data can be
seen by pipeline.
\remarks
- This function can be called in M/S/U-Mode only.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga7f214054147ffd229cc1aba320cf8405';
        func-mem-ref-line = '1086';
        func-mem-ref-name = 'CSR_CCM_FPIPE';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cache_8h_1gaba8bcbc1416706a049aff497323118de';
        func-mem-ref-line = '1543';
        func-mem-ref-name = 'MFlushDCache';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga6e607ebf23f9df13ac604418ea9332f4';
        func-mem-ref-line = '974';
        func-mem-ref-name = 'MFlushDCacheLine';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga98d1ed59634ce2ac7618738002d446ec';
        func-mem-ref-line = '993';
        func-mem-ref-name = 'MFlushDCacheLines';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cache_8h_1gaac1b0a2c6dab2434dfbf163f798e75c0';
        func-mem-ref-line = '1591';
        func-mem-ref-name = 'MFlushInvalDCache';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cache_8h_1gad2b9184fe3f7e4d846cf472c32307aff';
        func-mem-ref-line = '1097';
        func-mem-ref-name = 'MFlushInvalDCacheLine';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga526942458f908c5b61c2d80f7cd45959';
        func-mem-ref-line = '1116';
        func-mem-ref-name = 'MFlushInvalDCacheLines';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cache_8h_1gad9b649b63f1853da9d45000de84d9abc';
        func-mem-ref-line = '1493';
        func-mem-ref-name = 'MInvalDCache';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cache_8h_1gab05ba668569d965974d7e4dd7979fdb2';
        func-mem-ref-line = '849';
        func-mem-ref-name = 'MInvalDCacheLine';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga342c670814a4aaced4e1d4aa6fe1d467';
        func-mem-ref-line = '868';
        func-mem-ref-name = 'MInvalDCacheLines';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cache_8h_1gab0d916e064876aea3bf9135283814db1';
        func-mem-ref-line = '683';
        func-mem-ref-name = 'MInvalICache';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cache_8h_1gac9500d4f13d04b2acbfd3538984514c8';
        func-mem-ref-line = '285';
        func-mem-ref-name = 'MInvalICacheLine';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cache_8h_1gafe47347cfa3f8c4a8829c88fa5fdec9b';
        func-mem-ref-line = '304';
        func-mem-ref-name = 'MInvalICacheLines';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga5d2dc4b38fa3332a6c1815aebe3576e7';
        func-mem-ref-line = '1221';
        func-mem-ref-name = 'MLockDCacheLine';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga5ace26b8090ce18c8a7bea96ecdee0fd';
        func-mem-ref-line = '1242';
        func-mem-ref-name = 'MLockDCacheLines';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cache_8h_1gaa0ebecb33755adc5adbc597889194605';
        func-mem-ref-line = '411';
        func-mem-ref-name = 'MLockICacheLine';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga5d12990670c5b36de576bab8d1812d16';
        func-mem-ref-line = '432';
        func-mem-ref-name = 'MLockICacheLines';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cache_8h_1gaecf20dd50e0bf64907c4b57217471062';
        func-mem-ref-line = '1370';
        func-mem-ref-name = 'MUnlockDCacheLine';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga5cf20392aecb5c68913c6329e5d8e5f8';
        func-mem-ref-line = '1389';
        func-mem-ref-name = 'MUnlockDCacheLines';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cache_8h_1gac423a03eaa4afb1c8641c1c9e3097168';
        func-mem-ref-line = '560';
        func-mem-ref-name = 'MUnlockICacheLine';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga7035e12e1a3c7c7730f3211241a8fe90';
        func-mem-ref-line = '579';
        func-mem-ref-name = 'MUnlockICacheLines';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga844d78b425b05a5f461562d7be9df715';
        func-mem-ref-line = '1559';
        func-mem-ref-name = 'SFlushDCache';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga6a5d6a194b8a8248c005fed0f2e3ddba';
        func-mem-ref-line = '1015';
        func-mem-ref-name = 'SFlushDCacheLine';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cache_8h_1gaa490832ced9c60c8cc6afb1e274bb739';
        func-mem-ref-line = '1034';
        func-mem-ref-name = 'SFlushDCacheLines';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga5f1ac4091f16fb18eca22ba850ad5ce9';
        func-mem-ref-line = '1607';
        func-mem-ref-name = 'SFlushInvalDCache';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cache_8h_1gaad6d3fab91ac85ab5c5ebe5fb3f31e9b';
        func-mem-ref-line = '1138';
        func-mem-ref-name = 'SFlushInvalDCacheLine';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga6acb999cfbe40be946c53ec654cdf675';
        func-mem-ref-line = '1157';
        func-mem-ref-name = 'SFlushInvalDCacheLines';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga116d85ad3fcc4e9e80997f704e5d043a';
        func-mem-ref-line = '1509';
        func-mem-ref-name = 'SInvalDCache';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga0fcf63354c7b35c45ec97a99455266a6';
        func-mem-ref-line = '891';
        func-mem-ref-name = 'SInvalDCacheLine';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cache_8h_1gabccfe988e87de3ba1a0db134a2d5647b';
        func-mem-ref-line = '910';
        func-mem-ref-name = 'SInvalDCacheLines';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga25824c725ce4cfd0319c182a8a44c7e3';
        func-mem-ref-line = '699';
        func-mem-ref-name = 'SInvalICache';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga9cfe1f7476be3aa984c926287eceecdf';
        func-mem-ref-line = '327';
        func-mem-ref-name = 'SInvalICacheLine';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga020ff82b548a567037dd0c916b4429d2';
        func-mem-ref-line = '346';
        func-mem-ref-name = 'SInvalICacheLines';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cache_8h_1gad04a1564bd90165809036011a2039762';
        func-mem-ref-line = '1271';
        func-mem-ref-name = 'SLockDCacheLine';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga2de7ab5e569e56c582a4e7eb0aca2a3b';
        func-mem-ref-line = '1292';
        func-mem-ref-name = 'SLockDCacheLines';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga8ac672c482d15a997db8f4acfa6c51f5';
        func-mem-ref-line = '461';
        func-mem-ref-name = 'SLockICacheLine';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cache_8h_1gab179486d73e9a1ce8543d310aa8d1594';
        func-mem-ref-line = '482';
        func-mem-ref-name = 'SLockICacheLines';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cache_8h_1gab7617b03b29b8002363779cf9801b25b';
        func-mem-ref-line = '1411';
        func-mem-ref-name = 'SUnlockDCacheLine';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cache_8h_1gab95aa0a6868dfe1dd920c59de2a1b8d0';
        func-mem-ref-line = '1430';
        func-mem-ref-name = 'SUnlockDCacheLines';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cache_8h_1gaf43b829e002df8fb7563c5eccb4dd9eb';
        func-mem-ref-line = '601';
        func-mem-ref-name = 'SUnlockICacheLine';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga74e29621ab0c803fe474c648d078fe18';
        func-mem-ref-line = '620';
        func-mem-ref-name = 'SUnlockICacheLines';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga0e90fc37ce51b5e6bbf5b75d4c604d94';
        func-mem-ref-line = '1575';
        func-mem-ref-name = 'UFlushDCache';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cache_8h_1gab82f762a057b37fbafe323471d229c85';
        func-mem-ref-line = '1056';
        func-mem-ref-name = 'UFlushDCacheLine';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cache_8h_1gac5233b35e7e33e42e5e45fe1dbdac8c8';
        func-mem-ref-line = '1075';
        func-mem-ref-name = 'UFlushDCacheLines';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga0787776bb202ff85236210d47c3f3893';
        func-mem-ref-line = '1623';
        func-mem-ref-name = 'UFlushInvalDCache';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga531c9b3fe73c04f4ed471ac5e09e16c6';
        func-mem-ref-line = '1179';
        func-mem-ref-name = 'UFlushInvalDCacheLine';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga54f2cea8854f1d1d8d377ce458e07765';
        func-mem-ref-line = '1198';
        func-mem-ref-name = 'UFlushInvalDCacheLines';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cache_8h_1gad9e62828c92a3f299da5468bdd09ab16';
        func-mem-ref-line = '1527';
        func-mem-ref-name = 'UInvalDCache';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cache_8h_1gaea171eac132f42366234f65cd3023480';
        func-mem-ref-line = '933';
        func-mem-ref-name = 'UInvalDCacheLine';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cache_8h_1gac616f2d955d1e1db8699f70304057199';
        func-mem-ref-line = '952';
        func-mem-ref-name = 'UInvalDCacheLines';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga60a04e2fd2a444e04703dcd4a8d38e04';
        func-mem-ref-line = '715';
        func-mem-ref-name = 'UInvalICache';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga4c202208f9f90802445600e637563f3d';
        func-mem-ref-line = '369';
        func-mem-ref-name = 'UInvalICacheLine';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga3f36015dbfc23a155d1ae0fa458388a2';
        func-mem-ref-line = '388';
        func-mem-ref-name = 'UInvalICacheLines';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cache_8h_1gad20886a44092fc702c46eb569039c724';
        func-mem-ref-line = '1321';
        func-mem-ref-name = 'ULockDCacheLine';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga837ef5573c62e529c829d2b5889d11dd';
        func-mem-ref-line = '1342';
        func-mem-ref-name = 'ULockDCacheLines';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga84eb3cf641c1e87655219fec34e49b20';
        func-mem-ref-line = '511';
        func-mem-ref-name = 'ULockICacheLine';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cache_8h_1gaf4b8c625829c4c772b65e5f95f61e659';
        func-mem-ref-line = '532';
        func-mem-ref-name = 'ULockICacheLines';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cache_8h_1gae44d70b1250ef92db399f46119d783a4';
        func-mem-ref-line = '1452';
        func-mem-ref-name = 'UUnlockDCacheLine';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga3c1599397bb47af9542b9478a650f38f';
        func-mem-ref-line = '1471';
        func-mem-ref-name = 'UUnlockDCacheLines';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga1221f6556c800e2172c0cab109a4a31f';
        func-mem-ref-line = '642';
        func-mem-ref-name = 'UUnlockICacheLine';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga48a1fc27f21f185f1e2bf52bf09a83a4';
        func-mem-ref-line = '661';
        func-mem-ref-name = 'UUnlockICacheLines';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__ICache_1ga33f538692ce5743e5c23004d03cba712';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE int32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'ICachePresent';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '178';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Check ICache Unit Present or Not.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function check icache unit present or not via mcfg_info csr
\remarks
- This function might not work for some old nuclei processors
- Please make sure the version of your nuclei processor contain ICACHE bit in mcfg_info
\return 1 if present otherwise 0
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '642';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga7fd083b254f2438fe5cbf9d667468324';
        func-mem-ref-line = '1058';
        func-mem-ref-name = 'CSR_MCFG_INFO';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gade204165b105fd3fdcc50965cb23b83d';
        func-mem-ref-line = '301';
        func-mem-ref-name = 'MCFG_INFO_ICACHE';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'system__Device_8c_1gad13ba247efe59bbe2b6004d9bd0f10db';
        func-mem-ref-line = '1324';
        func-mem-ref-name = '_premain_init';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__ICache_1ga76dfd7aff65a6a7fa91b53dbe44f9ce5';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'EnableICache';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '196';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Enable ICache.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function enable I-Cache
\remarks
- This function can be called in M-Mode only.
- This \ref CSR_MCACHE_CTL register control I Cache enable.
\sa
- \ref DisableICache
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gafdbd9b5a14b44913675d0fa73ca6716f';
        func-mem-ref-line = '697';
        func-mem-ref-name = '__RV_CSR_SET';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga6e79ed96b3346ea75923126b7c4d9d67';
        func-mem-ref-line = '980';
        func-mem-ref-name = 'CSR_MCACHE_CTL';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga1915bfad24b1100506412bd0f3c705e2';
        func-mem-ref-line = '269';
        func-mem-ref-name = 'MCACHE_CTL_IC_EN';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'system__Device_8c_1gad13ba247efe59bbe2b6004d9bd0f10db';
        func-mem-ref-line = '1324';
        func-mem-ref-name = '_premain_init';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__ICache_1ga4a855b01222d0c42d413f168651616e5';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'DisableICache';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '211';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Disable ICache.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function Disable I-Cache
\remarks
- This function can be called in M-Mode only.
- This \ref CSR_MCACHE_CTL register control I Cache enable.
\sa
- \ref EnableICache
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga14cf0513f6b576fcd1ff700b08f65543';
        func-mem-ref-line = '734';
        func-mem-ref-name = '__RV_CSR_CLEAR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga6e79ed96b3346ea75923126b7c4d9d67';
        func-mem-ref-line = '980';
        func-mem-ref-name = 'CSR_MCACHE_CTL';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga1915bfad24b1100506412bd0f3c705e2';
        func-mem-ref-line = '269';
        func-mem-ref-name = 'MCACHE_CTL_IC_EN';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__ICache_1ga9e08e0edd3cc53d2eac99e2202a5bb9a';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'EnableICacheECC';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '226';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Enable ICache ECC.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function enable I-Cache ECC
\remarks
- This function can be called in M-Mode only.
- This \ref CSR_MCACHE_CTL register control I Cache ECC enable.
\sa
- \ref DisableICacheECC
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gafdbd9b5a14b44913675d0fa73ca6716f';
        func-mem-ref-line = '697';
        func-mem-ref-name = '__RV_CSR_SET';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga6e79ed96b3346ea75923126b7c4d9d67';
        func-mem-ref-line = '980';
        func-mem-ref-name = 'CSR_MCACHE_CTL';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gac212acd84f08a26197bc439bc58d5e58';
        func-mem-ref-line = '271';
        func-mem-ref-name = 'MCACHE_CTL_IC_ECC_EN';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__ICache_1gaadad14aacee11913d1e1e599b3f58708';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'DisableICacheECC';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '241';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Disable ICache ECC.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function disable I-Cache ECC
\remarks
- This function can be called in M-Mode only.
- This \ref CSR_MCACHE_CTL register control I Cache ECC enable.
\sa
- \ref EnableICacheECC
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga14cf0513f6b576fcd1ff700b08f65543';
        func-mem-ref-line = '734';
        func-mem-ref-name = '__RV_CSR_CLEAR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga6e79ed96b3346ea75923126b7c4d9d67';
        func-mem-ref-line = '980';
        func-mem-ref-name = 'CSR_MCACHE_CTL';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gac212acd84f08a26197bc439bc58d5e58';
        func-mem-ref-line = '271';
        func-mem-ref-name = 'MCACHE_CTL_IC_ECC_EN';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__ICache_1ga69a3a0ce8c5e4494161991074387162e';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE int32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'GetICacheInfo';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
CacheInfo_Type *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'info';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '257';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get I-Cache Information.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function get I-Cache Information
\remarks
- This function can be called in M-Mode only.
- You can use this function in combination with cache lines operations
\sa
- \ref GetDCacheInfo
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '642';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga3401036463f597de22658714115bed5b';
        func-mem-ref-line = '1056';
        func-mem-ref-name = 'CSR_MICFG_INFO';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1a019a0f2a482a3f2c7cf882a4295ac322';
        func-mem-ref-line = '405';
        func-mem-ref-name = 'CSR_MICFGINFO_Type::d';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1aca857f59d80919532a355a0508a0e236';
        func-mem-ref-line = '100';
        func-mem-ref-name = 'CacheInfo_Type::linesize';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1aa4534ca8d572c6ad46ab5d36fcf4ef8b';
        func-mem-ref-line = '397';
        func-mem-ref-name = 'CSR_MICFGINFO_Type::lsize';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1a2071a4d9337c8db3b55419e531c0f095';
        func-mem-ref-line = '395';
        func-mem-ref-name = 'CSR_MICFGINFO_Type::set';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1a4921aea5a2a5e4527c06cd00e63e4ed5';
        func-mem-ref-line = '102';
        func-mem-ref-name = 'CacheInfo_Type::setperway';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1aead3d43e2bd952914a9b81aacb86b94e';
        func-mem-ref-line = '103';
        func-mem-ref-name = 'CacheInfo_Type::size';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1aff94588787995de0fdbf41a2cee027a7';
        func-mem-ref-line = '396';
        func-mem-ref-name = 'CSR_MICFGINFO_Type::way';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1a963618b4e0fa8b89df750f8170a2a8ed';
        func-mem-ref-line = '101';
        func-mem-ref-name = 'CacheInfo_Type::ways';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__ICache_1gac9500d4f13d04b2acbfd3538984514c8';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'MInvalICacheLine';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '285';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Invalidate one I-Cache line specified by address in M-Mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function unlock and invalidate one I-Cache line specified
by the address.
Command \ref CCM_IC_INVAL is written to CSR \ref CSR_CCM_MCOMMAND.
\remarks
This function must be executed in M-Mode only.
@param [in]    addr    start address to be invalidated
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga683c246c3fdba09511675365a2fa8bd3';
        func-mem-ref-line = '2046';
        func-mem-ref-name = '__RWMB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gga700ee5ca80d2777b38c6d8c963e4e5a9a5fd653735ffce788a11243394e32e316';
        func-mem-ref-line = '90';
        func-mem-ref-name = 'CCM_IC_INVAL';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga4faa0c15728837765ec9aaf28f14c09b';
        func-mem-ref-line = '1076';
        func-mem-ref-name = 'CSR_CCM_MBEGINADDR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga09b6c06fdc71424566c30bad5470c0c1';
        func-mem-ref-line = '1077';
        func-mem-ref-name = 'CSR_CCM_MCOMMAND';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga5fb9682e1f64a554b42c5fe7cf6f5aca';
        func-mem-ref-line = '153';
        func-mem-ref-name = 'FlushPipeCCM';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga2e80049df57b285d4dd43454377c0845';
        func-mem-ref-line = '769';
        func-mem-ref-name = '__ECLIC_SetVector';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__ICache_1gafe47347cfa3f8c4a8829c88fa5fdec9b';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'MInvalICacheLines';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'cnt';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '304';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Invalidate several I-Cache lines specified by address in M-Mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function unlock and invalidate several I-Cache lines specified
by the address and line count.
Command \ref CCM_IC_INVAL is written to CSR \ref CSR_CCM_MCOMMAND.
\remarks
This function must be executed in M-Mode only.
@param [in]    addr    start address to be invalidated
@param [in]    cnt     count of cache lines to be invalidated
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga683c246c3fdba09511675365a2fa8bd3';
        func-mem-ref-line = '2046';
        func-mem-ref-name = '__RWMB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gga700ee5ca80d2777b38c6d8c963e4e5a9a5fd653735ffce788a11243394e32e316';
        func-mem-ref-line = '90';
        func-mem-ref-name = 'CCM_IC_INVAL';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga4faa0c15728837765ec9aaf28f14c09b';
        func-mem-ref-line = '1076';
        func-mem-ref-name = 'CSR_CCM_MBEGINADDR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga09b6c06fdc71424566c30bad5470c0c1';
        func-mem-ref-line = '1077';
        func-mem-ref-name = 'CSR_CCM_MCOMMAND';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga5fb9682e1f64a554b42c5fe7cf6f5aca';
        func-mem-ref-line = '153';
        func-mem-ref-name = 'FlushPipeCCM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__ICache_1ga9cfe1f7476be3aa984c926287eceecdf';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SInvalICacheLine';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '327';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Invalidate one I-Cache line specified by address in S-Mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function unlock and invalidate one I-Cache line specified
by the address.
Command \ref CCM_IC_INVAL is written to CSR \ref CSR_CCM_SCOMMAND.
\remarks
This function must be executed in M/S-Mode only.
@param [in]    addr    start address to be invalidated
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga683c246c3fdba09511675365a2fa8bd3';
        func-mem-ref-line = '2046';
        func-mem-ref-name = '__RWMB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gga700ee5ca80d2777b38c6d8c963e4e5a9a5fd653735ffce788a11243394e32e316';
        func-mem-ref-line = '90';
        func-mem-ref-name = 'CCM_IC_INVAL';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gab508f4dfbd649a25f7eaa8ac5b88a8c0';
        func-mem-ref-line = '1080';
        func-mem-ref-name = 'CSR_CCM_SBEGINADDR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga19b9cf123424b131c5ba30946c54c2fd';
        func-mem-ref-line = '1081';
        func-mem-ref-name = 'CSR_CCM_SCOMMAND';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga5fb9682e1f64a554b42c5fe7cf6f5aca';
        func-mem-ref-line = '153';
        func-mem-ref-name = 'FlushPipeCCM';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gac0167f1dee592e0950b0ea4e1ea47e46';
        func-mem-ref-line = '1176';
        func-mem-ref-name = '__ECLIC_SetVector_S';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__ICache_1ga020ff82b548a567037dd0c916b4429d2';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SInvalICacheLines';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'cnt';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '346';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Invalidate several I-Cache lines specified by address in S-Mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function unlock and invalidate several I-Cache lines specified
by the address and line count.
Command \ref CCM_IC_INVAL is written to CSR \ref CSR_CCM_SCOMMAND.
\remarks
This function must be executed in M/S-Mode only.
@param [in]    addr    start address to be invalidated
@param [in]    cnt     count of cache lines to be invalidated
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga683c246c3fdba09511675365a2fa8bd3';
        func-mem-ref-line = '2046';
        func-mem-ref-name = '__RWMB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gga700ee5ca80d2777b38c6d8c963e4e5a9a5fd653735ffce788a11243394e32e316';
        func-mem-ref-line = '90';
        func-mem-ref-name = 'CCM_IC_INVAL';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gab508f4dfbd649a25f7eaa8ac5b88a8c0';
        func-mem-ref-line = '1080';
        func-mem-ref-name = 'CSR_CCM_SBEGINADDR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga19b9cf123424b131c5ba30946c54c2fd';
        func-mem-ref-line = '1081';
        func-mem-ref-name = 'CSR_CCM_SCOMMAND';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga5fb9682e1f64a554b42c5fe7cf6f5aca';
        func-mem-ref-line = '153';
        func-mem-ref-name = 'FlushPipeCCM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__ICache_1ga4c202208f9f90802445600e637563f3d';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'UInvalICacheLine';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '369';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Invalidate one I-Cache line specified by address in U-Mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function unlock and invalidate one I-Cache line specified
by the address.
Command \ref CCM_IC_INVAL is written to CSR \ref CSR_CCM_UCOMMAND.
\remarks
This function must be executed in M/S/U-Mode only.
@param [in]    addr    start address to be invalidated
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga683c246c3fdba09511675365a2fa8bd3';
        func-mem-ref-line = '2046';
        func-mem-ref-name = '__RWMB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gga700ee5ca80d2777b38c6d8c963e4e5a9a5fd653735ffce788a11243394e32e316';
        func-mem-ref-line = '90';
        func-mem-ref-name = 'CCM_IC_INVAL';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaca251c4a3f81dd257831ac6407088e52';
        func-mem-ref-line = '1083';
        func-mem-ref-name = 'CSR_CCM_UBEGINADDR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga53c64245d173eed1d1622cfac509ff60';
        func-mem-ref-line = '1084';
        func-mem-ref-name = 'CSR_CCM_UCOMMAND';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga5fb9682e1f64a554b42c5fe7cf6f5aca';
        func-mem-ref-line = '153';
        func-mem-ref-name = 'FlushPipeCCM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__ICache_1ga3f36015dbfc23a155d1ae0fa458388a2';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'UInvalICacheLines';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'cnt';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '388';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Invalidate several I-Cache lines specified by address in U-Mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function unlock and invalidate several I-Cache lines specified
by the address and line count.
Command \ref CCM_IC_INVAL is written to CSR \ref CSR_CCM_UCOMMAND.
\remarks
This function must be executed in M/S/U-Mode only.
@param [in]    addr    start address to be invalidated
@param [in]    cnt     count of cache lines to be invalidated
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga683c246c3fdba09511675365a2fa8bd3';
        func-mem-ref-line = '2046';
        func-mem-ref-name = '__RWMB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gga700ee5ca80d2777b38c6d8c963e4e5a9a5fd653735ffce788a11243394e32e316';
        func-mem-ref-line = '90';
        func-mem-ref-name = 'CCM_IC_INVAL';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaca251c4a3f81dd257831ac6407088e52';
        func-mem-ref-line = '1083';
        func-mem-ref-name = 'CSR_CCM_UBEGINADDR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga53c64245d173eed1d1622cfac509ff60';
        func-mem-ref-line = '1084';
        func-mem-ref-name = 'CSR_CCM_UCOMMAND';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga5fb9682e1f64a554b42c5fe7cf6f5aca';
        func-mem-ref-line = '153';
        func-mem-ref-name = 'FlushPipeCCM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__ICache_1gaa0ebecb33755adc5adbc597889194605';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'MLockICacheLine';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '411';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Lock one I-Cache line specified by address in M-Mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function lock one I-Cache line specified by the address.
Command \ref CCM_IC_LOCK is written to CSR \ref CSR_CCM_MCOMMAND.
\remarks
This function must be executed in M-Mode only.
@param [in]    addr    start address to be locked
\return result of CCM lock operation, see enum \ref CCM_OP_FINFO
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '642';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga683c246c3fdba09511675365a2fa8bd3';
        func-mem-ref-line = '2046';
        func-mem-ref-name = '__RWMB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gga700ee5ca80d2777b38c6d8c963e4e5a9a6db5a7fe3ab43a382df111a8c5556ec0';
        func-mem-ref-line = '91';
        func-mem-ref-name = 'CCM_IC_LOCK';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga4faa0c15728837765ec9aaf28f14c09b';
        func-mem-ref-line = '1076';
        func-mem-ref-name = 'CSR_CCM_MBEGINADDR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga09b6c06fdc71424566c30bad5470c0c1';
        func-mem-ref-line = '1077';
        func-mem-ref-name = 'CSR_CCM_MCOMMAND';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga68f7537cd8e79434b1a191053d09d5f7';
        func-mem-ref-line = '1078';
        func-mem-ref-name = 'CSR_CCM_MDATA';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga5fb9682e1f64a554b42c5fe7cf6f5aca';
        func-mem-ref-line = '153';
        func-mem-ref-name = 'FlushPipeCCM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__ICache_1ga5d12990670c5b36de576bab8d1812d16';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'MLockICacheLines';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'cnt';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '432';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Lock several I-Cache lines specified by address in M-Mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function lock several I-Cache lines specified by the address
and line count.
Command \ref CCM_IC_LOCK is written to CSR \ref CSR_CCM_MCOMMAND.
\remarks
This function must be executed in M-Mode only.
@param [in]    addr    start address to be locked
@param [in]    cnt     count of cache lines to be locked
\return result of CCM lock operation, see enum \ref CCM_OP_FINFO
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '642';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga683c246c3fdba09511675365a2fa8bd3';
        func-mem-ref-line = '2046';
        func-mem-ref-name = '__RWMB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gga700ee5ca80d2777b38c6d8c963e4e5a9a6db5a7fe3ab43a382df111a8c5556ec0';
        func-mem-ref-line = '91';
        func-mem-ref-name = 'CCM_IC_LOCK';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gga0a94b900668f476abc0587b061b7afcaa59b7659ff9fdd6d34f5bd24138b4363f';
        func-mem-ref-line = '71';
        func-mem-ref-name = 'CCM_OP_SUCCESS';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga4faa0c15728837765ec9aaf28f14c09b';
        func-mem-ref-line = '1076';
        func-mem-ref-name = 'CSR_CCM_MBEGINADDR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga09b6c06fdc71424566c30bad5470c0c1';
        func-mem-ref-line = '1077';
        func-mem-ref-name = 'CSR_CCM_MCOMMAND';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga68f7537cd8e79434b1a191053d09d5f7';
        func-mem-ref-line = '1078';
        func-mem-ref-name = 'CSR_CCM_MDATA';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga5fb9682e1f64a554b42c5fe7cf6f5aca';
        func-mem-ref-line = '153';
        func-mem-ref-name = 'FlushPipeCCM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__ICache_1ga8ac672c482d15a997db8f4acfa6c51f5';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SLockICacheLine';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '461';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Lock one I-Cache line specified by address in S-Mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function lock one I-Cache line specified by the address.
Command \ref CCM_IC_LOCK is written to CSR \ref CSR_CCM_SCOMMAND.
\remarks
This function must be executed in M/S-Mode only.
@param [in]    addr    start address to be locked
\return result of CCM lock operation, see enum \ref CCM_OP_FINFO
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '642';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga683c246c3fdba09511675365a2fa8bd3';
        func-mem-ref-line = '2046';
        func-mem-ref-name = '__RWMB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gga700ee5ca80d2777b38c6d8c963e4e5a9a6db5a7fe3ab43a382df111a8c5556ec0';
        func-mem-ref-line = '91';
        func-mem-ref-name = 'CCM_IC_LOCK';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gab508f4dfbd649a25f7eaa8ac5b88a8c0';
        func-mem-ref-line = '1080';
        func-mem-ref-name = 'CSR_CCM_SBEGINADDR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga19b9cf123424b131c5ba30946c54c2fd';
        func-mem-ref-line = '1081';
        func-mem-ref-name = 'CSR_CCM_SCOMMAND';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga58c7d8ca64fe96544d85e57f4b6a3bca';
        func-mem-ref-line = '1082';
        func-mem-ref-name = 'CSR_CCM_SDATA';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga5fb9682e1f64a554b42c5fe7cf6f5aca';
        func-mem-ref-line = '153';
        func-mem-ref-name = 'FlushPipeCCM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__ICache_1gab179486d73e9a1ce8543d310aa8d1594';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SLockICacheLines';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'cnt';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '482';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Lock several I-Cache lines specified by address in S-Mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function lock several I-Cache lines specified by the address
and line count.
Command \ref CCM_IC_LOCK is written to CSR \ref CSR_CCM_SCOMMAND.
\remarks
This function must be executed in M/S-Mode only.
@param [in]    addr    start address to be locked
@param [in]    cnt     count of cache lines to be locked
\return result of CCM lock operation, see enum \ref CCM_OP_FINFO
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '642';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga683c246c3fdba09511675365a2fa8bd3';
        func-mem-ref-line = '2046';
        func-mem-ref-name = '__RWMB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gga700ee5ca80d2777b38c6d8c963e4e5a9a6db5a7fe3ab43a382df111a8c5556ec0';
        func-mem-ref-line = '91';
        func-mem-ref-name = 'CCM_IC_LOCK';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gga0a94b900668f476abc0587b061b7afcaa59b7659ff9fdd6d34f5bd24138b4363f';
        func-mem-ref-line = '71';
        func-mem-ref-name = 'CCM_OP_SUCCESS';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gab508f4dfbd649a25f7eaa8ac5b88a8c0';
        func-mem-ref-line = '1080';
        func-mem-ref-name = 'CSR_CCM_SBEGINADDR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga19b9cf123424b131c5ba30946c54c2fd';
        func-mem-ref-line = '1081';
        func-mem-ref-name = 'CSR_CCM_SCOMMAND';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga58c7d8ca64fe96544d85e57f4b6a3bca';
        func-mem-ref-line = '1082';
        func-mem-ref-name = 'CSR_CCM_SDATA';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga5fb9682e1f64a554b42c5fe7cf6f5aca';
        func-mem-ref-line = '153';
        func-mem-ref-name = 'FlushPipeCCM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__ICache_1ga84eb3cf641c1e87655219fec34e49b20';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'ULockICacheLine';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '511';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Lock one I-Cache line specified by address in U-Mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function lock one I-Cache line specified by the address.
Command \ref CCM_IC_LOCK is written to CSR \ref CSR_CCM_UCOMMAND.
\remarks
This function must be executed in M/S/U-Mode only.
@param [in]    addr    start address to be locked
\return result of CCM lock operation, see enum \ref CCM_OP_FINFO
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '642';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga683c246c3fdba09511675365a2fa8bd3';
        func-mem-ref-line = '2046';
        func-mem-ref-name = '__RWMB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gga700ee5ca80d2777b38c6d8c963e4e5a9a6db5a7fe3ab43a382df111a8c5556ec0';
        func-mem-ref-line = '91';
        func-mem-ref-name = 'CCM_IC_LOCK';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaca251c4a3f81dd257831ac6407088e52';
        func-mem-ref-line = '1083';
        func-mem-ref-name = 'CSR_CCM_UBEGINADDR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga53c64245d173eed1d1622cfac509ff60';
        func-mem-ref-line = '1084';
        func-mem-ref-name = 'CSR_CCM_UCOMMAND';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gad18936febc391b50b6ba078eb605758e';
        func-mem-ref-line = '1085';
        func-mem-ref-name = 'CSR_CCM_UDATA';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga5fb9682e1f64a554b42c5fe7cf6f5aca';
        func-mem-ref-line = '153';
        func-mem-ref-name = 'FlushPipeCCM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__ICache_1gaf4b8c625829c4c772b65e5f95f61e659';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'ULockICacheLines';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'cnt';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '532';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Lock several I-Cache lines specified by address in U-Mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function lock several I-Cache lines specified by the address
and line count.
Command \ref CCM_IC_LOCK is written to CSR \ref CSR_CCM_UCOMMAND.
\remarks
This function must be executed in M/S/U-Mode only.
@param [in]    addr    start address to be locked
@param [in]    cnt     count of cache lines to be locked
\return result of CCM lock operation, see enum \ref CCM_OP_FINFO
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '642';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga683c246c3fdba09511675365a2fa8bd3';
        func-mem-ref-line = '2046';
        func-mem-ref-name = '__RWMB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gga700ee5ca80d2777b38c6d8c963e4e5a9a6db5a7fe3ab43a382df111a8c5556ec0';
        func-mem-ref-line = '91';
        func-mem-ref-name = 'CCM_IC_LOCK';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gga0a94b900668f476abc0587b061b7afcaa59b7659ff9fdd6d34f5bd24138b4363f';
        func-mem-ref-line = '71';
        func-mem-ref-name = 'CCM_OP_SUCCESS';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaca251c4a3f81dd257831ac6407088e52';
        func-mem-ref-line = '1083';
        func-mem-ref-name = 'CSR_CCM_UBEGINADDR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga53c64245d173eed1d1622cfac509ff60';
        func-mem-ref-line = '1084';
        func-mem-ref-name = 'CSR_CCM_UCOMMAND';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gad18936febc391b50b6ba078eb605758e';
        func-mem-ref-line = '1085';
        func-mem-ref-name = 'CSR_CCM_UDATA';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga5fb9682e1f64a554b42c5fe7cf6f5aca';
        func-mem-ref-line = '153';
        func-mem-ref-name = 'FlushPipeCCM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__ICache_1gac423a03eaa4afb1c8641c1c9e3097168';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'MUnlockICacheLine';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '560';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Unlock one I-Cache line specified by address in M-Mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function unlock one I-Cache line specified by the address.
Command \ref CCM_IC_UNLOCK is written to CSR \ref CSR_CCM_MCOMMAND.
\remarks
This function must be executed in M-Mode only.
@param [in]    addr    start address to be unlocked
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga683c246c3fdba09511675365a2fa8bd3';
        func-mem-ref-line = '2046';
        func-mem-ref-name = '__RWMB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gga700ee5ca80d2777b38c6d8c963e4e5a9ae7956f03b5ca54a55faee30269cf9b53';
        func-mem-ref-line = '92';
        func-mem-ref-name = 'CCM_IC_UNLOCK';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga4faa0c15728837765ec9aaf28f14c09b';
        func-mem-ref-line = '1076';
        func-mem-ref-name = 'CSR_CCM_MBEGINADDR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga09b6c06fdc71424566c30bad5470c0c1';
        func-mem-ref-line = '1077';
        func-mem-ref-name = 'CSR_CCM_MCOMMAND';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga5fb9682e1f64a554b42c5fe7cf6f5aca';
        func-mem-ref-line = '153';
        func-mem-ref-name = 'FlushPipeCCM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__ICache_1ga7035e12e1a3c7c7730f3211241a8fe90';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'MUnlockICacheLines';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'cnt';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '579';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Unlock several I-Cache lines specified by address in M-Mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function unlock several I-Cache lines specified
by the address and line count.
Command \ref CCM_IC_UNLOCK is written to CSR \ref CSR_CCM_MCOMMAND.
\remarks
This function must be executed in M-Mode only.
@param [in]    addr    start address to be unlocked
@param [in]    cnt     count of cache lines to be unlocked
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga683c246c3fdba09511675365a2fa8bd3';
        func-mem-ref-line = '2046';
        func-mem-ref-name = '__RWMB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gga700ee5ca80d2777b38c6d8c963e4e5a9ae7956f03b5ca54a55faee30269cf9b53';
        func-mem-ref-line = '92';
        func-mem-ref-name = 'CCM_IC_UNLOCK';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga4faa0c15728837765ec9aaf28f14c09b';
        func-mem-ref-line = '1076';
        func-mem-ref-name = 'CSR_CCM_MBEGINADDR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga09b6c06fdc71424566c30bad5470c0c1';
        func-mem-ref-line = '1077';
        func-mem-ref-name = 'CSR_CCM_MCOMMAND';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga5fb9682e1f64a554b42c5fe7cf6f5aca';
        func-mem-ref-line = '153';
        func-mem-ref-name = 'FlushPipeCCM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__ICache_1gaf43b829e002df8fb7563c5eccb4dd9eb';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SUnlockICacheLine';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '601';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Unlock one I-Cache line specified by address in S-Mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function unlock one I-Cache line specified by the address.
Command \ref CCM_IC_UNLOCK is written to CSR \ref CSR_CCM_SCOMMAND.
\remarks
This function must be executed in M/S-Mode only.
@param [in]    addr    start address to be unlocked
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga683c246c3fdba09511675365a2fa8bd3';
        func-mem-ref-line = '2046';
        func-mem-ref-name = '__RWMB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gga700ee5ca80d2777b38c6d8c963e4e5a9ae7956f03b5ca54a55faee30269cf9b53';
        func-mem-ref-line = '92';
        func-mem-ref-name = 'CCM_IC_UNLOCK';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gab508f4dfbd649a25f7eaa8ac5b88a8c0';
        func-mem-ref-line = '1080';
        func-mem-ref-name = 'CSR_CCM_SBEGINADDR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga19b9cf123424b131c5ba30946c54c2fd';
        func-mem-ref-line = '1081';
        func-mem-ref-name = 'CSR_CCM_SCOMMAND';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga5fb9682e1f64a554b42c5fe7cf6f5aca';
        func-mem-ref-line = '153';
        func-mem-ref-name = 'FlushPipeCCM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__ICache_1ga74e29621ab0c803fe474c648d078fe18';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SUnlockICacheLines';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'cnt';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '620';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Unlock several I-Cache lines specified by address in S-Mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function unlock several I-Cache lines specified
by the address and line count.
Command \ref CCM_IC_UNLOCK is written to CSR \ref CSR_CCM_SCOMMAND.
\remarks
This function must be executed in M/S-Mode only.
@param [in]    addr    start address to be unlocked
@param [in]    cnt     count of cache lines to be unlocked
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga683c246c3fdba09511675365a2fa8bd3';
        func-mem-ref-line = '2046';
        func-mem-ref-name = '__RWMB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gga700ee5ca80d2777b38c6d8c963e4e5a9ae7956f03b5ca54a55faee30269cf9b53';
        func-mem-ref-line = '92';
        func-mem-ref-name = 'CCM_IC_UNLOCK';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gab508f4dfbd649a25f7eaa8ac5b88a8c0';
        func-mem-ref-line = '1080';
        func-mem-ref-name = 'CSR_CCM_SBEGINADDR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga19b9cf123424b131c5ba30946c54c2fd';
        func-mem-ref-line = '1081';
        func-mem-ref-name = 'CSR_CCM_SCOMMAND';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga5fb9682e1f64a554b42c5fe7cf6f5aca';
        func-mem-ref-line = '153';
        func-mem-ref-name = 'FlushPipeCCM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__ICache_1ga1221f6556c800e2172c0cab109a4a31f';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'UUnlockICacheLine';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '642';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Unlock one I-Cache line specified by address in U-Mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function unlock one I-Cache line specified by the address.
Command \ref CCM_IC_UNLOCK is written to CSR \ref CSR_CCM_UCOMMAND.
\remarks
This function must be executed in M/S/U-Mode only.
@param [in]    addr    start address to be unlocked
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga683c246c3fdba09511675365a2fa8bd3';
        func-mem-ref-line = '2046';
        func-mem-ref-name = '__RWMB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gga700ee5ca80d2777b38c6d8c963e4e5a9ae7956f03b5ca54a55faee30269cf9b53';
        func-mem-ref-line = '92';
        func-mem-ref-name = 'CCM_IC_UNLOCK';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaca251c4a3f81dd257831ac6407088e52';
        func-mem-ref-line = '1083';
        func-mem-ref-name = 'CSR_CCM_UBEGINADDR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga53c64245d173eed1d1622cfac509ff60';
        func-mem-ref-line = '1084';
        func-mem-ref-name = 'CSR_CCM_UCOMMAND';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga5fb9682e1f64a554b42c5fe7cf6f5aca';
        func-mem-ref-line = '153';
        func-mem-ref-name = 'FlushPipeCCM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__ICache_1ga48a1fc27f21f185f1e2bf52bf09a83a4';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'UUnlockICacheLines';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'cnt';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '661';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Unlock several I-Cache lines specified by address in U-Mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function unlock several I-Cache lines specified
by the address and line count.
Command \ref CCM_IC_UNLOCK is written to CSR \ref CSR_CCM_UCOMMAND.
\remarks
This function must be executed in M/S/U-Mode only.
@param [in]    addr    start address to be unlocked
@param [in]    cnt     count of cache lines to be unlocked
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga683c246c3fdba09511675365a2fa8bd3';
        func-mem-ref-line = '2046';
        func-mem-ref-name = '__RWMB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gga700ee5ca80d2777b38c6d8c963e4e5a9ae7956f03b5ca54a55faee30269cf9b53';
        func-mem-ref-line = '92';
        func-mem-ref-name = 'CCM_IC_UNLOCK';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaca251c4a3f81dd257831ac6407088e52';
        func-mem-ref-line = '1083';
        func-mem-ref-name = 'CSR_CCM_UBEGINADDR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga53c64245d173eed1d1622cfac509ff60';
        func-mem-ref-line = '1084';
        func-mem-ref-name = 'CSR_CCM_UCOMMAND';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga5fb9682e1f64a554b42c5fe7cf6f5aca';
        func-mem-ref-line = '153';
        func-mem-ref-name = 'FlushPipeCCM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__ICache_1gab0d916e064876aea3bf9135283814db1';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'MInvalICache';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '683';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Invalidate all I-Cache lines in M-Mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function invalidate all I-Cache lines.
Command \ref CCM_IC_INVAL_ALL is written to CSR \ref CSR_CCM_MCOMMAND.
\remarks
This function must be executed in M-Mode only.
@param [in]    addr    start address to be invalidated
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga683c246c3fdba09511675365a2fa8bd3';
        func-mem-ref-line = '2046';
        func-mem-ref-name = '__RWMB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gga700ee5ca80d2777b38c6d8c963e4e5a9abf7eec30759aff4902c875cffef31484';
        func-mem-ref-line = '93';
        func-mem-ref-name = 'CCM_IC_INVAL_ALL';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga09b6c06fdc71424566c30bad5470c0c1';
        func-mem-ref-line = '1077';
        func-mem-ref-name = 'CSR_CCM_MCOMMAND';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga5fb9682e1f64a554b42c5fe7cf6f5aca';
        func-mem-ref-line = '153';
        func-mem-ref-name = 'FlushPipeCCM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__ICache_1ga25824c725ce4cfd0319c182a8a44c7e3';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SInvalICache';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '699';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Invalidate all I-Cache lines in S-Mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function invalidate all I-Cache lines.
Command \ref CCM_IC_INVAL_ALL is written to CSR \ref CSR_CCM_SCOMMAND.
\remarks
This function must be executed in M/S-Mode only.
@param [in]    addr    start address to be invalidated
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga683c246c3fdba09511675365a2fa8bd3';
        func-mem-ref-line = '2046';
        func-mem-ref-name = '__RWMB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gga700ee5ca80d2777b38c6d8c963e4e5a9abf7eec30759aff4902c875cffef31484';
        func-mem-ref-line = '93';
        func-mem-ref-name = 'CCM_IC_INVAL_ALL';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga19b9cf123424b131c5ba30946c54c2fd';
        func-mem-ref-line = '1081';
        func-mem-ref-name = 'CSR_CCM_SCOMMAND';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga5fb9682e1f64a554b42c5fe7cf6f5aca';
        func-mem-ref-line = '153';
        func-mem-ref-name = 'FlushPipeCCM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__ICache_1ga60a04e2fd2a444e04703dcd4a8d38e04';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'UInvalICache';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '715';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Invalidate all I-Cache lines in U-Mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function invalidate all I-Cache lines.
Command \ref CCM_IC_INVAL_ALL is written to CSR \ref CSR_CCM_UCOMMAND.
\remarks
This function must be executed in M/S/U-Mode only.
@param [in]    addr    start address to be invalidated
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga683c246c3fdba09511675365a2fa8bd3';
        func-mem-ref-line = '2046';
        func-mem-ref-name = '__RWMB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gga700ee5ca80d2777b38c6d8c963e4e5a9abf7eec30759aff4902c875cffef31484';
        func-mem-ref-line = '93';
        func-mem-ref-name = 'CCM_IC_INVAL_ALL';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga53c64245d173eed1d1622cfac509ff60';
        func-mem-ref-line = '1084';
        func-mem-ref-name = 'CSR_CCM_UCOMMAND';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga5fb9682e1f64a554b42c5fe7cf6f5aca';
        func-mem-ref-line = '153';
        func-mem-ref-name = 'FlushPipeCCM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DCache_1ga8433f280786b22c34c284fcefedd3873';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE int32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'DCachePresent';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '742';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Check DCache Unit Present or Not.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function check dcache unit present or not via mcfg_info csr
\remarks
- This function might not work for some old nuclei processors
- Please make sure the version of your nuclei processor contain DCACHE bit in mcfg_info
\return 1 if present otherwise 0
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '642';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga7fd083b254f2438fe5cbf9d667468324';
        func-mem-ref-line = '1058';
        func-mem-ref-name = 'CSR_MCFG_INFO';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga95afd8455685713863d0be88485f5b40';
        func-mem-ref-line = '302';
        func-mem-ref-name = 'MCFG_INFO_DCACHE';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'system__Device_8c_1gad13ba247efe59bbe2b6004d9bd0f10db';
        func-mem-ref-line = '1324';
        func-mem-ref-name = '_premain_init';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DCache_1gaf90783ed69b3589cde6fe7dbabeb17c0';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'EnableDCache';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '760';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Enable DCache.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function enable D-Cache
\remarks
- This function can be called in M-Mode only.
- This \ref CSR_MCACHE_CTL register control D Cache enable.
\sa
- \ref DisableDCache
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gafdbd9b5a14b44913675d0fa73ca6716f';
        func-mem-ref-line = '697';
        func-mem-ref-name = '__RV_CSR_SET';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga6e79ed96b3346ea75923126b7c4d9d67';
        func-mem-ref-line = '980';
        func-mem-ref-name = 'CSR_MCACHE_CTL';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gae82cbfc628bf4087720024122a9c9115';
        func-mem-ref-line = '280';
        func-mem-ref-name = 'MCACHE_CTL_DC_EN';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'system__Device_8c_1gad13ba247efe59bbe2b6004d9bd0f10db';
        func-mem-ref-line = '1324';
        func-mem-ref-name = '_premain_init';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DCache_1gab30be00d8a0583adac5d786149db433f';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'DisableDCache';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '775';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Disable DCache.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function Disable D-Cache
\remarks
- This function can be called in M-Mode only.
- This \ref CSR_MCACHE_CTL register control D Cache enable.
\sa
- \ref EnableDCache
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga14cf0513f6b576fcd1ff700b08f65543';
        func-mem-ref-line = '734';
        func-mem-ref-name = '__RV_CSR_CLEAR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga6e79ed96b3346ea75923126b7c4d9d67';
        func-mem-ref-line = '980';
        func-mem-ref-name = 'CSR_MCACHE_CTL';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gae82cbfc628bf4087720024122a9c9115';
        func-mem-ref-line = '280';
        func-mem-ref-name = 'MCACHE_CTL_DC_EN';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DCache_1ga6b8024b909deb0ec47aec2724982a5a8';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'EnableDCacheECC';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '790';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Enable DCache ECC.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function enable D-Cache ECC
\remarks
- This function can be called in M-Mode only.
- This \ref CSR_MCACHE_CTL register control D Cache ECC enable.
\sa
- \ref DisableDCacheECC
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gafdbd9b5a14b44913675d0fa73ca6716f';
        func-mem-ref-line = '697';
        func-mem-ref-name = '__RV_CSR_SET';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga6e79ed96b3346ea75923126b7c4d9d67';
        func-mem-ref-line = '980';
        func-mem-ref-name = 'CSR_MCACHE_CTL';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga24f8fec1fe980ff09a748634ded5f3ec';
        func-mem-ref-line = '281';
        func-mem-ref-name = 'MCACHE_CTL_DC_ECC_EN';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DCache_1gabf9c9aa35bd8d89d9bb3edf4818cbe27';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'DisableDCacheECC';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '805';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Disable DCache ECC.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function disable D-Cache ECC
\remarks
- This function can be called in M-Mode only.
- This \ref CSR_MCACHE_CTL register control D Cache ECC enable.
\sa
- \ref EnableDCacheECC
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga14cf0513f6b576fcd1ff700b08f65543';
        func-mem-ref-line = '734';
        func-mem-ref-name = '__RV_CSR_CLEAR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga6e79ed96b3346ea75923126b7c4d9d67';
        func-mem-ref-line = '980';
        func-mem-ref-name = 'CSR_MCACHE_CTL';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga24f8fec1fe980ff09a748634ded5f3ec';
        func-mem-ref-line = '281';
        func-mem-ref-name = 'MCACHE_CTL_DC_ECC_EN';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DCache_1gacc2be57be2e95f62a5381ba1f87977b3';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE int32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'GetDCacheInfo';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
CacheInfo_Type *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'info';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '821';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get D-Cache Information.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function get D-Cache Information
\remarks
- This function can be called in M-Mode only.
- You can use this function in combination with cache lines operations
\sa
- \ref GetICacheInfo
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '642';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gacb31b31285f7ea1d527a19f4388b01bd';
        func-mem-ref-line = '1057';
        func-mem-ref-name = 'CSR_MDCFG_INFO';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1a458a2abb27aa334c0fda73efc7972aad';
        func-mem-ref-line = '424';
        func-mem-ref-name = 'CSR_MDCFGINFO_Type::d';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1aca857f59d80919532a355a0508a0e236';
        func-mem-ref-line = '100';
        func-mem-ref-name = 'CacheInfo_Type::linesize';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ab3ce74a5f243a63facff399be7643d89';
        func-mem-ref-line = '417';
        func-mem-ref-name = 'CSR_MDCFGINFO_Type::lsize';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1a023b173b517068119914ee656fc7a95b';
        func-mem-ref-line = '415';
        func-mem-ref-name = 'CSR_MDCFGINFO_Type::set';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1a4921aea5a2a5e4527c06cd00e63e4ed5';
        func-mem-ref-line = '102';
        func-mem-ref-name = 'CacheInfo_Type::setperway';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1aead3d43e2bd952914a9b81aacb86b94e';
        func-mem-ref-line = '103';
        func-mem-ref-name = 'CacheInfo_Type::size';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1af9523adb1cddd68b9ebcf3684c676373';
        func-mem-ref-line = '416';
        func-mem-ref-name = 'CSR_MDCFGINFO_Type::way';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1a963618b4e0fa8b89df750f8170a2a8ed';
        func-mem-ref-line = '101';
        func-mem-ref-name = 'CacheInfo_Type::ways';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DCache_1gab05ba668569d965974d7e4dd7979fdb2';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'MInvalDCacheLine';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '849';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Invalidate one D-Cache line specified by address in M-Mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function unlock and invalidate one D-Cache line specified
by the address.
Command \ref CCM_DC_INVAL is written to CSR \ref CSR_CCM_MCOMMAND.
\remarks
This function must be executed in M-Mode only.
@param [in]    addr    start address to be invalidated
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga683c246c3fdba09511675365a2fa8bd3';
        func-mem-ref-line = '2046';
        func-mem-ref-name = '__RWMB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gga700ee5ca80d2777b38c6d8c963e4e5a9a1a132c4125ce2c5028ab7e8d1226cc37';
        func-mem-ref-line = '82';
        func-mem-ref-name = 'CCM_DC_INVAL';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga4faa0c15728837765ec9aaf28f14c09b';
        func-mem-ref-line = '1076';
        func-mem-ref-name = 'CSR_CCM_MBEGINADDR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga09b6c06fdc71424566c30bad5470c0c1';
        func-mem-ref-line = '1077';
        func-mem-ref-name = 'CSR_CCM_MCOMMAND';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga5fb9682e1f64a554b42c5fe7cf6f5aca';
        func-mem-ref-line = '153';
        func-mem-ref-name = 'FlushPipeCCM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DCache_1ga342c670814a4aaced4e1d4aa6fe1d467';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'MInvalDCacheLines';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'cnt';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '868';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Invalidate several D-Cache lines specified by address in M-Mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function unlock and invalidate several D-Cache lines specified
by the address and line count.
Command \ref CCM_DC_INVAL is written to CSR \ref CSR_CCM_MCOMMAND.
\remarks
This function must be executed in M-Mode only.
@param [in]    addr    start address to be invalidated
@param [in]    cnt     count of cache lines to be invalidated
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga683c246c3fdba09511675365a2fa8bd3';
        func-mem-ref-line = '2046';
        func-mem-ref-name = '__RWMB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gga700ee5ca80d2777b38c6d8c963e4e5a9a1a132c4125ce2c5028ab7e8d1226cc37';
        func-mem-ref-line = '82';
        func-mem-ref-name = 'CCM_DC_INVAL';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga4faa0c15728837765ec9aaf28f14c09b';
        func-mem-ref-line = '1076';
        func-mem-ref-name = 'CSR_CCM_MBEGINADDR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga09b6c06fdc71424566c30bad5470c0c1';
        func-mem-ref-line = '1077';
        func-mem-ref-name = 'CSR_CCM_MCOMMAND';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga5fb9682e1f64a554b42c5fe7cf6f5aca';
        func-mem-ref-line = '153';
        func-mem-ref-name = 'FlushPipeCCM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DCache_1ga0fcf63354c7b35c45ec97a99455266a6';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SInvalDCacheLine';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '891';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Invalidate one D-Cache line specified by address in S-Mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function unlock and invalidate one D-Cache line specified
by the address.
Command \ref CCM_DC_INVAL is written to CSR \ref CSR_CCM_MCOMMAND.
\remarks
This function must be executed in M/S-Mode only.
@param [in]    addr    start address to be invalidated
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga683c246c3fdba09511675365a2fa8bd3';
        func-mem-ref-line = '2046';
        func-mem-ref-name = '__RWMB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gga700ee5ca80d2777b38c6d8c963e4e5a9a1a132c4125ce2c5028ab7e8d1226cc37';
        func-mem-ref-line = '82';
        func-mem-ref-name = 'CCM_DC_INVAL';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gab508f4dfbd649a25f7eaa8ac5b88a8c0';
        func-mem-ref-line = '1080';
        func-mem-ref-name = 'CSR_CCM_SBEGINADDR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga19b9cf123424b131c5ba30946c54c2fd';
        func-mem-ref-line = '1081';
        func-mem-ref-name = 'CSR_CCM_SCOMMAND';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga5fb9682e1f64a554b42c5fe7cf6f5aca';
        func-mem-ref-line = '153';
        func-mem-ref-name = 'FlushPipeCCM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DCache_1gabccfe988e87de3ba1a0db134a2d5647b';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SInvalDCacheLines';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'cnt';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '910';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Invalidate several D-Cache lines specified by address in S-Mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function unlock and invalidate several D-Cache lines specified
by the address and line count.
Command \ref CCM_DC_INVAL is written to CSR \ref CSR_CCM_SCOMMAND.
\remarks
This function must be executed in M/S-Mode only.
@param [in]    addr    start address to be invalidated
@param [in]    cnt     count of cache lines to be invalidated
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga683c246c3fdba09511675365a2fa8bd3';
        func-mem-ref-line = '2046';
        func-mem-ref-name = '__RWMB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gga700ee5ca80d2777b38c6d8c963e4e5a9a1a132c4125ce2c5028ab7e8d1226cc37';
        func-mem-ref-line = '82';
        func-mem-ref-name = 'CCM_DC_INVAL';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gab508f4dfbd649a25f7eaa8ac5b88a8c0';
        func-mem-ref-line = '1080';
        func-mem-ref-name = 'CSR_CCM_SBEGINADDR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga19b9cf123424b131c5ba30946c54c2fd';
        func-mem-ref-line = '1081';
        func-mem-ref-name = 'CSR_CCM_SCOMMAND';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga5fb9682e1f64a554b42c5fe7cf6f5aca';
        func-mem-ref-line = '153';
        func-mem-ref-name = 'FlushPipeCCM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DCache_1gaea171eac132f42366234f65cd3023480';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'UInvalDCacheLine';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '933';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Invalidate one D-Cache line specified by address in U-Mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function unlock and invalidate one D-Cache line specified
by the address.
Command \ref CCM_DC_INVAL is written to CSR \ref CSR_CCM_UCOMMAND.
\remarks
This function must be executed in M/S/U-Mode only.
@param [in]    addr    start address to be invalidated
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga683c246c3fdba09511675365a2fa8bd3';
        func-mem-ref-line = '2046';
        func-mem-ref-name = '__RWMB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gga700ee5ca80d2777b38c6d8c963e4e5a9a1a132c4125ce2c5028ab7e8d1226cc37';
        func-mem-ref-line = '82';
        func-mem-ref-name = 'CCM_DC_INVAL';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaca251c4a3f81dd257831ac6407088e52';
        func-mem-ref-line = '1083';
        func-mem-ref-name = 'CSR_CCM_UBEGINADDR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga53c64245d173eed1d1622cfac509ff60';
        func-mem-ref-line = '1084';
        func-mem-ref-name = 'CSR_CCM_UCOMMAND';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga5fb9682e1f64a554b42c5fe7cf6f5aca';
        func-mem-ref-line = '153';
        func-mem-ref-name = 'FlushPipeCCM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DCache_1gac616f2d955d1e1db8699f70304057199';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'UInvalDCacheLines';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'cnt';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '952';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Invalidate several D-Cache lines specified by address in U-Mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function unlock and invalidate several D-Cache lines specified
by the address and line count.
Command \ref CCM_DC_INVAL is written to CSR \ref CSR_CCM_UCOMMAND.
\remarks
This function must be executed in M/S/U-Mode only.
@param [in]    addr    start address to be invalidated
@param [in]    cnt     count of cache lines to be invalidated
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga683c246c3fdba09511675365a2fa8bd3';
        func-mem-ref-line = '2046';
        func-mem-ref-name = '__RWMB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gga700ee5ca80d2777b38c6d8c963e4e5a9a1a132c4125ce2c5028ab7e8d1226cc37';
        func-mem-ref-line = '82';
        func-mem-ref-name = 'CCM_DC_INVAL';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaca251c4a3f81dd257831ac6407088e52';
        func-mem-ref-line = '1083';
        func-mem-ref-name = 'CSR_CCM_UBEGINADDR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga53c64245d173eed1d1622cfac509ff60';
        func-mem-ref-line = '1084';
        func-mem-ref-name = 'CSR_CCM_UCOMMAND';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga5fb9682e1f64a554b42c5fe7cf6f5aca';
        func-mem-ref-line = '153';
        func-mem-ref-name = 'FlushPipeCCM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DCache_1ga6e607ebf23f9df13ac604418ea9332f4';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'MFlushDCacheLine';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '974';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Flush one D-Cache line specified by address in M-Mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function flush one D-Cache line specified by the address.
Command \ref CCM_DC_WB is written to CSR \ref CSR_CCM_MCOMMAND.
\remarks
This function must be executed in M-Mode only.
@param [in]    addr    start address to be flushed
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga683c246c3fdba09511675365a2fa8bd3';
        func-mem-ref-line = '2046';
        func-mem-ref-name = '__RWMB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gga700ee5ca80d2777b38c6d8c963e4e5a9a0d26a5a595c08481572223f9cec83b78';
        func-mem-ref-line = '83';
        func-mem-ref-name = 'CCM_DC_WB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga4faa0c15728837765ec9aaf28f14c09b';
        func-mem-ref-line = '1076';
        func-mem-ref-name = 'CSR_CCM_MBEGINADDR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga09b6c06fdc71424566c30bad5470c0c1';
        func-mem-ref-line = '1077';
        func-mem-ref-name = 'CSR_CCM_MCOMMAND';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga5fb9682e1f64a554b42c5fe7cf6f5aca';
        func-mem-ref-line = '153';
        func-mem-ref-name = 'FlushPipeCCM';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga2e80049df57b285d4dd43454377c0845';
        func-mem-ref-line = '769';
        func-mem-ref-name = '__ECLIC_SetVector';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DCache_1ga98d1ed59634ce2ac7618738002d446ec';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'MFlushDCacheLines';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'cnt';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '993';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Flush several D-Cache lines specified by address in M-Mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function flush several D-Cache lines specified
by the address and line count.
Command \ref CCM_DC_WB is written to CSR \ref CSR_CCM_MCOMMAND.
\remarks
This function must be executed in M-Mode only.
@param [in]    addr    start address to be flushed
@param [in]    cnt     count of cache lines to be flushed
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga683c246c3fdba09511675365a2fa8bd3';
        func-mem-ref-line = '2046';
        func-mem-ref-name = '__RWMB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gga700ee5ca80d2777b38c6d8c963e4e5a9a0d26a5a595c08481572223f9cec83b78';
        func-mem-ref-line = '83';
        func-mem-ref-name = 'CCM_DC_WB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga4faa0c15728837765ec9aaf28f14c09b';
        func-mem-ref-line = '1076';
        func-mem-ref-name = 'CSR_CCM_MBEGINADDR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga09b6c06fdc71424566c30bad5470c0c1';
        func-mem-ref-line = '1077';
        func-mem-ref-name = 'CSR_CCM_MCOMMAND';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga5fb9682e1f64a554b42c5fe7cf6f5aca';
        func-mem-ref-line = '153';
        func-mem-ref-name = 'FlushPipeCCM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DCache_1ga6a5d6a194b8a8248c005fed0f2e3ddba';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SFlushDCacheLine';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '1015';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Flush one D-Cache line specified by address in S-Mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function flush one D-Cache line specified by the address.
Command \ref CCM_DC_WB is written to CSR \ref CSR_CCM_SCOMMAND.
\remarks
This function must be executed in M/S-Mode only.
@param [in]    addr    start address to be flushed
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga683c246c3fdba09511675365a2fa8bd3';
        func-mem-ref-line = '2046';
        func-mem-ref-name = '__RWMB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gga700ee5ca80d2777b38c6d8c963e4e5a9a0d26a5a595c08481572223f9cec83b78';
        func-mem-ref-line = '83';
        func-mem-ref-name = 'CCM_DC_WB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gab508f4dfbd649a25f7eaa8ac5b88a8c0';
        func-mem-ref-line = '1080';
        func-mem-ref-name = 'CSR_CCM_SBEGINADDR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga19b9cf123424b131c5ba30946c54c2fd';
        func-mem-ref-line = '1081';
        func-mem-ref-name = 'CSR_CCM_SCOMMAND';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga5fb9682e1f64a554b42c5fe7cf6f5aca';
        func-mem-ref-line = '153';
        func-mem-ref-name = 'FlushPipeCCM';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gac0167f1dee592e0950b0ea4e1ea47e46';
        func-mem-ref-line = '1176';
        func-mem-ref-name = '__ECLIC_SetVector_S';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DCache_1gaa490832ced9c60c8cc6afb1e274bb739';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SFlushDCacheLines';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'cnt';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '1034';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Flush several D-Cache lines specified by address in S-Mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function flush several D-Cache lines specified
by the address and line count.
Command \ref CCM_DC_WB is written to CSR \ref CSR_CCM_SCOMMAND.
\remarks
This function must be executed in M/S-Mode only.
@param [in]    addr    start address to be flushed
@param [in]    cnt     count of cache lines to be flushed
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga683c246c3fdba09511675365a2fa8bd3';
        func-mem-ref-line = '2046';
        func-mem-ref-name = '__RWMB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gga700ee5ca80d2777b38c6d8c963e4e5a9a0d26a5a595c08481572223f9cec83b78';
        func-mem-ref-line = '83';
        func-mem-ref-name = 'CCM_DC_WB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gab508f4dfbd649a25f7eaa8ac5b88a8c0';
        func-mem-ref-line = '1080';
        func-mem-ref-name = 'CSR_CCM_SBEGINADDR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga19b9cf123424b131c5ba30946c54c2fd';
        func-mem-ref-line = '1081';
        func-mem-ref-name = 'CSR_CCM_SCOMMAND';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga5fb9682e1f64a554b42c5fe7cf6f5aca';
        func-mem-ref-line = '153';
        func-mem-ref-name = 'FlushPipeCCM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DCache_1gab82f762a057b37fbafe323471d229c85';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'UFlushDCacheLine';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '1056';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Flush one D-Cache line specified by address in U-Mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function flush one D-Cache line specified by the address.
Command \ref CCM_DC_WB is written to CSR \ref CSR_CCM_UCOMMAND.
\remarks
This function must be executed in M/S/U-Mode only.
@param [in]    addr    start address to be flushed
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga683c246c3fdba09511675365a2fa8bd3';
        func-mem-ref-line = '2046';
        func-mem-ref-name = '__RWMB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gga700ee5ca80d2777b38c6d8c963e4e5a9a0d26a5a595c08481572223f9cec83b78';
        func-mem-ref-line = '83';
        func-mem-ref-name = 'CCM_DC_WB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaca251c4a3f81dd257831ac6407088e52';
        func-mem-ref-line = '1083';
        func-mem-ref-name = 'CSR_CCM_UBEGINADDR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga53c64245d173eed1d1622cfac509ff60';
        func-mem-ref-line = '1084';
        func-mem-ref-name = 'CSR_CCM_UCOMMAND';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga5fb9682e1f64a554b42c5fe7cf6f5aca';
        func-mem-ref-line = '153';
        func-mem-ref-name = 'FlushPipeCCM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DCache_1gac5233b35e7e33e42e5e45fe1dbdac8c8';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'UFlushDCacheLines';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'cnt';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '1075';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Flush several D-Cache lines specified by address in U-Mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function flush several D-Cache lines specified
by the address and line count.
Command \ref CCM_DC_WB is written to CSR \ref CSR_CCM_UCOMMAND.
\remarks
This function must be executed in M/S/U-Mode only.
@param [in]    addr    start address to be flushed
@param [in]    cnt     count of cache lines to be flushed
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga683c246c3fdba09511675365a2fa8bd3';
        func-mem-ref-line = '2046';
        func-mem-ref-name = '__RWMB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gga700ee5ca80d2777b38c6d8c963e4e5a9a0d26a5a595c08481572223f9cec83b78';
        func-mem-ref-line = '83';
        func-mem-ref-name = 'CCM_DC_WB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaca251c4a3f81dd257831ac6407088e52';
        func-mem-ref-line = '1083';
        func-mem-ref-name = 'CSR_CCM_UBEGINADDR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga53c64245d173eed1d1622cfac509ff60';
        func-mem-ref-line = '1084';
        func-mem-ref-name = 'CSR_CCM_UCOMMAND';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga5fb9682e1f64a554b42c5fe7cf6f5aca';
        func-mem-ref-line = '153';
        func-mem-ref-name = 'FlushPipeCCM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DCache_1gad2b9184fe3f7e4d846cf472c32307aff';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'MFlushInvalDCacheLine';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '1097';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Flush and invalidate one D-Cache line specified by address in M-Mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function flush and invalidate one D-Cache line specified by the address.
Command \ref CCM_DC_WBINVAL is written to CSR \ref CSR_CCM_MCOMMAND.
\remarks
This function must be executed in M-Mode only.
@param [in]    addr    start address to be flushed and invalidated
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga683c246c3fdba09511675365a2fa8bd3';
        func-mem-ref-line = '2046';
        func-mem-ref-name = '__RWMB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gga700ee5ca80d2777b38c6d8c963e4e5a9a4057c388582334b258d01660940d89b2';
        func-mem-ref-line = '84';
        func-mem-ref-name = 'CCM_DC_WBINVAL';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga4faa0c15728837765ec9aaf28f14c09b';
        func-mem-ref-line = '1076';
        func-mem-ref-name = 'CSR_CCM_MBEGINADDR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga09b6c06fdc71424566c30bad5470c0c1';
        func-mem-ref-line = '1077';
        func-mem-ref-name = 'CSR_CCM_MCOMMAND';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga5fb9682e1f64a554b42c5fe7cf6f5aca';
        func-mem-ref-line = '153';
        func-mem-ref-name = 'FlushPipeCCM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DCache_1ga526942458f908c5b61c2d80f7cd45959';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'MFlushInvalDCacheLines';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'cnt';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '1116';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Flush and invalidate several D-Cache lines specified by address in M-Mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function flush and invalidate several D-Cache lines specified
by the address and line count.
Command \ref CCM_DC_WBINVAL is written to CSR \ref CSR_CCM_MCOMMAND.
\remarks
This function must be executed in M-Mode only.
@param [in]    addr    start address to be flushed and invalidated
@param [in]    cnt     count of cache lines to be flushed and invalidated
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga683c246c3fdba09511675365a2fa8bd3';
        func-mem-ref-line = '2046';
        func-mem-ref-name = '__RWMB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gga700ee5ca80d2777b38c6d8c963e4e5a9a4057c388582334b258d01660940d89b2';
        func-mem-ref-line = '84';
        func-mem-ref-name = 'CCM_DC_WBINVAL';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga4faa0c15728837765ec9aaf28f14c09b';
        func-mem-ref-line = '1076';
        func-mem-ref-name = 'CSR_CCM_MBEGINADDR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga09b6c06fdc71424566c30bad5470c0c1';
        func-mem-ref-line = '1077';
        func-mem-ref-name = 'CSR_CCM_MCOMMAND';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga5fb9682e1f64a554b42c5fe7cf6f5aca';
        func-mem-ref-line = '153';
        func-mem-ref-name = 'FlushPipeCCM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DCache_1gaad6d3fab91ac85ab5c5ebe5fb3f31e9b';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SFlushInvalDCacheLine';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '1138';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Flush and invalidate one D-Cache line specified by address in S-Mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function flush and invalidate one D-Cache line specified by the address.
Command \ref CCM_DC_WBINVAL is written to CSR \ref CSR_CCM_SCOMMAND.
\remarks
This function must be executed in M/S-Mode only.
@param [in]    addr    start address to be flushed and invalidated
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga683c246c3fdba09511675365a2fa8bd3';
        func-mem-ref-line = '2046';
        func-mem-ref-name = '__RWMB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gga700ee5ca80d2777b38c6d8c963e4e5a9a4057c388582334b258d01660940d89b2';
        func-mem-ref-line = '84';
        func-mem-ref-name = 'CCM_DC_WBINVAL';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gab508f4dfbd649a25f7eaa8ac5b88a8c0';
        func-mem-ref-line = '1080';
        func-mem-ref-name = 'CSR_CCM_SBEGINADDR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga19b9cf123424b131c5ba30946c54c2fd';
        func-mem-ref-line = '1081';
        func-mem-ref-name = 'CSR_CCM_SCOMMAND';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga5fb9682e1f64a554b42c5fe7cf6f5aca';
        func-mem-ref-line = '153';
        func-mem-ref-name = 'FlushPipeCCM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DCache_1ga6acb999cfbe40be946c53ec654cdf675';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SFlushInvalDCacheLines';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'cnt';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '1157';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Flush and invalidate several D-Cache lines specified by address in S-Mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function flush and invalidate several D-Cache lines specified
by the address and line count.
Command \ref CCM_DC_WBINVAL is written to CSR \ref CSR_CCM_SCOMMAND.
\remarks
This function must be executed in M/S-Mode only.
@param [in]    addr    start address to be flushed and invalidated
@param [in]    cnt     count of cache lines to be flushed and invalidated
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga683c246c3fdba09511675365a2fa8bd3';
        func-mem-ref-line = '2046';
        func-mem-ref-name = '__RWMB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gga700ee5ca80d2777b38c6d8c963e4e5a9a4057c388582334b258d01660940d89b2';
        func-mem-ref-line = '84';
        func-mem-ref-name = 'CCM_DC_WBINVAL';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gab508f4dfbd649a25f7eaa8ac5b88a8c0';
        func-mem-ref-line = '1080';
        func-mem-ref-name = 'CSR_CCM_SBEGINADDR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga19b9cf123424b131c5ba30946c54c2fd';
        func-mem-ref-line = '1081';
        func-mem-ref-name = 'CSR_CCM_SCOMMAND';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga5fb9682e1f64a554b42c5fe7cf6f5aca';
        func-mem-ref-line = '153';
        func-mem-ref-name = 'FlushPipeCCM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DCache_1ga531c9b3fe73c04f4ed471ac5e09e16c6';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'UFlushInvalDCacheLine';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '1179';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Flush and invalidate one D-Cache line specified by address in U-Mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function flush and invalidate one D-Cache line specified by the address.
Command \ref CCM_DC_WBINVAL is written to CSR \ref CSR_CCM_UCOMMAND.
\remarks
This function must be executed in M/S/U-Mode only.
@param [in]    addr    start address to be flushed and invalidated
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga683c246c3fdba09511675365a2fa8bd3';
        func-mem-ref-line = '2046';
        func-mem-ref-name = '__RWMB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gga700ee5ca80d2777b38c6d8c963e4e5a9a4057c388582334b258d01660940d89b2';
        func-mem-ref-line = '84';
        func-mem-ref-name = 'CCM_DC_WBINVAL';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaca251c4a3f81dd257831ac6407088e52';
        func-mem-ref-line = '1083';
        func-mem-ref-name = 'CSR_CCM_UBEGINADDR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga53c64245d173eed1d1622cfac509ff60';
        func-mem-ref-line = '1084';
        func-mem-ref-name = 'CSR_CCM_UCOMMAND';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga5fb9682e1f64a554b42c5fe7cf6f5aca';
        func-mem-ref-line = '153';
        func-mem-ref-name = 'FlushPipeCCM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DCache_1ga54f2cea8854f1d1d8d377ce458e07765';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'UFlushInvalDCacheLines';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'cnt';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '1198';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Flush and invalidate several D-Cache lines specified by address in U-Mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function flush and invalidate several D-Cache lines specified
by the address and line count.
Command \ref CCM_DC_WBINVAL is written to CSR \ref CSR_CCM_UCOMMAND.
\remarks
This function must be executed in M/S/U-Mode only.
@param [in]    addr    start address to be flushed and invalidated
@param [in]    cnt     count of cache lines to be flushed and invalidated
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga683c246c3fdba09511675365a2fa8bd3';
        func-mem-ref-line = '2046';
        func-mem-ref-name = '__RWMB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gga700ee5ca80d2777b38c6d8c963e4e5a9a4057c388582334b258d01660940d89b2';
        func-mem-ref-line = '84';
        func-mem-ref-name = 'CCM_DC_WBINVAL';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaca251c4a3f81dd257831ac6407088e52';
        func-mem-ref-line = '1083';
        func-mem-ref-name = 'CSR_CCM_UBEGINADDR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga53c64245d173eed1d1622cfac509ff60';
        func-mem-ref-line = '1084';
        func-mem-ref-name = 'CSR_CCM_UCOMMAND';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga5fb9682e1f64a554b42c5fe7cf6f5aca';
        func-mem-ref-line = '153';
        func-mem-ref-name = 'FlushPipeCCM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DCache_1ga5d2dc4b38fa3332a6c1815aebe3576e7';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'MLockDCacheLine';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '1221';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Lock one D-Cache line specified by address in M-Mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function lock one D-Cache line specified by the address.
Command \ref CCM_DC_LOCK is written to CSR \ref CSR_CCM_MCOMMAND.
\remarks
This function must be executed in M-Mode only.
@param [in]    addr    start address to be locked
\return result of CCM lock operation, see enum \ref CCM_OP_FINFO
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '642';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga683c246c3fdba09511675365a2fa8bd3';
        func-mem-ref-line = '2046';
        func-mem-ref-name = '__RWMB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gga700ee5ca80d2777b38c6d8c963e4e5a9a5586e7c5834863e66ab44936e8d6b986';
        func-mem-ref-line = '85';
        func-mem-ref-name = 'CCM_DC_LOCK';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga4faa0c15728837765ec9aaf28f14c09b';
        func-mem-ref-line = '1076';
        func-mem-ref-name = 'CSR_CCM_MBEGINADDR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga09b6c06fdc71424566c30bad5470c0c1';
        func-mem-ref-line = '1077';
        func-mem-ref-name = 'CSR_CCM_MCOMMAND';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga68f7537cd8e79434b1a191053d09d5f7';
        func-mem-ref-line = '1078';
        func-mem-ref-name = 'CSR_CCM_MDATA';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga5fb9682e1f64a554b42c5fe7cf6f5aca';
        func-mem-ref-line = '153';
        func-mem-ref-name = 'FlushPipeCCM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DCache_1ga5ace26b8090ce18c8a7bea96ecdee0fd';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'MLockDCacheLines';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'cnt';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '1242';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Lock several D-Cache lines specified by address in M-Mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function lock several D-Cache lines specified by the address
and line count.
Command \ref CCM_DC_LOCK is written to CSR \ref CSR_CCM_MCOMMAND.
\remarks
This function must be executed in M-Mode only.
@param [in]    addr    start address to be locked
@param [in]    cnt     count of cache lines to be locked
\return result of CCM lock operation, see enum \ref CCM_OP_FINFO
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '642';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga683c246c3fdba09511675365a2fa8bd3';
        func-mem-ref-line = '2046';
        func-mem-ref-name = '__RWMB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gga700ee5ca80d2777b38c6d8c963e4e5a9a5586e7c5834863e66ab44936e8d6b986';
        func-mem-ref-line = '85';
        func-mem-ref-name = 'CCM_DC_LOCK';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gga0a94b900668f476abc0587b061b7afcaa59b7659ff9fdd6d34f5bd24138b4363f';
        func-mem-ref-line = '71';
        func-mem-ref-name = 'CCM_OP_SUCCESS';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga4faa0c15728837765ec9aaf28f14c09b';
        func-mem-ref-line = '1076';
        func-mem-ref-name = 'CSR_CCM_MBEGINADDR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga09b6c06fdc71424566c30bad5470c0c1';
        func-mem-ref-line = '1077';
        func-mem-ref-name = 'CSR_CCM_MCOMMAND';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga68f7537cd8e79434b1a191053d09d5f7';
        func-mem-ref-line = '1078';
        func-mem-ref-name = 'CSR_CCM_MDATA';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga5fb9682e1f64a554b42c5fe7cf6f5aca';
        func-mem-ref-line = '153';
        func-mem-ref-name = 'FlushPipeCCM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DCache_1gad04a1564bd90165809036011a2039762';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SLockDCacheLine';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '1271';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Lock one D-Cache line specified by address in S-Mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function lock one D-Cache line specified by the address.
Command \ref CCM_DC_LOCK is written to CSR \ref CSR_CCM_SCOMMAND.
\remarks
This function must be executed in M/S-Mode only.
@param [in]    addr    start address to be locked
\return result of CCM lock operation, see enum \ref CCM_OP_FINFO
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '642';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga683c246c3fdba09511675365a2fa8bd3';
        func-mem-ref-line = '2046';
        func-mem-ref-name = '__RWMB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gga700ee5ca80d2777b38c6d8c963e4e5a9a5586e7c5834863e66ab44936e8d6b986';
        func-mem-ref-line = '85';
        func-mem-ref-name = 'CCM_DC_LOCK';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gab508f4dfbd649a25f7eaa8ac5b88a8c0';
        func-mem-ref-line = '1080';
        func-mem-ref-name = 'CSR_CCM_SBEGINADDR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga19b9cf123424b131c5ba30946c54c2fd';
        func-mem-ref-line = '1081';
        func-mem-ref-name = 'CSR_CCM_SCOMMAND';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga58c7d8ca64fe96544d85e57f4b6a3bca';
        func-mem-ref-line = '1082';
        func-mem-ref-name = 'CSR_CCM_SDATA';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga5fb9682e1f64a554b42c5fe7cf6f5aca';
        func-mem-ref-line = '153';
        func-mem-ref-name = 'FlushPipeCCM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DCache_1ga2de7ab5e569e56c582a4e7eb0aca2a3b';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SLockDCacheLines';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'cnt';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '1292';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Lock several D-Cache lines specified by address in S-Mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function lock several D-Cache lines specified by the address
and line count.
Command \ref CCM_DC_LOCK is written to CSR \ref CSR_CCM_SCOMMAND.
\remarks
This function must be executed in M/S-Mode only.
@param [in]    addr    start address to be locked
@param [in]    cnt     count of cache lines to be locked
\return result of CCM lock operation, see enum \ref CCM_OP_FINFO
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '642';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga683c246c3fdba09511675365a2fa8bd3';
        func-mem-ref-line = '2046';
        func-mem-ref-name = '__RWMB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gga700ee5ca80d2777b38c6d8c963e4e5a9a5586e7c5834863e66ab44936e8d6b986';
        func-mem-ref-line = '85';
        func-mem-ref-name = 'CCM_DC_LOCK';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gga0a94b900668f476abc0587b061b7afcaa59b7659ff9fdd6d34f5bd24138b4363f';
        func-mem-ref-line = '71';
        func-mem-ref-name = 'CCM_OP_SUCCESS';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gab508f4dfbd649a25f7eaa8ac5b88a8c0';
        func-mem-ref-line = '1080';
        func-mem-ref-name = 'CSR_CCM_SBEGINADDR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga19b9cf123424b131c5ba30946c54c2fd';
        func-mem-ref-line = '1081';
        func-mem-ref-name = 'CSR_CCM_SCOMMAND';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga58c7d8ca64fe96544d85e57f4b6a3bca';
        func-mem-ref-line = '1082';
        func-mem-ref-name = 'CSR_CCM_SDATA';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga5fb9682e1f64a554b42c5fe7cf6f5aca';
        func-mem-ref-line = '153';
        func-mem-ref-name = 'FlushPipeCCM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DCache_1gad20886a44092fc702c46eb569039c724';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'ULockDCacheLine';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '1321';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Lock one D-Cache line specified by address in U-Mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function lock one D-Cache line specified by the address.
Command \ref CCM_DC_LOCK is written to CSR \ref CSR_CCM_UCOMMAND.
\remarks
This function must be executed in M/S/U-Mode only.
@param [in]    addr    start address to be locked
\return result of CCM lock operation, see enum \ref CCM_OP_FINFO
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '642';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga683c246c3fdba09511675365a2fa8bd3';
        func-mem-ref-line = '2046';
        func-mem-ref-name = '__RWMB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gga700ee5ca80d2777b38c6d8c963e4e5a9a5586e7c5834863e66ab44936e8d6b986';
        func-mem-ref-line = '85';
        func-mem-ref-name = 'CCM_DC_LOCK';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaca251c4a3f81dd257831ac6407088e52';
        func-mem-ref-line = '1083';
        func-mem-ref-name = 'CSR_CCM_UBEGINADDR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga53c64245d173eed1d1622cfac509ff60';
        func-mem-ref-line = '1084';
        func-mem-ref-name = 'CSR_CCM_UCOMMAND';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gad18936febc391b50b6ba078eb605758e';
        func-mem-ref-line = '1085';
        func-mem-ref-name = 'CSR_CCM_UDATA';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga5fb9682e1f64a554b42c5fe7cf6f5aca';
        func-mem-ref-line = '153';
        func-mem-ref-name = 'FlushPipeCCM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DCache_1ga837ef5573c62e529c829d2b5889d11dd';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'ULockDCacheLines';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'cnt';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '1342';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Lock several D-Cache lines specified by address in U-Mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function lock several D-Cache lines specified by the address
and line count.
Command \ref CCM_DC_LOCK is written to CSR \ref CSR_CCM_UCOMMAND.
\remarks
This function must be executed in M/S/U-Mode only.
@param [in]    addr    start address to be locked
@param [in]    cnt     count of cache lines to be locked
\return result of CCM lock operation, see enum \ref CCM_OP_FINFO
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '642';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga683c246c3fdba09511675365a2fa8bd3';
        func-mem-ref-line = '2046';
        func-mem-ref-name = '__RWMB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gga700ee5ca80d2777b38c6d8c963e4e5a9a5586e7c5834863e66ab44936e8d6b986';
        func-mem-ref-line = '85';
        func-mem-ref-name = 'CCM_DC_LOCK';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gga0a94b900668f476abc0587b061b7afcaa59b7659ff9fdd6d34f5bd24138b4363f';
        func-mem-ref-line = '71';
        func-mem-ref-name = 'CCM_OP_SUCCESS';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaca251c4a3f81dd257831ac6407088e52';
        func-mem-ref-line = '1083';
        func-mem-ref-name = 'CSR_CCM_UBEGINADDR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga53c64245d173eed1d1622cfac509ff60';
        func-mem-ref-line = '1084';
        func-mem-ref-name = 'CSR_CCM_UCOMMAND';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gad18936febc391b50b6ba078eb605758e';
        func-mem-ref-line = '1085';
        func-mem-ref-name = 'CSR_CCM_UDATA';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga5fb9682e1f64a554b42c5fe7cf6f5aca';
        func-mem-ref-line = '153';
        func-mem-ref-name = 'FlushPipeCCM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DCache_1gaecf20dd50e0bf64907c4b57217471062';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'MUnlockDCacheLine';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '1370';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Unlock one D-Cache line specified by address in M-Mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function unlock one D-Cache line specified by the address.
Command \ref CCM_DC_UNLOCK is written to CSR \ref CSR_CCM_MCOMMAND.
\remarks
This function must be executed in M-Mode only.
@param [in]    addr    start address to be unlocked
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga683c246c3fdba09511675365a2fa8bd3';
        func-mem-ref-line = '2046';
        func-mem-ref-name = '__RWMB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gga700ee5ca80d2777b38c6d8c963e4e5a9ade24a5dd44a827e65d197e0ba9fc1f41';
        func-mem-ref-line = '86';
        func-mem-ref-name = 'CCM_DC_UNLOCK';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga4faa0c15728837765ec9aaf28f14c09b';
        func-mem-ref-line = '1076';
        func-mem-ref-name = 'CSR_CCM_MBEGINADDR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga09b6c06fdc71424566c30bad5470c0c1';
        func-mem-ref-line = '1077';
        func-mem-ref-name = 'CSR_CCM_MCOMMAND';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga5fb9682e1f64a554b42c5fe7cf6f5aca';
        func-mem-ref-line = '153';
        func-mem-ref-name = 'FlushPipeCCM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DCache_1ga5cf20392aecb5c68913c6329e5d8e5f8';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'MUnlockDCacheLines';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'cnt';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '1389';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Unlock several D-Cache lines specified by address in M-Mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function unlock several D-Cache lines specified
by the address and line count.
Command \ref CCM_DC_UNLOCK is written to CSR \ref CSR_CCM_MCOMMAND.
\remarks
This function must be executed in M-Mode only.
@param [in]    addr    start address to be unlocked
@param [in]    cnt     count of cache lines to be unlocked
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga683c246c3fdba09511675365a2fa8bd3';
        func-mem-ref-line = '2046';
        func-mem-ref-name = '__RWMB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gga700ee5ca80d2777b38c6d8c963e4e5a9ade24a5dd44a827e65d197e0ba9fc1f41';
        func-mem-ref-line = '86';
        func-mem-ref-name = 'CCM_DC_UNLOCK';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga4faa0c15728837765ec9aaf28f14c09b';
        func-mem-ref-line = '1076';
        func-mem-ref-name = 'CSR_CCM_MBEGINADDR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga09b6c06fdc71424566c30bad5470c0c1';
        func-mem-ref-line = '1077';
        func-mem-ref-name = 'CSR_CCM_MCOMMAND';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga5fb9682e1f64a554b42c5fe7cf6f5aca';
        func-mem-ref-line = '153';
        func-mem-ref-name = 'FlushPipeCCM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DCache_1gab7617b03b29b8002363779cf9801b25b';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SUnlockDCacheLine';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '1411';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Unlock one D-Cache line specified by address in S-Mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function unlock one D-Cache line specified by the address.
Command \ref CCM_DC_UNLOCK is written to CSR \ref CSR_CCM_SCOMMAND.
\remarks
This function must be executed in M/S-Mode only.
@param [in]    addr    start address to be unlocked
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga683c246c3fdba09511675365a2fa8bd3';
        func-mem-ref-line = '2046';
        func-mem-ref-name = '__RWMB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gga700ee5ca80d2777b38c6d8c963e4e5a9ade24a5dd44a827e65d197e0ba9fc1f41';
        func-mem-ref-line = '86';
        func-mem-ref-name = 'CCM_DC_UNLOCK';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gab508f4dfbd649a25f7eaa8ac5b88a8c0';
        func-mem-ref-line = '1080';
        func-mem-ref-name = 'CSR_CCM_SBEGINADDR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga19b9cf123424b131c5ba30946c54c2fd';
        func-mem-ref-line = '1081';
        func-mem-ref-name = 'CSR_CCM_SCOMMAND';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga5fb9682e1f64a554b42c5fe7cf6f5aca';
        func-mem-ref-line = '153';
        func-mem-ref-name = 'FlushPipeCCM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DCache_1gab95aa0a6868dfe1dd920c59de2a1b8d0';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SUnlockDCacheLines';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'cnt';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '1430';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Unlock several D-Cache lines specified by address in S-Mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function unlock several D-Cache lines specified
by the address and line count.
Command \ref CCM_DC_UNLOCK is written to CSR \ref CSR_CCM_SCOMMAND.
\remarks
This function must be executed in M/S-Mode only.
@param [in]    addr    start address to be unlocked
@param [in]    cnt     count of cache lines to be unlocked
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga683c246c3fdba09511675365a2fa8bd3';
        func-mem-ref-line = '2046';
        func-mem-ref-name = '__RWMB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gga700ee5ca80d2777b38c6d8c963e4e5a9ade24a5dd44a827e65d197e0ba9fc1f41';
        func-mem-ref-line = '86';
        func-mem-ref-name = 'CCM_DC_UNLOCK';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gab508f4dfbd649a25f7eaa8ac5b88a8c0';
        func-mem-ref-line = '1080';
        func-mem-ref-name = 'CSR_CCM_SBEGINADDR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga19b9cf123424b131c5ba30946c54c2fd';
        func-mem-ref-line = '1081';
        func-mem-ref-name = 'CSR_CCM_SCOMMAND';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga5fb9682e1f64a554b42c5fe7cf6f5aca';
        func-mem-ref-line = '153';
        func-mem-ref-name = 'FlushPipeCCM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DCache_1gae44d70b1250ef92db399f46119d783a4';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'UUnlockDCacheLine';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '1452';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Unlock one D-Cache line specified by address in U-Mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function unlock one D-Cache line specified by the address.
Command \ref CCM_DC_UNLOCK is written to CSR \ref CSR_CCM_UCOMMAND.
\remarks
This function must be executed in M/S/U-Mode only.
@param [in]    addr    start address to be unlocked
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga683c246c3fdba09511675365a2fa8bd3';
        func-mem-ref-line = '2046';
        func-mem-ref-name = '__RWMB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gga700ee5ca80d2777b38c6d8c963e4e5a9ade24a5dd44a827e65d197e0ba9fc1f41';
        func-mem-ref-line = '86';
        func-mem-ref-name = 'CCM_DC_UNLOCK';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaca251c4a3f81dd257831ac6407088e52';
        func-mem-ref-line = '1083';
        func-mem-ref-name = 'CSR_CCM_UBEGINADDR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga53c64245d173eed1d1622cfac509ff60';
        func-mem-ref-line = '1084';
        func-mem-ref-name = 'CSR_CCM_UCOMMAND';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga5fb9682e1f64a554b42c5fe7cf6f5aca';
        func-mem-ref-line = '153';
        func-mem-ref-name = 'FlushPipeCCM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DCache_1ga3c1599397bb47af9542b9478a650f38f';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'UUnlockDCacheLines';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'cnt';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '1471';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Unlock several D-Cache lines specified by address in U-Mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function unlock several D-Cache lines specified
by the address and line count.
Command \ref CCM_DC_UNLOCK is written to CSR \ref CSR_CCM_UCOMMAND.
\remarks
This function must be executed in M/S/U-Mode only.
@param [in]    addr    start address to be unlocked
@param [in]    cnt     count of cache lines to be unlocked
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga683c246c3fdba09511675365a2fa8bd3';
        func-mem-ref-line = '2046';
        func-mem-ref-name = '__RWMB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gga700ee5ca80d2777b38c6d8c963e4e5a9ade24a5dd44a827e65d197e0ba9fc1f41';
        func-mem-ref-line = '86';
        func-mem-ref-name = 'CCM_DC_UNLOCK';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaca251c4a3f81dd257831ac6407088e52';
        func-mem-ref-line = '1083';
        func-mem-ref-name = 'CSR_CCM_UBEGINADDR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga53c64245d173eed1d1622cfac509ff60';
        func-mem-ref-line = '1084';
        func-mem-ref-name = 'CSR_CCM_UCOMMAND';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga5fb9682e1f64a554b42c5fe7cf6f5aca';
        func-mem-ref-line = '153';
        func-mem-ref-name = 'FlushPipeCCM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DCache_1gad9b649b63f1853da9d45000de84d9abc';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'MInvalDCache';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '1493';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Invalidate all D-Cache lines in M-Mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function invalidate all D-Cache lines.
Command \ref CCM_DC_INVAL_ALL is written to CSR \ref CSR_CCM_MCOMMAND.
\remarks
This function must be executed in M-Mode only.
@param [in]    addr    start address to be invalidated
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga683c246c3fdba09511675365a2fa8bd3';
        func-mem-ref-line = '2046';
        func-mem-ref-name = '__RWMB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gga700ee5ca80d2777b38c6d8c963e4e5a9abd763964dd26d5b6ca522245cf9b62d6';
        func-mem-ref-line = '89';
        func-mem-ref-name = 'CCM_DC_INVAL_ALL';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga09b6c06fdc71424566c30bad5470c0c1';
        func-mem-ref-line = '1077';
        func-mem-ref-name = 'CSR_CCM_MCOMMAND';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga5fb9682e1f64a554b42c5fe7cf6f5aca';
        func-mem-ref-line = '153';
        func-mem-ref-name = 'FlushPipeCCM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DCache_1ga116d85ad3fcc4e9e80997f704e5d043a';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SInvalDCache';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '1509';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Invalidate all D-Cache lines in S-Mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function invalidate all D-Cache lines.
Command \ref CCM_DC_INVAL_ALL is written to CSR \ref CSR_CCM_SCOMMAND.
\remarks
This function must be executed in M/S-Mode only.
@param [in]    addr    start address to be invalidated
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga683c246c3fdba09511675365a2fa8bd3';
        func-mem-ref-line = '2046';
        func-mem-ref-name = '__RWMB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gga700ee5ca80d2777b38c6d8c963e4e5a9abd763964dd26d5b6ca522245cf9b62d6';
        func-mem-ref-line = '89';
        func-mem-ref-name = 'CCM_DC_INVAL_ALL';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga19b9cf123424b131c5ba30946c54c2fd';
        func-mem-ref-line = '1081';
        func-mem-ref-name = 'CSR_CCM_SCOMMAND';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga5fb9682e1f64a554b42c5fe7cf6f5aca';
        func-mem-ref-line = '153';
        func-mem-ref-name = 'FlushPipeCCM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DCache_1gad9e62828c92a3f299da5468bdd09ab16';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'UInvalDCache';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '1527';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Invalidate all D-Cache lines in U-Mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function invalidate all D-Cache lines.
In U-Mode, this operation will be automatically
translated to flush and invalidate operations by hardware.
Command \ref CCM_DC_INVAL_ALL is written to CSR \ref CSR_CCM_UCOMMAND.
\remarks
This function must be executed in M/S/U-Mode only.
@param [in]    addr    start address to be invalidated
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga683c246c3fdba09511675365a2fa8bd3';
        func-mem-ref-line = '2046';
        func-mem-ref-name = '__RWMB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gga700ee5ca80d2777b38c6d8c963e4e5a9abd763964dd26d5b6ca522245cf9b62d6';
        func-mem-ref-line = '89';
        func-mem-ref-name = 'CCM_DC_INVAL_ALL';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga53c64245d173eed1d1622cfac509ff60';
        func-mem-ref-line = '1084';
        func-mem-ref-name = 'CSR_CCM_UCOMMAND';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga5fb9682e1f64a554b42c5fe7cf6f5aca';
        func-mem-ref-line = '153';
        func-mem-ref-name = 'FlushPipeCCM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DCache_1gaba8bcbc1416706a049aff497323118de';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'MFlushDCache';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '1543';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Flush all D-Cache lines in M-Mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function flush all D-Cache lines.
Command \ref CCM_DC_WB_ALL is written to CSR \ref CSR_CCM_MCOMMAND.
\remarks
This function must be executed in M-Mode only.
@param [in]    addr    start address to be flushed
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga683c246c3fdba09511675365a2fa8bd3';
        func-mem-ref-line = '2046';
        func-mem-ref-name = '__RWMB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gga700ee5ca80d2777b38c6d8c963e4e5a9a7f03de0ee7e6edd2a27f6987448ed6e1';
        func-mem-ref-line = '88';
        func-mem-ref-name = 'CCM_DC_WB_ALL';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga09b6c06fdc71424566c30bad5470c0c1';
        func-mem-ref-line = '1077';
        func-mem-ref-name = 'CSR_CCM_MCOMMAND';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga5fb9682e1f64a554b42c5fe7cf6f5aca';
        func-mem-ref-line = '153';
        func-mem-ref-name = 'FlushPipeCCM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DCache_1ga844d78b425b05a5f461562d7be9df715';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SFlushDCache';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '1559';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Flush all D-Cache lines in S-Mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function flush all D-Cache lines.
Command \ref CCM_DC_WB_ALL is written to CSR \ref CSR_CCM_SCOMMAND.
\remarks
This function must be executed in M/S-Mode only.
@param [in]    addr    start address to be flushed
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga683c246c3fdba09511675365a2fa8bd3';
        func-mem-ref-line = '2046';
        func-mem-ref-name = '__RWMB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gga700ee5ca80d2777b38c6d8c963e4e5a9a7f03de0ee7e6edd2a27f6987448ed6e1';
        func-mem-ref-line = '88';
        func-mem-ref-name = 'CCM_DC_WB_ALL';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga19b9cf123424b131c5ba30946c54c2fd';
        func-mem-ref-line = '1081';
        func-mem-ref-name = 'CSR_CCM_SCOMMAND';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga5fb9682e1f64a554b42c5fe7cf6f5aca';
        func-mem-ref-line = '153';
        func-mem-ref-name = 'FlushPipeCCM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DCache_1ga0e90fc37ce51b5e6bbf5b75d4c604d94';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'UFlushDCache';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '1575';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Flush all D-Cache lines in U-Mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function flush all D-Cache lines.
Command \ref CCM_DC_WB_ALL is written to CSR \ref CSR_CCM_UCOMMAND.
\remarks
This function must be executed in M/S/U-Mode only.
@param [in]    addr    start address to be flushed
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga683c246c3fdba09511675365a2fa8bd3';
        func-mem-ref-line = '2046';
        func-mem-ref-name = '__RWMB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gga700ee5ca80d2777b38c6d8c963e4e5a9a7f03de0ee7e6edd2a27f6987448ed6e1';
        func-mem-ref-line = '88';
        func-mem-ref-name = 'CCM_DC_WB_ALL';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga53c64245d173eed1d1622cfac509ff60';
        func-mem-ref-line = '1084';
        func-mem-ref-name = 'CSR_CCM_UCOMMAND';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga5fb9682e1f64a554b42c5fe7cf6f5aca';
        func-mem-ref-line = '153';
        func-mem-ref-name = 'FlushPipeCCM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DCache_1gaac1b0a2c6dab2434dfbf163f798e75c0';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'MFlushInvalDCache';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '1591';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Flush and invalidate all D-Cache lines in M-Mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function flush and invalidate all D-Cache lines.
Command \ref CCM_DC_WBINVAL_ALL is written to CSR \ref CSR_CCM_MCOMMAND.
\remarks
This function must be executed in M-Mode only.
@param [in]    addr    start address to be flushed and locked
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga683c246c3fdba09511675365a2fa8bd3';
        func-mem-ref-line = '2046';
        func-mem-ref-name = '__RWMB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gga700ee5ca80d2777b38c6d8c963e4e5a9acfd9513f7bfd48fbe76fe402f11e3587';
        func-mem-ref-line = '87';
        func-mem-ref-name = 'CCM_DC_WBINVAL_ALL';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga09b6c06fdc71424566c30bad5470c0c1';
        func-mem-ref-line = '1077';
        func-mem-ref-name = 'CSR_CCM_MCOMMAND';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga5fb9682e1f64a554b42c5fe7cf6f5aca';
        func-mem-ref-line = '153';
        func-mem-ref-name = 'FlushPipeCCM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DCache_1ga5f1ac4091f16fb18eca22ba850ad5ce9';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SFlushInvalDCache';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '1607';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Flush and invalidate all D-Cache lines in S-Mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function flush and invalidate all D-Cache lines.
Command \ref CCM_DC_WBINVAL_ALL is written to CSR \ref CSR_CCM_SCOMMAND.
\remarks
This function must be executed in M/S-Mode only.
@param [in]    addr    start address to be flushed and locked
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga683c246c3fdba09511675365a2fa8bd3';
        func-mem-ref-line = '2046';
        func-mem-ref-name = '__RWMB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gga700ee5ca80d2777b38c6d8c963e4e5a9acfd9513f7bfd48fbe76fe402f11e3587';
        func-mem-ref-line = '87';
        func-mem-ref-name = 'CCM_DC_WBINVAL_ALL';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga19b9cf123424b131c5ba30946c54c2fd';
        func-mem-ref-line = '1081';
        func-mem-ref-name = 'CSR_CCM_SCOMMAND';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga5fb9682e1f64a554b42c5fe7cf6f5aca';
        func-mem-ref-line = '153';
        func-mem-ref-name = 'FlushPipeCCM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DCache_1ga0787776bb202ff85236210d47c3f3893';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'UFlushInvalDCache';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '1623';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Flush and invalidate all D-Cache lines in U-Mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function flush and invalidate all D-Cache lines.
Command \ref CCM_DC_WBINVAL_ALL is written to CSR \ref CSR_CCM_UCOMMAND.
\remarks
This function must be executed in M/S/U-Mode only.
@param [in]    addr    start address to be flushed and locked
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga683c246c3fdba09511675365a2fa8bd3';
        func-mem-ref-line = '2046';
        func-mem-ref-name = '__RWMB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gga700ee5ca80d2777b38c6d8c963e4e5a9acfd9513f7bfd48fbe76fe402f11e3587';
        func-mem-ref-line = '87';
        func-mem-ref-name = 'CCM_DC_WBINVAL_ALL';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga53c64245d173eed1d1622cfac509ff60';
        func-mem-ref-line = '1084';
        func-mem-ref-name = 'CSR_CCM_UCOMMAND';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga5fb9682e1f64a554b42c5fe7cf6f5aca';
        func-mem-ref-line = '153';
        func-mem-ref-name = 'FlushPipeCCM';
    };
    }; /* func-member */
    };
  file-full-name  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
Cache feature API header file for Nuclei N/NX Core.
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_



_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'core__feature__cidu_8h';
  file-name = 'core_feature_cidu.h';
    define = {
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CIDU_1gaadfdda6d2718d54ba56e2c3bd5be199c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CIDU_BASE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__CIDU_BASEADDR
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cidu.h';
      define-mem-desc-line = '64';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CIDU_1gabb7743b9302d2b80ebe1e28fa0f056d4';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CIDU_RECEIVE_INTERRUPT_EN';
      define-mem-param  = {
        define-mem-def-name = 'core_id';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x1UL << core_id)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cidu.h';
      define-mem-desc-line = '65';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Indicates the core can receive corresponding interrupt.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CIDU_1gae6534a19ca91b304625d70ea06169528';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CIDU_CORE_INT_STATUS_OFS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cidu.h';
      define-mem-desc-line = '67';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Core n Inter Core Interrupt status register base offset.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CIDU_1ga21e885749db739d12dd3c3444afc3f4e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CIDU_SEMAPHORE_OFS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x80
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cidu.h';
      define-mem-desc-line = '68';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Semaphore n register base offset.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CIDU_1ga031700572d4c31f74e1d826a2a444b8a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CIDU_ICI_SHADOW_OFS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3FFC
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cidu.h';
      define-mem-desc-line = '69';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
ICI Interrupt source core ID and target core ID register offset.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CIDU_1gad17ebcf8898d6348d5c257090629517f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CIDU_INT_INDICATOR_OFS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x4000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cidu.h';
      define-mem-desc-line = '70';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
External interrupt n indicator register base offset.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CIDU_1ga5b6eddcaa5944ab28074718f6e30bec8';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CIDU_INT_MASK_OFS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x8000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cidu.h';
      define-mem-desc-line = '71';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
External interrupt n mask (mask interrupt n to cores or not when interrupt n indicator on)register base offset.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CIDU_1ga31755a9096b8a9ecc8da8f561fed7ed3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CIDU_CORE_NUM_OFS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xC084
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cidu.h';
      define-mem-desc-line = '72';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Static configuration core num register offset.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CIDU_1ga02ec1e74bd5d8dcb3934b1ea0257f772';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CIDU_INT_NUM_OFS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xC090
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cidu.h';
      define-mem-desc-line = '73';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Static configuration external interrupt number register offset.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CIDU_1ga20d94e37e48cb6ba9bc4b9fd0199ac49';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CIDU_CORE_INT_STATUS_ADDR';
      define-mem-param  = {
        define-mem-def-name = 'n';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(unsigned long)((CIDU_BASE) + (CIDU_CORE_INT_STATUS_OFS) + ((n) << 2))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cidu.h';
      define-mem-desc-line = '75';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Core n Inter Core Interrupt status register address.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CIDU_1gabdb87793dbe1c9659fa16c8a4e81ced7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CIDU_SEMAPHORE_ADDR';
      define-mem-param  = {
        define-mem-def-name = 'n';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(unsigned long)((CIDU_BASE) + (CIDU_SEMAPHORE_OFS) + ((n) << 2))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cidu.h';
      define-mem-desc-line = '76';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Semaphore n register address.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CIDU_1gaac75256facc14f73f90cb50ce9a1f64b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CIDU_ICI_SHADOW_ADDR';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(unsigned long)((CIDU_BASE) + (CIDU_ICI_SHADOW_OFS))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cidu.h';
      define-mem-desc-line = '77';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
ICI Interrupt source core ID and target core ID register address.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CIDU_1ga6f8608352ce3d0ee9b1d41b489ecfe12';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CIDU_INT_INDICATOR_ADDR';
      define-mem-param  = {
        define-mem-def-name = 'n';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(unsigned long)((CIDU_BASE) + (CIDU_INT_INDICATOR_OFS) + ((n) << 2))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cidu.h';
      define-mem-desc-line = '78';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
External interrupt n indicator register address.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CIDU_1gab7c4acbd3af23ebbd2bdad33610138b0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CIDU_INT_MASK_ADDR';
      define-mem-param  = {
        define-mem-def-name = 'n';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(unsigned long)((CIDU_BASE) + (CIDU_INT_MASK_OFS) + ((n) << 2))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cidu.h';
      define-mem-desc-line = '79';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
External interrupt n mask (mask interrupt n to cores or not when interrupt n indicator on)register address.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CIDU_1ga94aab29597dd69e28442a099d0e87325';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CIDU_CORE_NUM_ADDR';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(unsigned long)((CIDU_BASE) + (CIDU_CORE_NUM_OFS))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cidu.h';
      define-mem-desc-line = '80';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Static configuration core num register address.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CIDU_1ga3e6e3b3de513de14debbbe6be059c95a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CIDU_INT_NUM_ADDR';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(unsigned long)((CIDU_BASE) + (CIDU_INT_NUM_OFS))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cidu.h';
      define-mem-desc-line = '81';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Static configuration external interrupt number register address.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CIDU_1ga0fc440d027c43c1fd902697cf5176db1';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CIDU_ICI_SEND_CORE_ID_POS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
16
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cidu.h';
      define-mem-desc-line = '85';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    };
    func = {
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CIDU_1ga3cf311a569953e97ae258745ee5939f3';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'CIDU_GetCoreNum';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cidu.h';
      func-mem-desc-line = '97';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get core number in the cluster.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Indicate the static configuration core num in the cluster.
\return core number configured
\remarks
- In a Nulcei multi-core system, each core has an identifiable serial number, the serial number starts from 0 and is
  continuous, also the number is static.
- CORE_NUM register is read only.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaf898279e3db81302391a698214744865';
        func-mem-ref-line = '2102';
        func-mem-ref-name = '__LW';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cidu_8h_1ga94aab29597dd69e28442a099d0e87325';
        func-mem-ref-line = '80';
        func-mem-ref-name = 'CIDU_CORE_NUM_ADDR';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CIDU_1ga71bedb5c6d0cff2b2584eaec2cfe65a9';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'CIDU_GetIntNum';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cidu.h';
      func-mem-desc-line = '114';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get external interrupt number.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Indicate the static configuration external interrupt number
\return interrupt number configured
\remarks
- INT_NUM register is read only.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaf898279e3db81302391a698214744865';
        func-mem-ref-line = '2102';
        func-mem-ref-name = '__LW';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cidu_8h_1ga3e6e3b3de513de14debbbe6be059c95a';
        func-mem-ref-line = '81';
        func-mem-ref-name = 'CIDU_INT_NUM_ADDR';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__Distribute__Interrupt_1gaf46502569035e649d43c156b1e074953';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'CIDU_BroadcastExtInterrupt';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'int_id';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'to_cores';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cidu.h';
      func-mem-desc-line = '143';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Broadcast external interrupt to cores.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function broadcasts external interrupt which id is int_id to some/all target cores
@param [in]    int_id      external interrupt id
@param [in]    to_cores    target cores which can receive interrupt, use bitwise inclusive or
                           of \ref CIDU_RECEIVE_INTERRUPT_EN(core_id)
\remarks
- External IRQn ID(int_id) is from the hard-wired persperctive,
  which has an offset mapped to the ECLIC IRQn, see Interrupt Number Definition in <Device.h>
- By default on reset, only core 0 can receive interrupt which id is int_id
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga9df58a7326fee34b546cae7d7d6e6de3';
        func-mem-ref-line = '2154';
        func-mem-ref-name = '__SW';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cidu_8h_1ga6f8608352ce3d0ee9b1d41b489ecfe12';
        func-mem-ref-line = '78';
        func-mem-ref-name = 'CIDU_INT_INDICATOR_ADDR';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__Distribute__Interrupt_1ga13cce48cc832844b7c6e6c1670fec6be';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'CIDU_GetBroadcastModeStatus';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'int_id';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cidu.h';
      func-mem-desc-line = '161';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
get broadcast mode status
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Just query the INTn_INDICATOR register value
@param [in]    int_id    external interrupt id
\return INTn_INDICATOR register value
\remarks
- External IRQn ID(int_id) is from the hard-wired persperctive,
  which has an offset mapped to the ECLIC IRQn, see Interrupt Number Definition in <Device.h>
- By default on reset, only core 0 can receive interrupt which id is int_id
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaf898279e3db81302391a698214744865';
        func-mem-ref-line = '2102';
        func-mem-ref-name = '__LW';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cidu_8h_1ga6f8608352ce3d0ee9b1d41b489ecfe12';
        func-mem-ref-line = '78';
        func-mem-ref-name = 'CIDU_INT_INDICATOR_ADDR';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__Distribute__Interrupt_1gaad3d84a98774ac6b419cf30f0f778aec';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'CIDU_SetFirstClaimMode';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'int_id';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'core_id';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cidu.h';
      func-mem-desc-line = '186';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Let the first coming core to first claim the interrupt.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
In external interrupt broadcast mode, make the first coming core to claim this interrupt and then can handle it.
@param [in]    int_id     external interrupt id
@param [in]    core_id    core id that receive the interrupt
\return -1 if it fails to claim the interrupt, else it can continue to handle the interrupt
\remarks
- External IRQn ID(int_id) is from the hard-wired persperctive,
  which has an offset mapped to the ECLIC IRQn, see Interrupt Number Definition in <Device.h>.
- If it fails to claim the interrupt, it should quit the interrupt n's handler of all cores
- When a core claims the interrupt successfully and has handled it, it must call \ref CIDU_ResetFirstClaimMode to reset the claim.
\sa
- \ref CIDU_BroadcastExtInterrupt
- \ref CIDU_ResetFirstClaimMode
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaf898279e3db81302391a698214744865';
        func-mem-ref-line = '2102';
        func-mem-ref-name = '__LW';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga9df58a7326fee34b546cae7d7d6e6de3';
        func-mem-ref-line = '2154';
        func-mem-ref-name = '__SW';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cidu_8h_1gab7c4acbd3af23ebbd2bdad33610138b0';
        func-mem-ref-line = '79';
        func-mem-ref-name = 'CIDU_INT_MASK_ADDR';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__Distribute__Interrupt_1gaad4e4acd736bddbc41c58a4bb567132f';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'CIDU_ResetFirstClaimMode';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'int_id';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cidu.h';
      func-mem-desc-line = '212';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Reset the claim mode mask.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Reset the claim mode mask by Writing the reset value (all 1) to it
@param [in] int_id    external interrupt id
\remarks
- External IRQn ID(int_id) is from the hard-wired persperctive,
  which has an offset mapped to the ECLIC IRQn, see Interrupt Number Definition in <Device.h>
- When a core claims the interrupt successfully and handle it, it must call \ref CIDU_ResetFirstClaimMode to reset the claim
\sa
- \ref CIDU_SetFirstClaimMode
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga9df58a7326fee34b546cae7d7d6e6de3';
        func-mem-ref-line = '2154';
        func-mem-ref-name = '__SW';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cidu_8h_1gab7c4acbd3af23ebbd2bdad33610138b0';
        func-mem-ref-line = '79';
        func-mem-ref-name = 'CIDU_INT_MASK_ADDR';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__Distribute__Interrupt_1ga7a2eaf87e06963639772f525791fc245';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'CIDU_GetClaimStatus';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'int_id';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cidu.h';
      func-mem-desc-line = '235';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get the claim mask status.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Get the claim mode staus, each bit[n] indicates whether core n has claimed interrupt successfully,
1 means yes, 0 means no.
@param [in]    int_id    external interrupt id
\return claim mode register INTn_MASK value
\remarks
- External IRQn ID(int_id) is from the hard-wired persperctive,
  which has an offset mapped to the ECLIC IRQn, see Interrupt Number Definition in <Device.h>
\sa
- \ref CIDU_ResetFirstClaimMode
- \ref CIDU_SetFirstClaimMode
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaf898279e3db81302391a698214744865';
        func-mem-ref-line = '2102';
        func-mem-ref-name = '__LW';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cidu_8h_1gab7c4acbd3af23ebbd2bdad33610138b0';
        func-mem-ref-line = '79';
        func-mem-ref-name = 'CIDU_INT_MASK_ADDR';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__ICI_1ga81c7f6d07f2860a36698b6d097ba5c47';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'CIDU_TriggerInterCoreInt';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'send_core_id';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'recv_core_id';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cidu.h';
      func-mem-desc-line = '271';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Trigger interrupt to another core in a multi-core cluster.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
When called by core send_core_id, CIDU will trigger ICI to core recv_core_id automatically.
and core recv_core_id could query \ref CIDU_GetCoreIntSenderId to know the sender.
@param [in]    send_core_id    the core id which want to send the inter core interrupt
@param [in]    recv_core_id    the core id which will receive the inter core interrupt
\remarks
- The core recv_core_id need to call CIDU_ClearInterCoreIntReq to clear the corresponding bit/bits
  of its own COREn_INT_STATUS.
- It supports that multiple cores call \ref CIDU_TriggerInterCoreInt simultaneously.
\sa
- \ref CIDU_GetCoreIntSenderId
- \ref CIDU_ClearInterCoreIntReq
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga9df58a7326fee34b546cae7d7d6e6de3';
        func-mem-ref-line = '2154';
        func-mem-ref-name = '__SW';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cidu_8h_1ga0fc440d027c43c1fd902697cf5176db1';
        func-mem-ref-line = '85';
        func-mem-ref-name = 'CIDU_ICI_SEND_CORE_ID_POS';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cidu_8h_1gaac75256facc14f73f90cb50ce9a1f64b';
        func-mem-ref-line = '77';
        func-mem-ref-name = 'CIDU_ICI_SHADOW_ADDR';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__ICI_1gaf8f4e2bb0f3d586d663193f2d1aa6cfb';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'CIDU_QueryCoreIntSenderMask';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'recv_core_id';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cidu.h';
      func-mem-desc-line = '290';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Core recv_core_id queries out who sends inter core interrupt to itself.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
In the ISR of ICI, receive core can query if bit[n] of this return value is 1, core n sends the current ICI,
if bit[m] is 1, then core m also sends, etc.
@param [in]    recv_core_id    the core id which receives the inter core interrupt
\return    Value that shows sender core's ID n whose bit<a href="bit[m] if core m send too, etc.">n</a> is 1
\remarks
- If the ICI ISR has finished the job, should call \ref CIDU_ClearInterCoreIntReq to clear the IRQ
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaf898279e3db81302391a698214744865';
        func-mem-ref-line = '2102';
        func-mem-ref-name = '__LW';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cidu_8h_1ga20d94e37e48cb6ba9bc4b9fd0199ac49';
        func-mem-ref-line = '75';
        func-mem-ref-name = 'CIDU_CORE_INT_STATUS_ADDR';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__ICI_1gae9dcf1e1edd9c2d022cf5868be2d8414';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'CIDU_ClearInterCoreIntReq';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'send_core_id';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'recv_core_id';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cidu.h';
      func-mem-desc-line = '309';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Clear the corresponding bit/bits of ICI request triggered by sender core.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Core recv_core_id write 1 to clear the bit send_core_id of the core recv_core_id's COREn_INT_STATUS.
@param [in]    send_core_id    the core id which wants to send the inter core interrupt
@param [in]    recv_core_id    the core id which will receive the inter core interrupt
\remarks
- If the ICI ISR has finished the job of send_core_id_n's ICI, then clear bit send_core_id_n;
  if it has finished send_core_id_n and send_core_id_m's, then should clear both the bits, etc.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga9df58a7326fee34b546cae7d7d6e6de3';
        func-mem-ref-line = '2154';
        func-mem-ref-name = '__SW';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cidu_8h_1ga20d94e37e48cb6ba9bc4b9fd0199ac49';
        func-mem-ref-line = '75';
        func-mem-ref-name = 'CIDU_CORE_INT_STATUS_ADDR';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__Semaphore_1ga4d7167adf7d931c90d5166493edd2136';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'CIDU_GetSemaphoreStatus';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'semph_n';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cidu.h';
      func-mem-desc-line = '339';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get SEMAPHOREn's value.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Just query the semaphore n's value
@param [in]    semph_n     the semaphore id used to protect a critical resource
\return register SEMAPHOREn_STATUS value
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaf898279e3db81302391a698214744865';
        func-mem-ref-line = '2102';
        func-mem-ref-name = '__LW';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cidu_8h_1gabdb87793dbe1c9659fa16c8a4e81ced7';
        func-mem-ref-line = '76';
        func-mem-ref-name = 'CIDU_SEMAPHORE_ADDR';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cidu_8h_1gaf4634c389e2623fe992c40a89d486881';
        func-mem-ref-line = '362';
        func-mem-ref-name = 'CIDU_CheckSemaphoreAcquired';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__Semaphore_1gaf4634c389e2623fe992c40a89d486881';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'CIDU_CheckSemaphoreAcquired';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'semph_n';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'core_id';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cidu.h';
      func-mem-desc-line = '362';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
check SEMAPHOREn's acquired status
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Query that whether SEMAPHOREn has been acquired by one core successfully.
@param [in]    semph_n    the semaphore id used to protect a critical resource
@param [in]    core_id    the core id that wants to access the critical resource
\return 0 if core_id has acquired this semaphore successfully, or else -1 if failed
\remarks
- When the core n owns the register SEMPAPHORE_n and finishes the job related the critical resource,
  it should call \ref CIDU_ReleaseSemaphore to release it.
\sa
- \ref CIDU_GetSemaphoreStatus
- \ref CIDU_ReleaseSemaphore
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cidu_8h_1ga4d7167adf7d931c90d5166493edd2136';
        func-mem-ref-line = '339';
        func-mem-ref-name = 'CIDU_GetSemaphoreStatus';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cidu_8h_1ga5ae65dd908c2d1d32f75b51b7e9604df';
        func-mem-ref-line = '386';
        func-mem-ref-name = 'CIDU_AcquireSemaphore';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__Semaphore_1ga5ae65dd908c2d1d32f75b51b7e9604df';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'CIDU_AcquireSemaphore';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'semph_n';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'core_id';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cidu.h';
      func-mem-desc-line = '386';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Acquire the SEMAPHOREn.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Acuqire the SEMAPHOREn, and check the acquired status
@param [in]    semph_n    the semaphore id used to protect a critical resource
@param [in]    core_id    the core id that wants to access the critical resource
\return 0 if core_id has acquired this semaphore successfully, or else -1 if failed
\remarks
- When the core n owns the register SEMPAPHORE_n and finishes the job related the critical resource,
  it should call \ref CIDU_ReleaseSemaphore to release it.
\sa
- \ref CIDU_CheckSemaphoreAcquired
- \ref CIDU_ReleaseSemaphore
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga9df58a7326fee34b546cae7d7d6e6de3';
        func-mem-ref-line = '2154';
        func-mem-ref-name = '__SW';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cidu_8h_1gaf4634c389e2623fe992c40a89d486881';
        func-mem-ref-line = '362';
        func-mem-ref-name = 'CIDU_CheckSemaphoreAcquired';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cidu_8h_1gabdb87793dbe1c9659fa16c8a4e81ced7';
        func-mem-ref-line = '76';
        func-mem-ref-name = 'CIDU_SEMAPHORE_ADDR';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__cidu_8h_1gaf9b2f62b746f1ea813f07cca8bbbd137';
        func-mem-ref-line = '408';
        func-mem-ref-name = 'CIDU_AcquireSemaphore_Block';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__Semaphore_1gaf9b2f62b746f1ea813f07cca8bbbd137';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'CIDU_AcquireSemaphore_Block';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'semph_n';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'core_id';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cidu.h';
      func-mem-desc-line = '408';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Keep acquiring the SEMAPHOREn until it has acquired this semaphore successfully.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Query that whether SEMAPHOREn has been owned by one core successfully, if not, keep trying.
@param [in]    semph_n    the semaphore id used to protect a critical resource
@param [in]    core_id    the core id that wants to access the critical resource
\remarks
- Core n will block here acquiring, so take care that core should release the semaphore when related job done.
\sa
- \ref CIDU_AcquireSemaphore
- \ref CIDU_ReleaseSemaphore
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cidu_8h_1ga5ae65dd908c2d1d32f75b51b7e9604df';
        func-mem-ref-line = '386';
        func-mem-ref-name = 'CIDU_AcquireSemaphore';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__Semaphore_1gad10936095a4511f08bc0ec50ee17b7af';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'CIDU_ReleaseSemaphore';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'semph_n';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cidu.h';
      func-mem-desc-line = '427';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Release the SEMAPHOREn.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Release the SEMAPHOREn by writing all 1 to SEMAPHOREn register.
@param [in]    semph_n    the semaphore id used to protect a critical resource
\remarks
- When the core finishes the job related to the critical resource, it should release the corresponding semaphore.
\sa
- \ref CIDU_AcquireSemaphore_Block
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga9df58a7326fee34b546cae7d7d6e6de3';
        func-mem-ref-line = '2154';
        func-mem-ref-name = '__SW';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cidu_8h_1gabdb87793dbe1c9659fa16c8a4e81ced7';
        func-mem-ref-line = '76';
        func-mem-ref-name = 'CIDU_SEMAPHORE_ADDR';
    };
    }; /* func-member */
    };
  file-full-name  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cidu.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
Cluster Interrupt Distribution Unit feature API header file for Nuclei N/NX Core.
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_



_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'core__feature__dsp_8h';
  file-name = 'core_feature_dsp.h';
    define = {
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1gaf9a4bbbb2d5e33735a6a2f67ca30d1a9';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_BITREVI';
      define-mem-param  = {
        define-mem-def-name = 'a';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'b';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    ({    \
        unsigned long result;    \
        unsigned long __a = (unsigned long)(a);    \
        __ASM volatile("bitrevi %0, %1, %2" : "=r"(result) : "r"(__a), "K"(b));    \
        result;    \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '665';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
BITREVI (Bit Reverse Immediate)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
(RV32) BITREVI Rd, Rs1, imm[4:0]
(RV64) BITREVI Rd, Rs1, imm[5:0]
@endcode

<strong>Purpose</strong>:\n
Reverse the bit positions of the source operand within a specified width starting from bit
0. The reversed width is an immediate value.

<strong>Description</strong>:\n
This instruction reverses the bit positions of the content of Rs1. The reversed bit width
is calculated as imm[4:0]+1 (RV32) or imm[5:0]+1 (RV64). The upper bits beyond the reversed width
are filled with zeros. After the bit reverse operation, the result is written to Rd.

<strong>Operations</strong>:\n
@code 
msb = imm[4:0]; (RV32)
msb = imm[5:0]; (RV64)
rev[0:msb] = Rs1[msb:0];
Rd = ZE(rev[msb:0]);
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1ga04b2b789ef54ed37c3cd2371bf4748b8';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_INSB';
      define-mem-param  = {
        define-mem-def-name = 't';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'a';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'b';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    ({    \
        unsigned long __t = (unsigned long)(t);    \
        unsigned long __a = (unsigned long)(a);    \
        __ASM volatile("insb %0, %1, %2" : "+r"(__t) : "r"(__a), "K"(b));    \
        __t;    \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '1368';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
INSB (Insert Byte)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
(RV32) INSB Rd, Rs1, imm[1:0]
(RV64) INSB Rd, Rs1, imm[2:0]
@endcode

<strong>Purpose</strong>:\n
Insert byte 0 of a 32-bit or 64-bit register into one of the byte elements of another register.

<strong>Description</strong>:\n
This instruction inserts byte 0 of Rs1 into byte <tt>imm[1:0]</tt> (RV32) or <tt>imm[2:0]</tt> (RV64)
of Rd.

<strong>Operations</strong>:\n
@code 
bpos = imm[1:0]; (RV32)
bpos = imm[2:0]; (RV64)
Rd.B[bpos] = Rs1.B[0]
@endcode

@param [in]  t    unsigned long type of value stored in t
@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1gabe1e56e815426d757f416698bcae2529';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_KSLLIW';
      define-mem-param  = {
        define-mem-def-name = 'a';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'b';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    ({    \
        long result;    \
        long __a = (long)(a);    \
        __ASM volatile("kslliw %0, %1, %2" : "=r"(result) : "r"(__a), "K"(b));    \
        result;    \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '4617';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KSLLIW (Saturating Shift Left Logical Immediate for Word)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
KSLLIW Rd, Rs1, imm5u
@endcode

<strong>Purpose</strong>:\n
Do logical left shift operation with saturation on a 32-bit word. The shift amount is an
immediate value.

<strong>Description</strong>:\n
The first word data in Rs1 is left-shifted logically. The shifted out bits are filled with
zero and the shift amount is specified by the imm5u constant. Any shifted value greater than 2^31-1 is
saturated to 2^31-1. Any shifted value smaller than -2^31 is saturated to -2^31. And the saturated result is
sign-extended and written to Rd. If any saturation is performed, set OV bit to 1.

<strong>Operations</strong>:\n
@code 
sa = imm5u;
res[(31+sa):0] = Rs1.W[0] << sa;
if (res > (2^31)-1) {
  res = 0x7fffffff; OV = 1;
} else if (res < -2^31) {
  res = 0x80000000; OV = 1;
}
Rd[31:0] = res[31:0]; // RV32
Rd[63:0] = SE(res[31:0]); // RV64
@endcode

@param [in]  a    long type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1ga125ad99cdcdbccde3d925ddd16cc5e26';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_KSLLI8';
      define-mem-param  = {
        define-mem-def-name = 'a';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'b';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    ({    \
        unsigned long result;    \
        unsigned long __a = (unsigned long)(a);    \
        __ASM volatile("kslli8 %0, %1, %2" : "=r"(result) : "r"(__a), "K"(b));    \
        result;    \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '4723';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KSLLI8 (SIMD 8-bit Saturating Shift Left Logical Immediate)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
KSLLI8 Rd, Rs1, imm3u
@endcode

<strong>Purpose</strong>:\n
Do 8-bit elements logical left shift operations with saturation simultaneously. The shift
amount is an immediate value.

<strong>Description</strong>:\n
The 8-bit data elements in Rs1 are left-shifted logically. The shifted out bits are filled
with zero and the shift amount is specified by the imm3u constant. Any shifted value greater than
2^7-1 is saturated to 2^7-1. Any shifted value smaller than -2^7 is saturated to -2^7. And the saturated
results are written to Rd. If any saturation is performed, set OV bit to 1.

<strong>Operations</strong>:\n
@code 
sa = imm3u[2:0];
if (sa != 0) {
  res[(7+sa):0] = Rs1.B[x] << sa;
  if (res > (2^7)-1) {
    res = 0x7f; OV = 1;
  } else if (res < -2^7) {
    res = 0x80; OV = 1;
  }
  Rd.B[x] = res[7:0];
} else {
  Rd = Rs1;
}
for RV32: x=3...0,
for RV64: x=7...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1ga6926818b4df53eed570be8d922ca19ca';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_KSLLI16';
      define-mem-param  = {
        define-mem-def-name = 'a';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'b';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    ({    \
        unsigned long result;    \
        unsigned long __a = (unsigned long)(a);    \
        __ASM volatile("kslli16 %0, %1, %2" : "=r"(result) : "r"(__a), "K"(b));    \
        result;    \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '4829';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KSLLI16 (SIMD 16-bit Saturating Shift Left Logical Immediate)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
KSLLI16 Rd, Rs1, imm4u
@endcode

<strong>Purpose</strong>:\n
Do 16-bit elements logical left shift operations with saturation simultaneously. The shift
amount is an immediate value.

<strong>Description</strong>:\n
The 16-bit data elements in Rs1 are left-shifted logically. The shifted out bits are filled
with zero and the shift amount is specified by the imm4u constant. Any shifted value greater than
2^15-1 is saturated to 2^15-1. Any shifted value smaller than -2^15 is saturated to -2^15. And the saturated
results are written to Rd. If any saturation is performed, set OV bit to 1.

<strong>Operations</strong>:\n
@code 
sa = imm4u[3:0];
if (sa != 0) {
  res[(15+sa):0] = Rs1.H[x] << sa;
  if (res > (2^15)-1) {
    res = 0x7fff; OV = 1;
  } else if (res < -2^15) {
    res = 0x8000; OV = 1;
  }
  Rd.H[x] = res[15:0];
} else {
  Rd = Rs1;
}
for RV32: x=1...0,
for RV64: x=3...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MISC_1gad9df33bdac33b54851414ded1a8ae0b9';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_SCLIP8';
      define-mem-param  = {
        define-mem-def-name = 'a';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'b';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    ({    \
        unsigned long result;    \
        unsigned long __a = (unsigned long)(a);    \
        __ASM volatile("sclip8 %0, %1, %2" : "=r"(result) : "r"(__a), "K"(b));    \
        result;    \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '6916';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SCLIP8 (SIMD 8-bit Signed Clip Value)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
SCLIP8 Rd, Rs1, imm3u[2:0]
@endcode

<strong>Purpose</strong>:\n
Limit the 8-bit signed integer elements of a register into a signed range simultaneously.

<strong>Description</strong>:\n
This instruction limits the 8-bit signed integer elements stored in Rs1 into a signed
integer range between 2^imm3u-1 and -2^imm3u, and writes the limited results to Rd. For example, if
imm3u is 3, the 8-bit input values should be saturated between 7 and -8. If saturation is performed,
set OV bit to 1.

<strong>Operations</strong>:\n
@code 
src = Rs1.B[x];
if (src > (2^imm3u)-1) {
  src = (2^imm3u)-1;
  OV = 1;
} else if (src < -2^imm3u) {
  src = -2^imm3u;
  OV = 1;
}
Rd.B[x] = src
for RV32: x=3...0,
for RV64: x=7...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MISC_1gad4f98e8ffe4b82cbedafd4dc8348f863';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_SCLIP16';
      define-mem-param  = {
        define-mem-def-name = 'a';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'b';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    ({    \
        unsigned long result;    \
        unsigned long __a = (unsigned long)(a);    \
        __ASM volatile("sclip16 %0, %1, %2" : "=r"(result) : "r"(__a), "K"(b));    \
        result;    \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '6965';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SCLIP16 (SIMD 16-bit Signed Clip Value)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
SCLIP16 Rd, Rs1, imm4u[3:0]
@endcode

<strong>Purpose</strong>:\n
Limit the 16-bit signed integer elements of a register into a signed range simultaneously.

<strong>Description</strong>:\n
This instruction limits the 16-bit signed integer elements stored in Rs1 into a signed
integer range between 2imm4u-1 and -2imm4u, and writes the limited results to Rd. For example, if
imm4u is 3, the 16-bit input values should be saturated between 7 and -8. If saturation is performed,
set OV bit to 1.

<strong>Operations</strong>:\n
@code 
src = Rs1.H[x];
if (src > (2^imm4u)-1) {
  src = (2^imm4u)-1;
  OV = 1;
} else if (src < -2^imm4u) {
  src = -2^imm4u;
  OV = 1;
}
Rd.H[x] = src
for RV32: x=1...0,
for RV64: x=3...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__PART__SIMD__MISC_1gaee72cc6a242182cd7e59c3185522d56e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_SCLIP32';
      define-mem-param  = {
        define-mem-def-name = 'a';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'b';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    ({    \
        long result;    \
        long __a = (long)(a);    \
        __ASM volatile("sclip32 %0, %1, %2" : "=r"(result) : "r"(__a), "K"(b));    \
        result;    \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '7014';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SCLIP32 (SIMD 32-bit Signed Clip Value)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
SCLIP32 Rd, Rs1, imm5u[4:0]
@endcode

<strong>Purpose</strong>:\n
Limit the 32-bit signed integer elements of a register into a signed range simultaneously.

<strong>Description</strong>:\n
This instruction limits the 32-bit signed integer elements stored in Rs1 into a signed
integer range between 2imm5u-1 and -2imm5u, and writes the limited results to Rd. For example, if
imm5u is 3, the 32-bit input values should be saturated between 7 and -8. If saturation is performed,
set OV bit to 1.

<strong>Operations</strong>:\n
@code 
src = Rs1.W[x];
if (src > (2^imm5u)-1) {
  src = (2^imm5u)-1;
  OV = 1;
} else if (src < -2^imm5u) {
  src = -2^imm5u;
  OV = 1;
}
Rd.W[x] = src
for RV32: x=0,
for RV64: x=1...0
@endcode

@param [in]  a    long type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1gac4bafa8253fac342466573fccee06cb3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_SLLI8';
      define-mem-param  = {
        define-mem-def-name = 'a';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'b';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    ({    \
        unsigned long result;    \
        unsigned long __a = (unsigned long)(a);    \
        __ASM volatile("slli8 %0, %1, %2" : "=r"(result) : "r"(__a), "K"(b));    \
        result;    \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '7254';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SLLI8 (SIMD 8-bit Shift Left Logical Immediate)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
SLLI8 Rd, Rs1, imm3u
@endcode

<strong>Purpose</strong>:\n
Do 8-bit elements logical left shift operations simultaneously. The shift amount is an
immediate value.

<strong>Description</strong>:\n
The 8-bit elements in Rs1 are left-shifted logically. And the results are written to Rd.
The shifted out bits are filled with zero and the shift amount is specified by the imm3u constant.

<strong>Operations</strong>:\n
@code 
sa = imm3u[2:0];
Rd.B[x] = Rs1.B[x] << sa;
for RV32: x=3...0,
for RV64: x=7...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1gae64e8d3cc171a464a716e317cd0eca66';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_SLLI16';
      define-mem-param  = {
        define-mem-def-name = 'a';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'b';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    ({    \
        unsigned long result;    \
        unsigned long __a = (unsigned long)(a);    \
        __ASM volatile("slli16 %0, %1, %2" : "=r"(result) : "r"(__a), "K"(b));    \
        result;    \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '7336';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SLLI16 (SIMD 16-bit Shift Left Logical Immediate)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
SLLI16 Rd, Rs1, imm4[3:0]
@endcode

<strong>Purpose</strong>:\n
Do 16-bit element logical left shift operations simultaneously. The shift amount is an
immediate value.

<strong>Description</strong>:\n
The 16-bit elements in Rs1 are left-shifted logically. The shifted out bits are filled with
zero and the shift amount is specified by the imm4[3:0] constant. And the results are written to Rd.

<strong>Operations</strong>:\n
@code 
sa = imm4[3:0];
Rd.H[x] = Rs1.H[x] << sa;
for RV32: x=1...0,
for RV64: x=3...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1ga0d2571dc1e7889b45c9a7305dce2a59f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_SRAI_U';
      define-mem-param  = {
        define-mem-def-name = 'a';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'b';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    ({    \
        long result;    \
        long __a = (long)(a);    \
        __ASM volatile("srai.u %0, %1, %2" : "=r"(result) : "r"(__a), "K"(b));    \
        result;    \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '9678';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SRAI.u (Rounding Shift Right Arithmetic Immediate)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
SRAI.u Rd, Rs1, imm6u[4:0] (RV32)
SRAI.u Rd, Rs1, imm6u[5:0] (RV64)
@endcode

<strong>Purpose</strong>:\n
Perform an arithmetic right shift operation with rounding. The shift amount is an
immediate value.

<strong>Description</strong>:\n
This instruction right-shifts the content of Rs1 arithmetically. The shifted out bits are
filled with the sign-bit and the shift amount is specified by the imm6u[4:0] (RV32) or imm6u[5:0]
(RV64) constant . For the rounding operation, a value of 1 is added to the most significant discarded
bit of the data to calculate the final result. And the result is written to Rd.

<strong>Operations</strong>:\n
@code 
* RV32:
sa = imm6u[4:0];
if (sa > 0) {
  res[31:-1] = SE33(Rs1[31:(sa-1)]) + 1;
  Rd = res[31:0];
} else {
  Rd = Rs1;
}
* RV64:
sa = imm6u[5:0];
if (sa > 0) {
  res[63:-1] = SE65(Rs1[63:(sa-1)]) + 1;
  Rd = res[63:0];
} else {
  Rd = Rs1;
}
@endcode

@param [in]  a    long type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1gafa0713c67f97b5e98f9c86c48b8d2ba6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_SRAI8';
      define-mem-param  = {
        define-mem-def-name = 'a';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'b';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    ({    \
        unsigned long result;    \
        unsigned long __a = (unsigned long)(a);    \
        __ASM volatile("srai8 %0, %1, %2" : "=r"(result) : "r"(__a), "K"(b));    \
        result;    \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '9840';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SRAI8 (SIMD 8-bit Shift Right Arithmetic Immediate)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
SRAI8 Rd, Rs1, imm3u
SRAI8.u Rd, Rs1, imm3u
@endcode

<strong>Purpose</strong>:\n
Do 8-bit element arithmetic right shift operations simultaneously. The shift amount is an
immediate value. The <tt>.u</tt> form performs additional rounding up operations on the shifted results.

<strong>Description</strong>:\n
The 8-bit data elements in Rs1 are right-shifted arithmetically, that is, the shifted out
bits are filled with the sign-bit of the data elements. The shift amount is specified by the imm3u
constant. For the rounding operation of the <tt>.u</tt> form, a value of 1 is added to the most significant
discarded bit of each 8-bit data element to calculate the final results. And the results are written to
Rd.

<strong>Operations</strong>:\n
@code 
sa = imm3u[2:0];
if (sa > 0) {
  if (`.u` form) { // SRA8.u
    res[7:-1] = SE9(Rs1.B[x][7:sa-1]) + 1;
    Rd.B[x] = res[7:0];
  } else { // SRA8
    Rd.B[x] = SE8(Rd.B[x][7:sa])
  }
} else {
  Rd = Rs1;
}
for RV32: x=3...0,
for RV64: x=7...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1gae6dc67a0e44c3f32100d532b1a2a4386';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_SRAI8_U';
      define-mem-param  = {
        define-mem-def-name = 'a';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'b';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    ({    \
        unsigned long result;    \
        unsigned long __a = (unsigned long)(a);    \
        __ASM volatile("srai8.u %0, %1, %2" : "=r"(result) : "r"(__a), "K"(b));    \
        result;    \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '9894';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SRAI8.u (SIMD 8-bit Rounding Shift Right Arithmetic Immediate)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
SRAI8 Rd, Rs1, imm3u
SRAI8.u Rd, Rs1, imm3u
@endcode

<strong>Purpose</strong>:\n
Do 8-bit element arithmetic right shift operations simultaneously. The shift amount is an
immediate value. The <tt>.u</tt> form performs additional rounding up operations on the shifted results.

<strong>Description</strong>:\n
The 8-bit data elements in Rs1 are right-shifted arithmetically, that is, the shifted out
bits are filled with the sign-bit of the data elements. The shift amount is specified by the imm3u
constant. For the rounding operation of the <tt>.u</tt> form, a value of 1 is added to the most significant
discarded bit of each 8-bit data element to calculate the final results. And the results are written to
Rd.

<strong>Operations</strong>:\n
@code 
sa = imm3u[2:0];
if (sa > 0) {
  if (`.u` form) { // SRA8.u
    res[7:-1] = SE9(Rs1.B[x][7:sa-1]) + 1;
    Rd.B[x] = res[7:0];
  } else { // SRA8
    Rd.B[x] = SE8(Rd.B[x][7:sa])
  }
} else {
  Rd = Rs1;
}
for RV32: x=3...0,
for RV64: x=7...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1ga6fa2d780199be27817ab78209e4e234c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_SRAI16';
      define-mem-param  = {
        define-mem-def-name = 'a';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'b';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    ({    \
        unsigned long result;    \
        unsigned long __a = (unsigned long)(a);    \
        __ASM volatile("srai16 %0, %1, %2" : "=r"(result) : "r"(__a), "K"(b));    \
        result;    \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '10057';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SRAI16 (SIMD 16-bit Shift Right Arithmetic Immediate)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
SRAI16 Rd, Rs1, imm4u
SRAI16.u Rd, Rs1, imm4u
@endcode

<strong>Purpose</strong>:\n
Do 16-bit elements arithmetic right shift operations simultaneously. The shift amount is
an immediate value. The <tt>.u</tt> form performs additional rounding up operations on the shifted
results.

<strong>Description</strong>:\n
The 16-bit data elements in Rs1 are right-shifted arithmetically, that is, the shifted out
bits are filled with the sign-bit of the 16-bit data elements. The shift amount is specified by the
imm4u constant. For the rounding operation of the <tt>.u</tt> form, a value of 1 is added to the most
significant discarded bit of each 16-bit data to calculate the final results. And the results are written
to Rd.

<strong>Operations</strong>:\n
@code 
sa = imm4u[3:0];
if (sa > 0) {
  if (`.u` form) { // SRAI16.u
    res[15:-1] = SE17(Rs1.H[x][15:sa-1]) + 1;
    Rd.H[x] = res[15:0];
  } else { // SRAI16
    Rd.H[x] = SE16(Rs1.H[x][15:sa]);
  }
} else {
  Rd = Rs1;
}
for RV32: x=1...0,
for RV64: x=3...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1gaf1be1014728b97f6e3c5481ef7b9644e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_SRAI16_U';
      define-mem-param  = {
        define-mem-def-name = 'a';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'b';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    ({    \
        unsigned long result;    \
        unsigned long __a = (unsigned long)(a);    \
        __ASM volatile("srai16.u %0, %1, %2" : "=r"(result) : "r"(__a), "K"(b));    \
        result;    \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '10112';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SRAI16.u (SIMD 16-bit Rounding Shift Right Arithmetic Immediate)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
SRAI16 Rd, Rs1, imm4u
SRAI16.u Rd, Rs1, imm4u
@endcode

<strong>Purpose</strong>:\n
Do 16-bit elements arithmetic right shift operations simultaneously. The shift amount is
an immediate value. The <tt>.u</tt> form performs additional rounding up operations on the shifted
results.

<strong>Description</strong>:\n
The 16-bit data elements in Rs1 are right-shifted arithmetically, that is, the shifted out
bits are filled with the sign-bit of the 16-bit data elements. The shift amount is specified by the
imm4u constant. For the rounding operation of the <tt>.u</tt> form, a value of 1 is added to the most
significant discarded bit of each 16-bit data to calculate the final results. And the results are written
to Rd.

<strong>Operations</strong>:\n
@code 
sa = imm4u[3:0];
if (sa > 0) {
  if (`.u` form) { // SRAI16.u
    res[15:-1] = SE17(Rs1.H[x][15:sa-1]) + 1;
    Rd.H[x] = res[15:0];
  } else { // SRAI16
    Rd.H[x] = SE16(Rs1.H[x][15:sa]);
  }
} else {
  Rd = Rs1;
}
for RV32: x=1...0,
for RV64: x=3...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1ga6e200926c9e92a70d3bae266450715cd';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_SRLI8';
      define-mem-param  = {
        define-mem-def-name = 'a';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'b';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    ({    \
        unsigned long result;    \
        unsigned long __a = (unsigned long)(a);    \
        __ASM volatile("srli8 %0, %1, %2" : "=r"(result) : "r"(__a), "K"(b));    \
        result;    \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '10271';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SRLI8 (SIMD 8-bit Shift Right Logical Immediate)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
SRLI8 Rt, Ra, imm3u
SRLI8.u Rt, Ra, imm3u
@endcode

<strong>Purpose</strong>:\n
Do 8-bit elements logical right shift operations simultaneously. The shift amount is an
immediate value. The <tt>.u</tt> form performs additional rounding up operations on the shifted results.

<strong>Description</strong>:\n
The 8-bit data elements in Rs1 are right-shifted logically, that is, the shifted out bits are
filled with zero. The shift amount is specified by the imm3u constant. For the rounding operation of
the <tt>.u</tt> form, a value of 1 is added to the most significant discarded bit of each 8-bit data element to
calculate the final results. And the results are written to Rd.

<strong>Operations</strong>:\n
@code 
sa = imm3u[2:0];
if (sa > 0) {
  if (`.u` form) { // SRLI8.u
    res[8:0] = ZE9(Rs1.B[x][7:sa-1]) + 1;
    Rd.B[x] = res[8:1];
  } else { // SRLI8
    Rd.B[x] = ZE8(Rs1.B[x][7:sa]);
  }
} else {
  Rd = Rs1;
}
for RV32: x=3...0,
for RV64: x=7...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1ga168480b888035c553e85ba0934c5e50d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_SRLI8_U';
      define-mem-param  = {
        define-mem-def-name = 'a';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'b';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    ({    \
        unsigned long result;    \
        unsigned long __a = (unsigned long)(a);    \
        __ASM volatile("srli8.u %0, %1, %2" : "=r"(result) : "r"(__a), "K"(b));    \
        result;    \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '10324';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SRLI8.u (SIMD 8-bit Rounding Shift Right Logical Immediate)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
SRLI8 Rt, Ra, imm3u
SRLI8.u Rt, Ra, imm3u
@endcode

<strong>Purpose</strong>:\n
Do 8-bit elements logical right shift operations simultaneously. The shift amount is an
immediate value. The <tt>.u</tt> form performs additional rounding up operations on the shifted results.

<strong>Description</strong>:\n
The 8-bit data elements in Rs1 are right-shifted logically, that is, the shifted out bits are
filled with zero. The shift amount is specified by the imm3u constant. For the rounding operation of
the <tt>.u</tt> form, a value of 1 is added to the most significant discarded bit of each 8-bit data element to
calculate the final results. And the results are written to Rd.

<strong>Operations</strong>:\n
@code 
sa = imm3u[2:0];
if (sa > 0) {
  if (`.u` form) { // SRLI8.u
    res[8:0] = ZE9(Rs1.B[x][7:sa-1]) + 1;
    Rd.B[x] = res[8:1];
  } else { // SRLI8
    Rd.B[x] = ZE8(Rs1.B[x][7:sa]);
  }
} else {
  Rd = Rs1;
}
for RV32: x=3...0,
for RV64: x=7...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1gae990a9f2ef6b5f70f563327a56c693e0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_SRLI16';
      define-mem-param  = {
        define-mem-def-name = 'a';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'b';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    ({    \
        unsigned long result;    \
        unsigned long __a = (unsigned long)(a);    \
        __ASM volatile("srli16 %0, %1, %2" : "=r"(result) : "r"(__a), "K"(b));    \
        result;    \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '10481';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SRLI16 (SIMD 16-bit Shift Right Logical Immediate)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
SRLI16 Rt, Ra, imm4u
SRLI16.u Rt, Ra, imm4u
@endcode

<strong>Purpose</strong>:\n
Do 16-bit elements logical right shift operations simultaneously. The shift amount is an
immediate value. The <tt>.u</tt> form performs additional rounding up operations on the shifted results.

<strong>Description</strong>:\n
The 16-bit data elements in Rs1 are right-shifted logically, that is, the shifted out bits
are filled with zero. The shift amount is specified by the imm4u constant. For the rounding
operation of the <tt>.u</tt> form, a value of 1 is added to the most significant discarded bit of each 16-bit
data element to calculate the final results. And the results are written to Rd.

<strong>Operations</strong>:\n
@code 
sa = imm4u;
if (sa > 0) {
  if (`.u` form) { // SRLI16.u
    res[16:0] = ZE17(Rs1.H[x][15:sa-1]) + 1;
    Rd.H[x] = res[16:1];
  } else { // SRLI16
    Rd.H[x] = ZE16(Rs1.H[x][15:sa]);
  }
} else {
  Rd = Rs1;
}
for RV32: x=1...0,
for RV64: x=3...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1ga26055d836ed9bb21a1191bbf10197636';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_SRLI16_U';
      define-mem-param  = {
        define-mem-def-name = 'a';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'b';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    ({    \
        unsigned long result;    \
        unsigned long __a = (unsigned long)(a);    \
        __ASM volatile("srli16.u %0, %1, %2" : "=r"(result) : "r"(__a), "K"(b));    \
        result;    \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '10534';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SRLI16.u (SIMD 16-bit Rounding Shift Right Logical Immediate)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
SRLI16 Rt, Ra, imm4u
SRLI16.u Rt, Ra, imm4u
@endcode

<strong>Purpose</strong>:\n
Do 16-bit elements logical right shift operations simultaneously. The shift amount is an
immediate value. The <tt>.u</tt> form performs additional rounding up operations on the shifted results.

<strong>Description</strong>:\n
The 16-bit data elements in Rs1 are right-shifted logically, that is, the shifted out bits
are filled with zero. The shift amount is specified by the imm4u constant. For the rounding
operation of the <tt>.u</tt> form, a value of 1 is added to the most significant discarded bit of each 16-bit
data element to calculate the final results. And the results are written to Rd.

<strong>Operations</strong>:\n
@code 
sa = imm4u;
if (sa > 0) {
  if (`.u` form) { // SRLI16.u
    res[16:0] = ZE17(Rs1.H[x][15:sa-1]) + 1;
    Rd.H[x] = res[16:1];
  } else { // SRLI16
    Rd.H[x] = ZE16(Rs1.H[x][15:sa]);
  }
} else {
  Rd = Rs1;
}
for RV32: x=1...0,
for RV64: x=3...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MISC_1gab205f3a7213d65c3fc0567e88a06b3c6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_UCLIP8';
      define-mem-param  = {
        define-mem-def-name = 'a';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'b';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    ({    \
        unsigned long result;    \
        unsigned long __a = (unsigned long)(a);    \
        __ASM volatile("uclip8 %0, %1, %2" : "=r"(result) : "r"(__a), "K"(b));    \
        result;    \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '11114';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UCLIP8 (SIMD 8-bit Unsigned Clip Value)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
UCLIP8 Rt, Ra, imm3u
@endcode

<strong>Purpose</strong>:\n
Limit the 8-bit signed elements of a register into an unsigned range simultaneously.

<strong>Description</strong>:\n
This instruction limits the 8-bit signed elements stored in Rs1 into an unsigned integer
range between 2^imm3u-1 and 0, and writes the limited results to Rd. For example, if imm3u is 3, the 8-
bit input values should be saturated between 7 and 0. If saturation is performed, set OV bit to 1.

<strong>Operations</strong>:\n
@code 
src = Rs1.H[x];
if (src > (2^imm3u)-1) {
  src = (2^imm3u)-1;
  OV = 1;
} else if (src < 0) {
  src = 0;
  OV = 1;
}
Rd.H[x] = src;
for RV32: x=3...0,
for RV64: x=7...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MISC_1ga6448eaddeb437add172014662e9d52f7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_UCLIP16';
      define-mem-param  = {
        define-mem-def-name = 'a';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'b';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    ({    \
        unsigned long result;    \
        unsigned long __a = (unsigned long)(a);    \
        __ASM volatile("uclip16 %0, %1, %2" : "=r"(result) : "r"(__a), "K"(b));    \
        result;    \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '11163';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UCLIP16 (SIMD 16-bit Unsigned Clip Value)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
UCLIP16 Rt, Ra, imm4u
@endcode

<strong>Purpose</strong>:\n
Limit the 16-bit signed elements of a register into an unsigned range simultaneously.

<strong>Description</strong>:\n
This instruction limits the 16-bit signed elements stored in Rs1 into an unsigned
integer range between 2imm4u-1 and 0, and writes the limited results to Rd. For example, if imm4u is
3, the 16-bit input values should be saturated between 7 and 0. If saturation is performed, set OV bit
to 1.

<strong>Operations</strong>:\n
@code 
src = Rs1.H[x];
if (src > (2^imm4u)-1) {
  src = (2^imm4u)-1;
  OV = 1;
} else if (src < 0) {
  src = 0;
  OV = 1;
}
Rd.H[x] = src;
for RV32: x=1...0,
for RV64: x=3...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__PART__SIMD__MISC_1ga6aea3f3d303e395e7cf41d45c0618385';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_UCLIP32';
      define-mem-param  = {
        define-mem-def-name = 'a';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'b';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    ({    \
        unsigned long result;    \
        unsigned long __a = (unsigned long)(a);    \
        __ASM volatile("uclip32 %0, %1, %2" : "=r"(result) : "r"(__a), "K"(b));    \
        result;    \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '11213';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UCLIP32 (SIMD 32-bit Unsigned Clip Value)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
UCLIP32 Rd, Rs1, imm5u[4:0]
@endcode

<strong>Purpose</strong>:\n
Limit the 32-bit signed integer elements of a register into an unsigned range
simultaneously.

<strong>Description</strong>:\n
This instruction limits the 32-bit signed integer elements stored in Rs1 into an
unsigned integer range between 2imm5u-1 and 0, and writes the limited results to Rd. For example, if
imm5u is 3, the 32-bit input values should be saturated between 7 and 0. If saturation is performed,
set OV bit to 1.

<strong>Operations</strong>:\n
@code 
src = Rs1.W[x];
if (src > (2^imm5u)-1) {
  src = (2^imm5u)-1;
  OV = 1;
} else if (src < 0) {
  src = 0;
  OV = 1;
}
Rd.W[x] = src
for RV32: x=0,
for RV64: x=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1ga491f47f7a20cddb763dacb0d75309121';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_WEXTI';
      define-mem-param  = {
        define-mem-def-name = 'a';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'b';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    ({    \
        unsigned long result;    \
        long long __a = (long long)(a);    \
        __ASM volatile("wexti %0, %1, %2" : "=r"(result) : "r"(__a), "K"(b));    \
        result;    \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '13486';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
WEXTI (Extract Word from 64-bit Immediate)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
WEXTI Rd, Rs1, #LSBloc
@endcode

<strong>Purpose</strong>:\n
Extract a 32-bit word from a 64-bit value stored in an even/odd pair of registers (RV32) or
a register (RV64) starting from a specified immediate LSB bit position.

<strong>RV32 Description</strong>:\n
This instruction extracts a 32-bit word from a 64-bit value of an even/odd pair of registers specified
by Rs1(4,1) starting from a specified immediate LSB bit position, #LSBloc. The extracted word is
written to Rd.
Rs1(4,1), i.e., d, determines the even/odd pair group of the two registers. Specifically, the register
pair includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the high 32-bit of the 64-bit value and the even <tt>2d</tt>
register of the pair contains the low 32-bit of the 64-bit value.

<strong>RV64 Description</strong>:\n
This instruction extracts a 32-bit word from a 64-bit value in Rs1 starting from a specified
immediate LSB bit position, #LSBloc. The extracted word is sign-extended and written to lower 32-
bit of Rd.

<strong>Operations</strong>:\n
@code 
* RV32:
Idx0 = CONCAT(Rs1(4,1),1'b0); Idx1 = CONCAT(Rs2(4,1),1'b1);
src[63:0] = Concat(R[Idx1], R[Idx0]);
Rd = src[31+LSBloc:LSBloc];
* RV64:
ExtractW = Rs1[31+LSBloc:LSBloc];
Rd = SE(ExtractW)
@endcode

@param [in]  a    long long type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__SHIFT_1ga954ba7d807ee2cca248d646d245e8d3f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_KSLLI32';
      define-mem-param  = {
        define-mem-def-name = 'a';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'b';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    ({    \
        unsigned long result;    \
        unsigned long __a = (unsigned long)(a);    \
        __ASM volatile("kslli32 %0, %1, %2" : "=r"(result) : "r"(__a), "K"(b));    \
        result;    \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '15418';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KSLLI32 (SIMD 32-bit Saturating Shift Left Logical Immediate)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code 
KSLLI32 Rd, Rs1, imm5u
@endcode

<strong>Purpose</strong>:\n
Do 32-bit elements logical left shift operations with saturation simultaneously. The shift
amount is an immediate value.

<strong>Description</strong>:\n
The 32-bit data elements in Rs1 are left-shifted logically. The shifted out bits are filled
with zero and the shift amount is specified by the imm5u constant. Any shifted value greater than
2^31-1 is saturated to 2^31-1. Any shifted value smaller than -2^31 is saturated to -2^31. And the saturated
results are written to Rd. If any saturation is performed, set OV bit to 1.

<strong>Operations</strong>:\n
@code 
sa = imm5u[4:0];
if (sa != 0) {
  res[(31+sa):0] = Rs1.W[x] << sa;
  if (res > (2^31)-1) {
    res = 0x7fffffff; OV = 1;
  } else if (res < -2^31) {
    res = 0x80000000; OV = 1;
  }
  Rd.W[x] = res[31:0];
} else {
  Rd = Rs1;
}
for RV64: x=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__SHIFT_1gae042d9ebdce478c6322707a6cc5741b9';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_SLLI32';
      define-mem-param  = {
        define-mem-def-name = 'a';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'b';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    ({    \
        unsigned long result;    \
        unsigned long __a = (unsigned long)(a);    \
        __ASM volatile("slli32 %0, %1, %2" : "=r"(result) : "r"(__a), "K"(b));    \
        result;    \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '16251';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SLLI32 (SIMD 32-bit Shift Left Logical Immediate)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code 
SLLI32 Rd, Rs1, imm5u[4:0]
@endcode

<strong>Purpose</strong>:\n
Do 32-bit element logical left shift operations simultaneously. The shift amount is an
immediate value.

<strong>Description</strong>:\n
The 32-bit elements in Rs1 are left-shifted logically. The shifted out bits are filled with
zero and the shift amount is specified by the imm5u[4:0] constant. And the results are written to Rd.

<strong>Operations</strong>:\n
@code 
sa = imm5u[4:0];
Rd.W[x] = Rs1.W[x] << sa;
for RV64: x=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__SHIFT_1ga640a151459512e8d4605ae2dcf3c2c92';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_SRAI32';
      define-mem-param  = {
        define-mem-def-name = 'a';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'b';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    ({    \
        unsigned long result;    \
        unsigned long __a = (unsigned long)(a);    \
        __ASM volatile("srai32 %0, %1, %2" : "=r"(result) : "r"(__a), "K"(b));    \
        result;    \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '16793';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SRAI32 (SIMD 32-bit Shift Right Arithmetic Immediate)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (RV64 Only)

<strong>Syntax</strong>:\n
@code 
SRAI32 Rd, Rs1, imm5u
SRAI32.u Rd, Rs1, imm5u
@endcode

<strong>Purpose</strong>:\n
Do 32-bit elements arithmetic right shift operations simultaneously. The shift amount is
an immediate value. The <tt>.u</tt> form performs additional rounding up operations on the shifted
results.

<strong>Description</strong>:\n
The 32-bit data elements in Rs1 are right-shifted arithmetically, that is, the shifted out
bits are filled with the sign-bit of the 32-bit data elements. The shift amount is specified by the
imm5u constant. For the rounding operation of the <tt>.u</tt> form, a value of 1 is added to the most
significant discarded bit of each 32-bit data to calculate the final results. And the results are written
to Rd.

<strong>Operations</strong>:\n
@code 
sa = imm5u[4:0];
  if (sa > 0) {
  if (`.u` form) { // SRAI32.u
    res[31:-1] = SE33(Rs1.W[x][31:sa-1]) + 1;
    Rd.W[x] = res[31:0];
  else { // SRAI32
    Rd.W[x] = SE32(Rs1.W[x][31:sa]);
  }
} else {
  Rd = Rs1;
}
for RV64: x=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__SHIFT_1ga167736f727f1f4ef2e1206f959c92d55';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_SRAI32_U';
      define-mem-param  = {
        define-mem-def-name = 'a';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'b';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    ({    \
        unsigned long result;    \
        unsigned long __a = (unsigned long)(a);    \
        __ASM volatile("srai32.u %0, %1, %2" : "=r"(result) : "r"(__a), "K"(b));    \
        result;    \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '16847';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SRAI32.u (SIMD 32-bit Rounding Shift Right Arithmetic Immediate)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (RV64 Only)

<strong>Syntax</strong>:\n
@code 
SRAI32 Rd, Rs1, imm5u
SRAI32.u Rd, Rs1, imm5u
@endcode

<strong>Purpose</strong>:\n
Do 32-bit elements arithmetic right shift operations simultaneously. The shift amount is
an immediate value. The <tt>.u</tt> form performs additional rounding up operations on the shifted
results.

<strong>Description</strong>:\n
The 32-bit data elements in Rs1 are right-shifted arithmetically, that is, the shifted out
bits are filled with the sign-bit of the 32-bit data elements. The shift amount is specified by the
imm5u constant. For the rounding operation of the <tt>.u</tt> form, a value of 1 is added to the most
significant discarded bit of each 32-bit data to calculate the final results. And the results are written
to Rd.

<strong>Operations</strong>:\n
@code 
sa = imm5u[4:0];
  if (sa > 0) {
  if (`.u` form) { // SRAI32.u
    res[31:-1] = SE33(Rs1.W[x][31:sa-1]) + 1;
    Rd.W[x] = res[31:0];
  else { // SRAI32
    Rd.W[x] = SE32(Rs1.W[x][31:sa]);
  }
} else {
  Rd = Rs1;
}
for RV64: x=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__NON__SIMD__32B__SHIFT_1gae87f003cb925b2a0c0f8b862cad6c2f7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_SRAIW_U';
      define-mem-param  = {
        define-mem-def-name = 'a';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'b';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    ({    \
        long result;    \
        int __a = (int)(a);    \
        __ASM volatile("sraiw.u %0, %1, %2" : "=r"(result) : "r"(__a), "K"(b));    \
        result;    \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '16893';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SRAIW.u (Rounding Shift Right Arithmetic Immediate Word)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (RV64 only)

<strong>Syntax</strong>:\n
@code 
SRAIW.u Rd, Rs1, imm5u
@endcode

<strong>Purpose</strong>:\n
Perform a 32-bit arithmetic right shift operation with rounding. The shift amount is an
immediate value.

<strong>Description</strong>:\n
This instruction right-shifts the lower 32-bit content of Rs1 arithmetically. The shifted
out bits are filled with the sign-bit Rs1(31) and the shift amount is specified by the imm5u constant.
For the rounding operation, a value of 1 is added to the most significant discarded bit of the data to
calculate the final result. And the result is sign-extended and written to Rd.

<strong>Operations</strong>:\n
@code 
sa = imm5u;
if (sa != 0) {
  res[31:-1] = SE33(Rs1[31:(sa-1)]) + 1;
  Rd = SE32(res[31:0]);
} else {
  Rd = SE32(Rs1.W[0]);
}
@endcode

@param [in]  a    int type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__SHIFT_1gaa5b85cfd24c591c8b432b2991119570e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_SRLI32';
      define-mem-param  = {
        define-mem-def-name = 'a';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'b';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    ({    \
        unsigned long result;    \
        unsigned long __a = (unsigned long)(a);    \
        __ASM volatile("srli32 %0, %1, %2" : "=r"(result) : "r"(__a), "K"(b));    \
        result;    \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '17051';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SRLI32 (SIMD 32-bit Shift Right Logical Immediate)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code 
SRLI32 Rd, Rs1, imm5u
SRLI32.u Rd, Rs1, imm5u
@endcode

<strong>Purpose</strong>:\n
Do 32-bit elements logical right shift operations simultaneously. The shift amount is an
immediate value. The <tt>.u</tt> form performs additional rounding up operations on the shifted results.

<strong>Description</strong>:\n
The 32-bit data elements in Rs1 are right-shifted logically, that is, the shifted out bits
are filled with zero. The shift amount is specified by the imm5u constant. For the rounding
operation of the <tt>.u</tt> form, a value of 1 is added to the most significant discarded bit of each 32-bit
data to calculate the final results. And the results are written to Rd.

<strong>Operations</strong>:\n
@code 
sa = imm5u[4:0];
if (sa > 0) {
  if (`.u` form) { // SRLI32.u
    res[31:-1] = ZE33(Rs1.W[x][31:sa-1]) + 1;
    Rd.W[x] = res[31:0];
  else { // SRLI32
    Rd.W[x] = ZE32(Rs1.W[x][31:sa]);
  }
} else {
  Rd = Rs1;
}
for RV64: x=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__SHIFT_1gacd0b040771fc9cd6426ce8465f49dee3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_SRLI32_U';
      define-mem-param  = {
        define-mem-def-name = 'a';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'b';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    ({    \
        unsigned long result;    \
        unsigned long __a = (unsigned long)(a);    \
        __ASM volatile("srli32.u %0, %1, %2" : "=r"(result) : "r"(__a), "K"(b));    \
        result;    \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '17103';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SRLI32.u (SIMD 32-bit Rounding Shift Right Logical Immediate)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code 
SRLI32 Rd, Rs1, imm5u
SRLI32.u Rd, Rs1, imm5u
@endcode

<strong>Purpose</strong>:\n
Do 32-bit elements logical right shift operations simultaneously. The shift amount is an
immediate value. The <tt>.u</tt> form performs additional rounding up operations on the shifted results.

<strong>Description</strong>:\n
The 32-bit data elements in Rs1 are right-shifted logically, that is, the shifted out bits
are filled with zero. The shift amount is specified by the imm5u constant. For the rounding
operation of the <tt>.u</tt> form, a value of 1 is added to the most significant discarded bit of each 32-bit
data to calculate the final results. And the results are written to Rd.

<strong>Operations</strong>:\n
@code 
sa = imm5u[4:0];
if (sa > 0) {
  if (`.u` form) { // SRLI32.u
    res[31:-1] = ZE33(Rs1.W[x][31:sa-1]) + 1;
    Rd.W[x] = res[31:0];
  else { // SRLI32
    Rd.W[x] = ZE32(Rs1.W[x][31:sa]);
  }
} else {
  Rd = Rs1;
}
for RV64: x=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1gadfda74706eb907e3194d5b3ca70fd439';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_DSCLIP8';
      define-mem-param  = {
        define-mem-def-name = 'a';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'b';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    ({    \
        unsigned long long result;    \
        unsigned long long __a = (unsigned long long)(a);    \
        __ASM volatile("dsclip8 %0, %1, %2" : "=r"(result) : "r"(__a), "K"(b));    \
        result;    \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '21438';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DSCLIP8 (8-bit Signed Saturation and Clip)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DSCLIP8 Rd, Rs1, imm3u[2:0]
# Rd, Rs1 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Limit the 8-bit signed integer elements of a register into a signed range simultaneously.

<strong>Description</strong>:\n
This instruction limits the 8-bit signed integer elements stored in Rs1 into a signed integer range between -2^imm3u and
2^imm3u-1, and writes the limited results to Rd. For example, if imm3u is 3, the 8-bit input values should be saturated
between 7 and -8. If saturation is performed, set OV bit to 1.

<strong>Operations</strong>:\n
@code 
src = Rs1.B[x];
if (src > (2^imm3u)-1) {
  src = (2^imm3u)-1;
  OV = 1;
} else if (src < -2^imm3u) {
  src = -2^imm3u;
  OV = 1;
}
Rd.B[x] = src
x=7...0
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1gac199d9d36ff635bb706c81093f0d9d5a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_DSCLIP16';
      define-mem-param  = {
        define-mem-def-name = 'a';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'b';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    ({    \
        unsigned long long result;    \
        unsigned long long __a = (unsigned long long)(a);    \
        __ASM volatile("dsclip16 %0, %1, %2" : "=r"(result) : "r"(__a), "K"(b));    \
        result;    \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '21486';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DSCLIP16 (16-bit Signed Saturation and Clip)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DSCLIP16 Rd, Rs1, imm4u[3:0]
# Rd, Rs1 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Limit the 16-bit signed integer elements of a register into a signed range simultaneously.

<strong>Description</strong>:\n
This instruction limits the 16-bit signed integer elements stored in Rs1 into a signed integer range between -2^imm4u and
2^imm4u-1, and writes the limited results to Rd. For example, if imm4u is 3, the 32-bit input values should be saturated
between 7 and -8. If saturation is performed, set OV bit to 1.

<strong>Operations</strong>:\n
@code 
src = Rs1.H[x];
if (src > (2^imm4u)-1) {
  src = (2^imm4u)-1;
  OV = 1;
} else if (src < -2^imm4u) {
  src = -2^imm4u;
  OV = 1;
}
Rd.H[x] = src
x=3...0
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1ga4730206f6beda16da2537b37cf8c4b02';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_DSCLIP32';
      define-mem-param  = {
        define-mem-def-name = 'a';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'b';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    ({    \
        unsigned long long result;    \
        unsigned long long __a = (unsigned long long)(a);    \
        __ASM volatile("dsclip32 %0, %1, %2" : "=r"(result) : "r"(__a), "K"(b));    \
        result;    \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '21534';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DSCLIP32 (32-bit Signed Saturation and Clip)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DSCLIP32 Rd, Rs1, imm5u[4:0]
# Rd, Rs1 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Limit the 32-bit signed integer elements of a register into a signed range simultaneously.

<strong>Description</strong>:\n
This instruction limits the 32-bit signed integer elements stored in Rs1 into a signed integer range between -2^imm5u and
2^imm5u-1, and writes the limited results to Rd. For example, if imm5u is 3, the 32-bit input values should be saturated
between 7 and -8. If saturation is performed, set OV bit to 1.

<strong>Operations</strong>:\n
@code 
src = Rs1.W[x];
if (src > (2^imm5u)-1) {
  src = (2^imm5u)-1;
  OV = 1;
} else if (src < -2^imm5u) {
  src = -2^imm5u;
  OV = 1;
}
Rd.W[x] = src
x=1...0
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'core__feature__dsp_8h_1aba53468a126ea5c12d2050e0fc2757d6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__QADD8';
      define-mem-param  = {
        define-mem-def-name = 'x';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'y';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_KADD8(x, y)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '24761';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Q setting quad 8-bit saturating addition.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'core__feature__dsp_8h_1a81d76f6295d8b9a8fae396c343089db5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__QSUB8';
      define-mem-param  = {
        define-mem-def-name = 'x';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'y';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_KSUB8((x), (y))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '24763';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Q setting quad 8-bit saturating subtract.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'core__feature__dsp_8h_1acb653f7a48b5a6bfbca139d8b8943a94';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__QADD16';
      define-mem-param  = {
        define-mem-def-name = 'x';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'y';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_KADD16((x), (y))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '24765';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Q setting dual 16-bit saturating addition.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'core__feature__dsp_8h_1ab28fdffa200d4ab9f2c2adaed24c3985';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__SHADD16';
      define-mem-param  = {
        define-mem-def-name = 'x';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'y';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_RADD16((x), (y))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '24767';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Dual 16-bit signed addition with halved results.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'core__feature__dsp_8h_1a6d1548b38cf33469edc4d6793f837a30';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__QSUB16';
      define-mem-param  = {
        define-mem-def-name = 'x';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'y';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_KSUB16((x), (y))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '24769';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Q setting dual 16-bit saturating subtract.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'core__feature__dsp_8h_1a2ab9b6077209591ead9cbf58f99cc4c6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__SHSUB16';
      define-mem-param  = {
        define-mem-def-name = 'x';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'y';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_RSUB16((x), (y))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '24771';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Dual 16-bit signed subtraction with halved results.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'core__feature__dsp_8h_1a2d0397056c4a9dcf7519c7b18f160e65';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__QASX';
      define-mem-param  = {
        define-mem-def-name = 'x';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'y';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_KCRAS16((x), (y))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '24773';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Q setting dual 16-bit add and subtract with exchange.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'core__feature__dsp_8h_1aaa2896ccc16c959f34e503ec68a7031c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__SHASX';
      define-mem-param  = {
        define-mem-def-name = 'x';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'y';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_RCRAS16((x), (y))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '24775';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Dual 16-bit signed addition and subtraction with halved results.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'core__feature__dsp_8h_1a8eeb72aa603bdea9cdda1a0d1a8e003b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__QSAX';
      define-mem-param  = {
        define-mem-def-name = 'x';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'y';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_KCRSA16((x), (y))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '24777';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Q setting dual 16-bit subtract and add with exchange.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'core__feature__dsp_8h_1ae11880f13491187a8fa5e88c42402144';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__SHSAX';
      define-mem-param  = {
        define-mem-def-name = 'x';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'y';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_RCRSA16((x), (y))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '24779';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Dual 16-bit signed subtraction and addition with halved results.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'core__feature__dsp_8h_1a2655bf15584a4cd5e51295beb4d1168f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__SMUSDX';
      define-mem-param  = {
        define-mem-def-name = 'x';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'y';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_SMXDS((y), (x))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '24781';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Dual 16-bit signed multiply with exchange returning difference.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'core__feature__dsp_8h_1a68f3b830f32bd736901f8f230fe65b29';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__QADD';
      define-mem-param  = {
        define-mem-def-name = 'x';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'y';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_KADDW((x), (y))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '24788';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Q setting saturating add.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'core__feature__dsp_8h_1acb82f3f1f356569af0e9a2ee0f6c7f08';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__QSUB';
      define-mem-param  = {
        define-mem-def-name = 'x';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'y';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_KSUBW((x), (y))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '24790';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Q setting saturating subtract.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'core__feature__dsp_8h_1a7566a47ba7421fe09418df27ee4a55bd';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__SXTB16';
      define-mem-param  = {
        define-mem-def-name = 'x';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_SUNPKD820(x)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '24827';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Dual extract 8-bits and sign extend each to 16-bits.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'core__feature__dsp_8h_1adeb2d1fba970453a89f292aa0c5918e3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__SXTAB16_RORn';
      define-mem-param  = {
        define-mem-def-name = 'ARG1';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'ARG2';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'ROTATE';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__SXTAB16(ARG1, __ROR(ARG2, ROTATE))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '24833';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'core__feature__dsp_8h_1aa17e50b22528fe6e82fffe1f319fcb91';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__DKHM8';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_DKHM8
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '24842';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'core__feature__dsp_8h_1a7722c996fd51f7410d93bcd251fd337d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__DKHM16';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_DKHM16
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '24843';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'core__feature__dsp_8h_1a4cf1161d9b8e725079aa9c1a864ff925';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__DKSUB16';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_DKSUB16
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '24844';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'core__feature__dsp_8h_1aa7a23a087e61d9a8608ce17a56b2562a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__SMAQA';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_SMAQA
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '24845';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'core__feature__dsp_8h_1ad95ddbf4bc1d68d0f62599373bd1ec08';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__MULSR64';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_MULSR64
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '24846';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'core__feature__dsp_8h_1a7f70a8eba679b7a70d683e8722b292a8';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__DQADD8';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_DKADD8
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '24847';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'core__feature__dsp_8h_1a25a0fab8aa34a004a8c6bdde2a6bfc38';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__DQSUB8';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_DKSUB8
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '24848';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'core__feature__dsp_8h_1a5cdadab8824571cc04a968672a5ca1de';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__DKADD16';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_DKADD16
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '24849';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'core__feature__dsp_8h_1ad76ded8142c7e14ccb06041e612d9175';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__PKBB16';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_PKBB16
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '24850';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'core__feature__dsp_8h_1a4ae0d1c656788b9577ad01971718e9f8';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__DKSLRA16';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_DKSLRA16
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '24851';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'core__feature__dsp_8h_1a2f641d89e90928c83db9331fd5c35e54';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__DKSLRA8';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_DKSLRA8
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '24852';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'core__feature__dsp_8h_1afafc0c2283553e390a88556ab4e0a84e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__KABSW';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_KABSW
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '24853';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'core__feature__dsp_8h_1ae9b78ff5987f249f4d1ee909d742ad6d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__DKABS8';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_DKABS8
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '24854';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'core__feature__dsp_8h_1a4e05a77aef3ffd1854742adf379ab19c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__DKABS16';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_DKABS16
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '24855';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'core__feature__dsp_8h_1a068804b4234162fbf64d981385ea4a6b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__SMALDA';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_SMALDA
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '24856';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'core__feature__dsp_8h_1a16ce6ae1f35157bc89cb6c2c5d029d01';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__SMSLDA';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_SMSLDA
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '24857';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'core__feature__dsp_8h_1a88724da5b3d6534b451634e06edb29fa';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__SMALBB';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_SMALBB
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '24858';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'core__feature__dsp_8h_1a9212a3014160164727a2c00221b4a8a6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__SUB64';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_SUB64
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '24859';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'core__feature__dsp_8h_1a10cfee1029f7049d3dbc875db316b514';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__ADD64';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_ADD64
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '24860';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'core__feature__dsp_8h_1a822f12adb765ff654af4373058dce76e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__SMBB16';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_SMBB16
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '24861';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'core__feature__dsp_8h_1adb9770540ded9412460643017d57e1e5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__SMBT16';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_SMBT16
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '24862';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'core__feature__dsp_8h_1aa4affb1df7199c45269bd27e42c2d894';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__SMTT16';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_SMTT16
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '24863';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'core__feature__dsp_8h_1a2a4af37d687a7fe2466ca3385717c7d7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__EXPD80';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_EXPD80
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '24864';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'core__feature__dsp_8h_1af78a95f3b4f3ae6b89429b1a09442fbf';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__SMAX8';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_SMAX8
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '24865';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'core__feature__dsp_8h_1a8f69c50d1be76b2af56f3cd93e93a1aa';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__SMAX16';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_SMAX16
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '24866';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'core__feature__dsp_8h_1a24f7987d8fc22ff599ac0a2924313108';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__PKTT16';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_PKTT16
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '24867';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'core__feature__dsp_8h_1a5a561fee261cd5e5643909eab618e466';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__KADD16';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_KADD16
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '24868';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'core__feature__dsp_8h_1a82bc6e2607dfe3e6515844df53e31c95';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__SADD16';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_ADD16
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '24869';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'core__feature__dsp_8h_1afe55dadf2d05c9d8f1eacf807c786965';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__SSUB8';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_KSUB8
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '24870';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'core__feature__dsp_8h_1a23520dd23e3761cf1d3b6b20b2737b86';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__SADD8';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_KADD8
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '24871';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'core__feature__dsp_8h_1a9d11b5dff28c362229b3317526e1fc23';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__USAT16';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_UCLIP16
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '24872';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'core__feature__dsp_8h_1a7c99d4955007cfa56d2eb04be5be30d9';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__SMALTT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_SMALTT
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '24873';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'core__feature__dsp_8h_1aa505179349146cf6186640b4c8b47714';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__PKHBT';
      define-mem-param  = {
        define-mem-def-name = 'ARG1';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'ARG2';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'ARG3';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
                                   ((ARG3 == 0) ? __RV_PKTB16(ARG2, ARG1) :              \
                                   (ARG3 == 16) ? __RV_PKBB16(ARG2, ARG1) :              \
                                   (((((uint32_t)(ARG1))          ) & 0x0000FFFFUL) |    \
                                   ((((uint32_t)(ARG2)) << (ARG3)) & 0xFFFF0000UL)))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '24876';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Halfword packing instruction.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Combines bits[15:0] of val1 with bits[31:16] of val2 levitated with the val3. 
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'core__feature__dsp_8h_1ac4be483b8d98e977a69baf4a292a76fe';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__PKHTB';
      define-mem-param  = {
        define-mem-def-name = 'ARG1';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'ARG2';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'ARG3';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
                                   ((ARG3 == 0) ? __RV_PKTB16(ARG1, ARG2) :              \
                                   (ARG3 == 16) ? __RV_PKTT16(ARG1, ARG2) :              \
                                   (((((uint32_t)(ARG1))          ) & 0xFFFF0000UL) |    \
                                   ((((uint32_t)(ARG2)) >> (ARG3)) & 0x0000FFFFUL)))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '24882';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Halfword packing instruction.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Combines bits[31:16] of val1 with bits[15:0] of val2 right-shifted with the val3. 
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'core__feature__dsp_8h_1adb794a57ce5f55996e057e5bc8e87b39';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__PKHBT64';
      define-mem-param  = {
        define-mem-def-name = 'ARG1';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'ARG2';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'ARG3';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
                                   ((ARG3 == 0) ? __RV_DPKTB16(ARG2, ARG1) :             \
                                   (ARG3 == 16) ? __RV_DPKBB16(ARG2, ARG1) :              \
                                   ((int64_t)((((uint32_t)((uint64_t)ARG1 >> 32)) & 0x0000FFFFUL) |           \
                                   ((((uint32_t)((uint64_t)ARG2 >> 32)) << (ARG3)) & 0xFFFF0000UL)) << 32) |  \
                                   ((int64_t)(((((uint32_t)(ARG1))) & 0x0000FFFFUL) |                         \
                                   ((((uint32_t)(ARG2)) << (ARG3)) & 0xFFFF0000UL)) & 0xFFFFFFFFUL))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '24908';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Halfword packing instruction.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Combines bits[15:0] of val1 with bits[31:16] of val2 levitated with the val3，
and also combines the [47:32] of val1 with bits[63:48] of val2 with the val3, finally pack the two new 32-bits to 64-bit. 
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'core__feature__dsp_8h_1ab569a4980020a032a86946beadce6b7a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__PKHTB64';
      define-mem-param  = {
        define-mem-def-name = 'ARG1';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'ARG2';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'ARG3';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
                                   ((ARG3 == 0) ? __RV_DPKTB16(ARG1, ARG2) :              \
                                   (ARG3 == 16) ? __RV_DPKTT16(ARG1, ARG2) :              \
                                   ((uint64_t)(((uint32_t)((uint64_t)ARG1 >> 32) & 0xFFFF0000UL) |            \
                                   ((((uint32_t)((uint64_t)ARG2 >> 32)) >> (ARG3)) & 0x0000FFFFUL)) << 32) |  \
                                   ((uint64_t)(((uint32_t)(ARG1) & 0xFFFF0000UL) |                            \
                                   ((((uint32_t)(ARG2)) >> (ARG3)) & 0x0000FFFFUL)) & 0xFFFFFFFFUL))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '24917';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Halfword packing instruction.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Combines bits[31:16] of val1 with bits[15:0] of val2 right-shifted with the val3，
and also combines bits [63:48] of val1 with bits [47:32] of val2 with the val3, finally pack the two new 32bits to 64bits. 
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'core__feature__dsp_8h_1a6cfc7fe62ef04578af6a1f360dc38245';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__SXTB16_RORn';
      define-mem-param  = {
        define-mem-def-name = 'ARG1';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'ARG2';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_SUNPKD820(__ROR(ARG1, ARG2))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '24926';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
first rotate then extract.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
 This is more suitable for arm compiler for it can rotate and extract in one command
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    };
    func = {
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__ADDSUB_1ga502647bb2462e3bb724ba292a16e62ef';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_ADD8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '449';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
ADD8 (SIMD 8-bit Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
ADD8 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 8-bit integer element additions simultaneously.

<strong>Description</strong>:\n
This instruction adds the 8-bit integer elements in Rs1 with the 8-bit integer elements
in Rs2, and then writes the 8-bit element results to Rd.

<strong>Note</strong>:\n
This instruction can be used for either signed or unsigned addition.

<strong>Operations</strong>:\n
@code 
Rd.B[x] = Rs1.B[x] + Rs2.B[x];
for RV32: x=3...0,
for RV64: x=7...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1gacacca4e304ad42fc68a96c785f2a0b69';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_ADD16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '490';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
ADD16 (SIMD 16-bit Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
ADD16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit integer element additions simultaneously.

<strong>Description</strong>:\n
This instruction adds the 16-bit integer elements in Rs1 with the 16-bit integer
elements in Rs2, and then writes the 16-bit element results to Rd.

<strong>Note</strong>:\n
This instruction can be used for either signed or unsigned addition.

<strong>Operations</strong>:\n
@code 
Rd.H[x] = Rs1.H[x] + Rs2.H[x];
for RV32: x=1...0,
for RV64: x=3...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__64B__ADDSUB_1ga886e1cf9d61d72c7b6028f2e58ad9f5d';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_ADD64';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '543';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
ADD64 (64-bit Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: 64-bit Profile

<strong>Syntax</strong>:\n
@code 
ADD64 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Add two 64-bit signed or unsigned integers.

<strong>RV32 Description</strong>:\n
This instruction adds the 64-bit integer of an even/odd pair of registers specified
by Rs1(4,1) with the 64-bit integer of an even/odd pair of registers specified by Rs2(4,1), and then
writes the 64-bit result to an even/odd pair of registers specified by Rd(4,1).
Rx(4,1), i.e., value d, determines the even/odd pair group of two registers. Specifically, the register
pair includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the high 32-bit of the result and the even <tt>2d</tt> register
of the pair contains the low 32-bit of the result.

<strong>RV64 Description</strong>:\n
This instruction has the same behavior as the ADD instruction in RV64I.

<strong>Note</strong>:\n
This instruction can be used for either signed or unsigned addition.

<strong>Operations</strong>:\n
@code 
RV32:
 t_L = CONCAT(Rd(4,1),1'b0); t_H = CONCAT(Rd(4,1),1'b1);
 a_L = CONCAT(Rs1(4,1),1'b0); a_H = CONCAT(Rs1(4,1),1'b1);
 b_L = CONCAT(Rs2(4,1),1'b0); b_H = CONCAT(Rs2(4,1),1'b1);
 R[t_H].R[t_L] = R[a_H].R[a_L] + R[b_H].R[b_L];
RV64:
 Rd = Rs1 + Rs2;
@endcode

@param [in]  a    unsigned long long type of value stored in a
@param [in]  b    unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1ga3a4b869f2df434f7e9f3f35e79715c6c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_AVE';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '582';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
AVE (Average with Rounding)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
AVE Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Calculate the average of the contents of two general registers.

<strong>Description</strong>:\n
This instruction calculates the average value of two signed integers stored in Rs1 and
Rs2, rounds up a half-integer result to the nearest integer, and writes the result to Rd.

<strong>Operations</strong>:\n
@code 
Sum = CONCAT(Rs1[MSB],Rs1[MSB:0]) + CONCAT(Rs2[MSB],Rs2[MSB:0]) + 1;
Rd = Sum[(MSB+1):1];
for RV32: MSB=31,
for RV64: MSB=63
@endcode

@param [in]  a    long type of value stored in a
@param [in]  b    long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1ga5061e392780b3bea521580befe37556f';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_BITREV';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '623';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
BITREV (Bit Reverse)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
BITREV Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Reverse the bit positions of the source operand within a specified width starting from bit
0. The reversed width is a variable from a GPR.

<strong>Description</strong>:\n
This instruction reverses the bit positions of the content of Rs1. The reversed bit width
is calculated as Rs2[4:0]+1 (RV32) or Rs2[5:0]+1 (RV64). The upper bits beyond the reversed width
are filled with zeros. After the bit reverse operation, the result is written to Rd.

<strong>Operations</strong>:\n
@code 
msb = Rs2[4:0]; (for RV32)
msb = Rs2[5:0]; (for RV64)
rev[0:msb] = Rs1[msb:0];
Rd = ZE(rev[msb:0]);
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1ga0e9da2de29b3f47f38a315ca8f3e5f18';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_BPICK';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'c';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '706';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
BPICK (Bit-wise Pick)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
BPICK Rd, Rs1, Rs2, Rc
@endcode

<strong>Purpose</strong>:\n
Select from two source operands based on a bit mask in the third operand.

<strong>Description</strong>:\n
This instruction selects individual bits from Rs1 or Rs2, based on the bit mask value in
Rc. If a bit in Rc is 1, the corresponding bit is from Rs1; otherwise, the corresponding bit is from Rs2.
The selection results are written to Rd.

<strong>Operations</strong>:\n
@code 
Rd[x] = Rc[x]? Rs1[x] : Rs2[x];
for RV32, x=31...0
for RV64, x=63...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
@param [in]  c    unsigned long type of value stored in c
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__OV__FLAG__SC_1ga0198a8fa03f62716f0b4d0cec311dfd2';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_CLROV';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '731';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CLROV (Clear OV flag)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
CLROV # pseudo mnemonic
@endcode

<strong>Purpose</strong>:\n
This pseudo instruction is an alias to <tt>CSRRCI x0, ucode, 1</tt> instruction.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MISC_1ga439f0189dfb52d89887cd8905d4f5695';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_CLRS8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '776';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CLRS8 (SIMD 8-bit Count Leading Redundant Sign)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
CLRS8 Rd, Rs1
@endcode

<strong>Purpose</strong>:\n
Count the number of redundant sign bits of the 8-bit elements of a general register.

<strong>Description</strong>:\n
Starting from the bits next to the sign bits of the 8-bit elements of Rs1, this instruction
counts the number of redundant sign bits and writes the result to the corresponding 8-bit elements
of Rd.

<strong>Operations</strong>:\n
@code 
snum[x] = Rs1.B[x];
cnt[x] = 0;
for (i = 6 to 0) {
  if (snum[x](i) == snum[x](7)) {
    cnt[x] = cnt[x] + 1;
  } else {
    break;
  }
}
Rd.B[x] = cnt[x];
for RV32: x=3...0
for RV64: x=7...0
@endcode

@param [in]  a    unsigned long type of value stored in a
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MISC_1ga368e2f49b0007ec1776f04ba5a850226';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_CLRS16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '823';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CLRS16 (SIMD 16-bit Count Leading Redundant Sign)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
CLRS16 Rd, Rs1
@endcode

<strong>Purpose</strong>:\n
Count the number of redundant sign bits of the 16-bit elements of a general register.

<strong>Description</strong>:\n
Starting from the bits next to the sign bits of the 16-bit elements of Rs1, this
instruction counts the number of redundant sign bits and writes the result to the corresponding 16-
bit elements of Rd.

<strong>Operations</strong>:\n
@code 
snum[x] = Rs1.H[x];
cnt[x] = 0;
for (i = 14 to 0) {
  if (snum[x](i) == snum[x](15)) {
    cnt[x] = cnt[x] + 1;
  } else {
    break;
  }
}
Rd.H[x] = cnt[x];
for RV32: x=1...0
for RV64: x=3...0
@endcode

@param [in]  a    unsigned long type of value stored in a
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__PART__SIMD__MISC_1ga4f68c42f5bf770045469f5cc5b8dd80c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_CLRS32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '870';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CLRS32 (SIMD 32-bit Count Leading Redundant Sign)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
CLRS32 Rd, Rs1
@endcode

<strong>Purpose</strong>:\n
Count the number of redundant sign bits of the 32-bit elements of a general register.

<strong>Description</strong>:\n
Starting from the bits next to the sign bits of the 32-bit elements of Rs1, this
instruction counts the number of redundant sign bits and writes the result to the corresponding 32-
bit elements of Rd.

<strong>Operations</strong>:\n
@code 
snum[x] = Rs1.W[x];
cnt[x] = 0;
for (i = 30 to 0) {
  if (snum[x](i) == snum[x](31)) {
    cnt[x] = cnt[x] + 1;
  } else {
    break;
  }
}
Rd.W[x] = cnt[x];
for RV32: x=0
for RV64: x=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MISC_1gaf9e26b273480fb62dd48b315270fb3d1';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_CLO8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '917';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CLO8 (SIMD 8-bit Count Leading One)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
CLO8 Rd, Rs1
@endcode

<strong>Purpose</strong>:\n
Count the number of leading one bits of the 8-bit elements of a general register.

<strong>Description</strong>:\n
Starting from the most significant bits of the 8-bit elements of Rs1, this instruction
counts the number of leading one bits and writes the results to the corresponding 8-bit elements of
Rd.

<strong>Operations</strong>:\n
@code 
snum[x] = Rs1.B[x];
cnt[x] = 0;
  for (i = 7 to 0) {
  if (snum[x](i) == 1) {
    cnt[x] = cnt[x] + 1;
  } else {
    break;
  }
}
Rd.B[x] = cnt[x];
for RV32: x=3...0
for RV64: x=7...0
@endcode

@param [in]  a    unsigned long type of value stored in a
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MISC_1ga00c822eb5d2a5b1ff5bc88790a43103c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_CLO16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '964';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CLO16 (SIMD 16-bit Count Leading One)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
CLO16 Rd, Rs1
@endcode

<strong>Purpose</strong>:\n
Count the number of leading one bits of the 16-bit elements of a general register.

<strong>Description</strong>:\n
Starting from the most significant bits of the 16-bit elements of Rs1, this instruction
counts the number of leading one bits and writes the results to the corresponding 16-bit elements
of Rd.

<strong>Operations</strong>:\n
@code 
snum[x] = Rs1.H[x];
cnt[x] = 0;
for (i = 15 to 0) {
  if (snum[x](i) == 1) {
    cnt[x] = cnt[x] + 1;
  } else {
    break;
  }
}
Rd.H[x] = cnt[x];
for RV32: x=1...0
for RV64: x=3...0
@endcode

@param [in]  a    unsigned long type of value stored in a
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__PART__SIMD__MISC_1ga9a3bb8538cb1c67d747dbcf77d50b1f0';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_CLO32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '1011';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CLO32 (SIMD 32-bit Count Leading One)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
CLO32 Rd, Rs1
@endcode

<strong>Purpose</strong>:\n
Count the number of leading one bits of the 32-bit elements of a general register.

<strong>Description</strong>:\n
Starting from the most significant bits of the 32-bit elements of Rs1, this instruction
counts the number of leading one bits and writes the results to the corresponding 32-bit elements
of Rd.

<strong>Operations</strong>:\n
@code 
snum[x] = Rs1.W[x];
cnt[x] = 0;
for (i = 31 to 0) {
  if (snum[x](i) == 1) {
    cnt[x] = cnt[x] + 1;
  } else {
    break;
  }
}
Rd.W[x] = cnt[x];
for RV32: x=0
for RV64: x=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MISC_1gac034821a27f8ab322a689b24ce1257a0';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_CLZ8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '1058';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CLZ8 (SIMD 8-bit Count Leading Zero)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
CLZ8 Rd, Rs1
@endcode

<strong>Purpose</strong>:\n
Count the number of leading zero bits of the 8-bit elements of a general register.

<strong>Description</strong>:\n
Starting from the most significant bits of the 8-bit elements of Rs1, this instruction
counts the number of leading zero bits and writes the results to the corresponding 8-bit elements of
Rd.

<strong>Operations</strong>:\n
@code 
snum[x] = Rs1.B[x];
cnt[x] = 0;
for (i = 7 to 0) {
  if (snum[x](i) == 0) {
    cnt[x] = cnt[x] + 1;
  } else {
    break;
  }
}
Rd.B[x] = cnt[x];
for RV32: x=3...0
for RV64: x=7...0
@endcode

@param [in]  a    unsigned long type of value stored in a
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MISC_1ga862e937fdf95c754472d41ab2df392f2';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_CLZ16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '1105';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CLZ16 (SIMD 16-bit Count Leading Zero)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
CLZ16 Rd, Rs1
@endcode

<strong>Purpose</strong>:\n
Count the number of leading zero bits of the 16-bit elements of a general register.

<strong>Description</strong>:\n
Starting from the most significant bits of the 16-bit elements of Rs1, this instruction
counts the number of leading zero bits and writes the results to the corresponding 16-bit elements
of Rd.

<strong>Operations</strong>:\n
@code 
snum[x] = Rs1.H[x];
cnt[x] = 0;
for (i = 15 to 0) {
  if (snum[x](i) == 0) {
    cnt[x] = cnt[x] + 1;
  } else {
    break;
  }
}
Rd.H[x] = cnt[x];
for RV32: x=1...0
for RV64: x=3...0
@endcode

@param [in]  a    unsigned long type of value stored in a
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__PART__SIMD__MISC_1ga5250b89ea0959cf4f02534c5cd30b79c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_CLZ32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '1152';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CLZ32 (SIMD 32-bit Count Leading Zero)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
CLZ32 Rd, Rs1
@endcode

<strong>Purpose</strong>:\n
Count the number of leading zero bits of the 32-bit elements of a general register.

<strong>Description</strong>:\n
Starting from the most significant bits of the 32-bit elements of Rs1, this instruction
counts the number of leading zero bits and writes the results to the corresponding 32-bit elements
of Rd.

<strong>Operations</strong>:\n
@code 
snum[x] = Rs1.W[x];
cnt[x] = 0;
for (i = 31 to 0) {
  if (snum[x](i) == 0) {
    cnt[x] = cnt[x] + 1;
  } else {
    break;
  }
}
Rd.W[x] = cnt[x];
for RV32: x=0
for RV64: x=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__CMP_1gaf3b7bef50684b91cf3b8de6045ea9579';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_CMPEQ8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '1194';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CMPEQ8 (SIMD 8-bit Integer Compare Equal)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
CMPEQ8 Rs, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 8-bit integer elements equal comparisons simultaneously.

<strong>Description</strong>:\n
This instruction compares the 8-bit integer elements in Rs1 with the 8-bit integer
elements in Rs2 to see if they are equal. If they are equal, the result is 0xFF; otherwise, the result is
0x0. The 8-bit element comparison results are written to Rd.

<strong>Note</strong>:\n
This instruction can be used for either signed or unsigned numbers.

<strong>Operations</strong>:\n
@code 
Rd.B[x] = (Rs1.B[x] == Rs2.B[x])? 0xff : 0x0;
for RV32: x=3...0,
for RV64: x=7...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__CMP_1ga751703d59ea5e8737f21ba152f348293';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_CMPEQ16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '1236';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CMPEQ16 (SIMD 16-bit Integer Compare Equal)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
CMPEQ16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit integer elements equal comparisons simultaneously.

<strong>Description</strong>:\n
This instruction compares the 16-bit integer elements in Rs1 with the 16-bit integer
elements in Rs2 to see if they are equal. If they are equal, the result is 0xFFFF; otherwise, the result
is 0x0. The 16-bit element comparison results are written to Rt.

<strong>Note</strong>:\n
This instruction can be used for either signed or unsigned numbers.

<strong>Operations</strong>:\n
@code 
Rd.H[x] = (Rs1.H[x] == Rs2.H[x])? 0xffff : 0x0;
for RV32: x=1...0,
for RV64: x=3...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga96746dfb052a196b65217708b3d31bd8';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_CRAS16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '1282';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CRAS16 (SIMD 16-bit Cross Addition & Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
CRAS16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit integer element addition and 16-bit integer element subtraction in a 32-bit
chunk simultaneously. Operands are from crossed positions in 32-bit chunks.

<strong>Description</strong>:\n
This instruction adds the 16-bit integer element in [31:16] of 32-bit chunks in Rs1 with
the 16-bit integer element in [15:0] of 32-bit chunks in Rs2, and writes the result to [31:16] of 32-bit
chunks in Rd; at the same time, it subtracts the 16-bit integer element in [31:16] of 32-bit chunks in
Rs2 from the 16-bit integer element in [15:0] of 32-bit chunks, and writes the result to [15:0] of 32-
bit chunks in Rd.

<strong>Note</strong>:\n
This instruction can be used for either signed or unsigned operations.

<strong>Operations</strong>:\n
@code 
Rd.W[x][31:16] = Rs1.W[x][31:16] + Rs2.W[x][15:0];
Rd.W[x][15:0] = Rs1.W[x][15:0] - Rs2.W[x][31:16];
for RV32, x=0
for RV64, x=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1gabbbc32ee11e188a042cd6f4bae5ae8ed';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_CRSA16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '1328';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CRSA16 (SIMD 16-bit Cross Subtraction & Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
CRSA16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit integer element subtraction and 16-bit integer element addition in a 32-bit
chunk simultaneously. Operands are from crossed positions in 32-bit chunks.

<strong>Description</strong>:\n
This instruction subtracts the 16-bit integer element in [15:0] of 32-bit chunks in Rs2
from the 16-bit integer element in [31:16] of 32-bit chunks in Rs1, and writes the result to [31:16] of
32-bit chunks in Rd; at the same time, it adds the 16-bit integer element in [31:16] of 32-bit chunks
in Rs2 with the 16-bit integer element in [15:0] of 32-bit chunks in Rs1, and writes the result to
[15:0] of 32-bit chunks in Rd.

<strong>Note</strong>:\n
This instruction can be used for either signed or unsigned operations.

<strong>Operations</strong>:\n
@code 
Rd.W[x][31:16] = Rs1.W[x][31:16] - Rs2.W[x][15:0];
Rd.W[x][15:0] = Rs1.W[x][15:0] + Rs2.W[x][31:16];
for RV32, x=0
for RV64, x=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MISC_1ga0316d69cb7b16fe8571d11d53af50918';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KABS8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '1414';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KABS8 (SIMD 8-bit Saturating Absolute)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
KABS8 Rd, Rs1
@endcode

<strong>Purpose</strong>:\n
Get the absolute value of 8-bit signed integer elements simultaneously.

<strong>Description</strong>:\n
This instruction calculates the absolute value of 8-bit signed integer elements stored
in Rs1 and writes the element results to Rd. If the input number is 0x80, this instruction generates
0x7f as the output and sets the OV bit to 1.

<strong>Operations</strong>:\n
@code 
src = Rs1.B[x];
if (src == 0x80) {
  src = 0x7f;
  OV = 1;
} else if (src[7] == 1)
  src = -src;
}
Rd.B[x] = src;
for RV32: x=3...0,
for RV64: x=7...0
@endcode

@param [in]  a    unsigned long type of value stored in a
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MISC_1ga2144ee330b7d084593a38bc98919399c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KABS16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '1459';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KABS16 (SIMD 16-bit Saturating Absolute)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
KABS16 Rd, Rs1
@endcode

<strong>Purpose</strong>:\n
Get the absolute value of 16-bit signed integer elements simultaneously.

<strong>Description</strong>:\n
This instruction calculates the absolute value of 16-bit signed integer elements stored
in Rs1 and writes the element results to Rd. If the input number is 0x8000, this instruction
generates 0x7fff as the output and sets the OV bit to 1.

<strong>Operations</strong>:\n
@code 
src = Rs1.H[x];
if (src == 0x8000) {
  src = 0x7fff;
  OV = 1;
} else if (src[15] == 1)
  src = -src;
}
Rd.H[x] = src;
for RV32: x=1...0,
for RV64: x=3...0
@endcode

@param [in]  a    unsigned long type of value stored in a
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1ga1bdcf3e62c9328169f9052c3e01a0fd1';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KABSW';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
signed long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '1506';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KABSW (Scalar 32-bit Absolute Value with Saturation)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
KABSW Rd, Rs1
@endcode

<strong>Purpose</strong>:\n
Get the absolute value of a signed 32-bit integer in a general register.

<strong>Description</strong>:\n
This instruction calculates the absolute value of a signed 32-bit integer stored in Rs1.
The result is sign-extended (for RV64) and written to Rd. This instruction with the minimum
negative integer input of 0x80000000 will produce a saturated output of maximum positive integer
of 0x7fffffff and the OV flag will be set to 1.

<strong>Operations</strong>:\n
@code 
if (Rs1.W[0] >= 0) {
  res = Rs1.W[0];
} else {
  If (Rs1.W[0] == 0x80000000) {
    res = 0x7fffffff;
    OV = 1;
  } else {
    res = -Rs1.W[0];
  }
}
Rd = SE32(res);
@endcode

@param [in]  a    signed long type of value stored in a
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__ADDSUB_1ga64622c4cea6b25708edcf53511ac2846';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KADD8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '1553';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KADD8 (SIMD 8-bit Signed Saturating Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
KADD8 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 8-bit signed integer element saturating additions simultaneously.

<strong>Description</strong>:\n
This instruction adds the 8-bit signed integer elements in Rs1 with the 8-bit signed
integer elements in Rs2. If any of the results are beyond the Q7 number range (-2^7 <= Q7 <= 2^7-1), they
are saturated to the range and the OV bit is set to 1. The saturated results are written to Rd.

<strong>Operations</strong>:\n
@code 
res[x] = Rs1.B[x] + Rs2.B[x];
if (res[x] > 127) {
  res[x] = 127;
  OV = 1;
} else if (res[x] < -128) {
  res[x] = -128;
  OV = 1;
}
Rd.B[x] = res[x];
for RV32: x=3...0,
for RV64: x=7...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1gae514ac0875046449b9d45cd277d85063';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KADD16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '1600';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KADD16 (SIMD 16-bit Signed Saturating Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
KADD16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit signed integer element saturating additions simultaneously.

<strong>Description</strong>:\n
This instruction adds the 16-bit signed integer elements in Rs1 with the 16-bit signed
integer elements in Rs2. If any of the results are beyond the Q15 number range (-2^15 <= Q15 <= 2^15-1),
they are saturated to the range and the OV bit is set to 1. The saturated results are written to Rd.

<strong>Operations</strong>:\n
@code 
res[x] = Rs1.H[x] + Rs2.H[x];
if (res[x] > 32767) {
  res[x] = 32767;
  OV = 1;
} else if (res[x] < -32768) {
  res[x] = -32768;
  OV = 1;
}
Rd.H[x] = res[x];
for RV32: x=1...0,
for RV64: x=3...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__64B__ADDSUB_1gace8675089dafa59f5ba9114232ffe31d';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KADD64';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '1666';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KADD64 (64-bit Signed Saturating Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (64-bit Profile)

<strong>Syntax</strong>:\n
@code 
KADD64 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Add two 64-bit signed integers. The result is saturated to the Q63 range.

<strong>RV32 Description</strong>:\n
This instruction adds the 64-bit signed integer of an even/odd pair of registers
specified by Rs1(4,1) with the 64-bit signed integer of an even/odd pair of registers specified by
Rs2(4,1). If the 64-bit result is beyond the Q63 number range (-2^63 <= Q63 <= 2^63-1), it is saturated to the
range and the OV bit is set to 1. The saturated result is written to an even/odd pair of registers
specified by Rd(4,1).
Rx(4,1), i.e., value d, determines the even/odd pair group of two registers. Specifically, the register
pair includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the high 32-bit of the result and the even <tt>2d</tt> register
of the pair contains the low 32-bit of the result.

<strong>RV64 Description</strong>:\n
This instruction adds the 64-bit signed integer in Rs1 with the 64-bit signed
integer in Rs2. If the result is beyond the Q63 number range (-2^63 <= Q63 <= 2^63-1), it is saturated to the
range and the OV bit is set to 1. The saturated result is written to Rd.

<strong>Operations</strong>:\n
@code 
RV32:
 t_L = CONCAT(Rd(4,1),1'b0); t_H = CONCAT(Rd(4,1),1'b1);
 a_L = CONCAT(Rs1(4,1),1'b0); a_H = CONCAT(Rs1(4,1),1'b1);
 b_L = CONCAT(Rs2(4,1),1'b0); b_H = CONCAT(Rs2(4,1),1'b1);
 result = R[a_H].R[a_L] + R[b_H].R[b_L];
 if (result > (2^63)-1) {
   result = (2^63)-1; OV = 1;
 } else if (result < -2^63) {
   result = -2^63; OV = 1;
 }
 R[t_H].R[t_L] = result;
RV64:
 result = Rs1 + Rs2;
 if (result > (2^63)-1) {
   result = (2^63)-1; OV = 1;
 } else if (result < -2^63) {
   result = -2^63; OV = 1;
 }
 Rd = result;
@endcode

@param [in]  a    long long type of value stored in a
@param [in]  b    long long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q15__SAT__ALU_1ga3d272c3c6988c3c1c76ed6f5896c008e';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KADDH';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '1713';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KADDH (Signed Addition with Q15 Saturation)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
KADDH Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Add the signed lower 32-bit content of two registers with Q15 saturation.

<strong>Description</strong>:\n
The signed lower 32-bit content of Rs1 is added with the signed lower 32-bit content of
Rs2. And the result is saturated to the 16-bit signed integer range of [-2^15, 2^15-1] and then sign-
extended and written to Rd. If saturation happens, this instruction sets the OV flag.

<strong>Operations</strong>:\n
@code 
tmp = Rs1.W[0] + Rs2.W[0];
if (tmp > 32767) {
  res = 32767;
  OV = 1;
} else if (tmp < -32768) {
  res = -32768;
  OV = 1
} else {
  res = tmp;
}
Rd = SE(tmp[15:0]);
@endcode

@param [in]  a    int type of value stored in a
@param [in]  b    int type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1ga9faead3db3c1ffb6a8566719b1f46ffa';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KADDW';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '1761';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KADDW (Signed Addition with Q31 Saturation)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
KADDW Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Add the lower 32-bit signed content of two registers with Q31 saturation.

<strong>Description</strong>:\n
The lower 32-bit signed content of Rs1 is added with the lower 32-bit signed content of
Rs2. And the result is saturated to the 32-bit signed integer range of [-2^31, 2^31-1] and then sign-
extended and written to Rd. If saturation happens, this instruction sets the OV flag.

<strong>Operations</strong>:\n
@code 
tmp = Rs1.W[0] + Rs2.W[0];
if (tmp > (2^31)-1) {
  res = (2^31)-1;
  OV = 1;
} else if (tmp < -2^31) {
  res = -2^31;
  OV = 1
} else {
  res = tmp;
}
Rd = res[31:0]; // RV32
Rd = SE(res[31:0]) // RV64
@endcode

@param [in]  a    int type of value stored in a
@param [in]  b    int type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1gabeee05c8c6965fc9955a62121324992c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KCRAS16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '1818';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KCRAS16 (SIMD 16-bit Signed Saturating Cross Addition & Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
KCRAS16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit signed integer element saturating addition and 16-bit signed integer element
saturating subtraction in a 32-bit chunk simultaneously. Operands are from crossed positions in 32-
bit chunks.

<strong>Description</strong>:\n
This instruction adds the 16-bit signed integer element in [31:16] of 32-bit chunks in
Rs1 with the 16-bit signed integer element in [15:0] of 32-bit chunks in Rs2; at the same time, it
subtracts the 16-bit signed integer element in [31:16] of 32-bit chunks in Rs2 from the 16-bit signed
integer element in [15:0] of 32-bit chunks in Rs1. If any of the results are beyond the Q15 number
range (-2^15 <= Q15 <= 2^15-1), they are saturated to the range and the OV bit is set to 1. The saturated
results are written to [31:16] of 32-bit chunks in Rd for addition and [15:0] of 32-bit chunks in Rd for
subtraction.

<strong>Operations</strong>:\n
@code 
res1 = Rs1.W[x][31:16] + Rs2.W[x][15:0];
res2 = Rs1.W[x][15:0] - Rs2.W[x][31:16];
for (res in [res1, res2]) {
  if (res > (2^15)-1) {
    res = (2^15)-1;
    OV = 1;
  } else if (res < -2^15) {
    res = -2^15;
    OV = 1;
  }
}
Rd.W[x][31:16] = res1;
Rd.W[x][15:0] = res2;
for RV32, x=0
for RV64, x=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga506f2d59400875aba65112bc6563fb08';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KCRSA16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '1875';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KCRSA16 (SIMD 16-bit Signed Saturating Cross Subtraction & Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
KCRSA16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit signed integer element saturating subtraction and 16-bit signed integer element
saturating addition in a 32-bit chunk simultaneously. Operands are from crossed positions in 32-bit
chunks.

<strong>Description</strong>:\n
This instruction subtracts the 16-bit signed integer element in [15:0] of 32-bit chunks
in Rs2 from the 16-bit signed integer element in [31:16] of 32-bit chunks in Rs1; at the same time, it
adds the 16-bit signed integer element in [31:16] of 32-bit chunks in Rs2 with the 16-bit signed
integer element in [15:0] of 32-bit chunks in Rs1. If any of the results are beyond the Q15 number
range (-2^15 <= Q15 <= 2^15-1), they are saturated to the range and the OV bit is set to 1. The saturated
results are written to [31:16] of 32-bit chunks in Rd for subtraction and [15:0] of 32-bit chunks in Rd
for addition.

<strong>Operations</strong>:\n
@code 
res1 = Rs1.W[x][31:16] - Rs2.W[x][15:0];
res2 = Rs1.W[x][15:0] + Rs2.W[x][31:16];
for (res in [res1, res2]) {
  if (res > (2^15)-1) {
    res = (2^15)-1;
    OV = 1;
  } else if (res < -2^15) {
    res = -2^15;
    OV = 1;
  }
}
Rd.W[x][31:16] = res1;
Rd.W[x][15:0] = res2;
for RV32, x=0
for RV64, x=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1ga7e18b0f1cd5e9110bbb38a058eb01d97';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KDMBB';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '1930';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KDMBB (Signed Saturating Double Multiply B16 x B16)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
KDMxy Rd, Rs1, Rs2 (xy = BB, BT, TT)
@endcode

<strong>Purpose</strong>:\n
Multiply the signed Q15 integer contents of two 16-bit data in the corresponding portion
of the lower 32-bit chunk in registers and then double and saturate the Q31 result. The result is
written into the destination register for RV32 or sign-extended to 64-bits and written into the
destination register for RV64. If saturation happens, an overflow flag OV will be set.

<strong>Description</strong>:\n
Multiply the top or bottom 16-bit Q15 content of the lower 32-bit portion in Rs1 with
the top or bottom 16-bit Q15 content of the lower 32-bit portion in Rs2. The Q30 result is then
doubled and saturated into a Q31 value. The Q31 value is then written into Rd (sign-extended in
RV64). When both the two Q15 inputs are 0x8000, saturation will happen. The result will be
saturated to 0x7FFFFFFF and the overflow flag OV will be set.

<strong>Operations</strong>:\n
@code 
aop = Rs1.H[0]; bop = Rs2.H[0]; // KDMBB
aop = Rs1.H[0]; bop = Rs2.H[1]; // KDMBT
aop = Rs1.H[1]; bop = Rs2.H[1]; // KDMTT
If (0x8000 != aop | 0x8000 != bop) {
  Mresult = aop * bop;
  resQ31 = Mresult << 1;
  Rd = resQ31; // RV32
  Rd = SE(resQ31); // RV64
} else {
  resQ31 = 0x7FFFFFFF;
  Rd = resQ31; // RV32
  Rd = SE(resQ31); // RV64
  OV = 1;
}
@endcode

@param [in]  a    unsigned int type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1ga067179bedfe1e3e48bbd8df87bed48dc';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KDMBT';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '1985';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KDMBT (Signed Saturating Double Multiply B16 x T16)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
KDMxy Rd, Rs1, Rs2 (xy = BB, BT, TT)
@endcode

<strong>Purpose</strong>:\n
Multiply the signed Q15 integer contents of two 16-bit data in the corresponding portion
of the lower 32-bit chunk in registers and then double and saturate the Q31 result. The result is
written into the destination register for RV32 or sign-extended to 64-bits and written into the
destination register for RV64. If saturation happens, an overflow flag OV will be set.

<strong>Description</strong>:\n
Multiply the top or bottom 16-bit Q15 content of the lower 32-bit portion in Rs1 with
the top or bottom 16-bit Q15 content of the lower 32-bit portion in Rs2. The Q30 result is then
doubled and saturated into a Q31 value. The Q31 value is then written into Rd (sign-extended in
RV64). When both the two Q15 inputs are 0x8000, saturation will happen. The result will be
saturated to 0x7FFFFFFF and the overflow flag OV will be set.

<strong>Operations</strong>:\n
@code 
aop = Rs1.H[0]; bop = Rs2.H[0]; // KDMBB
aop = Rs1.H[0]; bop = Rs2.H[1]; // KDMBT
aop = Rs1.H[1]; bop = Rs2.H[1]; // KDMTT
If (0x8000 != aop | 0x8000 != bop) {
  Mresult = aop * bop;
  resQ31 = Mresult << 1;
  Rd = resQ31; // RV32
  Rd = SE(resQ31); // RV64
} else {
  resQ31 = 0x7FFFFFFF;
  Rd = resQ31; // RV32
  Rd = SE(resQ31); // RV64
  OV = 1;
}
@endcode

@param [in]  a    unsigned int type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1gaeac5ef72f33c8014a3f045587046c5de';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KDMTT';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '2040';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KDMTT (Signed Saturating Double Multiply T16 x T16)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
KDMxy Rd, Rs1, Rs2 (xy = BB, BT, TT)
@endcode

<strong>Purpose</strong>:\n
Multiply the signed Q15 integer contents of two 16-bit data in the corresponding portion
of the lower 32-bit chunk in registers and then double and saturate the Q31 result. The result is
written into the destination register for RV32 or sign-extended to 64-bits and written into the
destination register for RV64. If saturation happens, an overflow flag OV will be set.

<strong>Description</strong>:\n
Multiply the top or bottom 16-bit Q15 content of the lower 32-bit portion in Rs1 with
the top or bottom 16-bit Q15 content of the lower 32-bit portion in Rs2. The Q30 result is then
doubled and saturated into a Q31 value. The Q31 value is then written into Rd (sign-extended in
RV64). When both the two Q15 inputs are 0x8000, saturation will happen. The result will be
saturated to 0x7FFFFFFF and the overflow flag OV will be set.

<strong>Operations</strong>:\n
@code 
aop = Rs1.H[0]; bop = Rs2.H[0]; // KDMBB
aop = Rs1.H[0]; bop = Rs2.H[1]; // KDMBT
aop = Rs1.H[1]; bop = Rs2.H[1]; // KDMTT
If (0x8000 != aop | 0x8000 != bop) {
  Mresult = aop * bop;
  resQ31 = Mresult << 1;
  Rd = resQ31; // RV32
  Rd = SE(resQ31); // RV64
} else {
  resQ31 = 0x7FFFFFFF;
  Rd = resQ31; // RV32
  Rd = SE(resQ31); // RV64
  OV = 1;
}
@endcode

@param [in]  a    unsigned int type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1ga1dfb3b7d81e19adc86e14e98971f3e42';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KDMABB';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '2105';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KDMABB (Signed Saturating Double Multiply Addition B16 x B16)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
KDMAxy Rd, Rs1, Rs2 (xy = BB, BT, TT)
@endcode

<strong>Purpose</strong>:\n
Multiply the signed Q15 integer contents of two 16-bit data in the corresponding portion
of the lower 32-bit chunk in registers and then double and saturate the Q31 result, add the result
with the sign-extended lower 32-bit chunk destination register and write the saturated addition
result into the destination register. If saturation happens, an overflow flag OV will be set.

<strong>Description</strong>:\n
Multiply the top or bottom 16-bit Q15 content of the lower 32-bit portion in Rs1 with
the top or bottom 16-bit Q15 content of the lower 32-bit portion in Rs2. The Q30 result is then
doubled and saturated into a Q31 value. The Q31 value is then added with the content of Rd. If the
addition result is beyond the Q31 number range (-2^31 <= Q31 <= 2^31-1), it is saturated to the range and
the OV flag is set to 1. The result after saturation is written to Rd.
When both the two Q15 inputs are 0x8000, saturation will happen and the overflow flag OV will be
set.

<strong>Operations</strong>:\n
@code 
aop = Rs1.H[0]; bop = Rs2.H[0]; // KDMABB
aop = Rs1.H[0]; bop = Rs2.H[1]; // KDMABT
aop = Rs1.H[1]; bop = Rs2.H[1]; // KDMATT
If (0x8000 != aop | 0x8000 != bop) {
  Mresult = aop * bop;
  resQ31 = Mresult << 1;
} else {
  resQ31 = 0x7FFFFFFF;
  OV = 1;
}
resadd = Rd + resQ31; // RV32
resadd = Rd.W[0] + resQ31; // RV64
if (resadd > (2^31)-1) {
  resadd = (2^31)-1;
  OV = 1;
} else if (resadd < -2^31) {
  resadd = -2^31;
  OV = 1;
}
Rd = resadd; // RV32
Rd = SE(resadd); // RV64
@endcode

@param [in]  t    long type of value stored in t
@param [in]  a    unsigned int type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1ga15d10fbf27043451ffe312f61a7356d0';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KDMABT';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '2169';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KDMABT (Signed Saturating Double Multiply Addition B16 x T16)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
KDMAxy Rd, Rs1, Rs2 (xy = BB, BT, TT)
@endcode

<strong>Purpose</strong>:\n
Multiply the signed Q15 integer contents of two 16-bit data in the corresponding portion
of the lower 32-bit chunk in registers and then double and saturate the Q31 result, add the result
with the sign-extended lower 32-bit chunk destination register and write the saturated addition
result into the destination register. If saturation happens, an overflow flag OV will be set.

<strong>Description</strong>:\n
Multiply the top or bottom 16-bit Q15 content of the lower 32-bit portion in Rs1 with
the top or bottom 16-bit Q15 content of the lower 32-bit portion in Rs2. The Q30 result is then
doubled and saturated into a Q31 value. The Q31 value is then added with the content of Rd. If the
addition result is beyond the Q31 number range (-2^31 <= Q31 <= 2^31-1), it is saturated to the range and
the OV flag is set to 1. The result after saturation is written to Rd.
When both the two Q15 inputs are 0x8000, saturation will happen and the overflow flag OV will be
set.

<strong>Operations</strong>:\n
@code 
aop = Rs1.H[0]; bop = Rs2.H[0]; // KDMABB
aop = Rs1.H[0]; bop = Rs2.H[1]; // KDMABT
aop = Rs1.H[1]; bop = Rs2.H[1]; // KDMATT
If (0x8000 != aop | 0x8000 != bop) {
  Mresult = aop * bop;
  resQ31 = Mresult << 1;
} else {
  resQ31 = 0x7FFFFFFF;
  OV = 1;
}
resadd = Rd + resQ31; // RV32
resadd = Rd.W[0] + resQ31; // RV64
if (resadd > (2^31)-1) {
  resadd = (2^31)-1;
  OV = 1;
} else if (resadd < -2^31) {
  resadd = -2^31;
  OV = 1;
}
Rd = resadd; // RV32
Rd = SE(resadd); // RV64
@endcode

@param [in]  t    long type of value stored in t
@param [in]  a    unsigned int type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1ga64a75e6b0aecedf02afd2df4458a6ee1';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KDMATT';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '2233';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KDMATT (Signed Saturating Double Multiply Addition T16 x T16)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
KDMAxy Rd, Rs1, Rs2 (xy = BB, BT, TT)
@endcode

<strong>Purpose</strong>:\n
Multiply the signed Q15 integer contents of two 16-bit data in the corresponding portion
of the lower 32-bit chunk in registers and then double and saturate the Q31 result, add the result
with the sign-extended lower 32-bit chunk destination register and write the saturated addition
result into the destination register. If saturation happens, an overflow flag OV will be set.

<strong>Description</strong>:\n
Multiply the top or bottom 16-bit Q15 content of the lower 32-bit portion in Rs1 with
the top or bottom 16-bit Q15 content of the lower 32-bit portion in Rs2. The Q30 result is then
doubled and saturated into a Q31 value. The Q31 value is then added with the content of Rd. If the
addition result is beyond the Q31 number range (-2^31 <= Q31 <= 2^31-1), it is saturated to the range and
the OV flag is set to 1. The result after saturation is written to Rd.
When both the two Q15 inputs are 0x8000, saturation will happen and the overflow flag OV will be
set.

<strong>Operations</strong>:\n
@code 
aop = Rs1.H[0]; bop = Rs2.H[0]; // KDMABB
aop = Rs1.H[0]; bop = Rs2.H[1]; // KDMABT
aop = Rs1.H[1]; bop = Rs2.H[1]; // KDMATT
If (0x8000 != aop | 0x8000 != bop) {
  Mresult = aop * bop;
  resQ31 = Mresult << 1;
} else {
  resQ31 = 0x7FFFFFFF;
  OV = 1;
}
resadd = Rd + resQ31; // RV32
resadd = Rd.W[0] + resQ31; // RV64
if (resadd > (2^31)-1) {
  resadd = (2^31)-1;
  OV = 1;
} else if (resadd < -2^31) {
  resadd = -2^31;
  OV = 1;
}
Rd = resadd; // RV32
Rd = SE(resadd); // RV64
@endcode

@param [in]  t    long type of value stored in t
@param [in]  a    unsigned int type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MULTIPLY_1ga4e14ca16506e0e4190fe003aba01d90f';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KHM8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '2294';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KHM8 (SIMD Signed Saturating Q7 Multiply)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
KHM8 Rd, Rs1, Rs2
KHMX8 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do Q7xQ7 element multiplications simultaneously. The Q14 results are then reduced to Q7
numbers again.

<strong>Description</strong>:\n
For the <tt>KHM8</tt> instruction, multiply the top 8-bit Q7 content of 16-bit chunks in Rs1
with the top 8-bit Q7 content of 16-bit chunks in Rs2. At the same time, multiply the bottom 8-bit Q7
content of 16-bit chunks in Rs1 with the bottom 8-bit Q7 content of 16-bit chunks in Rs2.
For the <tt>KHMX16</tt> instruction, multiply the top 8-bit Q7 content of 16-bit chunks in Rs1 with the
bottom 8-bit Q7 content of 16-bit chunks in Rs2. At the same time, multiply the bottom 8-bit Q7
content of 16-bit chunks in Rs1 with the top 8-bit Q7 content of 16-bit chunks in Rs2.
The Q14 results are then right-shifted 7-bits and saturated into Q7 values. The Q7 results are then
written into Rd. When both the two Q7 inputs of a multiplication are 0x80, saturation will happen.
The result will be saturated to 0x7F and the overflow flag OV will be set.

<strong>Operations</strong>:\n
@code 
if (is `KHM8`) {
  op1t = Rs1.B[x+1]; op2t = Rs2.B[x+1]; // top
  op1b = Rs1.B[x]; op2b = Rs2.B[x]; // bottom
} else if (is `KHMX8`) {
  op1t = Rs1.H[x+1]; op2t = Rs2.H[x]; // Rs1 top
  op1b = Rs1.H[x]; op2b = Rs2.H[x+1]; // Rs1 bottom
}
for ((aop,bop,res) in [(op1t,op2t,rest), (op1b,op2b,resb)]) {
  if (0x80 != aop | 0x80 != bop) {
    res = (aop s* bop) >> 7;
  } else {
    res= 0x7F;
    OV = 1;
  }
}
Rd.H[x/2] = concat(rest, resb);
for RV32, x=0,2
for RV64, x=0,2,4,6
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MULTIPLY_1ga147c294001e28791aaf5d757add3ff29';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KHMX8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '2356';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KHMX8 (SIMD Signed Saturating Crossed Q7 Multiply)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
KHM8 Rd, Rs1, Rs2
KHMX8 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do Q7xQ7 element multiplications simultaneously. The Q14 results are then reduced to Q7
numbers again.

<strong>Description</strong>:\n
For the <tt>KHM8</tt> instruction, multiply the top 8-bit Q7 content of 16-bit chunks in Rs1
with the top 8-bit Q7 content of 16-bit chunks in Rs2. At the same time, multiply the bottom 8-bit Q7
content of 16-bit chunks in Rs1 with the bottom 8-bit Q7 content of 16-bit chunks in Rs2.
For the <tt>KHMX16</tt> instruction, multiply the top 8-bit Q7 content of 16-bit chunks in Rs1 with the
bottom 8-bit Q7 content of 16-bit chunks in Rs2. At the same time, multiply the bottom 8-bit Q7
content of 16-bit chunks in Rs1 with the top 8-bit Q7 content of 16-bit chunks in Rs2.
The Q14 results are then right-shifted 7-bits and saturated into Q7 values. The Q7 results are then
written into Rd. When both the two Q7 inputs of a multiplication are 0x80, saturation will happen.
The result will be saturated to 0x7F and the overflow flag OV will be set.

<strong>Operations</strong>:\n
@code 
if (is `KHM8`) {
  op1t = Rs1.B[x+1]; op2t = Rs2.B[x+1]; // top
  op1b = Rs1.B[x]; op2b = Rs2.B[x]; // bottom
} else if (is `KHMX8`) {
  op1t = Rs1.H[x+1]; op2t = Rs2.H[x]; // Rs1 top
  op1b = Rs1.H[x]; op2b = Rs2.H[x+1]; // Rs1 bottom
}
for ((aop,bop,res) in [(op1t,op2t,rest), (op1b,op2b,resb)]) {
  if (0x80 != aop | 0x80 != bop) {
    res = (aop s* bop) >> 7;
  } else {
    res= 0x7F;
    OV = 1;
  }
}
Rd.H[x/2] = concat(rest, resb);
for RV32, x=0,2
for RV64, x=0,2,4,6
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MULTIPLY_1ga4d6124229f1e4e1bef085b9a1fad5414';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KHM16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '2419';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KHM16 (SIMD Signed Saturating Q15 Multiply)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
KHM16 Rd, Rs1, Rs2
KHMX16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do Q15xQ15 element multiplications simultaneously. The Q30 results are then reduced to
Q15 numbers again.

<strong>Description</strong>:\n
For the <tt>KHM16</tt> instruction, multiply the top 16-bit Q15 content of 32-bit chunks in
Rs1 with the top 16-bit Q15 content of 32-bit chunks in Rs2. At the same time, multiply the bottom
16-bit Q15 content of 32-bit chunks in Rs1 with the bottom 16-bit Q15 content of 32-bit chunks in
Rs2.
For the <tt>KHMX16</tt> instruction, multiply the top 16-bit Q15 content of 32-bit chunks in Rs1 with the
bottom 16-bit Q15 content of 32-bit chunks in Rs2. At the same time, multiply the bottom 16-bit Q15
content of 32-bit chunks in Rs1 with the top 16-bit Q15 content of 32-bit chunks in Rs2.
The Q30 results are then right-shifted 15-bits and saturated into Q15 values. The Q15 results are
then written into Rd. When both the two Q15 inputs of a multiplication are 0x8000, saturation will
happen. The result will be saturated to 0x7FFF and the overflow flag OV will be set.

<strong>Operations</strong>:\n
@code 
if (is `KHM16`) {
  op1t = Rs1.H[x+1]; op2t = Rs2.H[x+1]; // top
  op1b = Rs1.H[x]; op2b = Rs2.H[x]; // bottom
} else if (is `KHMX16`) {
  op1t = Rs1.H[x+1]; op2t = Rs2.H[x]; // Rs1 top
  op1b = Rs1.H[x]; op2b = Rs2.H[x+1]; // Rs1 bottom
}
for ((aop,bop,res) in [(op1t,op2t,rest), (op1b,op2b,resb)]) {
  if (0x8000 != aop | 0x8000 != bop) {
    res = (aop s* bop) >> 15;
  } else {
    res= 0x7FFF;
    OV = 1;
  }
}
Rd.W[x/2] = concat(rest, resb);
for RV32: x=0
for RV64: x=0,2
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MULTIPLY_1ga99ca71b2ac7b14ff937d4ca9946be3d3';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KHMX16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '2482';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KHMX16 (SIMD Signed Saturating Crossed Q15 Multiply)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
KHM16 Rd, Rs1, Rs2
KHMX16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do Q15xQ15 element multiplications simultaneously. The Q30 results are then reduced to
Q15 numbers again.

<strong>Description</strong>:\n
For the <tt>KHM16</tt> instruction, multiply the top 16-bit Q15 content of 32-bit chunks in
Rs1 with the top 16-bit Q15 content of 32-bit chunks in Rs2. At the same time, multiply the bottom
16-bit Q15 content of 32-bit chunks in Rs1 with the bottom 16-bit Q15 content of 32-bit chunks in
Rs2.
For the <tt>KHMX16</tt> instruction, multiply the top 16-bit Q15 content of 32-bit chunks in Rs1 with the
bottom 16-bit Q15 content of 32-bit chunks in Rs2. At the same time, multiply the bottom 16-bit Q15
content of 32-bit chunks in Rs1 with the top 16-bit Q15 content of 32-bit chunks in Rs2.
The Q30 results are then right-shifted 15-bits and saturated into Q15 values. The Q15 results are
then written into Rd. When both the two Q15 inputs of a multiplication are 0x8000, saturation will
happen. The result will be saturated to 0x7FFF and the overflow flag OV will be set.

<strong>Operations</strong>:\n
@code 
if (is `KHM16`) {
  op1t = Rs1.H[x+1]; op2t = Rs2.H[x+1]; // top
  op1b = Rs1.H[x]; op2b = Rs2.H[x]; // bottom
} else if (is `KHMX16`) {
  op1t = Rs1.H[x+1]; op2t = Rs2.H[x]; // Rs1 top
  op1b = Rs1.H[x]; op2b = Rs2.H[x+1]; // Rs1 bottom
}
for ((aop,bop,res) in [(op1t,op2t,rest), (op1b,op2b,resb)]) {
  if (0x8000 != aop | 0x8000 != bop) {
    res = (aop s* bop) >> 15;
  } else {
    res= 0x7FFF;
    OV = 1;
  }
}
Rd.W[x/2] = concat(rest, resb);
for RV32: x=0
for RV64: x=0,2
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q15__SAT__ALU_1ga26af5537e6aca0133b66832596728a8e';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KHMBB';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '2535';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KHMBB (Signed Saturating Half Multiply B16 x B16)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
KHMxy Rd, Rs1, Rs2 (xy = BB, BT, TT)
@endcode

<strong>Purpose</strong>:\n
Multiply the signed Q15 number contents of two 16-bit data in the corresponding portion
of the lower 32-bit chunk in registers and then right-shift 15 bits to turn the Q30 result into a Q15
number again and saturate the Q15 result into the destination register. If saturation happens, an
overflow flag OV will be set.

<strong>Description</strong>:\n
Multiply the top or bottom 16-bit Q15 content of the lower 32-bit portion in Rs1 with
the top or bottom 16-bit Q15 content of the lower 32-bit portion in Rs2. The Q30 result is then right-
shifted 15-bits and saturated into a Q15 value. The Q15 value is then sing-extended and written into
Rd. When both the two Q15 inputs are 0x8000, saturation will happen. The result will be saturated
to 0x7FFF and the overflow flag OV will be set.

<strong>Operations</strong>:\n
@code 
aop = Rs1.H[0]; bop = Rs2.H[0]; // KHMBB
aop = Rs1.H[0]; bop = Rs2.H[1]; // KHMBT
aop = Rs1.H[1]; bop = Rs2.H[1]; // KHMTT
If (0x8000 != aop | 0x8000 != bop) {
  Mresult[31:0] = aop * bop;
  res[15:0] = Mresult[30:15];
} else {
  res[15:0] = 0x7FFF;
  OV = 1;
}
Rd = SE32(res[15:0]); // Rv32
Rd = SE64(res[15:0]); // RV64
@endcode

@param [in]  a    unsigned int type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q15__SAT__ALU_1ga96e244df43ec32a722a3562a0a59a6a6';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KHMBT';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '2588';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KHMBT (Signed Saturating Half Multiply B16 x T16)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
KHMxy Rd, Rs1, Rs2 (xy = BB, BT, TT)
@endcode

<strong>Purpose</strong>:\n
Multiply the signed Q15 number contents of two 16-bit data in the corresponding portion
of the lower 32-bit chunk in registers and then right-shift 15 bits to turn the Q30 result into a Q15
number again and saturate the Q15 result into the destination register. If saturation happens, an
overflow flag OV will be set.

<strong>Description</strong>:\n
Multiply the top or bottom 16-bit Q15 content of the lower 32-bit portion in Rs1 with
the top or bottom 16-bit Q15 content of the lower 32-bit portion in Rs2. The Q30 result is then right-
shifted 15-bits and saturated into a Q15 value. The Q15 value is then sing-extended and written into
Rd. When both the two Q15 inputs are 0x8000, saturation will happen. The result will be saturated
to 0x7FFF and the overflow flag OV will be set.

<strong>Operations</strong>:\n
@code 
aop = Rs1.H[0]; bop = Rs2.H[0]; // KHMBB
aop = Rs1.H[0]; bop = Rs2.H[1]; // KHMBT
aop = Rs1.H[1]; bop = Rs2.H[1]; // KHMTT
If (0x8000 != aop | 0x8000 != bop) {
  Mresult[31:0] = aop * bop;
  res[15:0] = Mresult[30:15];
} else {
  res[15:0] = 0x7FFF;
  OV = 1;
}
Rd = SE32(res[15:0]); // Rv32
Rd = SE64(res[15:0]); // RV64
@endcode

@param [in]  a    unsigned int type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q15__SAT__ALU_1ga06a6deed6954a496ac381758e067e850';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KHMTT';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '2641';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KHMTT (Signed Saturating Half Multiply T16 x T16)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
KHMxy Rd, Rs1, Rs2 (xy = BB, BT, TT)
@endcode

<strong>Purpose</strong>:\n
Multiply the signed Q15 number contents of two 16-bit data in the corresponding portion
of the lower 32-bit chunk in registers and then right-shift 15 bits to turn the Q30 result into a Q15
number again and saturate the Q15 result into the destination register. If saturation happens, an
overflow flag OV will be set.

<strong>Description</strong>:\n
Multiply the top or bottom 16-bit Q15 content of the lower 32-bit portion in Rs1 with
the top or bottom 16-bit Q15 content of the lower 32-bit portion in Rs2. The Q30 result is then right-
shifted 15-bits and saturated into a Q15 value. The Q15 value is then sing-extended and written into
Rd. When both the two Q15 inputs are 0x8000, saturation will happen. The result will be saturated
to 0x7FFF and the overflow flag OV will be set.

<strong>Operations</strong>:\n
@code 
aop = Rs1.H[0]; bop = Rs2.H[0]; // KHMBB
aop = Rs1.H[0]; bop = Rs2.H[1]; // KHMBT
aop = Rs1.H[1]; bop = Rs2.H[1]; // KHMTT
If (0x8000 != aop | 0x8000 != bop) {
  Mresult[31:0] = aop * bop;
  res[15:0] = Mresult[30:15];
} else {
  res[15:0] = 0x7FFF;
  OV = 1;
}
Rd = SE32(res[15:0]); // Rv32
Rd = SE64(res[15:0]); // RV64
@endcode

@param [in]  a    unsigned int type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga3a415f9cbeefb992bc791099e73c8794';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMABB';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '2705';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMABB (SIMD Saturating Signed Multiply Bottom Halfs & Add)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
KMABB Rd, Rs1, Rs2
KMABT Rd, Rs1, Rs2
KMATT Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 16-bit content of 32-bit elements in a register with the 16-bit content
of 32-bit elements in another register and add the result to the content of 32-bit elements in the
third register. The addition result may be saturated and is written to the third register.
* KMABB: rd.W[x] + bottom*bottom (per 32-bit element)
* KMABT rd.W[x] + bottom*top (per 32-bit element)
* KMATT rd.W[x] + top*top (per 32-bit element)

<strong>Description</strong>:\n
For the <tt>KMABB</tt> instruction, it multiplies the bottom 16-bit content of 32-bit elements in Rs1 with
the bottom 16-bit content of 32-bit elements in Rs2.
For the <tt>KMABT</tt> instruction, it multiplies the bottom 16-bit content of 32-bit elements in Rs1 with
the top 16-bit content of 32-bit elements in Rs2.
For the <tt>KMATT</tt> instruction, it multiplies the top 16-bit content of 32-bit elements in Rs1 with the
top 16-bit content of 32-bit elements in Rs2.
The multiplication result is added to the content of 32-bit elements in Rd. If the addition result is
beyond the Q31 number range (-2^31 <= Q31 <= 2^31-1), it is saturated to the range and the OV bit is set to
1. The results after saturation are written to Rd. The 16-bit contents of Rs1 and Rs2 are treated as
signed integers.

<strong>Operations</strong>:\n
@code 
res[x] = Rd.W[x] + (Rs1.W[x].H[0] * Rs2.W[x].H[0]); // KMABB
res[x] = Rd.W[x] + (Rs1.W[x].H[0] * Rs2.W[x].H[1]); // KMABT
res[x] = Rd.W[x] + (Rs1.W[x].H[1] * Rs2.W[x].H[1]); // KMATT
if (res[x] > (2^31)-1) {
  res[x] = (2^31)-1;
  OV = 1;
} else if (res[x] < -2^31) {
  res[x] = -2^31;
  OV = 1;
}
Rd.W[x] = res[x];
for RV32: x=0
for RV64: x=1...0
@endcode

@param [in]  t    long type of value stored in t
@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga3fe17f8a2e70a69f1751a1c0093c3158';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMABT';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '2768';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMABT (SIMD Saturating Signed Multiply Bottom & Top Halfs & Add)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
KMABB Rd, Rs1, Rs2
KMABT Rd, Rs1, Rs2
KMATT Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 16-bit content of 32-bit elements in a register with the 16-bit content
of 32-bit elements in another register and add the result to the content of 32-bit elements in the
third register. The addition result may be saturated and is written to the third register.
* KMABB: rd.W[x] + bottom*bottom (per 32-bit element)
* KMABT rd.W[x] + bottom*top (per 32-bit element)
* KMATT rd.W[x] + top*top (per 32-bit element)

<strong>Description</strong>:\n
For the <tt>KMABB</tt> instruction, it multiplies the bottom 16-bit content of 32-bit elements in Rs1 with
the bottom 16-bit content of 32-bit elements in Rs2.
For the <tt>KMABT</tt> instruction, it multiplies the bottom 16-bit content of 32-bit elements in Rs1 with
the top 16-bit content of 32-bit elements in Rs2.
For the <tt>KMATT</tt> instruction, it multiplies the top 16-bit content of 32-bit elements in Rs1 with the
top 16-bit content of 32-bit elements in Rs2.
The multiplication result is added to the content of 32-bit elements in Rd. If the addition result is
beyond the Q31 number range (-2^31 <= Q31 <= 2^31-1), it is saturated to the range and the OV bit is set to
1. The results after saturation are written to Rd. The 16-bit contents of Rs1 and Rs2 are treated as
signed integers.

<strong>Operations</strong>:\n
@code 
res[x] = Rd.W[x] + (Rs1.W[x].H[0] * Rs2.W[x].H[0]); // KMABB
res[x] = Rd.W[x] + (Rs1.W[x].H[0] * Rs2.W[x].H[1]); // KMABT
res[x] = Rd.W[x] + (Rs1.W[x].H[1] * Rs2.W[x].H[1]); // KMATT
if (res[x] > (2^31)-1) {
  res[x] = (2^31)-1;
  OV = 1;
} else if (res[x] < -2^31) {
  res[x] = -2^31;
  OV = 1;
}
Rd.W[x] = res[x];
for RV32: x=0
for RV64: x=1...0
@endcode

@param [in]  t    long type of value stored in t
@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1gad6267dd09022516bcd77ce742b8b40ab';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMATT';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '2831';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMATT (SIMD Saturating Signed Multiply Top Halfs & Add)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
KMABB Rd, Rs1, Rs2
KMABT Rd, Rs1, Rs2
KMATT Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 16-bit content of 32-bit elements in a register with the 16-bit content
of 32-bit elements in another register and add the result to the content of 32-bit elements in the
third register. The addition result may be saturated and is written to the third register.
* KMABB: rd.W[x] + bottom*bottom (per 32-bit element)
* KMABT rd.W[x] + bottom*top (per 32-bit element)
* KMATT rd.W[x] + top*top (per 32-bit element)

<strong>Description</strong>:\n
For the <tt>KMABB</tt> instruction, it multiplies the bottom 16-bit content of 32-bit elements in Rs1 with
the bottom 16-bit content of 32-bit elements in Rs2.
For the <tt>KMABT</tt> instruction, it multiplies the bottom 16-bit content of 32-bit elements in Rs1 with
the top 16-bit content of 32-bit elements in Rs2.
For the <tt>KMATT</tt> instruction, it multiplies the top 16-bit content of 32-bit elements in Rs1 with the
top 16-bit content of 32-bit elements in Rs2.
The multiplication result is added to the content of 32-bit elements in Rd. If the addition result is
beyond the Q31 number range (-2^31 <= Q31 <= 2^31-1), it is saturated to the range and the OV bit is set to
1. The results after saturation are written to Rd. The 16-bit contents of Rs1 and Rs2 are treated as
signed integers.

<strong>Operations</strong>:\n
@code 
res[x] = Rd.W[x] + (Rs1.W[x].H[0] * Rs2.W[x].H[0]); // KMABB
res[x] = Rd.W[x] + (Rs1.W[x].H[0] * Rs2.W[x].H[1]); // KMABT
res[x] = Rd.W[x] + (Rs1.W[x].H[1] * Rs2.W[x].H[1]); // KMATT
if (res[x] > (2^31)-1) {
  res[x] = (2^31)-1;
  OV = 1;
} else if (res[x] < -2^31) {
  res[x] = -2^31;
  OV = 1;
}
Rd.W[x] = res[x];
for RV32: x=0
for RV64: x=1...0
@endcode

@param [in]  t    long type of value stored in t
@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga84ab72987eeee69e2392965d8d8944f4';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMADA';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '2895';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMADA (SIMD Saturating Signed Multiply Two Halfs and Two Adds)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
KMADA Rd, Rs1, Rs2
KMAXDA Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 16-bit multiplications from 32-bit elements in two registers; and then adds
the two 32-bit results and 32-bit elements in a third register together. The addition result may be
saturated.
* KMADA: rd.W[x] + top*top + bottom*bottom (per 32-bit element)
* KMAXDA: rd.W[x] + top*bottom + bottom*top (per 32-bit element)

<strong>Description</strong>:\n
For the `KMADA instruction, it multiplies the bottom 16-bit content of 32-bit elements in Rs1 with
the bottom 16-bit content of 32-bit elements in Rs2 and then adds the result to the result of
multiplying the top 16-bit content of 32-bit elements in Rs1 with the top 16-bit content of 32-bit
elements in Rs2.
For the <tt>KMAXDA</tt> instruction, it multiplies the top 16-bit content of 32-bit elements in Rs1 with the
bottom 16-bit content of 32-bit elements in Rs2 and then adds the result to the result of multiplying
the bottom 16-bit content of 32-bit elements in Rs1 with the top 16-bit content of 32-bit elements in
Rs2.
The result is added to the content of 32-bit elements in Rd. If the addition result is beyond the Q31
number range (-2^31 <= Q31 <= 2^31-1), it is saturated to the range and the OV bit is set to 1. The 32-bit
results after saturation are written to Rd. The 16-bit contents of Rs1 and Rs2 are treated as signed
integers.

<strong>Operations</strong>:\n
@code 
// KMADA
res[x] = Rd.W[x] + (Rs1.W[x].H[1] * Rs2.W[x].H[1]) + (Rs1.W[x].H[0] * Rs2.W[x].H[0]);
// KMAXDA
res[x] = Rd.W[x] + (Rs1.W[x].H[1] * Rs2.W[x].H[0]) + (Rs1.W[x].H[0] * Rs2.W[x].H[1]);
if (res[x] > (2^31)-1) {
  res[x] = (2^31)-1;
  OV = 1;
} else if (res[x] < -2^31) {
  res[x] = -2^31;
OV = 1;
}
Rd.W[x] = res[x];
for RV32: x=0
for RV64: x=1...0
@endcode

@param [in]  t    long type of value stored in t
@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga1cab84ebee0378b9c1069e17efdbfd69';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMAXDA';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '2959';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMAXDA (SIMD Saturating Signed Crossed Multiply Two Halfs and Two Adds)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
KMADA Rd, Rs1, Rs2
KMAXDA Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 16-bit multiplications from 32-bit elements in two registers; and then adds
the two 32-bit results and 32-bit elements in a third register together. The addition result may be
saturated.
* KMADA: rd.W[x] + top*top + bottom*bottom (per 32-bit element)
* KMAXDA: rd.W[x] + top*bottom + bottom*top (per 32-bit element)

<strong>Description</strong>:\n
For the `KMADA instruction, it multiplies the bottom 16-bit content of 32-bit elements in Rs1 with
the bottom 16-bit content of 32-bit elements in Rs2 and then adds the result to the result of
multiplying the top 16-bit content of 32-bit elements in Rs1 with the top 16-bit content of 32-bit
elements in Rs2.
For the <tt>KMAXDA</tt> instruction, it multiplies the top 16-bit content of 32-bit elements in Rs1 with the
bottom 16-bit content of 32-bit elements in Rs2 and then adds the result to the result of multiplying
the bottom 16-bit content of 32-bit elements in Rs1 with the top 16-bit content of 32-bit elements in
Rs2.
The result is added to the content of 32-bit elements in Rd. If the addition result is beyond the Q31
number range (-2^31 <= Q31 <= 2^31-1), it is saturated to the range and the OV bit is set to 1. The 32-bit
results after saturation are written to Rd. The 16-bit contents of Rs1 and Rs2 are treated as signed
integers.

<strong>Operations</strong>:\n
@code 
// KMADA
res[x] = Rd.W[x] + (Rs1.W[x].H[1] * Rs2.W[x].H[1]) + (Rs1.W[x].H[0] * Rs2.W[x].H[0]);
// KMAXDA
res[x] = Rd.W[x] + (Rs1.W[x].H[1] * Rs2.W[x].H[0]) + (Rs1.W[x].H[0] * Rs2.W[x].H[1]);
if (res[x] > (2^31)-1) {
  res[x] = (2^31)-1;
  OV = 1;
} else if (res[x] < -2^31) {
  res[x] = -2^31;
OV = 1;
}
Rd.W[x] = res[x];
for RV32: x=0
for RV64: x=1...0
@endcode

@param [in]  t    long type of value stored in t
@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga6b9f5141c87a343051b03494705eeac8';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMADS';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '3031';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMADS (SIMD Saturating Signed Multiply Two Halfs & Subtract & Add)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
KMADS Rd, Rs1, Rs2
KMADRS Rd, Rs1, Rs2
KMAXDS Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 16-bit multiplications from 32-bit elements in two registers; and then
perform a subtraction operation between the two 32-bit results. Then add the subtraction result to
the corresponding 32-bit elements in a third register. The addition result may be saturated.
* KMADS: rd.W[x] + (top*top - bottom*bottom) (per 32-bit element)
* KMADRS: rd.W[x] + (bottom*bottom - top*top) (per 32-bit element)
* KMAXDS: rd.W[x] + (top*bottom - bottom*top) (per 32-bit element)

<strong>Description</strong>:\n
For the <tt>KMADS</tt> instruction, it multiplies the bottom 16-bit content of 32-bit elements in Rs1 with
the bottom 16-bit content of 32-bit elements in Rs2 and then subtracts the result from the result of
multiplying the top 16-bit content of 32-bit elements in Rs1 with the top 16-bit content of 32-bit
elements in Rs2.
For the <tt>KMADRS</tt> instruction, it multiplies the top 16-bit content of 32-bit elements in Rs1 with the
top 16-bit content of 32-bit elements in Rs2 and then subtracts the result from the result of
multiplying the bottom 16-bit content of 32-bit elements in Rs1 with the bottom 16-bit content of 32-
bit elements in Rs2.
For the <tt>KMAXDS</tt> instruction, it multiplies the bottom 16-bit content of 32-bit elements in Rs1 with
the top 16-bit content of 32-bit elements in Rs2 and then subtracts the result from the result of
multiplying the top 16-bit content of 32-bit elements in Rs1 with the bottom 16-bit content of 32-bit
elements in Rs2.
The subtraction result is then added to the content of the corresponding 32-bit elements in Rd. If the
addition result is beyond the Q31 number range (-2^31 <= Q31 <= 2^31-1), it is saturated to the range and
the OV bit is set to 1. The 32-bit results after saturation are written to Rd. The 16-bit contents of Rs1
and Rs2 are treated as signed integers.

<strong>Operations</strong>:\n
@code 
// KMADS
res[x] = Rd.W[x] + (Rs1.W[x].H[1] * Rs2.W[x].H[1]) - (Rs1.W[x].H[0] * Rs2.W[x].H[0]);
// KMADRS
res[x] = Rd.W[x] + (Rs1.W[x].H[0] * Rs2.W[x].H[0]) - (Rs1.W[x].H[1] * Rs2.W[x].H[1]);
// KMAXDS
res[x] = Rd.W[x] + (Rs1.W[x].H[1] * Rs2.W[x].H[0]) - (Rs1.W[x].H[0] * Rs2.W[x].H[1]);
if (res[x] > (2^31)-1) {
  res[x] = (2^31)-1;
  OV = 1;
} else if (res[x] < -2^31) {
  res[x] = -2^31;
  OV = 1;
}
Rd.W[x] = res[x];
for RV32: x=0
for RV64: x=1...0
@endcode

@param [in]  t    long type of value stored in t
@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga13576aa03f836be838f491fe7cc483d9';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMADRS';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '3103';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMADRS (SIMD Saturating Signed Multiply Two Halfs & Reverse Subtract & Add)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
KMADS Rd, Rs1, Rs2
KMADRS Rd, Rs1, Rs2
KMAXDS Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 16-bit multiplications from 32-bit elements in two registers; and then
perform a subtraction operation between the two 32-bit results. Then add the subtraction result to
the corresponding 32-bit elements in a third register. The addition result may be saturated.
* KMADS: rd.W[x] + (top*top - bottom*bottom) (per 32-bit element)
* KMADRS: rd.W[x] + (bottom*bottom - top*top) (per 32-bit element)
* KMAXDS: rd.W[x] + (top*bottom - bottom*top) (per 32-bit element)

<strong>Description</strong>:\n
For the <tt>KMADS</tt> instruction, it multiplies the bottom 16-bit content of 32-bit elements in Rs1 with
the bottom 16-bit content of 32-bit elements in Rs2 and then subtracts the result from the result of
multiplying the top 16-bit content of 32-bit elements in Rs1 with the top 16-bit content of 32-bit
elements in Rs2.
For the <tt>KMADRS</tt> instruction, it multiplies the top 16-bit content of 32-bit elements in Rs1 with the
top 16-bit content of 32-bit elements in Rs2 and then subtracts the result from the result of
multiplying the bottom 16-bit content of 32-bit elements in Rs1 with the bottom 16-bit content of 32-
bit elements in Rs2.
For the <tt>KMAXDS</tt> instruction, it multiplies the bottom 16-bit content of 32-bit elements in Rs1 with
the top 16-bit content of 32-bit elements in Rs2 and then subtracts the result from the result of
multiplying the top 16-bit content of 32-bit elements in Rs1 with the bottom 16-bit content of 32-bit
elements in Rs2.
The subtraction result is then added to the content of the corresponding 32-bit elements in Rd. If the
addition result is beyond the Q31 number range (-2^31 <= Q31 <= 2^31-1), it is saturated to the range and
the OV bit is set to 1. The 32-bit results after saturation are written to Rd. The 16-bit contents of Rs1
and Rs2 are treated as signed integers.

<strong>Operations</strong>:\n
@code 
// KMADS
res[x] = Rd.W[x] + (Rs1.W[x].H[1] * Rs2.W[x].H[1]) - (Rs1.W[x].H[0] * Rs2.W[x].H[0]);
// KMADRS
res[x] = Rd.W[x] + (Rs1.W[x].H[0] * Rs2.W[x].H[0]) - (Rs1.W[x].H[1] * Rs2.W[x].H[1]);
// KMAXDS
res[x] = Rd.W[x] + (Rs1.W[x].H[1] * Rs2.W[x].H[0]) - (Rs1.W[x].H[0] * Rs2.W[x].H[1]);
if (res[x] > (2^31)-1) {
  res[x] = (2^31)-1;
  OV = 1;
} else if (res[x] < -2^31) {
  res[x] = -2^31;
  OV = 1;
}
Rd.W[x] = res[x];
for RV32: x=0
for RV64: x=1...0
@endcode

@param [in]  t    long type of value stored in t
@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga4649629156d0af6a2e64c30ae5bee381';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMAXDS';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '3175';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMAXDS (SIMD Saturating Signed Crossed Multiply Two Halfs & Subtract & Add)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
KMADS Rd, Rs1, Rs2
KMADRS Rd, Rs1, Rs2
KMAXDS Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 16-bit multiplications from 32-bit elements in two registers; and then
perform a subtraction operation between the two 32-bit results. Then add the subtraction result to
the corresponding 32-bit elements in a third register. The addition result may be saturated.
* KMADS: rd.W[x] + (top*top - bottom*bottom) (per 32-bit element)
* KMADRS: rd.W[x] + (bottom*bottom - top*top) (per 32-bit element)
* KMAXDS: rd.W[x] + (top*bottom - bottom*top) (per 32-bit element)

<strong>Description</strong>:\n
For the <tt>KMADS</tt> instruction, it multiplies the bottom 16-bit content of 32-bit elements in Rs1 with
the bottom 16-bit content of 32-bit elements in Rs2 and then subtracts the result from the result of
multiplying the top 16-bit content of 32-bit elements in Rs1 with the top 16-bit content of 32-bit
elements in Rs2.
For the <tt>KMADRS</tt> instruction, it multiplies the top 16-bit content of 32-bit elements in Rs1 with the
top 16-bit content of 32-bit elements in Rs2 and then subtracts the result from the result of
multiplying the bottom 16-bit content of 32-bit elements in Rs1 with the bottom 16-bit content of 32-
bit elements in Rs2.
For the <tt>KMAXDS</tt> instruction, it multiplies the bottom 16-bit content of 32-bit elements in Rs1 with
the top 16-bit content of 32-bit elements in Rs2 and then subtracts the result from the result of
multiplying the top 16-bit content of 32-bit elements in Rs1 with the bottom 16-bit content of 32-bit
elements in Rs2.
The subtraction result is then added to the content of the corresponding 32-bit elements in Rd. If the
addition result is beyond the Q31 number range (-2^31 <= Q31 <= 2^31-1), it is saturated to the range and
the OV bit is set to 1. The 32-bit results after saturation are written to Rd. The 16-bit contents of Rs1
and Rs2 are treated as signed integers.

<strong>Operations</strong>:\n
@code 
// KMADS
res[x] = Rd.W[x] + (Rs1.W[x].H[1] * Rs2.W[x].H[1]) - (Rs1.W[x].H[0] * Rs2.W[x].H[0]);
// KMADRS
res[x] = Rd.W[x] + (Rs1.W[x].H[0] * Rs2.W[x].H[0]) - (Rs1.W[x].H[1] * Rs2.W[x].H[1]);
// KMAXDS
res[x] = Rd.W[x] + (Rs1.W[x].H[1] * Rs2.W[x].H[0]) - (Rs1.W[x].H[0] * Rs2.W[x].H[1]);
if (res[x] > (2^31)-1) {
  res[x] = (2^31)-1;
  OV = 1;
} else if (res[x] < -2^31) {
  res[x] = -2^31;
  OV = 1;
}
Rd.W[x] = res[x];
for RV32: x=0
for RV64: x=1...0
@endcode

@param [in]  t    long type of value stored in t
@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__32B__MULT__64B__ADDSUB_1ga9033dac220a33b6a89c2fa0200534e48';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMAR64';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '3243';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMAR64 (Signed Multiply and Saturating Add to 64-Bit Data)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (64-bit Profile)

<strong>Syntax</strong>:\n
@code 
KMAR64 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the 32-bit signed elements in two registers and add the 64-bit multiplication
results to the 64-bit signed data of a pair of registers (RV32) or a register (RV64). The result is
saturated to the Q63 range and written back to the pair of registers (RV32) or the register (RV64).

<strong>RV32 Description</strong>:\n
This instruction multiplies the 32-bit signed data of Rs1 with that of Rs2. It adds
the 64-bit multiplication result to the 64-bit signed data of an even/odd pair of registers specified by
Rd(4,1) with unlimited precision. If the 64-bit addition result is beyond the Q63 number range (-2^63 <=
Q63 <= 2^63-1), it is saturated to the range and the OV bit is set to 1. The saturated result is written back
to the even/odd pair of registers specified by Rd(4,1).
Rx(4,1), i.e., value d, determines the even/odd pair group of two registers. Specifically, the register
pair includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the high 32-bit of the result and the even <tt>2d</tt> register
of the pair contains the low 32-bit of the result.

<strong>RV64 Description</strong>:\n
This instruction multiplies the 32-bit signed elements of Rs1 with that of Rs2. It
adds the 64-bit multiplication results to the 64-bit signed data of Rd with unlimited precision. If the
64-bit addition result is beyond the Q63 number range (-2^63 <= Q63 <= 2^63-1), it is saturated to the range
and the OV bit is set to 1. The saturated result is written back to Rd.

<strong>Operations</strong>:\n
@code 
RV32:
t_L = CONCAT(Rd(4,1),1'b0); t_H = CONCAT(Rd(4,1),1'b1);
result = R[t_H].R[t_L] + (Rs1 * Rs2);
if (result > (2^63)-1) {
  result = (2^63)-1; OV = 1;
} else if (result < -2^63) {
  result = -2^63; OV = 1;
}
R[t_H].R[t_L] = result;
RV64:
// `result` has unlimited precision
result = Rd + (Rs1.W[0] * Rs2.W[0]) + (Rs1.W[1] * Rs2.W[1]);
if (result > (2^63)-1) {
  result = (2^63)-1; OV = 1;
} else if (result < -2^63) {
  result = -2^63; OV = 1;
}
Rd = result;
@endcode

@param [in]  t    long long type of value stored in t
@param [in]  a    long type of value stored in a
@param [in]  b    long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga2de43c62af85225d40c1ac4210640925';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMDA';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '3293';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMDA (SIMD Signed Multiply Two Halfs and Add)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
KMDA Rd, Rs1, Rs2
KMXDA Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 16-bit multiplications from the 32-bit elements of two registers; and then
adds the two 32-bit results together. The addition result may be saturated.
* KMDA: top*top + bottom*bottom (per 32-bit element)
* KMXDA: top*bottom + bottom*top (per 32-bit element)

<strong>Description</strong>:\n
For the <tt>KMDA</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the bottom 16-bit content of the 32-bit elements of Rs2 and then adds the result to the result of
multiplying the top 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the 32-
bit elements of Rs2.
For the <tt>KMXDA</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the top 16-bit content of the 32-bit elements of Rs2 and then adds the result to the result of
multiplying the top 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit content of the
32-bit elements of Rs2.
The addition result is checked for saturation. If saturation happens, the result is saturated to 2^31-1.
The final results are written to Rd. The 16-bit contents are treated as signed integers.

<strong>Operations</strong>:\n
@code 
if  Rs1.W[x]  !=  0x80008000)  or  (Rs2.W[x]  !=  0x80008000  {  //  KMDA  Rd.W[x]  =  Rs1.W[x].H[1]  *
Rs2.W[x].H[1]) + (Rs1.W[x].H[0] * Rs2.W[x].H[0]; // KMXDA Rd.W[x] = Rs1.W[x].H[1] * Rs2.W[x].H[0])
+  (Rs1.W[x].H[0]  *  Rs2.W[x].H[1];  }  else  {  Rd.W[x]  =  0x7fffffff;  OV  =  1;  }  for  RV32:  x=0  for  RV64:
x=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga37c752d6151fb29b43b01b2dd8af55d6';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMXDA';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '3344';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMXDA (SIMD Signed Crossed Multiply Two Halfs and Add)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
KMDA Rd, Rs1, Rs2
KMXDA Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 16-bit multiplications from the 32-bit elements of two registers; and then
adds the two 32-bit results together. The addition result may be saturated.
* KMDA: top*top + bottom*bottom (per 32-bit element)
* KMXDA: top*bottom + bottom*top (per 32-bit element)

<strong>Description</strong>:\n
For the <tt>KMDA</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the bottom 16-bit content of the 32-bit elements of Rs2 and then adds the result to the result of
multiplying the top 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the 32-
bit elements of Rs2.
For the <tt>KMXDA</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the top 16-bit content of the 32-bit elements of Rs2 and then adds the result to the result of
multiplying the top 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit content of the
32-bit elements of Rs2.
The addition result is checked for saturation. If saturation happens, the result is saturated to 2^31-1.
The final results are written to Rd. The 16-bit contents are treated as signed integers.

<strong>Operations</strong>:\n
@code 
if  Rs1.W[x]  !=  0x80008000)  or  (Rs2.W[x]  !=  0x80008000  {  //  KMDA  Rd.W[x]  =  Rs1.W[x].H[1]  *
Rs2.W[x].H[1]) + (Rs1.W[x].H[0] * Rs2.W[x].H[0]; // KMXDA Rd.W[x] = Rs1.W[x].H[1] * Rs2.W[x].H[0])
+  (Rs1.W[x].H[0]  *  Rs2.W[x].H[1];  }  else  {  Rd.W[x]  =  0x7fffffff;  OV  =  1;  }  for  RV32:  x=0  for  RV64:
x=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X32__MAC_1gab418c1a557ddfedc1803594cb18fa293';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMMAC';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '3406';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMMAC (SIMD Saturating MSW Signed Multiply Word and Add)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
KMMAC Rd, Rs1, Rs2
KMMAC.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit integer elements of two registers and add the most significant
32-bit results with the signed 32-bit integer elements of a third register. The addition results are
saturated first and then written back to the third register. The <tt>.u</tt> form performs an additional
rounding up operation on the multiplication results before adding the most significant 32-bit part
of the results.

<strong>Description</strong>:\n
This instruction multiplies the signed 32-bit elements of Rs1 with the signed 32-bit elements of Rs2
and adds the most significant 32-bit multiplication results with the signed 32-bit elements of Rd. If
the addition result is beyond the Q31 number range (-2^31 <= Q31 <= 2^31-1), it is saturated to the range
and the OV bit is set to 1. The results after saturation are written to Rd. The <tt>.u</tt> form of the
instruction additionally rounds up the most significant 32-bit of the 64-bit multiplication results by
adding a 1 to bit 31 of the results.

<strong>Operations</strong>:\n
@code 
Mres[x][63:0] = Rs1.W[x] * Rs2.W[x];
if (`.u` form) {
  Round[x][32:0] = Mres[x][63:31] + 1;
  res[x] = Rd.W[x] + Round[x][32:1];
} else {
  res[x] = Rd.W[x] + Mres[x][63:32];
}
if (res[x] > (2^31)-1) {
  res[x] = (2^31)-1;
  OV = 1;
} else if (res[x] < -2^31) {
  res[x] = -2^31;
  OV = 1;
}
Rd.W[x] = res[x];
for RV32: x=0
for RV64: x=1...0
@endcode

@param [in]  t    long type of value stored in t
@param [in]  a    long type of value stored in a
@param [in]  b    long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X32__MAC_1ga7d7e1eb9ab21e7f41722684804590f18';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMMAC_U';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '3467';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMMAC.u (SIMD Saturating MSW Signed Multiply Word and Add with Rounding)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
KMMAC Rd, Rs1, Rs2
KMMAC.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit integer elements of two registers and add the most significant
32-bit results with the signed 32-bit integer elements of a third register. The addition results are
saturated first and then written back to the third register. The <tt>.u</tt> form performs an additional
rounding up operation on the multiplication results before adding the most significant 32-bit part
of the results.

<strong>Description</strong>:\n
This instruction multiplies the signed 32-bit elements of Rs1 with the signed 32-bit elements of Rs2
and adds the most significant 32-bit multiplication results with the signed 32-bit elements of Rd. If
the addition result is beyond the Q31 number range (-2^31 <= Q31 <= 2^31-1), it is saturated to the range
and the OV bit is set to 1. The results after saturation are written to Rd. The <tt>.u</tt> form of the
instruction additionally rounds up the most significant 32-bit of the 64-bit multiplication results by
adding a 1 to bit 31 of the results.

<strong>Operations</strong>:\n
@code 
Mres[x][63:0] = Rs1.W[x] * Rs2.W[x];
if (`.u` form) {
  Round[x][32:0] = Mres[x][63:31] + 1;
  res[x] = Rd.W[x] + Round[x][32:1];
} else {
  res[x] = Rd.W[x] + Mres[x][63:32];
}
if (res[x] > (2^31)-1) {
  res[x] = (2^31)-1;
  OV = 1;
} else if (res[x] < -2^31) {
  res[x] = -2^31;
  OV = 1;
}
Rd.W[x] = res[x];
for RV32: x=0
for RV64: x=1...0
@endcode

@param [in]  t    long type of value stored in t
@param [in]  a    long type of value stored in a
@param [in]  b    long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1ga10e2d0cb6ee70c6e603ce425a74a9b8a';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMMAWB';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '3529';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMMAWB (SIMD Saturating MSW Signed Multiply Word and Bottom Half and Add)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
KMMAWB Rd, Rs1, Rs2
KMMAWB.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit integer elements of one register and the bottom 16-bit of the
corresponding 32-bit elements of another register and add the most significant 32-bit results with
the corresponding signed 32-bit elements of a third register. The addition result is written to the
corresponding 32-bit elements of the third register. The <tt>.u</tt> form rounds up the multiplication
results from the most significant discarded bit before the addition operations.

<strong>Description</strong>:\n
This instruction multiplies the signed 32-bit elements of Rs1 with the signed bottom 16-bit content
of the corresponding 32-bit elements of Rs2 and adds the most significant 32-bit multiplication
results with the corresponding signed 32-bit elements of Rd. If the addition result is beyond the Q31
number range (-2^31 <= Q31 <= 2^31-1), it is saturated to the range and the OV bit is set to 1. The results
after saturation are written to the corresponding 32-bit elements of Rd. The <tt>.u</tt> form of the
instruction rounds up the most significant 32-bit of the 48-bit multiplication results by adding a 1 to
bit 15 of the result before the addition operations.

<strong>Operations</strong>:\n
@code 
Mres[x][47:0] = Rs1.W[x] * Rs2.W[x].H[0];
if (`.u` form) {
  Round[x][32:0] = Mres[x][47:15] + 1;
  res[x] = Rd.W[x] + Round[x][32:1];
} else {
  res[x] = Rd.W[x] + Mres[x][47:16];
}
if (res[x] > (2^31)-1) {
  res[x] = (2^31)-1;
  OV = 1;
} else if (res[x] < -2^31) {
  res[x] = -2^31;
  OV = 1;
}
Rd.W[x] = res[x];
for RV32: x=0
for RV64: x=1...0
@endcode

@param [in]  t    long type of value stored in t
@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1ga6385e945e25b69987eb34e8e9e862bcf';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMMAWB_U';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '3591';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMMAWB.u (SIMD Saturating MSW Signed Multiply Word and Bottom Half and Add with Rounding)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
KMMAWB Rd, Rs1, Rs2
KMMAWB.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit integer elements of one register and the bottom 16-bit of the
corresponding 32-bit elements of another register and add the most significant 32-bit results with
the corresponding signed 32-bit elements of a third register. The addition result is written to the
corresponding 32-bit elements of the third register. The <tt>.u</tt> form rounds up the multiplication
results from the most significant discarded bit before the addition operations.

<strong>Description</strong>:\n
This instruction multiplies the signed 32-bit elements of Rs1 with the signed bottom 16-bit content
of the corresponding 32-bit elements of Rs2 and adds the most significant 32-bit multiplication
results with the corresponding signed 32-bit elements of Rd. If the addition result is beyond the Q31
number range (-2^31 <= Q31 <= 2^31-1), it is saturated to the range and the OV bit is set to 1. The results
after saturation are written to the corresponding 32-bit elements of Rd. The <tt>.u</tt> form of the
instruction rounds up the most significant 32-bit of the 48-bit multiplication results by adding a 1 to
bit 15 of the result before the addition operations.

<strong>Operations</strong>:\n
@code 
Mres[x][47:0] = Rs1.W[x] * Rs2.W[x].H[0];
if (`.u` form) {
  Round[x][32:0] = Mres[x][47:15] + 1;
  res[x] = Rd.W[x] + Round[x][32:1];
} else {
  res[x] = Rd.W[x] + Mres[x][47:16];
}
if (res[x] > (2^31)-1) {
  res[x] = (2^31)-1;
  OV = 1;
} else if (res[x] < -2^31) {
  res[x] = -2^31;
  OV = 1;
}
Rd.W[x] = res[x];
for RV32: x=0
for RV64: x=1...0
@endcode

@param [in]  t    long type of value stored in t
@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1ga19bd50c2b77b1749c9c63c64c1f5bb44';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMMAWB2';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '3659';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMMAWB2 (SIMD Saturating MSW Signed Multiply Word and Bottom Half & 2 and Add)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
KMMAWB2 Rd, Rs1, Rs2
KMMAWB2.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit elements of one register and the bottom 16-bit of the
corresponding 32-bit elements of another register, double the multiplication results and add the
saturated most significant 32-bit results with the corresponding signed 32-bit elements of a third
register. The saturated addition result is written to the corresponding 32-bit elements of the third
register. The <tt>.u</tt> form rounds up the multiplication results from the most significant discarded bit
before the addition operations.

<strong>Description</strong>:\n
This instruction multiplies the signed 32-bit Q31 elements of Rs1 with the signed bottom 16-bit Q15
content of the corresponding 32-bit elements of Rs2, doubles the Q46 results to Q47 numbers and
adds the saturated most significant 32-bit Q31 multiplication results with the corresponding signed
32-bit elements of Rd. If the addition result is beyond the Q31 number range (-2^31 <= Q31 <= 2^31-1), it is
saturated to the range and the OV bit is set to 1. The results after saturation are written to the
corresponding 32-bit elements of Rd. The <tt>.u</tt> form of the instruction rounds up the most significant
32-bit of the 48-bit Q47 multiplication results by adding a 1 to bit 15 (i.e., bit 14 before doubling) of
the result before the addition operations.

<strong>Operations</strong>:\n
@code 
if ((Rs1.W[x] == 0x80000000) & (Rs2.W[x].H[0] == 0x8000)) {
  addop.W[x] = 0x7fffffff;
  OV = 1;
} else {
  Mres[x][47:0] = Rs1.W[x] s* Rs2.W[x].H[0];
  if (`.u` form) {
    Mres[x][47:14] = Mres[x][47:14] + 1;
  }
  addop.W[x] = Mres[x][46:15]; // doubling
}
res[x] = Rd.W[x] + addop.W[x];
if (res[x] > (2^31)-1) {
  res[x] = (2^31)-1;
  OV = 1;
} else if (res[x] < -2^31) {
  res[x] = -2^31;
  OV = 1;
}
Rd.W[x] = res[x];
for RV32: x=0
for RV64: x=1...0
@endcode

@param [in]  t    long type of value stored in t
@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1gac281461b8f0907d2d0c1a922ca5e65b8';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMMAWB2_U';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '3727';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMMAWB2.u (SIMD Saturating MSW Signed Multiply Word and Bottom Half & 2 and Add with Rounding)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
KMMAWB2 Rd, Rs1, Rs2
KMMAWB2.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit elements of one register and the bottom 16-bit of the
corresponding 32-bit elements of another register, double the multiplication results and add the
saturated most significant 32-bit results with the corresponding signed 32-bit elements of a third
register. The saturated addition result is written to the corresponding 32-bit elements of the third
register. The <tt>.u</tt> form rounds up the multiplication results from the most significant discarded bit
before the addition operations.

<strong>Description</strong>:\n
This instruction multiplies the signed 32-bit Q31 elements of Rs1 with the signed bottom 16-bit Q15
content of the corresponding 32-bit elements of Rs2, doubles the Q46 results to Q47 numbers and
adds the saturated most significant 32-bit Q31 multiplication results with the corresponding signed
32-bit elements of Rd. If the addition result is beyond the Q31 number range (-2^31 <= Q31 <= 2^31-1), it is
saturated to the range and the OV bit is set to 1. The results after saturation are written to the
corresponding 32-bit elements of Rd. The <tt>.u</tt> form of the instruction rounds up the most significant
32-bit of the 48-bit Q47 multiplication results by adding a 1 to bit 15 (i.e., bit 14 before doubling) of
the result before the addition operations.

<strong>Operations</strong>:\n
@code 
if ((Rs1.W[x] == 0x80000000) & (Rs2.W[x].H[0] == 0x8000)) {
  addop.W[x] = 0x7fffffff;
  OV = 1;
} else {
  Mres[x][47:0] = Rs1.W[x] s* Rs2.W[x].H[0];
  if (`.u` form) {
    Mres[x][47:14] = Mres[x][47:14] + 1;
  }
  addop.W[x] = Mres[x][46:15]; // doubling
}
res[x] = Rd.W[x] + addop.W[x];
if (res[x] > (2^31)-1) {
  res[x] = (2^31)-1;
  OV = 1;
} else if (res[x] < -2^31) {
  res[x] = -2^31;
  OV = 1;
}
Rd.W[x] = res[x];
for RV32: x=0
for RV64: x=1...0
@endcode

@param [in]  t    long type of value stored in t
@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1ga447a6dd6e573595ce930f8ba1ab135ca';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMMAWT';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '3789';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMMAWT (SIMD Saturating MSW Signed Multiply Word and Top Half and Add)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
KMMAWT Rd, Rs1, Rs2
KMMAWT.u Rd Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit integer elements of one register and the signed top 16-bit of the
corresponding 32-bit elements of another register and add the most significant 32-bit results with
the corresponding signed 32-bit elements of a third register. The addition results are written to the
corresponding 32-bit elements of the third register. The <tt>.u</tt> form rounds up the multiplication
results from the most significant discarded bit before the addition operations.

<strong>Description</strong>:\n
This instruction multiplies the signed 32-bit elements of Rs1 with the signed top 16-bit of the
corresponding 32-bit elements of Rs2 and adds the most significant 32-bit multiplication results
with the corresponding signed 32-bit elements of Rd. If the addition result is beyond the Q31
number range (-2^31 <= Q31 <= 2^31-1), it is saturated to the range and the OV bit is set to 1. The results
after saturation are written to the corresponding 32-bit elements of Rd. The <tt>.u</tt> form of the
instruction rounds up the most significant 32-bit of the 48-bit multiplication results by adding a 1 to
bit 15 of the result before the addition operations.

<strong>Operations</strong>:\n
@code 
Mres[x][47:0] = Rs1.W[x] * Rs2.W[x].H[1];
if (`.u` form) {
  Round[x][32:0] = Mres[x][47:15] + 1;
  res[x] = Rd.W[x] + Round[x][32:1];
} else {
  res[x] = Rd.W[x] + Mres[x][47:16];
}
if (res[x] > (2^31)-1) {
  res[x] = (2^31)-1;
  OV = 1;
} else if (res[x] < -2^31) {
  res[x] = -2^31;
  OV = 1;
}
Rd.W[x] = res[x];
for RV32: x=0
for RV64: x=1...0
@endcode

@param [in]  t    long type of value stored in t
@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1ga480bf71de56eefe132ae06a9bdeaf203';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMMAWT_U';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '3851';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMMAWT.u (SIMD Saturating MSW Signed Multiply Word and Top Half and Add with Rounding)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
KMMAWT Rd, Rs1, Rs2
KMMAWT.u Rd Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit integer elements of one register and the signed top 16-bit of the
corresponding 32-bit elements of another register and add the most significant 32-bit results with
the corresponding signed 32-bit elements of a third register. The addition results are written to the
corresponding 32-bit elements of the third register. The <tt>.u</tt> form rounds up the multiplication
results from the most significant discarded bit before the addition operations.

<strong>Description</strong>:\n
This instruction multiplies the signed 32-bit elements of Rs1 with the signed top 16-bit of the
corresponding 32-bit elements of Rs2 and adds the most significant 32-bit multiplication results
with the corresponding signed 32-bit elements of Rd. If the addition result is beyond the Q31
number range (-2^31 <= Q31 <= 2^31-1), it is saturated to the range and the OV bit is set to 1. The results
after saturation are written to the corresponding 32-bit elements of Rd. The <tt>.u</tt> form of the
instruction rounds up the most significant 32-bit of the 48-bit multiplication results by adding a 1 to
bit 15 of the result before the addition operations.

<strong>Operations</strong>:\n
@code 
Mres[x][47:0] = Rs1.W[x] * Rs2.W[x].H[1];
if (`.u` form) {
  Round[x][32:0] = Mres[x][47:15] + 1;
  res[x] = Rd.W[x] + Round[x][32:1];
} else {
  res[x] = Rd.W[x] + Mres[x][47:16];
}
if (res[x] > (2^31)-1) {
  res[x] = (2^31)-1;
  OV = 1;
} else if (res[x] < -2^31) {
  res[x] = -2^31;
  OV = 1;
}
Rd.W[x] = res[x];
for RV32: x=0
for RV64: x=1...0
@endcode

@param [in]  t    long type of value stored in t
@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1ga60e15a6243014fd5b76b7cffa7275eb4';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMMAWT2';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '3919';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMMAWT2 (SIMD Saturating MSW Signed Multiply Word and Top Half & 2 and Add)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
KMMAWT2 Rd, Rs1, Rs2
KMMAWT2.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit elements of one register and the top 16-bit of the
corresponding 32-bit elements of another register, double the multiplication results and add the
saturated most significant 32-bit results with the corresponding signed 32-bit elements of a third
register. The saturated addition result is written to the corresponding 32-bit elements of the third
register. The <tt>.u</tt> form rounds up the multiplication results from the most significant discarded bit
before the addition operations.

<strong>Description</strong>:\n
This instruction multiplies the signed 32-bit Q31 elements of Rs1 with the signed top 16-bit Q15
content of the corresponding 32-bit elements of Rs2, doubles the Q46 results to Q47 numbers and
adds the saturated most significant 32-bit Q31 multiplication results with the corresponding signed
32-bit elements of Rd. If the addition result is beyond the Q31 number range (-2^31 <= Q31 <= 2^31-1), it is
saturated to the range and the OV bit is set to 1. The results after saturation are written to the
corresponding 32-bit elements of Rd. The <tt>.u</tt> form of the instruction rounds up the most significant
32-bit of the 48-bit Q47 multiplication results by adding a 1 to bit 15 (i.e., bit 14 before doubling) of
the result before the addition operations.

<strong>Operations</strong>:\n
@code 
if ((Rs1.W[x] == 0x80000000) & (Rs2.W[x].H[1] == 0x8000)) {
  addop.W[x] = 0x7fffffff;
  OV = 1;
} else {
  Mres[x][47:0] = Rs1.W[x] s* Rs2.W[x].H[1];
  if (`.u` form) {
    Mres[x][47:14] = Mres[x][47:14] + 1;
  }
  addop.W[x] = Mres[x][46:15]; // doubling
}
res[x] = Rd.W[x] + addop.W[x];
if (res[x] > (2^31)-1) {
  res[x] = (2^31)-1;
  OV = 1;
} else if (res[x] < -2^31) {
  res[x] = -2^31;
  OV = 1;
}
Rd.W[x] = res[x];
for RV32: x=0
for RV64: x=1...0
@endcode

@param [in]  t    long type of value stored in t
@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1ga30aa2050f5f50a26aedc28dfce398db8';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMMAWT2_U';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '3987';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMMAWT2.u (SIMD Saturating MSW Signed Multiply Word and Top Half & 2 and Add with Rounding)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
KMMAWT2 Rd, Rs1, Rs2
KMMAWT2.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit elements of one register and the top 16-bit of the
corresponding 32-bit elements of another register, double the multiplication results and add the
saturated most significant 32-bit results with the corresponding signed 32-bit elements of a third
register. The saturated addition result is written to the corresponding 32-bit elements of the third
register. The <tt>.u</tt> form rounds up the multiplication results from the most significant discarded bit
before the addition operations.

<strong>Description</strong>:\n
This instruction multiplies the signed 32-bit Q31 elements of Rs1 with the signed top 16-bit Q15
content of the corresponding 32-bit elements of Rs2, doubles the Q46 results to Q47 numbers and
adds the saturated most significant 32-bit Q31 multiplication results with the corresponding signed
32-bit elements of Rd. If the addition result is beyond the Q31 number range (-2^31 <= Q31 <= 2^31-1), it is
saturated to the range and the OV bit is set to 1. The results after saturation are written to the
corresponding 32-bit elements of Rd. The <tt>.u</tt> form of the instruction rounds up the most significant
32-bit of the 48-bit Q47 multiplication results by adding a 1 to bit 15 (i.e., bit 14 before doubling) of
the result before the addition operations.

<strong>Operations</strong>:\n
@code 
if ((Rs1.W[x] == 0x80000000) & (Rs2.W[x].H[1] == 0x8000)) {
  addop.W[x] = 0x7fffffff;
  OV = 1;
} else {
  Mres[x][47:0] = Rs1.W[x] s* Rs2.W[x].H[1];
  if (`.u` form) {
    Mres[x][47:14] = Mres[x][47:14] + 1;
  }
  addop.W[x] = Mres[x][46:15]; // doubling
}
res[x] = Rd.W[x] + addop.W[x];
if (res[x] > (2^31)-1) {
  res[x] = (2^31)-1;
  OV = 1;
} else if (res[x] < -2^31) {
  res[x] = -2^31;
  OV = 1;
}
Rd.W[x] = res[x];
for RV32: x=0
for RV64: x=1...0
@endcode

@param [in]  t    long type of value stored in t
@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X32__MAC_1ga0e7c48c050ad2b2343ad2a8cf2e38ec3';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMMSB';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '4047';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMMSB (SIMD Saturating MSW Signed Multiply Word and Subtract)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
KMMSB Rd, Rs1, Rs2
KMMSB.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit integer elements of two registers and subtract the most
significant 32-bit results from the signed 32-bit elements of a third register. The subtraction results
are written to the third register. The <tt>.u</tt> form performs an additional rounding up operation on
the multiplication results before subtracting the most significant 32-bit part of the results.

<strong>Description</strong>:\n
This instruction multiplies the signed 32-bit elements of Rs1 with the signed 32-bit elements of Rs2
and subtracts the most significant 32-bit multiplication results from the signed 32-bit elements of
Rd. If the subtraction result is beyond the Q31 number range (-2^31 <= Q31 <= 2^31-1), it is saturated to the
range and the OV bit is set to 1. The results after saturation are written to Rd. The <tt>.u</tt> form of the
instruction additionally rounds up the most significant 32-bit of the 64-bit multiplication results by
adding a 1 to bit 31 of the results.

<strong>Operations</strong>:\n
@code 
Mres[x][63:0] = Rs1.W[x] * Rs2.W[x];
if (`.u` form) {
  Round[x][32:0] = Mres[x][63:31] + 1;
  res[x] = Rd.W[x] - Round[x][32:1];
} else {
  res[x] = Rd.W[x] - Mres[x][63:32];
}
if (res[x] > (2^31)-1) {
  res[x] = (2^31)-1;
  OV = 1;
} else if (res[x] < -2^31) {
  res[x] = -2^31;
  OV = 1;
}
Rd.W[x] = res[x];
for RV32: x=0
for RV64: x=1...0
@endcode

@param [in]  t    long type of value stored in t
@param [in]  a    long type of value stored in a
@param [in]  b    long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X32__MAC_1gae1c27f8ba264508b78a0de566dd18a9b';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMMSB_U';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '4107';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMMSB.u (SIMD Saturating MSW Signed Multiply Word and Subtraction with Rounding)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
KMMSB Rd, Rs1, Rs2
KMMSB.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit integer elements of two registers and subtract the most
significant 32-bit results from the signed 32-bit elements of a third register. The subtraction results
are written to the third register. The <tt>.u</tt> form performs an additional rounding up operation on
the multiplication results before subtracting the most significant 32-bit part of the results.

<strong>Description</strong>:\n
This instruction multiplies the signed 32-bit elements of Rs1 with the signed 32-bit elements of Rs2
and subtracts the most significant 32-bit multiplication results from the signed 32-bit elements of
Rd. If the subtraction result is beyond the Q31 number range (-2^31 <= Q31 <= 2^31-1), it is saturated to the
range and the OV bit is set to 1. The results after saturation are written to Rd. The <tt>.u</tt> form of the
instruction additionally rounds up the most significant 32-bit of the 64-bit multiplication results by
adding a 1 to bit 31 of the results.

<strong>Operations</strong>:\n
@code 
Mres[x][63:0] = Rs1.W[x] * Rs2.W[x];
if (`.u` form) {
  Round[x][32:0] = Mres[x][63:31] + 1;
  res[x] = Rd.W[x] - Round[x][32:1];
} else {
  res[x] = Rd.W[x] - Mres[x][63:32];
}
if (res[x] > (2^31)-1) {
  res[x] = (2^31)-1;
  OV = 1;
} else if (res[x] < -2^31) {
  res[x] = -2^31;
  OV = 1;
}
Rd.W[x] = res[x];
for RV32: x=0
for RV64: x=1...0
@endcode

@param [in]  t    long type of value stored in t
@param [in]  a    long type of value stored in a
@param [in]  b    long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1gaaec865ab687a1764eb5b1e1f5603611d';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMMWB2';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '4162';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMMWB2 (SIMD Saturating MSW Signed Multiply Word and Bottom Half & 2)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
KMMWB2 Rd, Rs1, Rs2
KMMWB2.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit integer elements of one register and the bottom 16-bit of the
corresponding 32-bit elements of another register, double the multiplication results and write the
saturated most significant 32-bit results to the corresponding 32-bit elements of a register. The <tt>.u</tt>
form rounds up the results from the most significant discarded bit.

<strong>Description</strong>:\n
This instruction multiplies the signed 32-bit Q31 elements of Rs1 with the signed bottom 16-bit Q15
content of the corresponding 32-bit elements of Rs2, doubles the Q46 results to Q47 numbers and
writes the saturated most significant 32-bit Q31 multiplication results to the corresponding 32-bit
elements of Rd. The <tt>.u</tt> form of the instruction rounds up the most significant 32-bit of the 48-bit
Q47 multiplication results by adding a 1 to bit 15 (i.e., bit 14 before doubling) of the results.

<strong>Operations</strong>:\n
@code 
if ((Rs1.W[x] == 0x80000000) & (Rs2.W[x].H[0] == 0x8000)) {
  Rd.W[x] = 0x7fffffff;
  OV = 1;
} else {
  Mres[x][47:0] = Rs1.W[x] s* Rs2.W[x].H[0];
  if (`.u` form) {
    Round[x][32:0] = Mres[x][46:14] + 1;
    Rd.W[x] = Round[x][32:1];
  } else {
    Rd.W[x] = Mres[x][46:15];
  }
}
for RV32: x=0
for RV64: x=1...0
@endcode

@param [in]  a    long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1ga9f55b328152b5b5b840931b5415b2865';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMMWB2_U';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '4218';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMMWB2.u (SIMD Saturating MSW Signed Multiply Word and Bottom Half & 2 with Rounding)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
KMMWB2 Rd, Rs1, Rs2
KMMWB2.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit integer elements of one register and the bottom 16-bit of the
corresponding 32-bit elements of another register, double the multiplication results and write the
saturated most significant 32-bit results to the corresponding 32-bit elements of a register. The <tt>.u</tt>
form rounds up the results from the most significant discarded bit.

<strong>Description</strong>:\n
This instruction multiplies the signed 32-bit Q31 elements of Rs1 with the signed bottom 16-bit Q15
content of the corresponding 32-bit elements of Rs2, doubles the Q46 results to Q47 numbers and
writes the saturated most significant 32-bit Q31 multiplication results to the corresponding 32-bit
elements of Rd. The <tt>.u</tt> form of the instruction rounds up the most significant 32-bit of the 48-bit
Q47 multiplication results by adding a 1 to bit 15 (i.e., bit 14 before doubling) of the results.

<strong>Operations</strong>:\n
@code 
if ((Rs1.W[x] == 0x80000000) & (Rs2.W[x].H[0] == 0x8000)) {
  Rd.W[x] = 0x7fffffff;
  OV = 1;
} else {
  Mres[x][47:0] = Rs1.W[x] s* Rs2.W[x].H[0];
  if (`.u` form) {
    Round[x][32:0] = Mres[x][46:14] + 1;
    Rd.W[x] = Round[x][32:1];
  } else {
    Rd.W[x] = Mres[x][46:15];
  }
}
for RV32: x=0
for RV64: x=1...0
@endcode

@param [in]  a    long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1gaa83e41e92fe13e28b2509a0bf92224bf';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMMWT2';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '4274';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMMWT2 (SIMD Saturating MSW Signed Multiply Word and Top Half & 2)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
KMMWT2 Rd, Rs1, Rs2
KMMWT2.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit integer elements of one register and the top 16-bit of the
corresponding 32-bit elements of another register, double the multiplication results and write the
saturated most significant 32-bit results to the corresponding 32-bit elements of a register. The <tt>.u</tt>
form rounds up the results from the most significant discarded bit.

<strong>Description</strong>:\n
This instruction multiplies the signed 32-bit Q31 elements of Rs1 with the signed top 16-bit Q15
content of the corresponding 32-bit elements of Rs2, doubles the Q46 results to Q47 numbers and
writes the saturated most significant 32-bit Q31 multiplication results to the corresponding 32-bit
elements of Rd. The <tt>.u</tt> form of the instruction rounds up the most significant 32-bit of the 48-bit
Q47 multiplication results by adding a 1 to bit 15 (i.e., bit 14 before doubling) of the results.

<strong>Operations</strong>:\n
@code 
if ((Rs1.W[x] == 0x80000000) & (Rs2.W[x].H[1] == 0x8000)) {
  Rd.W[x] = 0x7fffffff;
  OV = 1;
} else {
  Mres[x][47:0] = Rs1.W[x] s* Rs2.W[x].H[1];
  if (`.u` form) {
    Round[x][32:0] = Mres[x][46:14] + 1;
    Rd.W[x] = Round[x][32:1];
  } else {
    Rd.W[x] = Mres[x][46:15];
  }
}
for RV32: x=0
for RV64: x=1...0
@endcode

@param [in]  a    long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1ga1d59336d9cabde5ac5a646abcc0b25c9';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMMWT2_U';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '4330';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMMWT2.u (SIMD Saturating MSW Signed Multiply Word and Top Half & 2 with Rounding)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
KMMWT2 Rd, Rs1, Rs2
KMMWT2.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit integer elements of one register and the top 16-bit of the
corresponding 32-bit elements of another register, double the multiplication results and write the
saturated most significant 32-bit results to the corresponding 32-bit elements of a register. The <tt>.u</tt>
form rounds up the results from the most significant discarded bit.

<strong>Description</strong>:\n
This instruction multiplies the signed 32-bit Q31 elements of Rs1 with the signed top 16-bit Q15
content of the corresponding 32-bit elements of Rs2, doubles the Q46 results to Q47 numbers and
writes the saturated most significant 32-bit Q31 multiplication results to the corresponding 32-bit
elements of Rd. The <tt>.u</tt> form of the instruction rounds up the most significant 32-bit of the 48-bit
Q47 multiplication results by adding a 1 to bit 15 (i.e., bit 14 before doubling) of the results.

<strong>Operations</strong>:\n
@code 
if ((Rs1.W[x] == 0x80000000) & (Rs2.W[x].H[1] == 0x8000)) {
  Rd.W[x] = 0x7fffffff;
  OV = 1;
} else {
  Mres[x][47:0] = Rs1.W[x] s* Rs2.W[x].H[1];
  if (`.u` form) {
    Round[x][32:0] = Mres[x][46:14] + 1;
    Rd.W[x] = Round[x][32:1];
  } else {
    Rd.W[x] = Mres[x][46:15];
  }
}
for RV32: x=0
for RV64: x=1...0
@endcode

@param [in]  a    long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga3922fe2b6d47974c6bd85cba3f826b4b';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMSDA';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '4393';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMSDA (SIMD Saturating Signed Multiply Two Halfs & Add & Subtract)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
KMSDA Rd, Rs1, Rs2
KMSXDA Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 16-bit multiplications from the 32-bit elements of two registers; and then
subtracts the two 32-bit results from the corresponding 32-bit elements of a third register. The
subtraction result may be saturated.
* KMSDA: rd.W[x] - top*top - bottom*bottom (per 32-bit element)
* KMSXDA: rd.W[x] - top*bottom - bottom*top (per 32-bit element)

<strong>Description</strong>:\n
For the <tt>KMSDA</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the bottom 16-bit content of the 32-bit elements of Rs2 and multiplies the top 16-bit content of
the 32-bit elements of Rs1 with the top 16-bit content of the 32-bit elements of Rs2.
For the <tt>KMSXDA</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the top 16-bit content of the 32-bit elements of Rs2 and multiplies the top 16-bit content of the
32-bit elements of Rs1 with the bottom 16-bit content of the 32-bit elements of Rs2.
The two 32-bit multiplication results are then subtracted from the content of the corresponding 32-
bit elements of Rd. If the subtraction result is beyond the Q31 number range (-2^31 <= Q31 <= 2^31-1), it is
saturated to the range and the OV bit is set to 1. The results after saturation are written to Rd. The
16-bit contents are treated as signed integers.

<strong>Operations</strong>:\n
@code 
// KMSDA
res[x] = Rd.W[x] - (Rs1.W[x].H[1] * Rs2.W[x].H[1]) - (Rs1.W[x].H[0] * Rs2.W[x].H[0]);
// KMSXDA
res[x] = Rd.W[x] - (Rs1.W[x].H[1] * Rs2.W[x].H[0]) - (Rs1.W[x].H[0] * Rs2.W[x].H[1]);
if (res[x] > (2^31)-1) {
  res[x] = (2^31)-1;
  OV = 1;
} else if (res[x] < -2^31) {
  res[x] = -2^31;
  OV = 1;
}
Rd.W[x] = res[x];
for RV32: x=0
for RV64: x=1...0
@endcode

@param [in]  t    long type of value stored in t
@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1gaacebc28be147f66ab73162b37cc35ce0';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMSXDA';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '4455';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMSXDA (SIMD Saturating Signed Crossed Multiply Two Halfs & Add & Subtract)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
KMSDA Rd, Rs1, Rs2
KMSXDA Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 16-bit multiplications from the 32-bit elements of two registers; and then
subtracts the two 32-bit results from the corresponding 32-bit elements of a third register. The
subtraction result may be saturated.
* KMSDA: rd.W[x] - top*top - bottom*bottom (per 32-bit element)
* KMSXDA: rd.W[x] - top*bottom - bottom*top (per 32-bit element)

<strong>Description</strong>:\n
For the <tt>KMSDA</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the bottom 16-bit content of the 32-bit elements of Rs2 and multiplies the top 16-bit content of
the 32-bit elements of Rs1 with the top 16-bit content of the 32-bit elements of Rs2.
For the <tt>KMSXDA</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the top 16-bit content of the 32-bit elements of Rs2 and multiplies the top 16-bit content of the
32-bit elements of Rs1 with the bottom 16-bit content of the 32-bit elements of Rs2.
The two 32-bit multiplication results are then subtracted from the content of the corresponding 32-
bit elements of Rd. If the subtraction result is beyond the Q31 number range (-2^31 <= Q31 <= 2^31-1), it is
saturated to the range and the OV bit is set to 1. The results after saturation are written to Rd. The
16-bit contents are treated as signed integers.

<strong>Operations</strong>:\n
@code 
// KMSDA
res[x] = Rd.W[x] - (Rs1.W[x].H[1] * Rs2.W[x].H[1]) - (Rs1.W[x].H[0] * Rs2.W[x].H[0]);
// KMSXDA
res[x] = Rd.W[x] - (Rs1.W[x].H[1] * Rs2.W[x].H[0]) - (Rs1.W[x].H[0] * Rs2.W[x].H[1]);
if (res[x] > (2^31)-1) {
  res[x] = (2^31)-1;
  OV = 1;
} else if (res[x] < -2^31) {
  res[x] = -2^31;
  OV = 1;
}
Rd.W[x] = res[x];
for RV32: x=0
for RV64: x=1...0
@endcode

@param [in]  t    long type of value stored in t
@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__32B__MULT__64B__ADDSUB_1gac89788561e034d44bea403fd22047a94';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMSR64';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '4523';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMSR64 (Signed Multiply and Saturating Subtract from 64-Bit Data)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (64-bit Profile)

<strong>Syntax</strong>:\n
@code 
KMSR64 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the 32-bit signed elements in two registers and subtract the 64-bit multiplication
results from the 64-bit signed data of a pair of registers (RV32) or a register (RV64). The result is
saturated to the Q63 range and written back to the pair of registers (RV32) or the register (RV64).

<strong>RV32 Description</strong>:\n
This instruction multiplies the 32-bit signed data of Rs1 with that of Rs2. It
subtracts the 64-bit multiplication result from the 64-bit signed data of an even/odd pair of registers
specified by Rd(4,1) with unlimited precision. If the 64-bit subtraction result is beyond the Q63
number range (-2^63 <= Q63 <= 2^63-1), it is saturated to the range and the OV bit is set to 1. The saturated
result is written back to the even/odd pair of registers specified by Rd(4,1).
Rx(4,1), i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair
includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the high 32-bit of the result and the even <tt>2d</tt> register
of the pair contains the low 32-bit of the result.

<strong>RV64 Description</strong>:\n
This instruction multiplies the 32-bit signed elements of Rs1 with that of Rs2. It
subtracts the 64-bit multiplication results from the 64-bit signed data in Rd with unlimited
precision. If the 64-bit subtraction result is beyond the Q63 number range (-2^63 <= Q63 <= 2^63-1), it is
saturated to the range and the OV bit is set to 1. The saturated result is written back to Rd.

<strong>Operations</strong>:\n
@code 
RV32:
t_L = CONCAT(Rd(4,1),1'b0); t_H = CONCAT(Rd(4,1),1'b1);
result = R[t_H].R[t_L] - (Rs1 * Rs2);
if (result > (2^63)-1) {
  result = (2^63)-1; OV = 1;
} else if (result < -2^63) {
  result = -2^63; OV = 1;
}
R[t_H].R[t_L] = result;
RV64:
// `result` has unlimited precision
result = Rd - (Rs1.W[0] * Rs2.W[0]) - (Rs1.W[1] * Rs2.W[1]);
if (result > (2^63)-1) {
  result = (2^63)-1; OV = 1;
} else if (result < -2^63) {
  result = -2^63; OV = 1;
}
Rd = result;
@endcode

@param [in]  t    long long type of value stored in t
@param [in]  a    long type of value stored in a
@param [in]  b    long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1gab5dc82aa8b7514f882979a71d88fb154';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KSLLW';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '4570';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KSLLW (Saturating Shift Left Logical for Word)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
KSLLW Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do logical left shift operation with saturation on a 32-bit word. The shift amount is a
variable from a GPR.

<strong>Description</strong>:\n
The first word data in Rs1 is left-shifted logically. The shifted out bits are filled with
zero and the shift amount is specified by the low-order 5-bits of the value in the Rs2 register. Any
shifted value greater than 2^31-1 is saturated to 2^31-1. Any shifted value smaller than -2^31 is saturated
to -2^31. And the saturated result is sign-extended and written to Rd. If any saturation is performed,
set OV bit to 1.

<strong>Operations</strong>:\n
@code 
sa = Rs2[4:0];
res[(31+sa):0] = Rs1.W[0] << sa;
if (res > (2^31)-1) {
  res = 0x7fffffff; OV = 1;
} else if (res < -2^31) {
  res = 0x80000000; OV = 1;
}
Rd[31:0] = res[31:0]; // RV32
Rd[63:0] = SE(res[31:0]); // RV64
@endcode

@param [in]  a    long type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1gafed94424b7e8431a31632ac1f9097e35';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KSLL8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '4671';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KSLL8 (SIMD 8-bit Saturating Shift Left Logical)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
KSLL8 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 8-bit elements logical left shift operations with saturation simultaneously. The shift
amount is a variable from a GPR.

<strong>Description</strong>:\n
The 8-bit data elements in Rs1 are left-shifted logically. The shifted out bits are filled
with zero and the shift amount is specified by the low-order 3-bits of the value in the Rs2 register.
Any shifted value greater than 2^7-1 is saturated to 2^7-1. Any shifted value smaller than -2^7 is
saturated to -2^7. And the saturated results are written to Rd. If any saturation is performed, set OV
bit to 1.

<strong>Operations</strong>:\n
@code 
sa = Rs2[2:0];
if (sa != 0) {
  res[(7+sa):0] = Rs1.B[x] << sa;
  if (res > (2^7)-1) {
    res = 0x7f; OV = 1;
  } else if (res < -2^7) {
    res = 0x80; OV = 1;
  }
  Rd.B[x] = res[7:0];
} else {
  Rd = Rs1;
}
for RV32: x=3...0,
for RV64: x=7...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1gae0d8b0f00c558d5a7f1119b9d261779f';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KSLL16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '4777';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KSLL16 (SIMD 16-bit Saturating Shift Left Logical)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
KSLL16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit elements logical left shift operations with saturation simultaneously. The shift
amount is a variable from a GPR.

<strong>Description</strong>:\n
The 16-bit data elements in Rs1 are left-shifted logically. The shifted out bits are filled
with zero and the shift amount is specified by the low-order 4-bits of the value in the Rs2 register.
Any shifted value greater than 2^15-1 is saturated to 2^15-1. Any shifted value smaller than -2^15 is
saturated to -2^15. And the saturated results are written to Rd. If any saturation is performed, set OV
bit to 1.

<strong>Operations</strong>:\n
@code 
sa = Rs2[3:0];
if (sa != 0) {
  res[(15+sa):0] = Rs1.H[x] << sa;
  if (res > (2^15)-1) {
    res = 0x7fff; OV = 1;
  } else if (res < -2^15) {
    res = 0x8000; OV = 1;
  }
  Rd.H[x] = res[15:0];
} else {
  Rd = Rs1;
}
for RV32: x=1...0,
for RV64: x=3...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1ga748809588c9a563b78102b3a4e7ae0f5';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KSLRA8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '4897';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KSLRA8 (SIMD 8-bit Shift Left Logical with Saturation or Shift Right Arithmetic)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
KSLRA8 Rd, Rs1, Rs2
KSLRA8.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 8-bit elements logical left (positive) or arithmetic right (negative) shift operation with
Q7 saturation for the left shift. The <tt>.u</tt> form performs additional rounding up operations for the
right shift.

<strong>Description</strong>:\n
The 8-bit data elements of Rs1 are left-shifted logically or right-shifted arithmetically
based on the value of Rs2[3:0]. Rs2[3:0] is in the signed range of [-2^3, 2^3-1]. A positive Rs2[3:0] means
logical left shift and a negative Rs2[3:0] means arithmetic right shift. The shift amount is the
absolute value of Rs2[3:0]. However, the behavior of <tt>Rs2[3:0]==-2^3 (0x8)</tt> is defined to be
equivalent to the behavior of <tt>Rs2[3:0]==-(2^3-1) (0x9)</tt>.
The left-shifted results are saturated to the 8-bit signed integer range of [-2^7, 2^7-1]. For the <tt>.u</tt> form
of the instruction, the right-shifted results are added a 1 to the most significant discarded bit
position for rounding effect. After the shift, saturation, or rounding, the final results are written to
Rd. If any saturation happens, this instruction sets the OV flag. The value of Rs2[31:4] will not affect
this instruction.

<strong>Operations</strong>:\n
@code 
if (Rs2[3:0] < 0) {
  sa = -Rs2[3:0];
  sa = (sa == 8)? 7 : sa;
  if (`.u` form) {
    res[7:-1] = SE9(Rs1.B[x][7:sa-1]) + 1;
    Rd.B[x] = res[7:0];
  } else {
    Rd.B[x] = SE8(Rs1.B[x][7:sa]);
  }
} else {
  sa = Rs2[2:0];
  res[(7+sa):0] = Rs1.B[x] <<(logic) sa;
  if (res > (2^7)-1) {
    res[7:0] = 0x7f; OV = 1;
  } else if (res < -2^7) {
    res[7:0] = 0x80; OV = 1;
  }
  Rd.B[x] = res[7:0];
}
for RV32: x=3...0,
for RV64: x=7...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1ga5e46b6bd44f57528f3dd1a4f509fdb12';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KSLRA8_U';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '4964';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KSLRA8.u (SIMD 8-bit Shift Left Logical with Saturation or Rounding Shift Right Arithmetic)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
KSLRA8 Rd, Rs1, Rs2
KSLRA8.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 8-bit elements logical left (positive) or arithmetic right (negative) shift operation with
Q7 saturation for the left shift. The <tt>.u</tt> form performs additional rounding up operations for the
right shift.

<strong>Description</strong>:\n
The 8-bit data elements of Rs1 are left-shifted logically or right-shifted arithmetically
based on the value of Rs2[3:0]. Rs2[3:0] is in the signed range of [-2^3, 2^3-1]. A positive Rs2[3:0] means
logical left shift and a negative Rs2[3:0] means arithmetic right shift. The shift amount is the
absolute value of Rs2[3:0]. However, the behavior of <tt>Rs2[3:0]==-2^3 (0x8)</tt> is defined to be
equivalent to the behavior of <tt>Rs2[3:0]==-(2^3-1) (0x9)</tt>.
The left-shifted results are saturated to the 8-bit signed integer range of [-2^7, 2^7-1]. For the <tt>.u</tt> form
of the instruction, the right-shifted results are added a 1 to the most significant discarded bit
position for rounding effect. After the shift, saturation, or rounding, the final results are written to
Rd. If any saturation happens, this instruction sets the OV flag. The value of Rs2[31:4] will not affect
this instruction.

<strong>Operations</strong>:\n
@code 
if (Rs2[3:0] < 0) {
  sa = -Rs2[3:0];
  sa = (sa == 8)? 7 : sa;
  if (`.u` form) {
    res[7:-1] = SE9(Rs1.B[x][7:sa-1]) + 1;
    Rd.B[x] = res[7:0];
  } else {
    Rd.B[x] = SE8(Rs1.B[x][7:sa]);
  }
} else {
  sa = Rs2[2:0];
  res[(7+sa):0] = Rs1.B[x] <<(logic) sa;
  if (res > (2^7)-1) {
    res[7:0] = 0x7f; OV = 1;
  } else if (res < -2^7) {
    res[7:0] = 0x80; OV = 1;
  }
  Rd.B[x] = res[7:0];
}
for RV32: x=3...0,
for RV64: x=7...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1gaa85a466f43c98b2a2b34dc19e9c8e9d2';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KSLRA16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '5031';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KSLRA16 (SIMD 16-bit Shift Left Logical with Saturation or Shift Right Arithmetic)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
KSLRA16 Rd, Rs1, Rs2
KSLRA16.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit elements logical left (positive) or arithmetic right (negative) shift operation with
Q15 saturation for the left shift. The <tt>.u</tt> form performs additional rounding up operations for the
right shift.

<strong>Description</strong>:\n
The 16-bit data elements of Rs1 are left-shifted logically or right-shifted arithmetically
based on the value of Rs2[4:0]. Rs2[4:0] is in the signed range of [-2^4, 2^4-1]. A positive Rs2[4:0] means
logical left shift and a negative Rs2[4:0] means arithmetic right shift. The shift amount is the
absolute value of Rs2[4:0]. However, the behavior of <tt>Rs2[4:0]==-2^4 (0x10)</tt> is defined to be
equivalent to the behavior of <tt>Rs2[4:0]==-(2^4-1) (0x11)</tt>.
The left-shifted results are saturated to the 16-bit signed integer range of [-2^15, 2^15-1]. For the <tt>.u</tt>
form of the instruction, the right-shifted results are added a 1 to the most significant discarded bit
position for rounding effect. After the shift, saturation, or rounding, the final results are written to
Rd. If any saturation happens, this instruction sets the OV flag. The value of Rs2[31:5] will not affect
this instruction.

<strong>Operations</strong>:\n
@code 
if (Rs2[4:0] < 0) {
  sa = -Rs2[4:0];
  sa = (sa == 16)? 15 : sa;
  if (`.u` form) {
    res[15:-1] = SE17(Rs1.H[x][15:sa-1]) + 1;
    Rd.H[x] = res[15:0];
  } else {
    Rd.H[x] = SE16(Rs1.H[x][15:sa]);
  }
} else {
  sa = Rs2[3:0];
  res[(15+sa):0] = Rs1.H[x] <<(logic) sa;
  if (res > (2^15)-1) {
    res[15:0] = 0x7fff; OV = 1;
  } else if (res < -2^15) {
    res[15:0] = 0x8000; OV = 1;
  }
  d.H[x] = res[15:0];
}
for RV32: x=1...0,
for RV64: x=3...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1gae5b84af52b3d277117a4ee509df1504d';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KSLRA16_U';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '5098';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KSLRA16.u (SIMD 16-bit Shift Left Logical with Saturation or Rounding Shift Right Arithmetic)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
KSLRA16 Rd, Rs1, Rs2
KSLRA16.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit elements logical left (positive) or arithmetic right (negative) shift operation with
Q15 saturation for the left shift. The <tt>.u</tt> form performs additional rounding up operations for the
right shift.

<strong>Description</strong>:\n
The 16-bit data elements of Rs1 are left-shifted logically or right-shifted arithmetically
based on the value of Rs2[4:0]. Rs2[4:0] is in the signed range of [-2^4, 2^4-1]. A positive Rs2[4:0] means
logical left shift and a negative Rs2[4:0] means arithmetic right shift. The shift amount is the
absolute value of Rs2[4:0]. However, the behavior of <tt>Rs2[4:0]==-2^4 (0x10)</tt> is defined to be
equivalent to the behavior of <tt>Rs2[4:0]==-(2^4-1) (0x11)</tt>.
The left-shifted results are saturated to the 16-bit signed integer range of [-2^15, 2^15-1]. For the <tt>.u</tt>
form of the instruction, the right-shifted results are added a 1 to the most significant discarded bit
position for rounding effect. After the shift, saturation, or rounding, the final results are written to
Rd. If any saturation happens, this instruction sets the OV flag. The value of Rs2[31:5] will not affect
this instruction.

<strong>Operations</strong>:\n
@code 
if (Rs2[4:0] < 0) {
  sa = -Rs2[4:0];
  sa = (sa == 16)? 15 : sa;
  if (`.u` form) {
    res[15:-1] = SE17(Rs1.H[x][15:sa-1]) + 1;
    Rd.H[x] = res[15:0];
  } else {
    Rd.H[x] = SE16(Rs1.H[x][15:sa]);
  }
} else {
  sa = Rs2[3:0];
  res[(15+sa):0] = Rs1.H[x] <<(logic) sa;
  if (res > (2^15)-1) {
    res[15:0] = 0x7fff; OV = 1;
  } else if (res < -2^15) {
    res[15:0] = 0x8000; OV = 1;
  }
  d.H[x] = res[15:0];
}
for RV32: x=1...0,
for RV64: x=3...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1ga3a01ea385d7d505ab86f7db697567e5b';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KSLRAW';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '5158';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KSLRAW (Shift Left Logical with Q31 Saturation or Shift Right Arithmetic)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
KSLRAW Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Perform a logical left (positive) or arithmetic right (negative) shift operation with Q31
saturation for the left shift on a 32-bit data.

<strong>Description</strong>:\n
The lower 32-bit content of Rs1 is left-shifted logically or right-shifted arithmetically
based on the value of Rs2[5:0]. Rs2[5:0] is in the signed range of [-25, 25-1]. A positive Rs2[5:0] means
logical left shift and a negative Rs2[5:0] means arithmetic right shift. The shift amount is the
absolute value of Rs2[5:0] clamped to the actual shift range of [0, 31].
The left-shifted result is saturated to the 32-bit signed integer range of [-2^31, 2^31-1]. After the shift
operation, the final result is bit-31 sign-extended and written to Rd. If any saturation happens, this
instruction sets the OV flag. The value of Rs2[31:6] will not affected the operation of this instruction.

<strong>Operations</strong>:\n
@code 
if (Rs2[5:0] < 0) {
  sa = -Rs2[5:0];
  sa = (sa == 32)? 31 : sa;
  res[31:0] = Rs1.W[0] >>(arith) sa;
} else {
  sa = Rs2[5:0];
  tmp = Rs1.W[0] <<(logic) sa;
  if (tmp > (2^31)-1) {
    res[31:0] = (2^31)-1;
    OV = 1;
  } else if (tmp < -2^31) {
    res[31:0] = -2^31;
    OV = 1
  } else {
    res[31:0] = tmp[31:0];
  }
}
Rd = res[31:0]; // RV32
Rd = SE64(res[31:0]); // RV64
@endcode

@param [in]  a    int type of value stored in a
@param [in]  b    int type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1ga9f23cd90864721f831fefd87acd4182e';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KSLRAW_U';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '5221';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KSLRAW.u (Shift Left Logical with Q31 Saturation or Rounding Shift Right Arithmetic)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
KSLRAW.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Perform a logical left (positive) or arithmetic right (negative) shift operation with Q31
saturation for the left shift and a rounding up operation for the right shift on a 32-bit data.

<strong>Description</strong>:\n
The lower 32-bit content of Rs1 is left-shifted logically or right-shifted arithmetically
based on the value of Rs2[5:0]. Rs2[5:0] is in the signed range of [-25, 25-1]. A positive Rs2[5:0] means
logical left shift and a negative Rs2[5:0] means arithmetic right shift. The shift amount is the
absolute value of Rs2[5:0] clamped to the actual shift range of [0, 31].
The left-shifted result is saturated to the 32-bit signed integer range of [-2^31, 2^31-1]. The right-shifted
result is added a 1 to the most significant discarded bit position for rounding effect. After the shift,
saturation, or rounding, the final result is bit-31 sign-extended and written to Rd. If any saturation
happens, this instruction sets the OV flag. The value of Rs2[31:6] will not affect the operation of this
instruction.

<strong>Operations</strong>:\n
@code 
if (Rs2[5:0] < 0) {
  sa = -Rs2[5:0];
  sa = (sa == 32)? 31 : sa;
  res[31:-1] = SE33(Rs1[31:(sa-1)]) + 1;
  rst[31:0] = res[31:0];
} else {
  sa = Rs2[5:0];
  tmp = Rs1.W[0] <<(logic) sa;
  if (tmp > (2^31)-1) {
    rst[31:0] = (2^31)-1;
    OV = 1;
  } else if (tmp < -2^31) {
    rst[31:0] = -2^31;
    OV = 1
  } else {
    rst[31:0] = tmp[31:0];
  }
}
Rd = rst[31:0]; // RV32
Rd = SE64(rst[31:0]); // RV64
@endcode

@param [in]  a    int type of value stored in a
@param [in]  b    int type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga5623725bde47550878158bc9a52dd0aa';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KSTAS16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '5278';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KSTAS16 (SIMD 16-bit Signed Saturating Straight Addition & Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
KSTAS16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit signed integer element saturating addition and 16-bit signed integer element
saturating subtraction in a 32-bit chunk simultaneously. Operands are from corresponding
positions in 32-bit chunks.

<strong>Description</strong>:\n
This instruction adds the 16-bit signed integer element in [31:16] of 32-bit chunks in
Rs1 with the 16-bit signed integer element in [31:16] of 32-bit chunks in Rs2; at the same time, it
subtracts the 16-bit signed integer element in [15:0] of 32-bit chunks in Rs2 from the 16-bit signed
integer element in [15:0] of 32-bit chunks in Rs1. If any of the results are beyond the Q15 number
range (-2^15 <= Q15 <= 2^15-1), they are saturated to the range and the OV bit is set to 1. The saturated
results are written to [31:16] of 32-bit chunks in Rd for addition and [15:0] of 32-bit chunks in Rd for
subtraction.

<strong>Operations</strong>:\n
@code 
res1 = Rs1.W[x][31:16] + Rs2.W[x][31:16];
res2 = Rs1.W[x][15:0] - Rs2.W[x][15:0];
for (res in [res1, res2]) {
  if (res > (2^15)-1) {
    res = (2^15)-1;
    OV = 1;
  } else if (res < -2^15) {
    res = -2^15;
    OV = 1;
  }
}
Rd.W[x][31:16] = res1;
Rd.W[x][15:0] = res2;
for RV32, x=0
for RV64, x=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga8feffb9748de700f30a52c93302be55d';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KSTSA16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '5335';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KSTSA16 (SIMD 16-bit Signed Saturating Straight Subtraction & Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
KSTSA16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit signed integer element saturating subtraction and 16-bit signed integer element
saturating addition in a 32-bit chunk simultaneously. Operands are from corresponding positions in
32-bit chunks.

<strong>Description</strong>:\n
This instruction subtracts the 16-bit signed integer element in [31:16] of 32-bit chunks
in Rs2 from the 16-bit signed integer element in [31:16] of 32-bit chunks in Rs1; at the same time, it
adds the 16-bit signed integer element in [15:0] of 32-bit chunks in Rs2 with the 16-bit signed integer
element in [15:0] of 32-bit chunks in Rs1. If any of the results are beyond the Q15 number range (-2^15
<= Q15 <= 2^15-1), they are saturated to the range and the OV bit is set to 1. The saturated results are
written to [31:16] of 32-bit chunks in Rd for subtraction and [15:0] of 32-bit chunks in Rd for
addition.

<strong>Operations</strong>:\n
@code 
res1 = Rs1.W[x][31:16] - Rs2.W[x][31:16];
res2 = Rs1.W[x][15:0] + Rs2.W[x][15:0];
for (res in [res1, res2]) {
  if (res > (2^15)-1) {
    res = (2^15)-1;
    OV = 1;
  } else if (res < -2^15) {
    res = -2^15;
    OV = 1;
  }
}
Rd.W[x][31:16] = res1;
Rd.W[x][15:0] = res2;
for RV32, x=0
for RV64, x=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__ADDSUB_1ga872cc2823228c92d1004bd859af27147';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KSUB8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '5382';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KSUB8 (SIMD 8-bit Signed Saturating Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
KSUB8 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 8-bit signed elements saturating subtractions simultaneously.

<strong>Description</strong>:\n
This instruction subtracts the 8-bit signed integer elements in Rs2 from the 8-bit
signed integer elements in Rs1. If any of the results are beyond the Q7 number range (-2^7 <= Q7 <= 27
-1), they are saturated to the range and the OV bit is set to 1. The saturated results are written to Rd.

<strong>Operations</strong>:\n
@code 
res[x] = Rs1.B[x] - Rs2.B[x];
if (res[x] > (2^7)-1) {
  res[x] = (2^7)-1;
  OV = 1;
} else if (res[x] < -2^7) {
  res[x] = -2^7;
  OV = 1;
}
Rd.B[x] = res[x];
for RV32: x=3...0,
for RV64: x=7...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga062dbffd606488852b1e4aabcf6369b4';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KSUB16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '5430';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KSUB16 (SIMD 16-bit Signed Saturating Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
KSUB16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit signed integer elements saturating subtractions simultaneously.

<strong>Description</strong>:\n
This instruction subtracts the 16-bit signed integer elements in Rs2 from the 16-bit
signed integer elements in Rs1. If any of the results are beyond the Q15 number range (-2^15 <= Q15 <=
2^15-1), they are saturated to the range and the OV bit is set to 1. The saturated results are written to
Rd.

<strong>Operations</strong>:\n
@code 
res[x] = Rs1.H[x] - Rs2.H[x];
if (res[x] > (2^15)-1) {
  res[x] = (2^15)-1;
  OV = 1;
} else if (res[x] < -2^15) {
  res[x] = -2^15;
  OV = 1;
}
Rd.H[x] = res[x];
for RV32: x=1...0,
for RV64: x=3...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__64B__ADDSUB_1gad703720a47f05b3e322caffbcc45298a';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KSUB64';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '5496';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KSUB64 (64-bit Signed Saturating Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (64-bit Profile)

<strong>Syntax</strong>:\n
@code 
KSUB64 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Perform a 64-bit signed integer subtraction. The result is saturated to the Q63 range.

<strong>RV32 Description</strong>:\n
This instruction subtracts the 64-bit signed integer of an even/odd pair of
registers specified by Rs2(4,1) from the 64-bit signed integer of an even/odd pair of registers
specified by Rs1(4,1). If the 64-bit result is beyond the Q63 number range (-2^63 <= Q63 <= 2^63-1), it is
saturated to the range and the OV bit is set to 1. The saturated result is then written to an even/odd
pair of registers specified by Rd(4,1).
Rx(4,1), i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair
includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the high 32-bit of the operand and the even <tt>2d</tt>
register of the pair contains the low 32-bit of the operand.

<strong>RV64 Description</strong>:\n
This instruction subtracts the 64-bit signed integer of Rs2 from the 64-bit signed
integer of Rs1. If the 64-bit result is beyond the Q63 number range (-2^63 <= Q63 <= 2^63-1), it is saturated
to the range and the OV bit is set to 1. The saturated result is then written to Rd.

<strong>Operations</strong>:\n
@code 
RV32:
t_L = CONCAT(Rd(4,1),1'b0); t_H = CONCAT(Rd(4,1),1'b1);
a_L = CONCAT(Rs1(4,1),1'b0); a_H = CONCAT(Rs1(4,1),1'b1);
b_L = CONCAT(Rs2(4,1),1'b0); b_H = CONCAT(Rs2(4,1),1'b1);
result = R[a_H].R[a_L] - R[b_H].R[b_L];
if (result > (2^63)-1) {
  result = (2^63)-1; OV = 1;
} else if (result < -2^63) {
  result = -2^63; OV = 1;
}
R[t_H].R[t_L] = result;
RV64:
result = Rs1 - Rs2;
if (result > (2^63)-1) {
  result = (2^63)-1; OV = 1;
} else if (result < -2^63) {
  result = -2^63; OV = 1;
}
Rd = result;
@endcode

@param [in]  a    long long type of value stored in a
@param [in]  b    long long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q15__SAT__ALU_1gae30012cd8914b62f2fb84236b138f54f';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KSUBH';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '5543';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KSUBH (Signed Subtraction with Q15 Saturation)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
KSUBH Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Subtract the signed lower 32-bit content of two registers with Q15 saturation.

<strong>Description</strong>:\n
The signed lower 32-bit content of Rs2 is subtracted from the signed lower 32-bit
content of Rs1. And the result is saturated to the 16-bit signed integer range of [-2^15, 2^15-1] and then
sign-extended and written to Rd. If saturation happens, this instruction sets the OV flag.

<strong>Operations</strong>:\n
@code 
tmp = Rs1.W[0] - Rs2.W[0];
if (tmp > (2^15)-1) {
  res = (2^15)-1;
  OV = 1;
} else if (tmp < -2^15) {
  res = -2^15;
  OV = 1
} else {
  res = tmp;
}
Rd = SE(res[15:0]);
@endcode

@param [in]  a    int type of value stored in a
@param [in]  b    int type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1ga2a28907bd6cda3a2caa1e2200eafaec3';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KSUBW';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '5591';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KSUBW (Signed Subtraction with Q31 Saturation)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
KSUBW Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Subtract the signed lower 32-bit content of two registers with Q31 saturation.

<strong>Description</strong>:\n
The signed lower 32-bit content of Rs2 is subtracted from the signed lower 32-bit
content of Rs1. And the result is saturated to the 32-bit signed integer range of [-2^31, 2^31-1] and then
sign-extened and written to Rd. If saturation happens, this instruction sets the OV flag.

<strong>Operations</strong>:\n
@code 
tmp = Rs1.W[0] - Rs2.W[0];
if (tmp > (2^31)-1) {
  res = (2^31)-1;
  OV = 1;
} else if (tmp < -2^31) {
res = -2^31;
  OV = 1
} else {
  res = tmp;
}
Rd = res[31:0]; // RV32
Rd = SE(res[31:0]); // RV64
@endcode

@param [in]  a    int type of value stored in a
@param [in]  b    int type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X32__MAC_1ga37ef876bfb8f2a063dd2d6554086efe4';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KWMMUL';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '5647';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KWMMUL (SIMD Saturating MSW Signed Multiply Word & Double)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
KWMMUL Rd, Rs1, Rs2
KWMMUL.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit integer elements of two registers, shift the results left 1-bit,
saturate, and write the most significant 32-bit results to a register. The <tt>.u</tt> form additionally
rounds up the multiplication results from the most signification discarded bit.

<strong>Description</strong>:\n
This instruction multiplies the 32-bit elements of Rs1 with the 32-bit elements of Rs2. It then shifts
the multiplication results one bit to the left and takes the most significant 32-bit results. If the
shifted result is greater than 2^31-1, it is saturated to 2^31-1 and the OV flag is set to 1. The final element
result is written to Rd. The 32-bit elements of Rs1 and Rs2 are treated as signed integers. The <tt>.u</tt>
form of the instruction additionally rounds up the 64-bit multiplication results by adding a 1 to bit
30 before the shift and saturation operations.

<strong>Operations</strong>:\n
@code 
if ((0x80000000 != Rs1.W[x]) | (0x80000000 != Rs2.W[x])) {
  Mres[x][63:0] = Rs1.W[x] * Rs2.W[x];
  if (`.u` form) {
    Round[x][33:0] = Mres[x][63:30] + 1;
    Rd.W[x] = Round[x][32:1];
  } else {
    Rd.W[x] = Mres[x][62:31];
  }
} else {
  Rd.W[x] = 0x7fffffff;
  OV = 1;
}
for RV32: x=0
for RV64: x=1...0
@endcode

@param [in]  a    long type of value stored in a
@param [in]  b    long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X32__MAC_1ga5fc98cdba6f2dda6fc65d4c3a836c20f';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KWMMUL_U';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '5703';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KWMMUL.u (SIMD Saturating MSW Signed Multiply Word & Double with Rounding)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
KWMMUL Rd, Rs1, Rs2
KWMMUL.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit integer elements of two registers, shift the results left 1-bit,
saturate, and write the most significant 32-bit results to a register. The <tt>.u</tt> form additionally
rounds up the multiplication results from the most signification discarded bit.

<strong>Description</strong>:\n
This instruction multiplies the 32-bit elements of Rs1 with the 32-bit elements of Rs2. It then shifts
the multiplication results one bit to the left and takes the most significant 32-bit results. If the
shifted result is greater than 2^31-1, it is saturated to 2^31-1 and the OV flag is set to 1. The final element
result is written to Rd. The 32-bit elements of Rs1 and Rs2 are treated as signed integers. The <tt>.u</tt>
form of the instruction additionally rounds up the 64-bit multiplication results by adding a 1 to bit
30 before the shift and saturation operations.

<strong>Operations</strong>:\n
@code 
if ((0x80000000 != Rs1.W[x]) | (0x80000000 != Rs2.W[x])) {
  Mres[x][63:0] = Rs1.W[x] * Rs2.W[x];
  if (`.u` form) {
    Round[x][33:0] = Mres[x][63:30] + 1;
    Rd.W[x] = Round[x][32:1];
  } else {
    Rd.W[x] = Mres[x][62:31];
  }
} else {
  Rd.W[x] = 0x7fffffff;
  OV = 1;
}
for RV32: x=0
for RV64: x=1...0
@endcode

@param [in]  a    long type of value stored in a
@param [in]  b    long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1ga1e5062cc77c31e898d6a85e7768a7b2d';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_MADDR32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '5749';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
MADDR32 (Multiply and Add to 32-Bit Word)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
MADDR32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the 32-bit contents of two registers and add the lower 32-bit multiplication result
to the 32-bit content of a destination register. Write the final result back to the destination register.

<strong>Description</strong>:\n
This instruction multiplies the lower 32-bit content of Rs1 with that of Rs2. It adds the
lower 32-bit multiplication result to the lower 32-bit content of Rd and writes the final result (RV32)
or sign-extended result (RV64) back to Rd. The contents of Rs1 and Rs2 can be either signed or
unsigned integers.

<strong>Operations</strong>:\n
@code 
RV32:
Mresult = Rs1 * Rs2;
Rd = Rd + Mresult.W[0];
RV64:
Mresult = Rs1.W[0] * Rs2.W[0];
tres[31:0] = Rd.W[0] + Mresult.W[0];
Rd = SE64(tres[31:0]);
@endcode

@param [in]  t    unsigned long type of value stored in t
@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__32B__COMPUTATION_1ga636b734793493bbcf7a61dfa55749e82';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_MAXW';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '5788';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
MAXW (32-bit Signed Word Maximum)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
MAXW Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Get the larger value from the 32-bit contents of two general registers.

<strong>Description</strong>:\n
This instruction compares two signed 32-bit integers stored in Rs1 and Rs2, picks the
larger value as the result, and writes the result to Rd.

<strong>Operations</strong>:\n
@code 
if (Rs1.W[0] >= Rs2.W[0]) {
  Rd = SE(Rs1.W[0]);
} else {
  Rd = SE(Rs2.W[0]);
}
@endcode

@param [in]  a    int type of value stored in a
@param [in]  b    int type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__32B__COMPUTATION_1ga60a38a5ee2cab1dd916cf4745c86a77e';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_MINW';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '5824';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
MINW (32-bit Signed Word Minimum)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
MINW Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Get the smaller value from the 32-bit contents of two general registers.

<strong>Description</strong>:\n
This instruction compares two signed 32-bit integers stored in Rs1 and Rs2, picks the
smaller value as the result, and writes the result to Rd.

<strong>Operations</strong>:\n
@code 
if (Rs1.W[0] >= Rs2.W[0]) { Rd = SE(Rs2.W[0]); } else { Rd = SE(Rs1.W[0]); }
@endcode

@param [in]  a    int type of value stored in a
@param [in]  b    int type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1ga8260760ab7c146507ec4507862534332';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_MSUBR32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '5871';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
MSUBR32 (Multiply and Subtract from 32-Bit Word)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
MSUBR32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the 32-bit contents of two registers and subtract the lower 32-bit multiplication
result from the 32-bit content of a destination register. Write the final result back to the destination
register.

<strong>Description</strong>:\n
This instruction multiplies the lower 32-bit content of Rs1 with that of Rs2, subtracts
the lower 32-bit multiplication result from the lower 32-bit content of Rd, then writes the final
result (RV32) or sign-extended result (RV64) back to Rd. The contents of Rs1 and Rs2 can be either
signed or unsigned integers.

<strong>Operations</strong>:\n
@code 
RV32:
Mresult = Rs1 * Rs2;
Rd = Rd - Mresult.W[0];
RV64:
Mresult = Rs1.W[0] * Rs2.W[0];
tres[31:0] = Rd.W[0] - Mresult.W[0];
Rd = SE64(tres[31:0]);
@endcode

@param [in]  t    unsigned long type of value stored in t
@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__32B__COMPUTATION_1gab76bac5299a9c41ce034594a704a126b';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_MULR64';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '5922';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
MULR64 (Multiply Word Unsigned to 64-bit Data)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
MULR64 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the 32-bit unsigned integer contents of two registers and write the 64-bit result.

<strong>RV32 Description</strong>:\n
This instruction multiplies the 32-bit content of Rs1 with that of Rs2 and writes the 64-bit
multiplication result to an even/odd pair of registers containing Rd. Rd(4,1) index d determines the
even/odd pair group of the two registers. Specifically, the register pair includes register 2d and
2d+1.
The odd <tt>2d+1</tt> register of the pair contains the high 32-bit of the result and the even <tt>2d</tt> register
of the pair contains the low 32-bit of the result.
The lower 32-bit contents of Rs1 and Rs2 are treated as unsigned integers.

<strong>RV64 Description</strong>:\n
This instruction multiplies the lower 32-bit content of Rs1 with that of Rs2 and writes the 64-bit
multiplication result to Rd.
The lower 32-bit contents of Rs1 and Rs2 are treated as unsigned integers.

<strong>Operations</strong>:\n
@code 
RV32:
Mresult = CONCAT(1`b0,Rs1) u* CONCAT(1`b0,Rs2);
R[Rd(4,1).1(0)][31:0] = Mresult[63:32];
R[Rd(4,1).0(0)][31:0] = Mresult[31:0];
RV64:
Rd = Mresult[63:0];
Mresult = CONCAT(1`b0,Rs1.W[0]) u* CONCAT(1`b0,Rs2.W[0]);
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__32B__COMPUTATION_1ga70bfdde5df211d5aa20cf406736d2ea1';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_MULSR64';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '5974';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
MULSR64 (Multiply Word Signed to 64-bit Data)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
MULSR64 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the 32-bit signed integer contents of two registers and write the 64-bit result.

<strong>RV32 Description</strong>:\n
This instruction multiplies the lower 32-bit content of Rs1 with the lower 32-bit content of Rs2 and
writes the 64-bit multiplication result to an even/odd pair of registers containing Rd. Rd(4,1) index d
determines the even/odd pair group of the two registers. Specifically, the register pair includes
register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the high 32-bit of the result and the even <tt>2d</tt> register
of the pair contains the low 32-bit of the result.
The lower 32-bit contents of Rs1 and Rs2 are treated as signed integers.

<strong>RV64 Description</strong>:\n
This instruction multiplies the lower 32-bit content of Rs1 with the lower 32-bit content of Rs2 and
writes the 64-bit multiplication result to Rd.
The lower 32-bit contents of Rs1 and Rs2 are treated as signed integers.

<strong>Operations</strong>:\n
@code 
RV32:
Mresult = Ra s* Rb;
R[Rd(4,1).1(0)][31:0] = Mresult[63:32];
R[Rd(4,1).0(0)][31:0] = Mresult[31:0];
RV64:
Mresult = Ra.W[0] s* Rb.W[0];
Rd = Mresult[63:0];
@endcode

@param [in]  a    long type of value stored in a
@param [in]  b    long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__PART__SIMD__MISC_1ga4d0a417bfde5846e13d2ae5a2da2dbb3';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_PBSAD';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '6013';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
PBSAD (Parallel Byte Sum of Absolute Difference)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
PBSAD Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Calculate the sum of absolute difference of unsigned 8-bit data elements.

<strong>Description</strong>:\n
This instruction subtracts the un-signed 8-bit elements of Rs2 from those of Rs1. Then
it adds the absolute value of each difference together and writes the result to Rd.

<strong>Operations</strong>:\n
@code 
absdiff[x] = ABS(Rs1.B[x] - Rs2.B[x]);
Rd = SUM(absdiff[x]);
for RV32: x=3...0,
for RV64: x=7...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__PART__SIMD__MISC_1gab29c8817a341834901b676f1be7e6279';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_PBSADA';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '6055';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
PBSADA (Parallel Byte Sum of Absolute Difference Accum)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
PBSADA Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Calculate the sum of absolute difference of four unsigned 8-bit data elements and
accumulate it into a register.

<strong>Description</strong>:\n
This instruction subtracts the un-signed 8-bit elements of Rs2 from those of Rs1. It
then adds the absolute value of each difference together along with the content of Rd and writes the
accumulated result back to Rd.

<strong>Operations</strong>:\n
@code 
absdiff[x] = ABS(Rs1.B[x] - Rs2.B[x]);
Rd = Rd + SUM(absdiff[x]);
for RV32: x=3...0,
for RV64: x=7...0
@endcode

@param [in]  t    unsigned long type of value stored in t
@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__PACK_1gabd698d8de29ab162d919a182b9c6779c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_PKBB16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '6105';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
PKBB16 (Pack Two 16-bit Data from Both Bottom Half)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
PKBB16 Rd, Rs1, Rs2
PKBT16 Rd, Rs1, Rs2
PKTT16 Rd, Rs1, Rs2
PKTB16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Pack 16-bit data from 32-bit chunks in two registers.
* PKBB16: bottom.bottom
* PKBT16 bottom.top
* PKTT16 top.top
* PKTB16 top.bottom

<strong>Description</strong>:\n
(PKBB16) moves Rs1.W[x][15:0] to Rd.W[x][31:16] and moves Rs2.W[x] [15:0] to
Rd.W[x] [15:0].
(PKBT16) moves Rs1.W[x] [15:0] to Rd.W[x] [31:16] and moves Rs2.W[x] [31:16] to Rd.W[x] [15:0].
(PKTT16) moves Rs1.W[x] [31:16] to Rd.W[x] [31:16] and moves Rs2.W[x] [31:16] to Rd.W[x] [15:0].
(PKTB16) moves Rs1.W[x] [31:16] to Rd.W[x] [31:16] and moves Rs2.W[x] [15:0] to Rd.W[x] [15:0].

<strong>Operations</strong>:\n
@code 
Rd.W[x][31:0] = CONCAT(Rs1.W[x][15:0], Rs2.W[x][15:0]); // PKBB16
Rd.W[x][31:0] = CONCAT(Rs1.W[x][15:0], Rs2.W[x][31:16]); // PKBT16
Rd.W[x][31:0] = CONCAT(Rs1.W[x][31:16], Rs2.W[x][15:0]); // PKTB16
Rd.W[x][31:0] = CONCAT(Rs1.W[x][31:16], Rs2.W[x][31:16]); // PKTT16
for RV32: x=0,
for RV64: x=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__PACK_1gaf10c9bb0704694903991a3a77e4134a1';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_PKBT16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '6156';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
PKBT16 (Pack Two 16-bit Data from Bottom and Top Half)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
PKBB16 Rd, Rs1, Rs2
PKBT16 Rd, Rs1, Rs2
PKTT16 Rd, Rs1, Rs2
PKTB16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Pack 16-bit data from 32-bit chunks in two registers.
* PKBB16: bottom.bottom
* PKBT16 bottom.top
* PKTT16 top.top
* PKTB16 top.bottom

<strong>Description</strong>:\n
(PKBB16) moves Rs1.W[x][15:0] to Rd.W[x][31:16] and moves Rs2.W[x] [15:0] to
Rd.W[x] [15:0].
(PKBT16) moves Rs1.W[x] [15:0] to Rd.W[x] [31:16] and moves Rs2.W[x] [31:16] to Rd.W[x] [15:0].
(PKTT16) moves Rs1.W[x] [31:16] to Rd.W[x] [31:16] and moves Rs2.W[x] [31:16] to Rd.W[x] [15:0].
(PKTB16) moves Rs1.W[x] [31:16] to Rd.W[x] [31:16] and moves Rs2.W[x] [15:0] to Rd.W[x] [15:0].

<strong>Operations</strong>:\n
@code 
Rd.W[x][31:0] = CONCAT(Rs1.W[x][15:0], Rs2.W[x][15:0]); // PKBB16
Rd.W[x][31:0] = CONCAT(Rs1.W[x][15:0], Rs2.W[x][31:16]); // PKBT16
Rd.W[x][31:0] = CONCAT(Rs1.W[x][31:16], Rs2.W[x][15:0]); // PKTB16
Rd.W[x][31:0] = CONCAT(Rs1.W[x][31:16], Rs2.W[x][31:16]); // PKTT16
for RV32: x=0,
for RV64: x=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__PACK_1ga2d33235fc87cd78798e5824e3b84054d';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_PKTT16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '6207';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
PKTT16 (Pack Two 16-bit Data from Both Top Half)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
PKBB16 Rd, Rs1, Rs2
PKBT16 Rd, Rs1, Rs2
PKTT16 Rd, Rs1, Rs2
PKTB16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Pack 16-bit data from 32-bit chunks in two registers.
* PKBB16: bottom.bottom
* PKBT16 bottom.top
* PKTT16 top.top
* PKTB16 top.bottom

<strong>Description</strong>:\n
(PKBB16) moves Rs1.W[x][15:0] to Rd.W[x][31:16] and moves Rs2.W[x] [15:0] to
Rd.W[x] [15:0].
(PKBT16) moves Rs1.W[x] [15:0] to Rd.W[x] [31:16] and moves Rs2.W[x] [31:16] to Rd.W[x] [15:0].
(PKTT16) moves Rs1.W[x] [31:16] to Rd.W[x] [31:16] and moves Rs2.W[x] [31:16] to Rd.W[x] [15:0].
(PKTB16) moves Rs1.W[x] [31:16] to Rd.W[x] [31:16] and moves Rs2.W[x] [15:0] to Rd.W[x] [15:0].

<strong>Operations</strong>:\n
@code 
Rd.W[x][31:0] = CONCAT(Rs1.W[x][15:0], Rs2.W[x][15:0]); // PKBB16
Rd.W[x][31:0] = CONCAT(Rs1.W[x][15:0], Rs2.W[x][31:16]); // PKBT16
Rd.W[x][31:0] = CONCAT(Rs1.W[x][31:16], Rs2.W[x][15:0]); // PKTB16
Rd.W[x][31:0] = CONCAT(Rs1.W[x][31:16], Rs2.W[x][31:16]); // PKTT16
for RV32: x=0,
for RV64: x=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__PACK_1gacb5418972db5061d6f993f3b4a3a131e';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_PKTB16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '6258';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
PKTB16 (Pack Two 16-bit Data from Top and Bottom Half)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
PKBB16 Rd, Rs1, Rs2
PKBT16 Rd, Rs1, Rs2
PKTT16 Rd, Rs1, Rs2
PKTB16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Pack 16-bit data from 32-bit chunks in two registers.
* PKBB16: bottom.bottom
* PKBT16 bottom.top
* PKTT16 top.top
* PKTB16 top.bottom

<strong>Description</strong>:\n
(PKBB16) moves Rs1.W[x][15:0] to Rd.W[x][31:16] and moves Rs2.W[x] [15:0] to
Rd.W[x] [15:0].
(PKBT16) moves Rs1.W[x] [15:0] to Rd.W[x] [31:16] and moves Rs2.W[x] [31:16] to Rd.W[x] [15:0].
(PKTT16) moves Rs1.W[x] [31:16] to Rd.W[x] [31:16] and moves Rs2.W[x] [31:16] to Rd.W[x] [15:0].
(PKTB16) moves Rs1.W[x] [31:16] to Rd.W[x] [31:16] and moves Rs2.W[x] [15:0] to Rd.W[x] [15:0].

<strong>Operations</strong>:\n
@code 
Rd.W[x][31:0] = CONCAT(Rs1.W[x][15:0], Rs2.W[x][15:0]); // PKBB16
Rd.W[x][31:0] = CONCAT(Rs1.W[x][15:0], Rs2.W[x][31:16]); // PKBT16
Rd.W[x][31:0] = CONCAT(Rs1.W[x][31:16], Rs2.W[x][15:0]); // PKTB16
Rd.W[x][31:0] = CONCAT(Rs1.W[x][31:16], Rs2.W[x][31:16]); // PKTT16
for RV32: x=0,
for RV64: x=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__ADDSUB_1ga270f185315a2f3d5da8d14e9a89e716b';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_RADD8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '6303';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RADD8 (SIMD 8-bit Signed Halving Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
RADD8 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 8-bit signed integer element additions simultaneously. The element results are halved
to avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction adds the 8-bit signed integer elements in Rs1 with the 8-bit signed
integer elements in Rs2. The results are first arithmetically right-shifted by 1 bit and then written to
Rd.

<strong>Examples</strong>:\n
@code 
* Rs1 = 0x7F, Rs2 = 0x7F, Rd = 0x7F
* Rs1 = 0x80, Rs2 = 0x80, Rd = 0x80
* Rs1 = 0x40, Rs2 = 0x80, Rd = 0xE0
@endcode

<strong>Operations</strong>:\n
@code 
Rd.B[x] = (Rs1.B[x] + Rs2.B[x]) s>> 1; for RV32: x=3...0, for RV64: x=7...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga53762c95c79e336f330d308b64b4c40e';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_RADD16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '6348';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RADD16 (SIMD 16-bit Signed Halving Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
RADD16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit signed integer element additions simultaneously. The results are halved to avoid
overflow or saturation.

<strong>Description</strong>:\n
This instruction adds the 16-bit signed integer elements in Rs1 with the 16-bit signed
integer elements in Rs2. The results are first arithmetically right-shifted by 1 bit and then written to
Rd.

<strong>Examples</strong>:\n
@code 
* Rs1 = 0x7FFF, Rs2 = 0x7FFF, Rd = 0x7FFF
* Rs1 = 0x8000, Rs2 = 0x8000, Rd = 0x8000
* Rs1 = 0x4000, Rs2 = 0x8000, Rd = 0xE000
@endcode

<strong>Operations</strong>:\n
@code 
Rd.H[x] = (Rs1.H[x] + Rs2.H[x]) s>> 1; for RV32: x=1...0, for RV64: x=3...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__64B__ADDSUB_1ga152f18d1ef922b3104cc763d00611511';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_RADD64';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '6401';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RADD64 (64-bit Signed Halving Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (64-bit Profile)

<strong>Syntax</strong>:\n
@code 
RADD64 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Add two 64-bit signed integers. The result is halved to avoid overflow or saturation.

<strong>RV32 Description</strong>:\n
This instruction adds the 64-bit signed integer of an even/odd pair of registers
specified by Rs1(4,1) with the 64-bit signed integer of an even/odd pair of registers specified by
Rs2(4,1). The 64-bit addition result is first arithmetically right-shifted by 1 bit and then written to an
even/odd pair of registers specified by Rd(4,1).
Rx(4,1), i.e., value d, determines the even/odd pair group of two registers. Specifically, the register
pair includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the high 32-bit of the result and the even <tt>2d</tt> register
of the pair contains the low 32-bit of the result.

<strong>RV64 Description</strong>:\n
This instruction adds the 64-bit signed integer in Rs1 with the 64-bit signed
integer in Rs2. The 64-bit addition result is first arithmetically right-shifted by 1 bit and then
written to Rd.

<strong>Operations</strong>:\n
@code 
RV32:
t_L = CONCAT(Rd(4,1),1'b0); t_H = CONCAT(Rd(4,1),1'b1);
a_L = CONCAT(Rs1(4,1),1'b0); a_H = CONCAT(Rs1(4,1),1'b1);
b_L = CONCAT(Rs2(4,1),1'b0); b_H = CONCAT(Rs2(4,1),1'b1);
R[t_H].R[t_L] = (R[a_H].R[a_L] + R[b_H].R[b_L]) s>> 1;
RV64:
Rd = (Rs1 + Rs2) s>> 1;
@endcode

@param [in]  a    long long type of value stored in a
@param [in]  b    long long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__32B__COMPUTATION_1ga162b41b571bd84dcd8860437417544dd';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_RADDW';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '6449';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RADDW (32-bit Signed Halving Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
RADDW Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Add 32-bit signed integers and the results are halved to avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction adds the first 32-bit signed integer in Rs1 with the first 32-bit signed
integer in Rs2. The result is first arithmetically right-shifted by 1 bit and then sign-extended and
written to Rd.

<strong>Examples</strong>:\n
@code 
* Rs1 = 0x7FFFFFFF, Rs2 = 0x7FFFFFFF, Rd = 0x7FFFFFFF
* Rs1 = 0x80000000, Rs2 = 0x80000000, Rd = 0x80000000
* Rs1 = 0x40000000, Rs2 = 0x80000000, Rd = 0xE0000000
@endcode

<strong>Operations</strong>:\n
@code 
RV32:
Rd[31:0] = (Rs1[31:0] + Rs2[31:0]) s>> 1;
RV64:
resw[31:0] = (Rs1[31:0] + Rs2[31:0]) s>> 1;
Rd[63:0] = SE(resw[31:0]);
@endcode

@param [in]  a    int type of value stored in a
@param [in]  b    int type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga425c896839da2d7162fd68f53a50a9f9';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_RCRAS16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '6498';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RCRAS16 (SIMD 16-bit Signed Halving Cross Addition & Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
RCRAS16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit signed integer element addition and 16-bit signed integer element subtraction in
a 32-bit chunk simultaneously. Operands are from crossed positions in 32-bit chunks. The results
are halved to avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction adds the 16-bit signed integer element in [31:16] of 32-bit chunks in
Rs1 with the 16-bit signed integer element in [15:0] of 32-bit chunks in Rs2, and subtracts the 16-bit
signed integer element in [31:16] of 32-bit chunks in Rs2 from the 16-bit signed integer element in
[15:0] of 32-bit chunks in Rs1. The element results are first arithmetically right-shifted by 1 bit and
then written to [31:16] of 32-bit chunks in Rd and [15:0] of 32-bit chunks in Rd.

<strong>Examples</strong>:\n
@code 
Please see `RADD16` and `RSUB16` instructions.
@endcode

<strong>Operations</strong>:\n
@code 
Rd.W[x][31:16] = (Rs1.W[x][31:16] + Rs2.W[x][15:0]) s>> 1;
Rd.W[x][15:0] = (Rs1.W[x][15:0] - Rs2.W[x][31:16]) s>> 1;
for RV32, x=0
for RV64, x=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga98d239e879270c5e4c8dd575e9cb6529';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_RCRSA16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '6547';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RCRSA16 (SIMD 16-bit Signed Halving Cross Subtraction & Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
RCRSA16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit signed integer element subtraction and 16-bit signed integer element addition in
a 32-bit chunk simultaneously. Operands are from crossed positions in 32-bit chunks. The results
are halved to avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction subtracts the 16-bit signed integer element in [15:0] of 32-bit chunks
in Rs2 from the 16-bit signed integer element in [31:16] of 32-bit chunks in Rs1, and adds the 16-bit
signed element integer in [15:0] of 32-bit chunks in Rs1 with the 16-bit signed integer element in
[31:16] of 32-bit chunks in Rs2. The two results are first arithmetically right-shifted by 1 bit and
then written to [31:16] of 32-bit chunks in Rd and [15:0] of 32-bit chunks in Rd.

<strong>Examples</strong>:\n
@code 
Please see `RADD16` and `RSUB16` instructions.
@endcode

<strong>Operations</strong>:\n
@code 
Rd.W[x][31:16] = (Rs1.W[x][31:16] - Rs2.W[x][15:0]) s>> 1;
Rd.W[x][15:0] = (Rs1.W[x][15:0] + Rs2.W[x][31:16]) s>> 1;
for RV32, x=0
for RV64, x=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__OV__FLAG__SC_1gaff8e2c883c492aff917d183ae7097535';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_RDOV';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '6574';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RDOV (Read OV flag)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
RDOV Rd  # pseudo mnemonic
@endcode

<strong>Purpose</strong>:\n
This pseudo instruction is an alias to <tt>CSRR Rd, ucode</tt> instruction which maps to the real
instruction of <tt>CSRRS Rd, ucode, x0</tt>.


\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1gaec8b94f14dfbcab9f1230e3d43047de9';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_RSTAS16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '6623';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RSTAS16 (SIMD 16-bit Signed Halving Straight Addition & Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
RSTAS16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit signed integer element addition and 16-bit signed integer element subtraction in
a 32-bit chunk simultaneously. Operands are from corresponding positions in 32-bit chunks. The
results are halved to avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction adds the 16-bit signed integer element in [31:16] of 32-bit chunks in
Rs1 with the 16-bit signed integer element in [31:16] of 32-bit chunks in Rs2, and subtracts the 16-bit
signed integer element in [15:0] of 32-bit chunks in Rs2 from the 16-bit signed integer element in
[15:0] of 32-bit chunks in Rs1. The element results are first arithmetically right-shifted by 1 bit and
then written to [31:16] of 32-bit chunks in Rd and [15:0] of 32-bit chunks in Rd.

<strong>Examples</strong>:\n
@code 
Please see `RADD16` and `RSUB16` instructions.
@endcode

<strong>Operations</strong>:\n
@code 
Rd.W[x][31:16] = (Rs1.W[x][31:16] + Rs2.W[x][31:16]) s>> 1;
Rd.W[x][15:0] = (Rs1.W[x][15:0] - Rs2.W[x][15:0]) s>> 1;
for RV32, x=0
for RV64, x=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1gaf9b70a84f1b52fd578ffe432f7bb0492';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_RSTSA16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '6672';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RSTSA16 (SIMD 16-bit Signed Halving Straight Subtraction & Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
RSTSA16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit signed integer element subtraction and 16-bit signed integer element addition in
a 32-bit chunk simultaneously. Operands are from corresponding positions in 32-bit chunks. The
results are halved to avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction subtracts the 16-bit signed integer element in [31:16] of 32-bit chunks
in Rs2 from the 16-bit signed integer element in [31:16] of 32-bit chunks in Rs1, and adds the 16-bit
signed element integer in [15:0] of 32-bit chunks in Rs1 with the 16-bit signed integer element in
[15:0] of 32-bit chunks in Rs2. The two results are first arithmetically right-shifted by 1 bit and then
written to [31:16] of 32-bit chunks in Rd and [15:0] of 32-bit chunks in Rd.

<strong>Examples</strong>:\n
@code 
Please see `RADD16` and `RSUB16` instructions.
@endcode

<strong>Operations</strong>:\n
@code 
Rd.W[x][31:16] = (Rs1.W[x][31:16] - Rs2.W[x][31:16]) s>> 1;
Rd.W[x][15:0] = (Rs1.W[x][15:0] + Rs2.W[x][15:0]) s>> 1;
for RV32, x=0
for RV64, x=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__ADDSUB_1gae3a2b016b3af39c178ef275c7e939bb3';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_RSUB8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '6719';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RSUB8 (SIMD 8-bit Signed Halving Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
RSUB8 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 8-bit signed integer element subtractions simultaneously. The results are halved to
avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction subtracts the 8-bit signed integer elements in Rs2 from the 8-bit
signed integer elements in Rs1. The results are first arithmetically right-shifted by 1 bit and then
written to Rd.

<strong>Examples</strong>:\n
@code 
* Rs1 = 0x7F, Rs2 = 0x80, Rd = 0x7F
* Rs1 = 0x80, Rs2 = 0x7F, Rd = 0x80
* Rs1= 0x80, Rs2 = 0x40, Rd = 0xA0
@endcode

<strong>Operations</strong>:\n
@code 
Rd.B[x] = (Rs1.B[x] - Rs2.B[x]) s>> 1;
for RV32: x=3...0,
for RV64: x=7...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1gabb7544dfa512a408384621aee3956fe0';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_RSUB16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '6766';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RSUB16 (SIMD 16-bit Signed Halving Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
RSUB16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit signed integer element subtractions simultaneously. The results are halved to
avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction subtracts the 16-bit signed integer elements in Rs2 from the 16-bit
signed integer elements in Rs1. The results are first arithmetically right-shifted by 1 bit and then
written to Rd.

<strong>Examples</strong>:\n
@code 
* Ra = 0x7FFF, Rb = 0x8000, Rt = 0x7FFF
* Ra = 0x8000, Rb = 0x7FFF, Rt = 0x8000
* Ra = 0x8000, Rb = 0x4000, Rt = 0xA000
@endcode

<strong>Operations</strong>:\n
@code 
Rd.H[x] = (Rs1.H[x] - Rs2.H[x]) s>> 1;
for RV32: x=1...0,
for RV64: x=3...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__64B__ADDSUB_1gafc5f4bf4b712ae2559a30356fc9773a8';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_RSUB64';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '6820';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RSUB64 (64-bit Signed Halving Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (64-bit Profile)

<strong>Syntax</strong>:\n
@code 
RSUB64 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Perform a 64-bit signed integer subtraction. The result is halved to avoid overflow or
saturation.

<strong>RV32 Description</strong>:\n
This instruction subtracts the 64-bit signed integer of an even/odd pair of
registers specified by Rb(4,1) from the 64-bit signed integer of an even/odd pair of registers
specified by Ra(4,1). The subtraction result is first arithmetically right-shifted by 1 bit and then
written to an even/odd pair of registers specified by Rt(4,1).
Rx(4,1), i.e., value d, determines the even/odd pair group of two registers. Specifically, the register
pair includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the high 32-bit of the result and the even <tt>2d</tt> register
of the pair contains the low 32-bit of the result.

<strong>RV64 Description</strong>:\n
This instruction subtracts the 64-bit signed integer in Rs2 from the 64-bit signed
integer in Rs1. The 64-bit subtraction result is first arithmetically right-shifted by 1 bit and then
written to Rd.

<strong>Operations</strong>:\n
@code 
RV32:
t_L = CONCAT(Rd(4,1),1'b0); t_H = CONCAT(Rd(4,1),1'b1);
a_L = CONCAT(Rs1(4,1),1'b0); a_H = CONCAT(Rs1(4,1),1'b1);
b_L = CONCAT(Rs2(4,1),1'b0); b_H = CONCAT(Rs2(4,1),1'b1);
R[t_H].R[t_L] = (R[a_H].R[a_L] - R[b_H].R[b_L]) s>> 1;
RV64:
Rd = (Rs1 - Rs2) s>> 1;
@endcode

@param [in]  a    long long type of value stored in a
@param [in]  b    long long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__32B__COMPUTATION_1gad19388580ce1a2cc1afee60f9d73e60c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_RSUBW';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '6868';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RSUBW (32-bit Signed Halving Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
RSUBW Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Subtract 32-bit signed integers and the result is halved to avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction subtracts the first 32-bit signed integer in Rs2 from the first 32-bit
signed integer in Rs1. The result is first arithmetically right-shifted by 1 bit and then sign-extended
and written to Rd.

<strong>Examples</strong>:\n
@code 
* Rs1 = 0x7FFFFFFF, Rs2 = 0x80000000, Rd = 0x7FFFFFFF
* Rs1 = 0x80000000, Rs2 = 0x7FFFFFFF, Rd = 0x80000000
* Rs1 = 0x80000000, Rs2 = 0x40000000, Rd = 0xA0000000
@endcode

<strong>Operations</strong>:\n
@code 
RV32:
Rd[31:0] = (Rs1[31:0] - Rs2[31:0]) s>> 1;
RV64:
resw[31:0] = (Rs1[31:0] - Rs2[31:0]) s>> 1;
Rd[63:0] = SE(resw[31:0]);
@endcode

@param [in]  a    int type of value stored in a
@param [in]  b    int type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__CMP_1ga0b086037e48ff8891523b74b07154810';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SCMPLE8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '7055';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SCMPLE8 (SIMD 8-bit Signed Compare Less Than & Equal)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
SCMPLE8 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 8-bit signed integer elements less than & equal comparisons simultaneously.

<strong>Description</strong>:\n
This instruction compares the 8-bit signed integer elements in Rs1 with the 8-bit
signed integer elements in Rs2 to see if the one in Rs1 is less than or equal to the one in Rs2. If it is
true, the result is 0xFF; otherwise, the result is 0x0. The element comparison results are written to
Rd

<strong>Operations</strong>:\n
@code 
Rd.B[x] = (Rs1.B[x] {le} Rs2.B[x])? 0xff : 0x0;
for RV32: x=3...0,
for RV64: x=7...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__CMP_1gad86adb4c738c71d2b9c07e44fb02113c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SCMPLE16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '7095';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SCMPLE16 (SIMD 16-bit Signed Compare Less Than & Equal)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
SCMPLE16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit signed integer elements less than & equal comparisons simultaneously.

<strong>Description</strong>:\n
This instruction compares the 16-bit signed integer elements in Rs1 with the 16-bit
signed integer elements in Rs2 to see if the one in Rs1 is less than or equal to the one in Rs2. If it is
true, the result is 0xFFFF; otherwise, the result is 0x0. The element comparison results are written
to Rd.

<strong>Operations</strong>:\n
@code 
Rd.H[x] = (Rs1.H[x] {le} Rs2.H[x])? 0xffff : 0x0;
for RV32: x=1...0,
for RV64: x=3...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__CMP_1ga7a01ed10478504e9703dafdccc415ab6';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SCMPLT8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '7134';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SCMPLT8 (SIMD 8-bit Signed Compare Less Than)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
SCMPLT8 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 8-bit signed integer elements less than comparisons simultaneously.

<strong>Description</strong>:\n
This instruction compares the 8-bit signed integer elements in Rs1 with the 8-bit
signed integer elements in Rs2 to see if the one in Rs1 is less than the one in Rs2. If it is true, the
result is 0xFF; otherwise, the result is 0x0. The element comparison results are written to Rd.

<strong>Operations</strong>:\n
@code 
Rd.B[x] = (Rs1.B[x] < Rs2.B[x])? 0xff : 0x0;
for RV32: x=3...0,
for RV64: x=7...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__CMP_1ga18887b352c5dbe9535424bee83bf7d42';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SCMPLT16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '7173';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SCMPLT16 (SIMD 16-bit Signed Compare Less Than)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
SCMPLT16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit signed integer elements less than comparisons simultaneously.

<strong>Description</strong>:\n
This instruction compares the 16-bit signed integer elements in Rs1 with the two 16-
bit signed integer elements in Rs2 to see if the one in Rs1 is less than the one in Rs2. If it is true, the
result is 0xFFFF; otherwise, the result is 0x0. The element comparison results are written to Rd.

<strong>Operations</strong>:\n
@code 
Rd.H[x] = (Rs1.H[x] < Rs2.H[x])? 0xffff : 0x0;
for RV32: x=1...0,
for RV64: x=3...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1ga99febdacba921c09aff588332a658fba';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SLL8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '7214';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SLL8 (SIMD 8-bit Shift Left Logical)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
SLL8 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 8-bit elements logical left shift operations simultaneously. The shift amount is a
variable from a GPR.

<strong>Description</strong>:\n
The 8-bit elements in Rs1 are left-shifted logically. And the results are written to Rd.
The shifted out bits are filled with zero and the shift amount is specified by the low-order 3-bits of
the value in the Rs2 register.

<strong>Operations</strong>:\n
@code 
sa = Rs2[2:0];
Rd.B[x] = Rs1.B[x] << sa;
for RV32: x=3...0,
for RV64: x=7...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1ga567ef612a72bcfbdc3a12a55bafb3b8c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SLL16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '7296';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SLL16 (SIMD 16-bit Shift Left Logical)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
SLL16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit elements logical left shift operations simultaneously. The shift amount is a
variable from a GPR.

<strong>Description</strong>:\n
The 16-bit elements in Rs1 are left-shifted logically. And the results are written to Rd.
The shifted out bits are filled with zero and the shift amount is specified by the low-order 4-bits of
the value in the Rs2 register.

<strong>Operations</strong>:\n
@code 
sa = Rs2[3:0];
Rd.H[x] = Rs1.H[x] << sa;
for RV32: x=1...0,
for RV64: x=3...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__64B__ADDSUB_1ga4161cf3c9857cbef8d23b6a8e09b49d2';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMAL';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '7397';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMAL (Signed Multiply Halfs & Add 64-bit)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: Partial-SIMD

<strong>Syntax</strong>:\n
@code 
SMAL Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed bottom 16-bit content of the 32-bit elements of a register with the top
16-bit content of the same 32-bit elements of the same register, and add the results with a 64-bit
value of an even/odd pair of registers (RV32) or a register (RV64). The addition result is written back
to another even/odd pair of registers (RV32) or a register (RV64).

<strong>RV32 Description</strong>:\n
This instruction multiplies the bottom 16-bit content of the lower 32-bit of Rs2 with the top 16-bit
content of the lower 32-bit of Rs2 and adds the result with the 64-bit value of an even/odd pair of
registers specified by Rs1(4,1). The 64-bit addition result is written back to an even/odd pair of
registers specified by Rd(4,1). The 16-bit values of Rs2, and the 64-bit value of the Rs1(4,1) register-
pair are treated as signed integers.
Rx(4,1), i.e., d, determines the even/odd pair group of the two registers. Specifically, the register pair
includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the high 32-bit of the operand and the even <tt>2d</tt>
register of the pair contains the low 32-bit of the operand.

<strong>RV64 Description</strong>:\n
This instruction multiplies the bottom 16-bit content of the 32-bit elements of Rs2 with the top 16-bit
content of the same 32-bit elements of Rs2 and adds the results with the 64-bit value of Rs1. The 64-
bit addition result is written back to Rd. The 16-bit values of Rs2, and the 64-bit value of Rs1 are
treated as signed integers.

<strong>Operations</strong>:\n
@code 
RV32:
Mres[31:0] = Rs2.H[1] * Rs2.H[0];
Idx0 = CONCAT(Rs1(4,1),1'b0); Idx1 = CONCAT(Rs1(4,1),1'b1); +
Idx2 = CONCAT(Rd(4,1),1'b0); Idx3 = CONCAT(Rd(4,1),1'b1);
R[Idx3].R[Idx2] = R[Idx1].R[Idx0] + SE64(Mres[31:0]);
RV64:
Mres[0][31:0] = Rs2.W[0].H[1] * Rs2.W[0].H[0];
Mres[1][31:0] = Rs2.W[1].H[1] * Rs2.W[1].H[0];
Rd = Rs1 + SE64(Mres[1][31:0]) + SE64(Mres[0][31:0]);
@endcode

@param [in]  a    long long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__64B__ADDSUB_1gaceb791bc1a33f08f2abc7c5ec16c1a8f';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMALBB';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '7480';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMALBB (Signed Multiply Bottom Halfs & Add 64-bit)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (64-bit Profile)

<strong>Syntax</strong>:\n
@code 
SMALBB Rd, Rs1, Rs2
SMALBT Rd, Rs1, Rs2
SMALTT Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 16-bit content of the 32-bit elements of a register with the 16-bit
content of the corresponding 32-bit elements of another register and add the results with a 64-bit
value of an even/odd pair of registers (RV32) or a register (RV64). The addition result is written back
to the register-pair (RV32) or the register (RV64).
* SMALBB: rt pair + bottom*bottom (all 32-bit elements)
* SMALBT rt pair + bottom*top (all 32-bit elements)
* SMALTT rt pair + top*top (all 32-bit elements)

<strong>RV32 Description</strong>:\n
For the <tt>SMALBB</tt> instruction, it multiplies the bottom 16-bit content of Rs1 with the bottom 16-bit
content of Rs2.
For the <tt>SMALBT</tt> instruction, it multiplies the bottom 16-bit content of Rs1 with the top 16-bit
content of Rs2.
For the <tt>SMALTT</tt> instruction, it multiplies the top 16-bit content of Rs1 with the top 16-bit content
of Rs2.
The multiplication result is added with the 64-bit value of an even/odd pair of registers specified by
Rd(4,1). The 64-bit addition result is written back to the register-pair. The 16-bit values of Rs1 and
Rs2, and the 64-bit value of the register-pair are treated as signed integers.
Rd(4,1), i.e., d, determines the even/odd pair group of the two registers. Specifically, the register pair
includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the high 32-bit of the operand and the even <tt>2d</tt>
register of the pair contains the low 32-bit of the operand.

<strong>RV64 Description</strong>:\n
For the <tt>SMALBB</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the bottom 16-bit content of the 32-bit elements of Rs2.
For the <tt>SMALBT</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the top 16-bit content of the 32-bit elements of Rs2.
For the <tt>SMALTT</tt> instruction, it multiplies the top 16-bit content of the 32-bit elements of Rs1 with
the top 16-bit content of the 32-bit elements of Rs2.
The multiplication results are added with the 64-bit value of Rd. The 64-bit addition result is written
back to Rd. The 16-bit values of Rs1 and Rs2, and the 64-bit value of Rd are treated as signed
integers.

<strong>Operations</strong>:\n
@code 
RV32:
Mres[31:0] = Rs1.H[0] * Rs2.H[0]; // SMALBB
Mres[31:0] = Rs1.H[0] * Rs2.H[1]; // SMALBT
Mres[31:0] = Rs1.H[1] * Rs2.H[1]; // SMALTT
Idx0 = CONCAT(Rd(4,1),1'b0); Idx1 = CONCAT(Rd(4,1),1'b1);
R[Idx1].R[Idx0] = R[Idx1].R[Idx0] + SE64(Mres[31:0]);
RV64:
// SMALBB
Mres[0][31:0] = Rs1.W[0].H[0] * Rs2.W[0].H[0];
Mres[1][31:0] = Rs1.W[1].H[0] * Rs2.W[1].H[0];
// SMALBT
Mres[0][31:0] = Rs1.W[0].H[0] * Rs2.W[0].H[1];
Mres[1][31:0] = Rs1.W[1].H[0] * Rs2.W[1].H[1];
// SMALTT
Mres[0][31:0] = Rs1.W[0].H[1] * Rs2.W[0].H[1];
Mres[1][31:0] = Rs1.W[1].H[1] * Rs2.W[1].H[1];
Rd = Rd + SE64(Mres[0][31:0]) + SE64(Mres[1][31:0]);
@endcode

@param [in]  t    long long type of value stored in t
@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__64B__ADDSUB_1ga74fe212140384150726143f2f43c900f';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMALBT';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '7562';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMALBT (Signed Multiply Bottom Half & Top Half & Add 64-bit)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (64-bit Profile)

<strong>Syntax</strong>:\n
@code 
SMALBB Rd, Rs1, Rs2
SMALBT Rd, Rs1, Rs2
SMALTT Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 16-bit content of the 32-bit elements of a register with the 16-bit
content of the corresponding 32-bit elements of another register and add the results with a 64-bit
value of an even/odd pair of registers (RV32) or a register (RV64). The addition result is written back
to the register-pair (RV32) or the register (RV64).
* SMALBB: rt pair + bottom*bottom (all 32-bit elements)
* SMALBT rt pair + bottom*top (all 32-bit elements)
* SMALTT rt pair + top*top (all 32-bit elements)

<strong>RV32 Description</strong>:\n
For the <tt>SMALBB</tt> instruction, it multiplies the bottom 16-bit content of Rs1 with the bottom 16-bit
content of Rs2.
For the <tt>SMALBT</tt> instruction, it multiplies the bottom 16-bit content of Rs1 with the top 16-bit
content of Rs2.
For the <tt>SMALTT</tt> instruction, it multiplies the top 16-bit content of Rs1 with the top 16-bit content
of Rs2.
The multiplication result is added with the 64-bit value of an even/odd pair of registers specified by
Rd(4,1). The 64-bit addition result is written back to the register-pair. The 16-bit values of Rs1 and
Rs2, and the 64-bit value of the register-pair are treated as signed integers.
Rd(4,1), i.e., d, determines the even/odd pair group of the two registers. Specifically, the register pair
includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the high 32-bit of the operand and the even <tt>2d</tt>
register of the pair contains the low 32-bit of the operand.

<strong>RV64 Description</strong>:\n
For the <tt>SMALBB</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the bottom 16-bit content of the 32-bit elements of Rs2.
For the <tt>SMALBT</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the top 16-bit content of the 32-bit elements of Rs2.
For the <tt>SMALTT</tt> instruction, it multiplies the top 16-bit content of the 32-bit elements of Rs1 with
the top 16-bit content of the 32-bit elements of Rs2.
The multiplication results are added with the 64-bit value of Rd. The 64-bit addition result is written
back to Rd. The 16-bit values of Rs1 and Rs2, and the 64-bit value of Rd are treated as signed
integers.

<strong>Operations</strong>:\n
@code 
RV32:
Mres[31:0] = Rs1.H[0] * Rs2.H[0]; // SMALBB
Mres[31:0] = Rs1.H[0] * Rs2.H[1]; // SMALBT
Mres[31:0] = Rs1.H[1] * Rs2.H[1]; // SMALTT
Idx0 = CONCAT(Rd(4,1),1'b0); Idx1 = CONCAT(Rd(4,1),1'b1);
R[Idx1].R[Idx0] = R[Idx1].R[Idx0] + SE64(Mres[31:0]);
RV64:
// SMALBB
Mres[0][31:0] = Rs1.W[0].H[0] * Rs2.W[0].H[0];
Mres[1][31:0] = Rs1.W[1].H[0] * Rs2.W[1].H[0];
// SMALBT
Mres[0][31:0] = Rs1.W[0].H[0] * Rs2.W[0].H[1];
Mres[1][31:0] = Rs1.W[1].H[0] * Rs2.W[1].H[1];
// SMALTT
Mres[0][31:0] = Rs1.W[0].H[1] * Rs2.W[0].H[1];
Mres[1][31:0] = Rs1.W[1].H[1] * Rs2.W[1].H[1];
Rd = Rd + SE64(Mres[0][31:0]) + SE64(Mres[1][31:0]);
@endcode

@param [in]  t    long long type of value stored in t
@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__64B__ADDSUB_1ga39331e38421eb5f882a615941cf00444';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMALTT';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '7644';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMALTT (Signed Multiply Top Halfs & Add 64-bit)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (64-bit Profile)

<strong>Syntax</strong>:\n
@code 
SMALBB Rd, Rs1, Rs2
SMALBT Rd, Rs1, Rs2
SMALTT Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 16-bit content of the 32-bit elements of a register with the 16-bit
content of the corresponding 32-bit elements of another register and add the results with a 64-bit
value of an even/odd pair of registers (RV32) or a register (RV64). The addition result is written back
to the register-pair (RV32) or the register (RV64).
* SMALBB: rt pair + bottom*bottom (all 32-bit elements)
* SMALBT rt pair + bottom*top (all 32-bit elements)
* SMALTT rt pair + top*top (all 32-bit elements)

<strong>RV32 Description</strong>:\n
For the <tt>SMALBB</tt> instruction, it multiplies the bottom 16-bit content of Rs1 with the bottom 16-bit
content of Rs2.
For the <tt>SMALBT</tt> instruction, it multiplies the bottom 16-bit content of Rs1 with the top 16-bit
content of Rs2.
For the <tt>SMALTT</tt> instruction, it multiplies the top 16-bit content of Rs1 with the top 16-bit content
of Rs2.
The multiplication result is added with the 64-bit value of an even/odd pair of registers specified by
Rd(4,1). The 64-bit addition result is written back to the register-pair. The 16-bit values of Rs1 and
Rs2, and the 64-bit value of the register-pair are treated as signed integers.
Rd(4,1), i.e., d, determines the even/odd pair group of the two registers. Specifically, the register pair
includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the high 32-bit of the operand and the even <tt>2d</tt>
register of the pair contains the low 32-bit of the operand.

<strong>RV64 Description</strong>:\n
For the <tt>SMALBB</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the bottom 16-bit content of the 32-bit elements of Rs2.
For the <tt>SMALBT</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the top 16-bit content of the 32-bit elements of Rs2.
For the <tt>SMALTT</tt> instruction, it multiplies the top 16-bit content of the 32-bit elements of Rs1 with
the top 16-bit content of the 32-bit elements of Rs2.
The multiplication results are added with the 64-bit value of Rd. The 64-bit addition result is written
back to Rd. The 16-bit values of Rs1 and Rs2, and the 64-bit value of Rd are treated as signed
integers.

<strong>Operations</strong>:\n
@code 
RV32:
Mres[31:0] = Rs1.H[0] * Rs2.H[0]; // SMALBB
Mres[31:0] = Rs1.H[0] * Rs2.H[1]; // SMALBT
Mres[31:0] = Rs1.H[1] * Rs2.H[1]; // SMALTT
Idx0 = CONCAT(Rd(4,1),1'b0); Idx1 = CONCAT(Rd(4,1),1'b1);
R[Idx1].R[Idx0] = R[Idx1].R[Idx0] + SE64(Mres[31:0]);
RV64:
// SMALBB
Mres[0][31:0] = Rs1.W[0].H[0] * Rs2.W[0].H[0];
Mres[1][31:0] = Rs1.W[1].H[0] * Rs2.W[1].H[0];
// SMALBT
Mres[0][31:0] = Rs1.W[0].H[0] * Rs2.W[0].H[1];
Mres[1][31:0] = Rs1.W[1].H[0] * Rs2.W[1].H[1];
// SMALTT
Mres[0][31:0] = Rs1.W[0].H[1] * Rs2.W[0].H[1];
Mres[1][31:0] = Rs1.W[1].H[1] * Rs2.W[1].H[1];
Rd = Rd + SE64(Mres[0][31:0]) + SE64(Mres[1][31:0]);
@endcode

@param [in]  t    long long type of value stored in t
@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__64B__ADDSUB_1ga8320e2679cb96ee46fcaf761925b8708';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMALDA';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '7728';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMALDA (Signed Multiply Two Halfs and Two Adds 64-bit)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (64-bit Profile)

<strong>Syntax</strong>:\n
@code 
SMALDA Rd, Rs1, Rs2
SMALXDA Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 16-bit multiplications from the 32-bit elements of two registers; and then
adds the two 32-bit results and the 64-bit value of an even/odd pair of registers together.
* SMALDA: rt pair+ top*top + bottom*bottom (all 32-bit elements)
* SMALXDA: rt pair+ top*bottom + bottom*top (all 32-bit elements)

<strong>RV32 Description</strong>:\n
For the <tt>SMALDA</tt> instruction, it multiplies the bottom 16-bit content of Rs1 with the bottom 16-bit
content of Rs2 and then adds the result to the result of multiplying the top 16-bit content of Rs1 with
the top 16-bit content of Rs2 with unlimited precision.
For the <tt>SMALXDA</tt> instruction, it multiplies the top 16-bit content of Rs1 with the bottom 16-bit
content of Rs2 and then adds the result to the result of multiplying the bottom 16-bit content of Rs1
with the top 16-bit content of Rs2 with unlimited precision.
The result is added to the 64-bit value of an even/odd pair of registers specified by Rd(4,1). The 64-
bit addition result is written back to the register-pair. The 16-bit values of Rs1 and Rs2, and the 64-
bit value of the register-pair are treated as signed integers.
Rd(4,1), i.e., d, determines the even/odd pair group of the two registers. Specifically, the register pair
includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the high 32-bit of the operand and the even <tt>2d</tt>
register of the pair contains the low 32-bit of the operand.

<strong>RV64 Description</strong>:\n
For the <tt>SMALDA</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the bottom 16-bit content of the 32-bit elements of Rs2 and then adds the result to the result of
multiplying the top 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the 32-
bit elements of Rs2 with unlimited precision.
For the <tt>SMALXDA</tt> instruction, it multiplies the top 16-bit content of the 32-bit elements of Rs1
with the bottom 16-bit content of the 32-bit elements of Rs2 and then adds the result to the result of
multiplying the bottom 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the
32-bit elements of Rs2 with unlimited precision.
The results are added to the 64-bit value of Rd. The 64-bit addition result is written back to Rd. The
16-bit values of Rs1 and Rs2, and the 64-bit value of Rd are treated as signed integers.

<strong>Operations</strong>:\n
@code 
RV32:
// SMALDA
Mres0[31:0] = (Rs1.H[0] * Rs2.H[0]);
Mres1[31:0] = (Rs1.H[1] * Rs2.H[1]);
// SMALXDA
Mres0[31:0] = (Rs1.H[0] * Rs2.H[1]);
Mres1[31:0] = (Rs1.H[1] * Rs2.H[0]);
Idx0 = CONCAT(Rd(4,1),1'b0); Idx1 = CONCAT(Rd(4,1),1'b1);
R[Idx1].R[Idx0] = R[Idx1].R[Idx0] + SE64(Mres0[31:0]) + SE64(Mres1[31:0]);
RV64:
// SMALDA
Mres0[0][31:0] = (Rs1.W[0].H[0] * Rs2.W[0].H[0]);
Mres1[0][31:0] = (Rs1.W[0].H[1] * Rs2.W[0].H[1]);
Mres0[1][31:0] = (Rs1.W[1].H[0] * Rs2.W[1].H[0]);
Mres1[1][31:0] = (Rs1.W[1].H[1] * Rs2.W[1].H[1]);
// SMALXDA
Mres0[0][31:0] = (Rs1.W[0].H[0] * Rs2.W[0].H[1]);
Mres1[0][31:0] = (Rs1.W[0].H[1] * Rs2.W[0].H[0]);
Mres0[1][31:0] = (Rs1.W[1].H[0] * Rs2.W[1].H[1]);
Mres1[1][31:0] = (Rs1.W[1].H[1] * Rs2.W[1].H[0]);
Rd = Rd + SE64(Mres0[0][31:0]) + SE64(Mres1[0][31:0]) + SE64(Mres0[1][31:0]) +
SE64(Mres1[1][31:0]);
@endcode

@param [in]  t    long long type of value stored in t
@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__64B__ADDSUB_1ga18e89f90f0b3e3d8c34ceb33b671a61b';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMALXDA';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '7812';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMALXDA (Signed Crossed Multiply Two Halfs and Two Adds 64-bit)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (64-bit Profile)

<strong>Syntax</strong>:\n
@code 
SMALDA Rd, Rs1, Rs2
SMALXDA Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 16-bit multiplications from the 32-bit elements of two registers; and then
adds the two 32-bit results and the 64-bit value of an even/odd pair of registers together.
* SMALDA: rt pair+ top*top + bottom*bottom (all 32-bit elements)
* SMALXDA: rt pair+ top*bottom + bottom*top (all 32-bit elements)

<strong>RV32 Description</strong>:\n
For the <tt>SMALDA</tt> instruction, it multiplies the bottom 16-bit content of Rs1 with the bottom 16-bit
content of Rs2 and then adds the result to the result of multiplying the top 16-bit content of Rs1 with
the top 16-bit content of Rs2 with unlimited precision.
For the <tt>SMALXDA</tt> instruction, it multiplies the top 16-bit content of Rs1 with the bottom 16-bit
content of Rs2 and then adds the result to the result of multiplying the bottom 16-bit content of Rs1
with the top 16-bit content of Rs2 with unlimited precision.
The result is added to the 64-bit value of an even/odd pair of registers specified by Rd(4,1). The 64-
bit addition result is written back to the register-pair. The 16-bit values of Rs1 and Rs2, and the 64-
bit value of the register-pair are treated as signed integers.
Rd(4,1), i.e., d, determines the even/odd pair group of the two registers. Specifically, the register pair
includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the high 32-bit of the operand and the even <tt>2d</tt>
register of the pair contains the low 32-bit of the operand.

<strong>RV64 Description</strong>:\n
For the <tt>SMALDA</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the bottom 16-bit content of the 32-bit elements of Rs2 and then adds the result to the result of
multiplying the top 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the 32-
bit elements of Rs2 with unlimited precision.
For the <tt>SMALXDA</tt> instruction, it multiplies the top 16-bit content of the 32-bit elements of Rs1
with the bottom 16-bit content of the 32-bit elements of Rs2 and then adds the result to the result of
multiplying the bottom 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the
32-bit elements of Rs2 with unlimited precision.
The results are added to the 64-bit value of Rd. The 64-bit addition result is written back to Rd. The
16-bit values of Rs1 and Rs2, and the 64-bit value of Rd are treated as signed integers.

<strong>Operations</strong>:\n
@code 
RV32:
// SMALDA
Mres0[31:0] = (Rs1.H[0] * Rs2.H[0]);
Mres1[31:0] = (Rs1.H[1] * Rs2.H[1]);
// SMALXDA
Mres0[31:0] = (Rs1.H[0] * Rs2.H[1]);
Mres1[31:0] = (Rs1.H[1] * Rs2.H[0]);
Idx0 = CONCAT(Rd(4,1),1'b0); Idx1 = CONCAT(Rd(4,1),1'b1);
R[Idx1].R[Idx0] = R[Idx1].R[Idx0] + SE64(Mres0[31:0]) + SE64(Mres1[31:0]);
RV64:
// SMALDA
Mres0[0][31:0] = (Rs1.W[0].H[0] * Rs2.W[0].H[0]);
Mres1[0][31:0] = (Rs1.W[0].H[1] * Rs2.W[0].H[1]);
Mres0[1][31:0] = (Rs1.W[1].H[0] * Rs2.W[1].H[0]);
Mres1[1][31:0] = (Rs1.W[1].H[1] * Rs2.W[1].H[1]);
// SMALXDA
Mres0[0][31:0] = (Rs1.W[0].H[0] * Rs2.W[0].H[1]);
Mres1[0][31:0] = (Rs1.W[0].H[1] * Rs2.W[0].H[0]);
Mres0[1][31:0] = (Rs1.W[1].H[0] * Rs2.W[1].H[1]);
Mres1[1][31:0] = (Rs1.W[1].H[1] * Rs2.W[1].H[0]);
Rd = Rd + SE64(Mres0[0][31:0]) + SE64(Mres1[0][31:0]) + SE64(Mres0[1][31:0]) +
SE64(Mres1[1][31:0]);
@endcode

@param [in]  t    long long type of value stored in t
@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__64B__ADDSUB_1ga68b7e1927e142a46a1e3132a7e04b777';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMALDS';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '7903';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMALDS (Signed Multiply Two Halfs & Subtract & Add 64-bit)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (64-bit Profile)

<strong>Syntax</strong>:\n
@code 
SMALDS Rd, Rs1, Rs2
SMALDRS Rd, Rs1, Rs2
SMALXDS Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 16-bit multiplications from the 32-bit elements of two registers; and then
perform a subtraction operation between the two 32-bit results. Then add the subtraction result to
the 64-bit value of an even/odd pair of registers (RV32) or a register (RV64). The addition result is
written back to the register-pair.
* SMALDS: rt pair + (top*top - bottom*bottom) (all 32-bit elements)
* SMALDRS: rt pair + (bottom*bottom - top*top) (all 32-bit elements)
* SMALXDS: rt pair + (top*bottom - bottom*top) (all 32-bit elements)

<strong>RV32 Description</strong>:\n
For the <tt>SMALDS</tt> instruction, it multiplies the bottom 16-bit content of Rs1 with the bottom 16-bit
content of Rs2 and then subtracts the result from the result of multiplying the top 16-bit content of
Rs1 with the top 16-bit content of Rs2.
For the <tt>SMALDRS</tt> instruction, it multiplies the top 16-bit content of Rs1 with the top 16-bit content
of Rs2 and then subtracts the result from the result of multiplying the bottom 16-bit content of Rs1
with the bottom 16-bit content of Rs2.
For the <tt>SMALXDS</tt> instruction, it multiplies the bottom 16-bit content of Rs1 with the top 16-bit
content of Rs2 and then subtracts the result from the result of multiplying the top 16-bit content of
Rs1 with the bottom 16-bit content of Rs2.
The subtraction result is then added to the 64-bit value of an even/odd pair of registers specified by
Rd(4,1). The 64-bit addition result is written back to the register-pair. The 16-bit values of Rs1 and
Rs2, and the 64-bit value of the register-pair are treated as signed integers.
Rd(4,1), i.e., d, determines the even/odd pair group of the two registers. Specifically, the register pair
includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the high 32-bit of the operand and the even <tt>2d</tt>
register of the pair contains the low 32-bit of the operand.

<strong>RV64 Description</strong>:\n
For the <tt>SMALDS</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the bottom 16-bit content of the 32-bit elements of Rs2 and then subtracts the result from the
result of multiplying the top 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content
of the 32-bit elements of Rs2.
For the <tt>SMALDRS</tt> instruction, it multiplies the top 16-bit content of the 32-bit elements of Rs1 with
the top 16-bit content of the 32-bit elements of Rs2 and then subtracts the result from the result of
multiplying the bottom 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit content of
the 32-bit elements of Rs2.
For the <tt>SMALXDS</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the top 16-bit content of the 32-bit elements of Rs2 and then subtracts the result from the
result of multiplying the top 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit
content of the 32-bit elements of Rs2.
The subtraction results are then added to the 64-bit value of Rd. The 64-bit addition result is written
back to Rd. The 16-bit values of Rs1 and Rs2, and the 64-bit value of Rd are treated as signed
integers.

<strong>Operations</strong>:\n
@code 
* RV32:
Mres[31:0] = (Rs1.H[1] * Rs2.H[1]) - (Rs1.H[0] * Rs2.H[0]); // SMALDS
Mres[31:0] = (Rs1.H[0] * Rs2.H[0]) - (Rs1.H[1] * Rs2.H[1]); // SMALDRS
Mres[31:0] = (Rs1.H[1] * Rs2.H[0]) - (Rs1.H[0] * Rs2.H[1]); // SMALXDS
Idx0 = CONCAT(Rd(4,1),1'b0); Idx1 = CONCAT(Rd(4,1),1'b1);
R[Idx1].R[Idx0] = R[Idx1].R[Idx0] + SE64(Mres[31:0]);
* RV64:
// SMALDS
Mres[0][31:0] = (Rs1.W[0].H[1] * Rs2.W[0].H[1]) - (Rs1.W[0].H[0] * Rs2.W[0].H[0]);
Mres[1][31:0] = (Rs1.W[1].H[1] * Rs2.W[0].H[1]) - (Rs1.W[1].H[0] * Rs2.W[1].H[0]);
// SMALDRS
Mres[0][31:0] = (Rs1.W[0].H[0] * Rs2.W[0].H[0]) - (Rs1.W[0].H[1] * Rs2.W[0].H[1]);
Mres[1][31:0] = (Rs1.W[1].H[0] * Rs2.W[0].H[0]) - (Rs1.W[1].H[1] * Rs2.W[1].H[1]);
// SMALXDS
Mres[0][31:0] = (Rs1.W[0].H[1] * Rs2.W[0].H[0]) - (Rs1.W[0].H[0] * Rs2.W[0].H[1]);
Mres[1][31:0] = (Rs1.W[1].H[1] * Rs2.W[0].H[0]) - (Rs1.W[1].H[0] * Rs2.W[1].H[1]);
Rd = Rd + SE64(Mres[0][31:0]) + SE64(Mres[1][31:0]);
@endcode

@param [in]  t    long long type of value stored in t
@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__64B__ADDSUB_1ga9e334955371767a38c1e7069a42025c8';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMALDRS';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '7994';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMALDRS (Signed Multiply Two Halfs & Reverse Subtract & Add 64- bit)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (64-bit Profile)

<strong>Syntax</strong>:\n
@code 
SMALDS Rd, Rs1, Rs2
SMALDRS Rd, Rs1, Rs2
SMALXDS Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 16-bit multiplications from the 32-bit elements of two registers; and then
perform a subtraction operation between the two 32-bit results. Then add the subtraction result to
the 64-bit value of an even/odd pair of registers (RV32) or a register (RV64). The addition result is
written back to the register-pair.
* SMALDS: rt pair + (top*top - bottom*bottom) (all 32-bit elements)
* SMALDRS: rt pair + (bottom*bottom - top*top) (all 32-bit elements)
* SMALXDS: rt pair + (top*bottom - bottom*top) (all 32-bit elements)

<strong>RV32 Description</strong>:\n
For the <tt>SMALDS</tt> instruction, it multiplies the bottom 16-bit content of Rs1 with the bottom 16-bit
content of Rs2 and then subtracts the result from the result of multiplying the top 16-bit content of
Rs1 with the top 16-bit content of Rs2.
For the <tt>SMALDRS</tt> instruction, it multiplies the top 16-bit content of Rs1 with the top 16-bit content
of Rs2 and then subtracts the result from the result of multiplying the bottom 16-bit content of Rs1
with the bottom 16-bit content of Rs2.
For the <tt>SMALXDS</tt> instruction, it multiplies the bottom 16-bit content of Rs1 with the top 16-bit
content of Rs2 and then subtracts the result from the result of multiplying the top 16-bit content of
Rs1 with the bottom 16-bit content of Rs2.
The subtraction result is then added to the 64-bit value of an even/odd pair of registers specified by
Rd(4,1). The 64-bit addition result is written back to the register-pair. The 16-bit values of Rs1 and
Rs2, and the 64-bit value of the register-pair are treated as signed integers.
Rd(4,1), i.e., d, determines the even/odd pair group of the two registers. Specifically, the register pair
includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the high 32-bit of the operand and the even <tt>2d</tt>
register of the pair contains the low 32-bit of the operand.

<strong>RV64 Description</strong>:\n
For the <tt>SMALDS</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the bottom 16-bit content of the 32-bit elements of Rs2 and then subtracts the result from the
result of multiplying the top 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content
of the 32-bit elements of Rs2.
For the <tt>SMALDRS</tt> instruction, it multiplies the top 16-bit content of the 32-bit elements of Rs1 with
the top 16-bit content of the 32-bit elements of Rs2 and then subtracts the result from the result of
multiplying the bottom 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit content of
the 32-bit elements of Rs2.
For the <tt>SMALXDS</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the top 16-bit content of the 32-bit elements of Rs2 and then subtracts the result from the
result of multiplying the top 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit
content of the 32-bit elements of Rs2.
The subtraction results are then added to the 64-bit value of Rd. The 64-bit addition result is written
back to Rd. The 16-bit values of Rs1 and Rs2, and the 64-bit value of Rd are treated as signed
integers.

<strong>Operations</strong>:\n
@code 
* RV32:
Mres[31:0] = (Rs1.H[1] * Rs2.H[1]) - (Rs1.H[0] * Rs2.H[0]); // SMALDS
Mres[31:0] = (Rs1.H[0] * Rs2.H[0]) - (Rs1.H[1] * Rs2.H[1]); // SMALDRS
Mres[31:0] = (Rs1.H[1] * Rs2.H[0]) - (Rs1.H[0] * Rs2.H[1]); // SMALXDS
Idx0 = CONCAT(Rd(4,1),1'b0); Idx1 = CONCAT(Rd(4,1),1'b1);
R[Idx1].R[Idx0] = R[Idx1].R[Idx0] + SE64(Mres[31:0]);
* RV64:
// SMALDS
Mres[0][31:0] = (Rs1.W[0].H[1] * Rs2.W[0].H[1]) - (Rs1.W[0].H[0] * Rs2.W[0].H[0]);
Mres[1][31:0] = (Rs1.W[1].H[1] * Rs2.W[0].H[1]) - (Rs1.W[1].H[0] * Rs2.W[1].H[0]);
// SMALDRS
Mres[0][31:0] = (Rs1.W[0].H[0] * Rs2.W[0].H[0]) - (Rs1.W[0].H[1] * Rs2.W[0].H[1]);
Mres[1][31:0] = (Rs1.W[1].H[0] * Rs2.W[0].H[0]) - (Rs1.W[1].H[1] * Rs2.W[1].H[1]);
// SMALXDS
Mres[0][31:0] = (Rs1.W[0].H[1] * Rs2.W[0].H[0]) - (Rs1.W[0].H[0] * Rs2.W[0].H[1]);
Mres[1][31:0] = (Rs1.W[1].H[1] * Rs2.W[0].H[0]) - (Rs1.W[1].H[0] * Rs2.W[1].H[1]);
Rd = Rd + SE64(Mres[0][31:0]) + SE64(Mres[1][31:0]);
@endcode

@param [in]  t    long long type of value stored in t
@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__64B__ADDSUB_1gaf31ec8bdff7f1f55254aaeb13979c70c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMALXDS';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '8085';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMALXDS (Signed Crossed Multiply Two Halfs & Subtract & Add 64- bit)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (64-bit Profile)

<strong>Syntax</strong>:\n
@code 
SMALDS Rd, Rs1, Rs2
SMALDRS Rd, Rs1, Rs2
SMALXDS Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 16-bit multiplications from the 32-bit elements of two registers; and then
perform a subtraction operation between the two 32-bit results. Then add the subtraction result to
the 64-bit value of an even/odd pair of registers (RV32) or a register (RV64). The addition result is
written back to the register-pair.
* SMALDS: rt pair + (top*top - bottom*bottom) (all 32-bit elements)
* SMALDRS: rt pair + (bottom*bottom - top*top) (all 32-bit elements)
* SMALXDS: rt pair + (top*bottom - bottom*top) (all 32-bit elements)

<strong>RV32 Description</strong>:\n
For the <tt>SMALDS</tt> instruction, it multiplies the bottom 16-bit content of Rs1 with the bottom 16-bit
content of Rs2 and then subtracts the result from the result of multiplying the top 16-bit content of
Rs1 with the top 16-bit content of Rs2.
For the <tt>SMALDRS</tt> instruction, it multiplies the top 16-bit content of Rs1 with the top 16-bit content
of Rs2 and then subtracts the result from the result of multiplying the bottom 16-bit content of Rs1
with the bottom 16-bit content of Rs2.
For the <tt>SMALXDS</tt> instruction, it multiplies the bottom 16-bit content of Rs1 with the top 16-bit
content of Rs2 and then subtracts the result from the result of multiplying the top 16-bit content of
Rs1 with the bottom 16-bit content of Rs2.
The subtraction result is then added to the 64-bit value of an even/odd pair of registers specified by
Rd(4,1). The 64-bit addition result is written back to the register-pair. The 16-bit values of Rs1 and
Rs2, and the 64-bit value of the register-pair are treated as signed integers.
Rd(4,1), i.e., d, determines the even/odd pair group of the two registers. Specifically, the register pair
includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the high 32-bit of the operand and the even <tt>2d</tt>
register of the pair contains the low 32-bit of the operand.

<strong>RV64 Description</strong>:\n
For the <tt>SMALDS</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the bottom 16-bit content of the 32-bit elements of Rs2 and then subtracts the result from the
result of multiplying the top 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content
of the 32-bit elements of Rs2.
For the <tt>SMALDRS</tt> instruction, it multiplies the top 16-bit content of the 32-bit elements of Rs1 with
the top 16-bit content of the 32-bit elements of Rs2 and then subtracts the result from the result of
multiplying the bottom 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit content of
the 32-bit elements of Rs2.
For the <tt>SMALXDS</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the top 16-bit content of the 32-bit elements of Rs2 and then subtracts the result from the
result of multiplying the top 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit
content of the 32-bit elements of Rs2.
The subtraction results are then added to the 64-bit value of Rd. The 64-bit addition result is written
back to Rd. The 16-bit values of Rs1 and Rs2, and the 64-bit value of Rd are treated as signed
integers.

<strong>Operations</strong>:\n
@code 
* RV32:
Mres[31:0] = (Rs1.H[1] * Rs2.H[1]) - (Rs1.H[0] * Rs2.H[0]); // SMALDS
Mres[31:0] = (Rs1.H[0] * Rs2.H[0]) - (Rs1.H[1] * Rs2.H[1]); // SMALDRS
Mres[31:0] = (Rs1.H[1] * Rs2.H[0]) - (Rs1.H[0] * Rs2.H[1]); // SMALXDS
Idx0 = CONCAT(Rd(4,1),1'b0); Idx1 = CONCAT(Rd(4,1),1'b1);
R[Idx1].R[Idx0] = R[Idx1].R[Idx0] + SE64(Mres[31:0]);
* RV64:
// SMALDS
Mres[0][31:0] = (Rs1.W[0].H[1] * Rs2.W[0].H[1]) - (Rs1.W[0].H[0] * Rs2.W[0].H[0]);
Mres[1][31:0] = (Rs1.W[1].H[1] * Rs2.W[0].H[1]) - (Rs1.W[1].H[0] * Rs2.W[1].H[0]);
// SMALDRS
Mres[0][31:0] = (Rs1.W[0].H[0] * Rs2.W[0].H[0]) - (Rs1.W[0].H[1] * Rs2.W[0].H[1]);
Mres[1][31:0] = (Rs1.W[1].H[0] * Rs2.W[0].H[0]) - (Rs1.W[1].H[1] * Rs2.W[1].H[1]);
// SMALXDS
Mres[0][31:0] = (Rs1.W[0].H[1] * Rs2.W[0].H[0]) - (Rs1.W[0].H[0] * Rs2.W[0].H[1]);
Mres[1][31:0] = (Rs1.W[1].H[1] * Rs2.W[0].H[0]) - (Rs1.W[1].H[0] * Rs2.W[1].H[1]);
Rd = Rd + SE64(Mres[0][31:0]) + SE64(Mres[1][31:0]);
@endcode

@param [in]  t    long long type of value stored in t
@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__32B__MULT__64B__ADDSUB_1ga89c1afcd9898226795ae2112d2fbea40';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMAR64';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '8137';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMAR64 (Signed Multiply and Add to 64-Bit Data)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (64-bit Profile)

<strong>Syntax</strong>:\n
@code 
SMAR64 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the 32-bit signed elements in two registers and add the 64-bit multiplication
result to the 64-bit signed data of a pair of registers (RV32) or a register (RV64). The result is written
back to the pair of registers (RV32) or a register (RV64).

<strong>RV32 Description</strong>:\n
This instruction multiplies the 32-bit signed data of Rs1 with that of Rs2. It adds
the 64-bit multiplication result to the 64-bit signed data of an even/odd pair of registers specified by
Rd(4,1). The addition result is written back to the even/odd pair of registers specified by Rd(4,1).
Rx(4,1), i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair
includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the high 32-bit of the result and the even <tt>2d</tt> register
of the pair contains the low 32-bit of the result.

<strong>RV64 Description</strong>:\n
This instruction multiplies the 32-bit signed elements of Rs1 with that of Rs2. It
adds the 64-bit multiplication results to the 64-bit signed data of Rd. The addition result is written
back to Rd.

<strong>Operations</strong>:\n
@code 
* RV32:
t_L = CONCAT(Rd(4,1),1'b0); t_H = CONCAT(Rd(4,1),1'b1);
R[t_H].R[t_L] = R[t_H].R[t_L] + (Rs1 * Rs2);
* RV64:
Rd = Rd + (Rs1.W[0] * Rs2.W[0]) + (Rs1.W[1] * Rs2.W[1]);
@endcode

@param [in]  t    long long type of value stored in t
@param [in]  a    long type of value stored in a
@param [in]  b    long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__8B__MULT__32B__ADD_1ga08927c1a80a7e90b4bf485ece9ff01f3';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMAQA';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '8181';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMAQA (Signed Multiply Four Bytes with 32-bit Adds)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: Partial-SIMD (Reduction)

<strong>Syntax</strong>:\n
@code 
SMAQA Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do four signed 8-bit multiplications from 32-bit chunks of two registers; and then adds
the four 16-bit results and the content of corresponding 32-bit chunks of a third register together.

<strong>Description</strong>:\n
This instruction multiplies the four signed 8-bit elements of 32-bit chunks of Rs1 with the four
signed 8-bit elements of 32-bit chunks of Rs2 and then adds the four results together with the signed
content of the corresponding 32-bit chunks of Rd. The final results are written back to the
corresponding 32-bit chunks in Rd.

<strong>Operations</strong>:\n
@code 
res[x] = Rd.W[x] +
   (Rs1.W[x].B[3] s* Rs2.W[x].B[3]) + (Rs1.W[x].B[2] s* Rs2.W[x].B[2]) +
   (Rs1.W[x].B[1] s* Rs2.W[x].B[1]) + (Rs1.W[x].B[0] s* Rs2.W[x].B[0]);
Rd.W[x] = res[x];
for RV32: x=0,
for RV64: x=1,0
@endcode

@param [in]  t    long type of value stored in t
@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__8B__MULT__32B__ADD_1ga7354acb478473376227c883968d8b78d';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMAQA_SU';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '8226';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMAQA.SU (Signed and Unsigned Multiply Four Bytes with 32-bit Adds)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: Partial-SIMD (Reduction)

<strong>Syntax</strong>:\n
@code 
SMAQA.SU Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do four <tt>signed x unsigned</tt> 8-bit multiplications from 32-bit chunks of two registers; and
then adds the four 16-bit results and the content of corresponding 32-bit chunks of a third register
together.

<strong>Description</strong>:\n
This instruction multiplies the four signed 8-bit elements of 32-bit chunks of Rs1 with the four
unsigned 8-bit elements of 32-bit chunks of Rs2 and then adds the four results together with the
signed content of the corresponding 32-bit chunks of Rd. The final results are written back to the
corresponding 32-bit chunks in Rd.

<strong>Operations</strong>:\n
@code 
res[x] = Rd.W[x] +
   (Rs1.W[x].B[3] su* Rs2.W[x].B[3]) + (Rs1.W[x].B[2] su* Rs2.W[x].B[2]) +
   (Rs1.W[x].B[1] su* Rs2.W[x].B[1]) + (Rs1.W[x].B[0] su* Rs2.W[x].B[0]);
Rd.W[x] = res[x];
for RV32: x=0,
for RV64: x=1...0
@endcode

@param [in]  t    long type of value stored in t
@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MISC_1gafc3ca4c25f1796c6c129b0a72fdb4ddc';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMAX8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '8264';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMAX8 (SIMD 8-bit Signed Maximum)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
SMAX8 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 8-bit signed integer elements finding maximum operations simultaneously.

<strong>Description</strong>:\n
This instruction compares the 8-bit signed integer elements in Rs1 with the 8-bit
signed integer elements in Rs2 and selects the numbers that is greater than the other one. The
selected results are written to Rd.

<strong>Operations</strong>:\n
@code 
Rd.B[x] = (Rs1.B[x] > Rs2.B[x])? Rs1.B[x] : Rs2.B[x];
for RV32: x=3...0,
for RV64: x=7...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MISC_1ga9fefb44ce69dae8452a1f78462b36ace';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMAX16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '8303';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMAX16 (SIMD 16-bit Signed Maximum)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
SMAX16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit signed integer elements finding maximum operations simultaneously.

<strong>Description</strong>:\n
This instruction compares the 16-bit signed integer elements in Rs1 with the 16-bit
signed integer elements in Rs2 and selects the numbers that is greater than the other one. The
selected results are written to Rd.

<strong>Operations</strong>:\n
@code 
Rd.H[x] = (Rs1.H[x] > Rs2.H[x])? Rs1.H[x] : Rs2.H[x];
for RV32: x=1...0,
for RV64: x=3...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga6078c3498de77bbaeabbf7017fa023ab';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMBB16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '8355';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMBB16 (SIMD Signed Multiply Bottom Half & Bottom Half)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
SMBB16 Rd, Rs1, Rs2
SMBT16 Rd, Rs1, Rs2
SMTT16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 16-bit content of the 32-bit elements of a register with the signed 16-
bit content of the 32-bit elements of another register and write the result to a third register.
* SMBB16: W[x].bottom*W[x].bottom
* SMBT16: W[x].bottom *W[x].top
* SMTT16: W[x].top * W[x].top

<strong>Description</strong>:\n
For the <tt>SMBB16</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the bottom 16-bit content of the 32-bit elements of Rs2.
For the <tt>SMBT16</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the top 16-bit content of the 32-bit elements of Rs2.
For the <tt>SMTT16</tt> instruction, it multiplies the top 16-bit content of the 32-bit elements of Rs1 with
the top 16-bit content of the 32-bit elements of Rs2.
The multiplication results are written to Rd. The 16-bit contents of Rs1 and Rs2 are treated as signed
integers.

<strong>Operations</strong>:\n
@code 
Rd.W[x] = Rs1.W[x].H[0] * Rs2.W[x].H[0]; // SMBB16
Rd.W[x] = Rs1.W[x].H[0] * Rs2.W[x].H[1]; // SMBT16
Rd.W[x] = Rs1.W[x].H[1] * Rs2.W[x].H[1]; // SMTT16
for RV32: x=0,
for RV64: x=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga2f8364cbb057b9952017ad1bd3230a5e';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMBT16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '8407';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMBT16 (SIMD Signed Multiply Bottom Half & Top Half)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
SMBB16 Rd, Rs1, Rs2
SMBT16 Rd, Rs1, Rs2
SMTT16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 16-bit content of the 32-bit elements of a register with the signed 16-
bit content of the 32-bit elements of another register and write the result to a third register.
* SMBB16: W[x].bottom*W[x].bottom
* SMBT16: W[x].bottom *W[x].top
* SMTT16: W[x].top * W[x].top

<strong>Description</strong>:\n
For the <tt>SMBB16</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the bottom 16-bit content of the 32-bit elements of Rs2.
For the <tt>SMBT16</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the top 16-bit content of the 32-bit elements of Rs2.
For the <tt>SMTT16</tt> instruction, it multiplies the top 16-bit content of the 32-bit elements of Rs1 with
the top 16-bit content of the 32-bit elements of Rs2.
The multiplication results are written to Rd. The 16-bit contents of Rs1 and Rs2 are treated as signed
integers.

<strong>Operations</strong>:\n
@code 
Rd.W[x] = Rs1.W[x].H[0] * Rs2.W[x].H[0]; // SMBB16
Rd.W[x] = Rs1.W[x].H[0] * Rs2.W[x].H[1]; // SMBT16
Rd.W[x] = Rs1.W[x].H[1] * Rs2.W[x].H[1]; // SMTT16
for RV32: x=0,
for RV64: x=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1gab253cabd0fb5ac51b6b897cd3e8d6e0f';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMTT16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '8459';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMTT16 (SIMD Signed Multiply Top Half & Top Half)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
SMBB16 Rd, Rs1, Rs2
SMBT16 Rd, Rs1, Rs2
SMTT16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 16-bit content of the 32-bit elements of a register with the signed 16-
bit content of the 32-bit elements of another register and write the result to a third register.
* SMBB16: W[x].bottom*W[x].bottom
* SMBT16: W[x].bottom *W[x].top
* SMTT16: W[x].top * W[x].top

<strong>Description</strong>:\n
For the <tt>SMBB16</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the bottom 16-bit content of the 32-bit elements of Rs2.
For the <tt>SMBT16</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the top 16-bit content of the 32-bit elements of Rs2.
For the <tt>SMTT16</tt> instruction, it multiplies the top 16-bit content of the 32-bit elements of Rs1 with
the top 16-bit content of the 32-bit elements of Rs2.
The multiplication results are written to Rd. The 16-bit contents of Rs1 and Rs2 are treated as signed
integers.

<strong>Operations</strong>:\n
@code 
Rd.W[x] = Rs1.W[x].H[0] * Rs2.W[x].H[0]; // SMBB16
Rd.W[x] = Rs1.W[x].H[0] * Rs2.W[x].H[1]; // SMBT16
Rd.W[x] = Rs1.W[x].H[1] * Rs2.W[x].H[1]; // SMTT16
for RV32: x=0,
for RV64: x=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga056df0d47cc4dcef5739bb15f2a324ac';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMDS';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '8518';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMDS (SIMD Signed Multiply Two Halfs and Subtract)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
SMDS Rd, Rs1, Rs2
SMDRS Rd, Rs1, Rs2
SMXDS Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 16-bit multiplications from the 32-bit elements of two registers; and then
perform a subtraction operation between the two 32-bit results.
* SMDS: top*top - bottom*bottom (per 32-bit element)
* SMDRS: bottom*bottom - top*top (per 32-bit element)
* SMXDS: top*bottom - bottom*top (per 32-bit element)

<strong>Description</strong>:\n
For the <tt>SMDS</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1 with
the bottom 16-bit content of the 32-bit elements of Rs2 and then subtracts the result from the result
of multiplying the top 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the
32-bit elements of Rs2.
For the <tt>SMDRS</tt> instruction, it multiplies the top 16-bit content of the 32-bit elements of Rs1 with
the top 16-bit content of the 32-bit elements of Rs2 and then subtracts the result from the result of
multiplying the bottom 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit content of
the 32-bit elements of Rs2.
For the <tt>SMXDS</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the top 16-bit content of the 32-bit elements of Rs2 and then subtracts the result from the
result of multiplying the top 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit
content of the 32-bit elements of Rs2.
The subtraction result is written to the corresponding 32-bit element of Rd. The 16-bit contents of
multiplication are treated as signed integers.

<strong>Operations</strong>:\n
@code 
* SMDS:
Rd.W[x] = (Rs1.W[x].H[1] * Rs2.W[x].H[1]) - (Rs1.W[x].H[0] * Rs2.W[x].H[0]);
* SMDRS:
Rd.W[x] = (Rs1.W[x].H[0] * Rs2.W[x].H[0]) - (Rs1.W[x].H[1] * Rs2.W[x].H[1]);
* SMXDS:
Rd.W[x] = (Rs1.W[x].H[1] * Rs2.W[x].H[0]) - (Rs1.W[x].H[0] * Rs2.W[x].H[1]);
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1gafab251aa9c5e64dc004c9dc3b8c7c0dd';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMDRS';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '8577';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMDRS (SIMD Signed Multiply Two Halfs and Reverse Subtract)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
SMDS Rd, Rs1, Rs2
SMDRS Rd, Rs1, Rs2
SMXDS Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 16-bit multiplications from the 32-bit elements of two registers; and then
perform a subtraction operation between the two 32-bit results.
* SMDS: top*top - bottom*bottom (per 32-bit element)
* SMDRS: bottom*bottom - top*top (per 32-bit element)
* SMXDS: top*bottom - bottom*top (per 32-bit element)

<strong>Description</strong>:\n
For the <tt>SMDS</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1 with
the bottom 16-bit content of the 32-bit elements of Rs2 and then subtracts the result from the result
of multiplying the top 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the
32-bit elements of Rs2.
For the <tt>SMDRS</tt> instruction, it multiplies the top 16-bit content of the 32-bit elements of Rs1 with
the top 16-bit content of the 32-bit elements of Rs2 and then subtracts the result from the result of
multiplying the bottom 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit content of
the 32-bit elements of Rs2.
For the <tt>SMXDS</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the top 16-bit content of the 32-bit elements of Rs2 and then subtracts the result from the
result of multiplying the top 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit
content of the 32-bit elements of Rs2.
The subtraction result is written to the corresponding 32-bit element of Rd. The 16-bit contents of
multiplication are treated as signed integers.

<strong>Operations</strong>:\n
@code 
* SMDS:
Rd.W[x] = (Rs1.W[x].H[1] * Rs2.W[x].H[1]) - (Rs1.W[x].H[0] * Rs2.W[x].H[0]);
* SMDRS:
Rd.W[x] = (Rs1.W[x].H[0] * Rs2.W[x].H[0]) - (Rs1.W[x].H[1] * Rs2.W[x].H[1]);
* SMXDS:
Rd.W[x] = (Rs1.W[x].H[1] * Rs2.W[x].H[0]) - (Rs1.W[x].H[0] * Rs2.W[x].H[1]);
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga45c60f7cb5ae0e2ddaeca68e0a76283b';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMXDS';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '8636';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMXDS (SIMD Signed Crossed Multiply Two Halfs and Subtract)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
SMDS Rd, Rs1, Rs2
SMDRS Rd, Rs1, Rs2
SMXDS Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 16-bit multiplications from the 32-bit elements of two registers; and then
perform a subtraction operation between the two 32-bit results.
* SMDS: top*top - bottom*bottom (per 32-bit element)
* SMDRS: bottom*bottom - top*top (per 32-bit element)
* SMXDS: top*bottom - bottom*top (per 32-bit element)

<strong>Description</strong>:\n
For the <tt>SMDS</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1 with
the bottom 16-bit content of the 32-bit elements of Rs2 and then subtracts the result from the result
of multiplying the top 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the
32-bit elements of Rs2.
For the <tt>SMDRS</tt> instruction, it multiplies the top 16-bit content of the 32-bit elements of Rs1 with
the top 16-bit content of the 32-bit elements of Rs2 and then subtracts the result from the result of
multiplying the bottom 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit content of
the 32-bit elements of Rs2.
For the <tt>SMXDS</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the top 16-bit content of the 32-bit elements of Rs2 and then subtracts the result from the
result of multiplying the top 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit
content of the 32-bit elements of Rs2.
The subtraction result is written to the corresponding 32-bit element of Rd. The 16-bit contents of
multiplication are treated as signed integers.

<strong>Operations</strong>:\n
@code 
* SMDS:
Rd.W[x] = (Rs1.W[x].H[1] * Rs2.W[x].H[1]) - (Rs1.W[x].H[0] * Rs2.W[x].H[0]);
* SMDRS:
Rd.W[x] = (Rs1.W[x].H[0] * Rs2.W[x].H[0]) - (Rs1.W[x].H[1] * Rs2.W[x].H[1]);
* SMXDS:
Rd.W[x] = (Rs1.W[x].H[1] * Rs2.W[x].H[0]) - (Rs1.W[x].H[0] * Rs2.W[x].H[1]);
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MISC_1ga3b9ace3565fb4cea93a55736046498e7';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMIN8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '8675';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMIN8 (SIMD 8-bit Signed Minimum)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
SMIN8 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 8-bit signed integer elements finding minimum operations simultaneously.

<strong>Description</strong>:\n
This instruction compares the 8-bit signed integer elements in Rs1 with the 8-bit
signed integer elements in Rs2 and selects the numbers that is less than the other one. The selected
results are written to Rd.

<strong>Operations</strong>:\n
@code 
Rd.B[x] = (Rs1.B[x] < Rs2.B[x])? Rs1.B[x] : Rs2.B[x];
for RV32: x=3...0,
for RV64: x=7...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MISC_1ga5b8419c5f8c624d1a0e16c43efb798eb';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMIN16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '8714';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMIN16 (SIMD 16-bit Signed Minimum)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
SMIN16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit signed integer elements finding minimum operations simultaneously.

<strong>Description</strong>:\n
This instruction compares the 16-bit signed integer elements in Rs1 with the 16-bit
signed integer elements in Rs2 and selects the numbers that is less than the other one. The selected
results are written to Rd.

<strong>Operations</strong>:\n
@code 
Rd.H[x] = (Rs1.H[x] < Rs2.H[x])? Rs1.H[x] : Rs2.H[x];
for RV32: x=1...0,
for RV64: x=3...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X32__MAC_1ga17b1cc8cce90ea3852050e9ec0b28795';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMMUL';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '8765';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMMUL (SIMD MSW Signed Multiply Word)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
SMMUL Rd, Rs1, Rs2
SMMUL.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the 32-bit signed integer elements of two registers and write the most significant
32-bit results to the corresponding 32-bit elements of a register. The <tt>.u</tt> form performs an
additional rounding up operation on the multiplication results before taking the most significant
32-bit part of the results.

<strong>Description</strong>:\n
This instruction multiplies the 32-bit elements of Rs1 with the 32-bit elements of Rs2 and writes the
most significant 32-bit multiplication results to the corresponding 32-bit elements of Rd. The 32-bit
elements of Rs1 and Rs2 are treated as signed integers. The <tt>.u</tt> form of the instruction rounds up
the most significant 32-bit of the 64-bit multiplication results by adding a 1 to bit 31 of the results.
* For <tt>smmul/RV32</tt> instruction, it is an alias to <tt>mulh/RV32</tt> instruction.

<strong>Operations</strong>:\n
@code 
Mres[x][63:0] = Rs1.W[x] * Rs2.W[x];
if (`.u` form) {
  Round[x][32:0] = Mres[x][63:31] + 1;
  Rd.W[x] = Round[x][32:1];
} else {
  Rd.W[x] = Mres[x][63:32];
}
for RV32: x=0
for RV64: x=1...0
@endcode

@param [in]  a    long type of value stored in a
@param [in]  b    long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X32__MAC_1ga18c56b42dfb546e0a39ee1a0554e6e0b';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMMUL_U';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '8816';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMMUL.u (SIMD MSW Signed Multiply Word with Rounding)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
SMMUL Rd, Rs1, Rs2
SMMUL.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the 32-bit signed integer elements of two registers and write the most significant
32-bit results to the corresponding 32-bit elements of a register. The <tt>.u</tt> form performs an
additional rounding up operation on the multiplication results before taking the most significant
32-bit part of the results.

<strong>Description</strong>:\n
This instruction multiplies the 32-bit elements of Rs1 with the 32-bit elements of Rs2 and writes the
most significant 32-bit multiplication results to the corresponding 32-bit elements of Rd. The 32-bit
elements of Rs1 and Rs2 are treated as signed integers. The <tt>.u</tt> form of the instruction rounds up
the most significant 32-bit of the 64-bit multiplication results by adding a 1 to bit 31 of the results.
* For <tt>smmul/RV32</tt> instruction, it is an alias to <tt>mulh/RV32</tt> instruction.

<strong>Operations</strong>:\n
@code 
Mres[x][63:0] = Rs1.W[x] * Rs2.W[x];
if (`.u` form) {
  Round[x][32:0] = Mres[x][63:31] + 1;
  Rd.W[x] = Round[x][32:1];
} else {
  Rd.W[x] = Mres[x][63:32];
}
for RV32: x=0
for RV64: x=1...0
@endcode

@param [in]  a    long type of value stored in a
@param [in]  b    long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1ga9842af8b6adf990ea70a5261e546a26c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMMWB';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '8866';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMMWB (SIMD MSW Signed Multiply Word and Bottom Half)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
SMMWB Rd, Rs1, Rs2
SMMWB.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit integer elements of one register and the bottom 16-bit of the
corresponding 32-bit elements of another register, and write the most significant 32-bit results to
the corresponding 32-bit elements of a register. The <tt>.u</tt> form rounds up the results from the most
significant discarded bit.

<strong>Description</strong>:\n
This instruction multiplies the signed 32-bit elements of Rs1 with the signed bottom 16-bit content
of the corresponding 32-bit elements of Rs2 and writes the most significant 32-bit multiplication
results to the corresponding 32-bit elements of Rd. The <tt>.u</tt> form of the instruction rounds up the
most significant 32-bit of the 48-bit multiplication results by adding a 1 to bit 15 of the results.

<strong>Operations</strong>:\n
@code 
Mres[x][47:0] = Rs1.W[x] * Rs2.W[x].H[0];
if (`.u` form) {
  Round[x][32:0] = Mres[x][47:15] + 1;
  Rd.W[x] = Round[x][32:1];
} else {
  Rd.W[x] = Mres[x][47:16];
}
for RV32: x=0
for RV64: x=1...0
@endcode

@param [in]  a    long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1ga4b7617e39d73f38ac27a24644008aacd';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMMWB_U';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '8916';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMMWB.u (SIMD MSW Signed Multiply Word and Bottom Half with Rounding)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
SMMWB Rd, Rs1, Rs2
SMMWB.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit integer elements of one register and the bottom 16-bit of the
corresponding 32-bit elements of another register, and write the most significant 32-bit results to
the corresponding 32-bit elements of a register. The <tt>.u</tt> form rounds up the results from the most
significant discarded bit.

<strong>Description</strong>:\n
This instruction multiplies the signed 32-bit elements of Rs1 with the signed bottom 16-bit content
of the corresponding 32-bit elements of Rs2 and writes the most significant 32-bit multiplication
results to the corresponding 32-bit elements of Rd. The <tt>.u</tt> form of the instruction rounds up the
most significant 32-bit of the 48-bit multiplication results by adding a 1 to bit 15 of the results.

<strong>Operations</strong>:\n
@code 
Mres[x][47:0] = Rs1.W[x] * Rs2.W[x].H[0];
if (`.u` form) {
  Round[x][32:0] = Mres[x][47:15] + 1;
  Rd.W[x] = Round[x][32:1];
} else {
  Rd.W[x] = Mres[x][47:16];
}
for RV32: x=0
for RV64: x=1...0
@endcode

@param [in]  a    long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1ga92298c74bc685e608de8c743f4348940';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMMWT';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '8966';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMMWT (SIMD MSW Signed Multiply Word and Top Half)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
SMMWT Rd, Rs1, Rs2
SMMWT.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit integer elements of one register and the top 16-bit of the
corresponding 32-bit elements of another register, and write the most significant 32-bit results to
the corresponding 32-bit elements of a register. The <tt>.u</tt> form rounds up the results from the most
significant discarded bit.

<strong>Description</strong>:\n
This instruction multiplies the signed 32-bit elements of Rs1 with the top signed 16-bit content of
the corresponding 32-bit elements of Rs2 and writes the most significant 32-bit multiplication
results to the corresponding 32-bit elements of Rd. The <tt>.u</tt> form of the instruction rounds up the
most significant 32-bit of the 48-bit multiplication results by adding a 1 to bit 15 of the results.

<strong>Operations</strong>:\n
@code 
Mres[x][47:0] = Rs1.W[x] * Rs2.W[x].H[1];
if (`.u` form) {
  Round[x][32:0] = Mres[x][47:15] + 1;
  Rd.W[x] = Round[x][32:1];
} else {
  Rd.W[x] = Mres[x][47:16];
}
for RV32: x=0
for RV64: x=1...0
@endcode

@param [in]  a    long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1ga75f579bae285694b96c319bd0c0daffa';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMMWT_U';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '9016';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMMWT.u (SIMD MSW Signed Multiply Word and Top Half with Rounding)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
SMMWT Rd, Rs1, Rs2
SMMWT.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit integer elements of one register and the top 16-bit of the
corresponding 32-bit elements of another register, and write the most significant 32-bit results to
the corresponding 32-bit elements of a register. The <tt>.u</tt> form rounds up the results from the most
significant discarded bit.

<strong>Description</strong>:\n
This instruction multiplies the signed 32-bit elements of Rs1 with the top signed 16-bit content of
the corresponding 32-bit elements of Rs2 and writes the most significant 32-bit multiplication
results to the corresponding 32-bit elements of Rd. The <tt>.u</tt> form of the instruction rounds up the
most significant 32-bit of the 48-bit multiplication results by adding a 1 to bit 15 of the results.

<strong>Operations</strong>:\n
@code 
Mres[x][47:0] = Rs1.W[x] * Rs2.W[x].H[1];
if (`.u` form) {
  Round[x][32:0] = Mres[x][47:15] + 1;
  Rd.W[x] = Round[x][32:1];
} else {
  Rd.W[x] = Mres[x][47:16];
}
for RV32: x=0
for RV64: x=1...0
@endcode

@param [in]  a    long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__64B__ADDSUB_1gac49482a84d29e662acb7438c5821cc8b';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMSLDA';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '9099';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMSLDA (Signed Multiply Two Halfs & Add & Subtract 64-bit)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (64-bit Profile)

<strong>Syntax</strong>:\n
@code 
SMSLDA Rd, Rs1, Rs2
SMSLXDA Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 16-bit multiplications from the 32-bit elements of two registers; and then
subtracts the two 32-bit results from the 64-bit value of an even/odd pair of registers (RV32) or a
register (RV64). The subtraction result is written back to the register-pair.
* SMSLDA: rd pair - top*top - bottom*bottom (all 32-bit elements)
* SMSLXDA: rd pair - top*bottom - bottom*top (all 32-bit elements)

<strong>RV32 Description</strong>:\n
For the <tt>SMSLDA</tt> instruction, it multiplies the bottom 16-bit content of Rs1 with the bottom 16-bit
content Rs2 and multiplies the top 16-bit content of Rs1 with the top 16-bit content of Rs2.
For the <tt>SMSLXDA</tt> instruction, it multiplies the top 16-bit content of Rs1 with the bottom 16-bit
content of Rs2 and multiplies the bottom 16-bit content of Rs1 with the top 16-bit content of Rs2.
The two multiplication results are subtracted from the 64-bit value of an even/odd pair of registers
specified by Rd(4,1). The 64-bit subtraction result is written back to the register-pair. The 16-bit
values of Rs1 and Rs2, and the 64-bit value of the register-pair are treated as signed integers.
Rd(4,1), i.e., d, determines the even/odd pair group of the two registers. Specifically, the register pair
includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the high 32-bit of the result and the even <tt>2d</tt> register
of the pair contains the low 32-bit of the result.

<strong>RV64 Description</strong>:\n
For the <tt>SMSLDA</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the bottom 16-bit content of the 32-bit elements of Rs2 and multiplies the top 16-bit content of
the 32-bit elements of Rs1 with the top 16-bit content of the 32-bit elements of Rs2.
For the <tt>SMSLXDA</tt> instruction, it multiplies the top 16-bit content of the 32-bit elements of Rs1 with
the bottom 16-bit content of the 32-bit elements of Rs2 and multiplies the bottom 16-bit content of
the 32-bit elements of Rs1 with the top 16-bit content of the 32-bit elements of Rs2.
The four multiplication results are subtracted from the 64-bit value of Rd. The 64-bit subtraction
result is written back to Rd. The 16-bit values of Rs1 and Rs2, and the 64-bit value of Rd are treated
as signed integers.

<strong>Operations</strong>:\n
@code 
* RV32:
// SMSLDA
Mres0[31:0] = (Rs1.H[0] * Rs2.H[0]);
Mres1[31:0] = (Rs1.H[1] * Rs2.H[1]);
// SMSLXDA
Mres0[31:0] = (Rs1.H[0] * Rs2.H[1]);
Mres1[31:0] = (Rs1.H[1] * Rs2.H[0]);
Idx0 = CONCAT(Rd(4,1),1'b0); Idx1 = CONCAT(Rd(4,1),1'b1);
R[Idx1].R[Idx0] = R[Idx1].R[Idx0] - SE64(Mres0[31:0]) - SE64(Mres1[31:0]);
* RV64:
// SMSLDA
Mres0[0][31:0] = (Rs1.W[0].H[0] * Rs2.W[0].H[0]);
Mres1[0][31:0] = (Rs1.W[0].H[1] * Rs2.W[0].H[1]);
Mres0[1][31:0] = (Rs1.W[1].H[0] * Rs2.W[1].H[0]);
Mres1[1][31:0] = (Rs1.W[1].H[1] * Rs2.W[1].H[1]);
// SMSLXDA
Mres0[0][31:0] = (Rs1.W[0].H[0] * Rs2.W[0].H[1]);
Mres1[0][31:0] = (Rs1.W[0].H[1] * Rs2.W[0].H[0]);
Mres0[1][31:0] = (Rs1.W[1].H[0] * Rs2.W[1].H[1]);
Mres1[1][31:0] = (Rs1.W[1].H[1] * Rs2.W[1].H[0]);
Rd = Rd - SE64(Mres0[0][31:0]) - SE64(Mres1[0][31:0]) - SE64(Mres0[1][31:0]) -
SE64(Mres1[1][31:0]);
@endcode

@param [in]  t    long long type of value stored in t
@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__64B__ADDSUB_1gad6cb1fab36698a107205e10b5ae71436';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMSLXDA';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '9181';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMSLXDA (Signed Crossed Multiply Two Halfs & Add & Subtract 64- bit)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (64-bit Profile)

<strong>Syntax</strong>:\n
@code 
SMSLDA Rd, Rs1, Rs2
SMSLXDA Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 16-bit multiplications from the 32-bit elements of two registers; and then
subtracts the two 32-bit results from the 64-bit value of an even/odd pair of registers (RV32) or a
register (RV64). The subtraction result is written back to the register-pair.
* SMSLDA: rd pair - top*top - bottom*bottom (all 32-bit elements)
* SMSLXDA: rd pair - top*bottom - bottom*top (all 32-bit elements)

<strong>RV32 Description</strong>:\n
For the <tt>SMSLDA</tt> instruction, it multiplies the bottom 16-bit content of Rs1 with the bottom 16-bit
content Rs2 and multiplies the top 16-bit content of Rs1 with the top 16-bit content of Rs2.
For the <tt>SMSLXDA</tt> instruction, it multiplies the top 16-bit content of Rs1 with the bottom 16-bit
content of Rs2 and multiplies the bottom 16-bit content of Rs1 with the top 16-bit content of Rs2.
The two multiplication results are subtracted from the 64-bit value of an even/odd pair of registers
specified by Rd(4,1). The 64-bit subtraction result is written back to the register-pair. The 16-bit
values of Rs1 and Rs2, and the 64-bit value of the register-pair are treated as signed integers.
Rd(4,1), i.e., d, determines the even/odd pair group of the two registers. Specifically, the register pair
includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the high 32-bit of the result and the even <tt>2d</tt> register
of the pair contains the low 32-bit of the result.

<strong>RV64 Description</strong>:\n
For the <tt>SMSLDA</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the bottom 16-bit content of the 32-bit elements of Rs2 and multiplies the top 16-bit content of
the 32-bit elements of Rs1 with the top 16-bit content of the 32-bit elements of Rs2.
For the <tt>SMSLXDA</tt> instruction, it multiplies the top 16-bit content of the 32-bit elements of Rs1 with
the bottom 16-bit content of the 32-bit elements of Rs2 and multiplies the bottom 16-bit content of
the 32-bit elements of Rs1 with the top 16-bit content of the 32-bit elements of Rs2.
The four multiplication results are subtracted from the 64-bit value of Rd. The 64-bit subtraction
result is written back to Rd. The 16-bit values of Rs1 and Rs2, and the 64-bit value of Rd are treated
as signed integers.

<strong>Operations</strong>:\n
@code 
* RV32:
// SMSLDA
Mres0[31:0] = (Rs1.H[0] * Rs2.H[0]);
Mres1[31:0] = (Rs1.H[1] * Rs2.H[1]);
// SMSLXDA
Mres0[31:0] = (Rs1.H[0] * Rs2.H[1]);
Mres1[31:0] = (Rs1.H[1] * Rs2.H[0]);
Idx0 = CONCAT(Rd(4,1),1'b0); Idx1 = CONCAT(Rd(4,1),1'b1);
R[Idx1].R[Idx0] = R[Idx1].R[Idx0] - SE64(Mres0[31:0]) - SE64(Mres1[31:0]);
* RV64:
// SMSLDA
Mres0[0][31:0] = (Rs1.W[0].H[0] * Rs2.W[0].H[0]);
Mres1[0][31:0] = (Rs1.W[0].H[1] * Rs2.W[0].H[1]);
Mres0[1][31:0] = (Rs1.W[1].H[0] * Rs2.W[1].H[0]);
Mres1[1][31:0] = (Rs1.W[1].H[1] * Rs2.W[1].H[1]);
// SMSLXDA
Mres0[0][31:0] = (Rs1.W[0].H[0] * Rs2.W[0].H[1]);
Mres1[0][31:0] = (Rs1.W[0].H[1] * Rs2.W[0].H[0]);
Mres0[1][31:0] = (Rs1.W[1].H[0] * Rs2.W[1].H[1]);
Mres1[1][31:0] = (Rs1.W[1].H[1] * Rs2.W[1].H[0]);
Rd = Rd - SE64(Mres0[0][31:0]) - SE64(Mres1[0][31:0]) - SE64(Mres0[1][31:0]) -
SE64(Mres1[1][31:0]);
@endcode

@param [in]  t    long long type of value stored in t
@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__32B__MULT__64B__ADDSUB_1ga97d5fc417db0b47d8ee805ef3eb9d8a2';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMSR64';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '9234';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMSR64 (Signed Multiply and Subtract from 64- Bit Data)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (64-bit Profile)

<strong>Syntax</strong>:\n
@code 
SMSR64 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the 32-bit signed elements in two registers and subtract the 64-bit multiplication
results from the 64-bit signed data of a pair of registers (RV32) or a register (RV64). The result is
written back to the pair of registers (RV32) or a register (RV64).

<strong>RV32 Description</strong>:\n
This instruction multiplies the 32-bit signed data of Rs1 with that of Rs2. It
subtracts the 64-bit multiplication result from the 64-bit signed data of an even/odd pair of registers
specified by Rd(4,1). The subtraction result is written back to the even/odd pair of registers
specified by Rd(4,1).
Rx(4,1), i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair
includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the high 32-bit of the result and the even <tt>2d</tt> register
of the pair contains the low 32-bit of the result.

<strong>RV64 Description</strong>:\n
This instruction multiplies the 32-bit signed elements of Rs1 with that of Rs2. It
subtracts the 64-bit multiplication results from the 64-bit signed data of Rd. The subtraction result is
written back to Rd.

<strong>Operations</strong>:\n
@code 
* RV32:
t_L = CONCAT(Rd(4,1),1'b0); t_H = CONCAT(Rd(4,1),1'b1);
R[t_H].R[t_L] = R[t_H].R[t_L] - (Rs1 * Rs2);
* RV64:
Rd = Rd - (Rs1.W[0] * Rs2.W[0]) - (Rs1.W[1] * Rs2.W[1]);
@endcode

@param [in]  t    long long type of value stored in t
@param [in]  a    long type of value stored in a
@param [in]  b    long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MULTIPLY_1gaa89f0815a309bf7e0c79c8ac9030c209';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMUL8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '9316';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMUL8 (SIMD Signed 8-bit Multiply)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
SMUL8 Rd, Rs1, Rs2
SMULX8 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do signed 8-bit multiplications and generate four 16-bit results simultaneously.

<strong>RV32 Description</strong>:\n
For the <tt>SMUL8</tt> instruction, multiply the 8-bit data elements of Rs1 with the
corresponding 8-bit data elements of Rs2.
For the <tt>SMULX8</tt> instruction, multiply the first and second 8-bit data elements of Rs1 with the
second and first 8-bit data elements of Rs2. At the same time, multiply the third and fourth 8-bit data
elements of Rs1 with the fourth and third 8-bit data elements of Rs2.
The four 16-bit results are then written into an even/odd pair of registers specified by Rd(4,1).
Rd(4,1), i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair
includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the two 16-bit results calculated from the top part of
Rs1 and the even <tt>2d</tt> register of the pair contains the two 16-bit results calculated from the bottom
part of Rs1.

<strong>RV64 Description</strong>:\n
For the <tt>SMUL8</tt> instruction, multiply the 8-bit data elements of Rs1 with the
corresponding 8-bit data elements of Rs2.
For the <tt>SMULX8</tt> instruction, multiply the first and second 8-bit data elements of Rs1 with the
second and first 8-bit data elements of Rs2. At the same time, multiply the third and fourth 8-bit data
elements of Rs1 with the fourth and third 8-bit data elements of Rs2.
The four 16-bit results are then written into Rd. The Rd.W[1] contains the two 16-bit results
calculated from the top part of Rs1 and the Rd.W[0] contains the two 16-bit results calculated from
the bottom part of Rs1.

<strong>Operations</strong>:\n
@code 
* RV32:
if (is `SMUL8`) {
  op1t[x/2] = Rs1.B[x+1]; op2t[x/2] = Rs2.B[x+1]; // top
  op1b[x/2] = Rs1.B[x]; op2b[x/2] = Rs2.B[x]; // bottom
} else if (is `SMULX8`) {
  op1t[x/2] = Rs1.B[x+1]; op2t[x/2] = Rs2.B[x]; // Rs1 top
  op1b[x/2] = Rs1.B[x]; op2b[x/2] = Rs2.B[x+1]; // Rs1 bottom
}
rest[x/2] = op1t[x/2] s* op2t[x/2];
resb[x/2] = op1b[x/2] s* op2b[x/2];
t_L = CONCAT(Rd(4,1),1'b0); t_H = CONCAT(Rd(4,1),1'b1);
R[t_H].H[1] = rest[1]; R[t_H].H[0] = resb[1];
R[t_L].H[1] = rest[0]; R[t_L].H[0] = resb[0];
x = 0 and 2
* RV64:
if (is `SMUL8`) {
  op1t[x/2] = Rs1.B[x+1]; op2t[x/2] = Rs2.B[x+1]; // top
  op1b[x/2] = Rs1.B[x]; op2b[x/2] = Rs2.B[x]; // bottom
} else if (is `SMULX8`) {
  op1t[x/2] = Rs1.B[x+1]; op2t[x/2] = Rs2.B[x]; // Rs1 top
  op1b[x/2] = Rs1.B[x]; op2b[x/2] = Rs2.B[x+1]; // Rs1 bottom
}
rest[x/2] = op1t[x/2] s* op2t[x/2];
resb[x/2] = op1b[x/2] s* op2b[x/2];
t_L = CONCAT(Rd(4,1),1'b0); t_H = CONCAT(Rd(4,1),1'b1);
Rd.W[1].H[1] = rest[1]; Rd.W[1].H[0] = resb[1];
Rd.W[0].H[1] = rest[0]; Rd.W[0].H[0] = resb[0];
x = 0 and 2
@endcode

@param [in]  a    unsigned int type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MULTIPLY_1ga6960884895453cad6b8ac126b66ee892';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMULX8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '9399';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMULX8 (SIMD Signed Crossed 8-bit Multiply)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
SMUL8 Rd, Rs1, Rs2
SMULX8 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do signed 8-bit multiplications and generate four 16-bit results simultaneously.

<strong>RV32 Description</strong>:\n
For the <tt>SMUL8</tt> instruction, multiply the 8-bit data elements of Rs1 with the
corresponding 8-bit data elements of Rs2.
For the <tt>SMULX8</tt> instruction, multiply the first and second 8-bit data elements of Rs1 with the
second and first 8-bit data elements of Rs2. At the same time, multiply the third and fourth 8-bit data
elements of Rs1 with the fourth and third 8-bit data elements of Rs2.
The four 16-bit results are then written into an even/odd pair of registers specified by Rd(4,1).
Rd(4,1), i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair
includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the two 16-bit results calculated from the top part of
Rs1 and the even <tt>2d</tt> register of the pair contains the two 16-bit results calculated from the bottom
part of Rs1.

<strong>RV64 Description</strong>:\n
For the <tt>SMUL8</tt> instruction, multiply the 8-bit data elements of Rs1 with the
corresponding 8-bit data elements of Rs2.
For the <tt>SMULX8</tt> instruction, multiply the first and second 8-bit data elements of Rs1 with the
second and first 8-bit data elements of Rs2. At the same time, multiply the third and fourth 8-bit data
elements of Rs1 with the fourth and third 8-bit data elements of Rs2.
The four 16-bit results are then written into Rd. The Rd.W[1] contains the two 16-bit results
calculated from the top part of Rs1 and the Rd.W[0] contains the two 16-bit results calculated from
the bottom part of Rs1.

<strong>Operations</strong>:\n
@code 
* RV32:
if (is `SMUL8`) {
  op1t[x/2] = Rs1.B[x+1]; op2t[x/2] = Rs2.B[x+1]; // top
  op1b[x/2] = Rs1.B[x]; op2b[x/2] = Rs2.B[x]; // bottom
} else if (is `SMULX8`) {
  op1t[x/2] = Rs1.B[x+1]; op2t[x/2] = Rs2.B[x]; // Rs1 top
  op1b[x/2] = Rs1.B[x]; op2b[x/2] = Rs2.B[x+1]; // Rs1 bottom
}
rest[x/2] = op1t[x/2] s* op2t[x/2];
resb[x/2] = op1b[x/2] s* op2b[x/2];
t_L = CONCAT(Rd(4,1),1'b0); t_H = CONCAT(Rd(4,1),1'b1);
R[t_H].H[1] = rest[1]; R[t_H].H[0] = resb[1];
R[t_L].H[1] = rest[0]; R[t_L].H[0] = resb[0];
x = 0 and 2
* RV64:
if (is `SMUL8`) {
  op1t[x/2] = Rs1.B[x+1]; op2t[x/2] = Rs2.B[x+1]; // top
  op1b[x/2] = Rs1.B[x]; op2b[x/2] = Rs2.B[x]; // bottom
} else if (is `SMULX8`) {
  op1t[x/2] = Rs1.B[x+1]; op2t[x/2] = Rs2.B[x]; // Rs1 top
  op1b[x/2] = Rs1.B[x]; op2b[x/2] = Rs2.B[x+1]; // Rs1 bottom
}
rest[x/2] = op1t[x/2] s* op2t[x/2];
resb[x/2] = op1b[x/2] s* op2b[x/2];
t_L = CONCAT(Rd(4,1),1'b0); t_H = CONCAT(Rd(4,1),1'b1);
Rd.W[1].H[1] = rest[1]; Rd.W[1].H[0] = resb[1];
Rd.W[0].H[1] = rest[0]; Rd.W[0].H[0] = resb[0];
x = 0 and 2
@endcode

@param [in]  a    unsigned int type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MULTIPLY_1gad0ccc8d1d7b5b8c0c2b7133b7243dc91';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMUL16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '9484';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMUL16 (SIMD Signed 16-bit Multiply)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
SMUL16 Rd, Rs1, Rs2
SMULX16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do signed 16-bit multiplications and generate two 32-bit results simultaneously.

<strong>RV32 Description</strong>:\n
For the <tt>SMUL16</tt> instruction, multiply the top 16-bit Q15 content of Rs1 with
the top 16-bit Q15 content of Rs2. At the same time, multiply the bottom 16-bit Q15 content of Rs1
with the bottom 16-bit Q15 content of Rs2.
For the <tt>SMULX16</tt> instruction, multiply the top 16-bit Q15 content of Rs1 with the bottom 16-bit
Q15 content of Rs2. At the same time, multiply the bottom 16-bit Q15 content of Rs1 with the top 16-
bit Q15 content of Rs2.
The two Q30 results are then written into an even/odd pair of registers specified by Rd(4,1). Rd(4,1),
i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair includes
register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the 32-bit result calculated from the top part of Rs1 and
the even <tt>2d</tt> register of the pair contains the 32-bit result calculated from the bottom part of Rs1.

<strong>RV64 Description</strong>:\n
For the <tt>SMUL16</tt> instruction, multiply the top 16-bit Q15 content of the lower
32-bit word in Rs1 with the top 16-bit Q15 content of the lower 32-bit word in Rs2. At the same time,
multiply the bottom 16-bit Q15 content of the lower 32-bit word in Rs1 with the bottom 16-bit Q15
content of the lower 32-bit word in Rs2.
For the <tt>SMULX16</tt> instruction, multiply the top 16-bit Q15 content of the lower 32-bit word in Rs1
with the bottom 16-bit Q15 content of the lower 32-bit word in Rs2. At the same time, multiply the
bottom 16-bit Q15 content of the lower 32-bit word in Rs1 with the top 16-bit Q15 content of the
lower 32-bit word in Rs2.
The two 32-bit Q30 results are then written into Rd. The result calculated from the top 16-bit of the
lower 32-bit word in Rs1 is written to Rd.W[1]. And the result calculated from the bottom 16-bit of
the lower 32-bit word in Rs1 is written to Rd.W[0]

<strong>Operations</strong>:\n
@code 
* RV32:
if (is `SMUL16`) {
  op1t = Rs1.H[1]; op2t = Rs2.H[1]; // top
  op1b = Rs1.H[0]; op2b = Rs2.H[0]; // bottom
} else if (is `SMULX16`) {
  op1t = Rs1.H[1]; op2t = Rs2.H[0]; // Rs1 top
  op1b = Rs1.H[0]; op2b = Rs2.H[1]; // Rs1 bottom
}
for ((aop,bop,res) in [(op1t,op2t,rest), (op1b,op2b,resb)]) {
  res = aop s* bop;
}
t_L = CONCAT(Rd(4,1),1'b0); t_H = CONCAT(Rd(4,1),1'b1);
R[t_H] = rest;
R[t_L] = resb;
* RV64:
if (is `SMUL16`) {
  op1t = Rs1.H[1]; op2t = Rs2.H[1]; // top
  op1b = Rs1.H[0]; op2b = Rs2.H[0]; // bottom
} else if (is `SMULX16`) {
  op1t = Rs1.H[1]; op2t = Rs2.H[0]; // Rs1 top
  op1b = Rs1.H[0]; op2b = Rs2.H[1]; // Rs1 bottom
}
for ((aop,bop,res) in [(op1t,op2t,rest), (op1b,op2b,resb)]) {
  res = aop s* bop;
}
Rd.W[1] = rest;
Rd.W[0] = resb;
@endcode

@param [in]  a    unsigned int type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MULTIPLY_1ga2eb023a945b38fad971202a788f3899c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMULX16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '9569';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMULX16 (SIMD Signed Crossed 16-bit Multiply)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
SMUL16 Rd, Rs1, Rs2
SMULX16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do signed 16-bit multiplications and generate two 32-bit results simultaneously.

<strong>RV32 Description</strong>:\n
For the <tt>SMUL16</tt> instruction, multiply the top 16-bit Q15 content of Rs1 with
the top 16-bit Q15 content of Rs2. At the same time, multiply the bottom 16-bit Q15 content of Rs1
with the bottom 16-bit Q15 content of Rs2.
For the <tt>SMULX16</tt> instruction, multiply the top 16-bit Q15 content of Rs1 with the bottom 16-bit
Q15 content of Rs2. At the same time, multiply the bottom 16-bit Q15 content of Rs1 with the top 16-
bit Q15 content of Rs2.
The two Q30 results are then written into an even/odd pair of registers specified by Rd(4,1). Rd(4,1),
i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair includes
register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the 32-bit result calculated from the top part of Rs1 and
the even <tt>2d</tt> register of the pair contains the 32-bit result calculated from the bottom part of Rs1.

<strong>RV64 Description</strong>:\n
For the <tt>SMUL16</tt> instruction, multiply the top 16-bit Q15 content of the lower
32-bit word in Rs1 with the top 16-bit Q15 content of the lower 32-bit word in Rs2. At the same time,
multiply the bottom 16-bit Q15 content of the lower 32-bit word in Rs1 with the bottom 16-bit Q15
content of the lower 32-bit word in Rs2.
For the <tt>SMULX16</tt> instruction, multiply the top 16-bit Q15 content of the lower 32-bit word in Rs1
with the bottom 16-bit Q15 content of the lower 32-bit word in Rs2. At the same time, multiply the
bottom 16-bit Q15 content of the lower 32-bit word in Rs1 with the top 16-bit Q15 content of the
lower 32-bit word in Rs2.
The two 32-bit Q30 results are then written into Rd. The result calculated from the top 16-bit of the
lower 32-bit word in Rs1 is written to Rd.W[1]. And the result calculated from the bottom 16-bit of
the lower 32-bit word in Rs1 is written to Rd.W[0]

<strong>Operations</strong>:\n
@code 
* RV32:
if (is `SMUL16`) {
  op1t = Rs1.H[1]; op2t = Rs2.H[1]; // top
  op1b = Rs1.H[0]; op2b = Rs2.H[0]; // bottom
} else if (is `SMULX16`) {
  op1t = Rs1.H[1]; op2t = Rs2.H[0]; // Rs1 top
  op1b = Rs1.H[0]; op2b = Rs2.H[1]; // Rs1 bottom
}
for ((aop,bop,res) in [(op1t,op2t,rest), (op1b,op2b,resb)]) {
  res = aop s* bop;
}
t_L = CONCAT(Rd(4,1),1'b0); t_H = CONCAT(Rd(4,1),1'b1);
R[t_H] = rest;
R[t_L] = resb;
* RV64:
if (is `SMUL16`) {
  op1t = Rs1.H[1]; op2t = Rs2.H[1]; // top
  op1b = Rs1.H[0]; op2b = Rs2.H[0]; // bottom
} else if (is `SMULX16`) {
  op1t = Rs1.H[1]; op2t = Rs2.H[0]; // Rs1 top
  op1b = Rs1.H[0]; op2b = Rs2.H[1]; // Rs1 bottom
}
for ((aop,bop,res) in [(op1t,op2t,rest), (op1b,op2b,resb)]) {
  res = aop s* bop;
}
Rd.W[1] = rest;
Rd.W[0] = resb;
@endcode

@param [in]  a    unsigned int type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1gac34824012cfe56f0a6fb9baf2fb1ba33';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SRA_U';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '9623';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SRA.u (Rounding Shift Right Arithmetic)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
SRA.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Perform an arithmetic right shift operation with rounding. The shift amount is a variable
from a GPR.

<strong>Description</strong>:\n
This instruction right-shifts the content of Rs1 arithmetically. The shifted out bits are
filled with the sign-bit and the shift amount is specified by the low-order 5-bits (RV32) or 6-bits
(RV64) of the Rs2 register. For the rounding operation, a value of 1 is added to the most significant
discarded bit of the data to calculate the final result. And the result is written to Rd.

<strong>Operations</strong>:\n
@code 
* RV32:
sa = Rs2[4:0];
if (sa > 0) {
  res[31:-1] = SE33(Rs1[31:(sa-1)]) + 1;
  Rd = res[31:0];
} else {
  Rd = Rs1;
}
* RV64:
sa = Rs2[5:0];
if (sa > 0) {
  res[63:-1] = SE65(Rs1[63:(sa-1)]) + 1;
  Rd = res[63:0];
} else {
  Rd = Rs1;
}
@endcode

@param [in]  a    long type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1ga60b24db284bacbf2ab9de45e0881b011';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SRA8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '9733';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SRA8 (SIMD 8-bit Shift Right Arithmetic)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
SRA8 Rd, Rs1, Rs2
SRA8.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 8-bit element arithmetic right shift operations simultaneously. The shift amount is a
variable from a GPR. The <tt>.u</tt> form performs additional rounding up operations on the shifted
results.

<strong>Description</strong>:\n
The 8-bit data elements in Rs1 are right-shifted arithmetically, that is, the shifted out
bits are filled with the sign-bit of the data elements. The shift amount is specified by the low-order
3-bits of the value in the Rs2 register. For the rounding operation of the <tt>.u</tt> form, a value of 1 is
added to the most significant discarded bit of each 8-bit data element to calculate the final results.
And the results are written to Rd.

<strong>Operations</strong>:\n
@code 
sa = Rs2[2:0];
if (sa > 0) {
  if (`.u` form) { // SRA8.u
    res[7:-1] = SE9(Rs1.B[x][7:sa-1]) + 1;
    Rd.B[x] = res[7:0];
  } else { // SRA8
    Rd.B[x] = SE8(Rd.B[x][7:sa])
  }
} else {
  Rd = Rs1;
}
for RV32: x=3...0,
for RV64: x=7...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1gad6421547bda7f5c8b4ab42d0e771daf3';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SRA8_U';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '9787';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SRA8.u (SIMD 8-bit Rounding Shift Right Arithmetic)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
SRA8 Rd, Rs1, Rs2
SRA8.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 8-bit element arithmetic right shift operations simultaneously. The shift amount is a
variable from a GPR. The <tt>.u</tt> form performs additional rounding up operations on the shifted
results.

<strong>Description</strong>:\n
The 8-bit data elements in Rs1 are right-shifted arithmetically, that is, the shifted out
bits are filled with the sign-bit of the data elements. The shift amount is specified by the low-order
3-bits of the value in the Rs2 register. For the rounding operation of the <tt>.u</tt> form, a value of 1 is
added to the most significant discarded bit of each 8-bit data element to calculate the final results.
And the results are written to Rd.

<strong>Operations</strong>:\n
@code 
sa = Rs2[2:0];
if (sa > 0) {
  if (`.u` form) { // SRA8.u
    res[7:-1] = SE9(Rs1.B[x][7:sa-1]) + 1;
    Rd.B[x] = res[7:0];
  } else { // SRA8
    Rd.B[x] = SE8(Rd.B[x][7:sa])
  }
} else {
  Rd = Rs1;
}
for RV32: x=3...0,
for RV64: x=7...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1gab98c44f440802e210dd48403997977fa';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SRA16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '9949';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SRA16 (SIMD 16-bit Shift Right Arithmetic)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
SRA16 Rd, Rs1, Rs2
SRA16.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit element arithmetic right shift operations simultaneously. The shift amount is a
variable from a GPR. The <tt>.u</tt> form performs additional rounding up operations on the shifted
results.

<strong>Description</strong>:\n
The 16-bit data elements in Rs1 are right-shifted arithmetically, that is, the shifted out
bits are filled with the sign-bit of the data elements. The shift amount is specified by the low-order
4-bits of the value in the Rs2 register. For the rounding operation of the <tt>.u</tt> form, a value of 1 is
added to the most significant discarded bit of each 16-bit data element to calculate the final results.
And the results are written to Rd.

<strong>Operations</strong>:\n
@code 
sa = Rs2[3:0];
if (sa != 0) {
  if (`.u` form) { // SRA16.u
    res[15:-1] = SE17(Rs1.H[x][15:sa-1]) + 1;
    Rd.H[x] = res[15:0];
  } else { // SRA16
    Rd.H[x] = SE16(Rs1.H[x][15:sa])
  }
} else {
  Rd = Rs1;
}
for RV32: x=1...0,
for RV64: x=3...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1ga044ea66eee35c4d3ae3cb3d8e7aa3aa2';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SRA16_U';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '10003';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SRA16.u (SIMD 16-bit Rounding Shift Right Arithmetic)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
SRA16 Rd, Rs1, Rs2
SRA16.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit element arithmetic right shift operations simultaneously. The shift amount is a
variable from a GPR. The <tt>.u</tt> form performs additional rounding up operations on the shifted
results.

<strong>Description</strong>:\n
The 16-bit data elements in Rs1 are right-shifted arithmetically, that is, the shifted out
bits are filled with the sign-bit of the data elements. The shift amount is specified by the low-order
4-bits of the value in the Rs2 register. For the rounding operation of the <tt>.u</tt> form, a value of 1 is
added to the most significant discarded bit of each 16-bit data element to calculate the final results.
And the results are written to Rd.

<strong>Operations</strong>:\n
@code 
sa = Rs2[3:0];
if (sa != 0) {
  if (`.u` form) { // SRA16.u
    res[15:-1] = SE17(Rs1.H[x][15:sa-1]) + 1;
    Rd.H[x] = res[15:0];
  } else { // SRA16
    Rd.H[x] = SE16(Rs1.H[x][15:sa])
  }
} else {
  Rd = Rs1;
}
for RV32: x=1...0,
for RV64: x=3...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1ga2aae7328ef4464ec4ee58147b4c3be26';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SRL8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '10166';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SRL8 (SIMD 8-bit Shift Right Logical)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
SRL8 Rt, Ra, Rb
SRL8.u Rt, Ra, Rb
@endcode

<strong>Purpose</strong>:\n
Do 8-bit elements logical right shift operations simultaneously. The shift amount is a
variable from a GPR. The <tt>.u</tt> form performs additional rounding up operations on the shifted
results.

<strong>Description</strong>:\n
The 8-bit data elements in Rs1 are right-shifted logically, that is, the shifted out bits are
filled with zero. The shift amount is specified by the low-order 3-bits of the value in the Rs2 register.
For the rounding operation of the <tt>.u</tt> form, a value of 1 is added to the most significant discarded
bit of each 8-bit data element to calculate the final results. And the results are written to Rd.

<strong>Operations</strong>:\n
@code 
sa = Rs2[2:0];
if (sa > 0) {
  if (`.u` form) { // SRL8.u
    res[8:0] = ZE9(Rs1.B[x][7:sa-1]) + 1;
    Rd.B[x] = res[8:1];
  } else { // SRL8
    Rd.B[x] = ZE8(Rs1.B[x][7:sa]);
  }
} else {
  Rd = Rs1;
}
for RV32: x=3...0,
for RV64: x=7...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1ga60905852cd03af20f29f226cfe99b87c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SRL8_U';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '10219';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SRL8.u (SIMD 8-bit Rounding Shift Right Logical)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
SRL8 Rt, Ra, Rb
SRL8.u Rt, Ra, Rb
@endcode

<strong>Purpose</strong>:\n
Do 8-bit elements logical right shift operations simultaneously. The shift amount is a
variable from a GPR. The <tt>.u</tt> form performs additional rounding up operations on the shifted
results.

<strong>Description</strong>:\n
The 8-bit data elements in Rs1 are right-shifted logically, that is, the shifted out bits are
filled with zero. The shift amount is specified by the low-order 3-bits of the value in the Rs2 register.
For the rounding operation of the <tt>.u</tt> form, a value of 1 is added to the most significant discarded
bit of each 8-bit data element to calculate the final results. And the results are written to Rd.

<strong>Operations</strong>:\n
@code 
sa = Rs2[2:0];
if (sa > 0) {
  if (`.u` form) { // SRL8.u
    res[8:0] = ZE9(Rs1.B[x][7:sa-1]) + 1;
    Rd.B[x] = res[8:1];
  } else { // SRL8
    Rd.B[x] = ZE8(Rs1.B[x][7:sa]);
  }
} else {
  Rd = Rs1;
}
for RV32: x=3...0,
for RV64: x=7...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1gad077385854832151e700839fb03cfcfe';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SRL16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '10377';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SRL16 (SIMD 16-bit Shift Right Logical)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
SRL16 Rt, Ra, Rb
 SRL16.u Rt, Ra, Rb
@endcode

<strong>Purpose</strong>:\n
Do 16-bit elements logical right shift operations simultaneously. The shift amount is a variable from a GPR. The <tt>.u</tt> form performs additional rounding upoperations on the shifted results.

<strong>Description</strong>:\n
The 16-bit data elements in Rs1 are right-shifted logically, that is, the shifted out bits
are filled with zero. The shift amount is specified by the low-order 4-bits of the value in the Rs2
register. For the rounding operation of the <tt>.u</tt> form, a value of 1 is added to the most significant
discarded bit of each 16-bit data element to calculate the final results. And the results are written to
Rd.

<strong>Operations</strong>:\n
@code 
sa = Rs2[3:0];
if (sa > 0) {
  if (`.u` form) { // SRL16.u
    res[16:0] = ZE17(Rs1.H[x][15:sa-1]) + 1;
    Rd.H[x] = res[16:1];
  } else { // SRL16
    Rd.H[x] = ZE16(Rs1.H[x][15:sa]);
  }
} else {
  Rd = Rs1;
}
for RV32: x=1...0,
for RV64: x=3...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1ga9b9494b2d305f51510e789484cbfd60b';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SRL16_U';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '10429';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SRL16.u (SIMD 16-bit Rounding Shift Right Logical)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
SRL16 Rt, Ra, Rb
 SRL16.u Rt, Ra, Rb
@endcode

<strong>Purpose</strong>:\n
Do 16-bit elements logical right shift operations simultaneously. The shift amount is a variable from a GPR. The <tt>.u</tt> form performs additional rounding upoperations on the shifted results.

<strong>Description</strong>:\n
The 16-bit data elements in Rs1 are right-shifted logically, that is, the shifted out bits
are filled with zero. The shift amount is specified by the low-order 4-bits of the value in the Rs2
register. For the rounding operation of the <tt>.u</tt> form, a value of 1 is added to the most significant
discarded bit of each 16-bit data element to calculate the final results. And the results are written to
Rd.

<strong>Operations</strong>:\n
@code 
sa = Rs2[3:0];
if (sa > 0) {
  if (`.u` form) { // SRL16.u
    res[16:0] = ZE17(Rs1.H[x][15:sa-1]) + 1;
    Rd.H[x] = res[16:1];
  } else { // SRL16
    Rd.H[x] = ZE16(Rs1.H[x][15:sa]);
  }
} else {
  Rd = Rs1;
}
for RV32: x=1...0,
for RV64: x=3...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1gafdb722620fddf1c66759a8f46cd34a16';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_STAS16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '10581';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
STAS16 (SIMD 16-bit Straight Addition & Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
STAS16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit integer element addition and 16-bit integer element subtraction in a 32-bit
chunk simultaneously. Operands are from corresponding positions in 32-bit chunks.

<strong>Description</strong>:\n
This instruction adds the 16-bit integer element in [31:16] of 32-bit chunks in Rs1 with
the 16-bit integer element in [31:16] of 32-bit chunks in Rs2, and writes the result to [31:16] of 32-bit
chunks in Rd; at the same time, it subtracts the 16-bit integer element in [15:0] of 32-bit chunks in
Rs2 from the 16-bit integer element in [15:0] of 32-bit chunks, and writes the result to [15:0] of 32-
bit chunks in Rd.

<strong>Note</strong>:\n
This instruction can be used for either signed or unsigned operations.

<strong>Operations</strong>:\n
@code 
Rd.W[x][31:16] = Rs1.W[x][31:16] + Rs2.W[x][31:16];
Rd.W[x][15:0] = Rs1.W[x][15:0] - Rs2.W[x][15:0];
for RV32, x=0
for RV64, x=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga4c4ac88f3a4a3db0834b880ad8548543';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_STSA16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '10627';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
STSA16 (SIMD 16-bit Straight Subtraction & Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
STSA16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit integer element subtraction and 16-bit integer element addition in a 32-bit
chunk simultaneously. Operands are from corresponding positions in 32-bit chunks.

<strong>Description</strong>:\n
This instruction subtracts the 16-bit integer element in [31:16] of 32-bit chunks in Rs2
from the 16-bit integer element in [31:16] of 32-bit chunks in Rs1, and writes the result to [31:16] of
32-bit chunks in Rd; at the same time, it adds the 16-bit integer element in [15:0] of 32-bit chunks in
Rs2 with the 16-bit integer element in [15:0] of 32-bit chunks in Rs1, and writes the result to [15:0] of
32-bit chunks in Rd.

<strong>Note</strong>:\n
This instruction can be used for either signed or unsigned operations.

<strong>Operations</strong>:\n
@code 
Rd.W[x][31:16] = Rs1.W[x][31:16] - Rs2.W[x][31:16];
Rd.W[x][15:0] = Rs1.W[x][15:0] + Rs2.W[x][15:0];
for RV32, x=0
for RV64, x=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__ADDSUB_1ga9c75e931e8703babf9e8d29f6dfcf280';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SUB8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '10668';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SUB8 (SIMD 8-bit Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
SUB8 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 8-bit integer element subtractions simultaneously.

<strong>Description</strong>:\n
This instruction subtracts the 8-bit integer elements in Rs2 from the 8-bit integer
elements in Rs1, and then writes the result to Rd.

<strong>Note</strong>:\n
This instruction can be used for either signed or unsigned subtraction.

<strong>Operations</strong>:\n
@code 
Rd.B[x] = Rs1.B[x] - Rs2.B[x];
for RV32: x=3...0,
for RV64: x=7...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga2ba13d5be91378558bac3add7c314a44';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SUB16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '10709';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SUB16 (SIMD 16-bit Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
SUB16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit integer element subtractions simultaneously.

<strong>Description</strong>:\n
This instruction subtracts the 16-bit integer elements in Rs2 from the 16-bit integer
elements in Rs1, and then writes the result to Rd.

<strong>Note</strong>:\n
This instruction can be used for either signed or unsigned subtraction.

<strong>Operations</strong>:\n
@code 
Rd.H[x] = Rs1.H[x] - Rs2.H[x];
for RV32: x=1...0,
for RV64: x=3...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__64B__ADDSUB_1ga02ed3c841b85e58d5a40d78fa2f5519f';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SUB64';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '10763';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SUB64 (64-bit Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (64-bit Profile)

<strong>Syntax</strong>:\n
@code 
SUB64 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Perform a 64-bit signed or unsigned integer subtraction.

<strong>RV32 Description</strong>:\n
This instruction subtracts the 64-bit integer of an even/odd pair of registers
specified by Rs2(4,1) from the 64-bit integer of an even/odd pair of registers specified by Rs1(4,1),
and then writes the 64-bit result to an even/odd pair of registers specified by Rd(4,1).
Rx(4,1), i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair
includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the high 32-bit of the operand and the even <tt>2d</tt>
register of the pair contains the low 32-bit of the operand.

<strong>RV64 Description</strong>:\n
This instruction subtracts the 64-bit integer of Rs2 from the 64-bit integer of Rs1,
and then writes the 64-bit result to Rd.

<strong>Note</strong>:\n
This instruction can be used for either signed or unsigned subtraction.

<strong>Operations</strong>:\n
@code 
* RV32:
t_L = CONCAT(Rd(4,1),1'b0); t_H = CONCAT(Rd(4,1),1'b1);
a_L = CONCAT(Rs1(4,1),1'b0); a_H = CONCAT(Rs1(4,1),1'b1);
b_L = CONCAT(Rs2(4,1),1'b0); b_H = CONCAT(Rs2(4,1),1'b1);
R[t_H].R[t_L] = R[a_H].R[a_L] - R[b_H].R[b_L];
* RV64:
Rd = Rs1 - Rs2;
@endcode

@param [in]  a    unsigned long long type of value stored in a
@param [in]  b    unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__UNPACK_1gaecdd51db17293a1d12d85a6bb0cd4abe';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SUNPKD810';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '10809';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SUNPKD810 (Signed Unpacking Bytes 1 & 0)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
SUNPKD8xy Rd, Rs1
xy = {10, 20, 30, 31, 32}
@endcode

<strong>Purpose</strong>:\n
Unpack byte <em>x and byte y</em> of 32-bit chunks in a register into two 16-bit signed halfwords
of 32-bit chunks in a register.

<strong>Description</strong>:\n
For the <tt>SUNPKD8(x)(*y*)</tt> instruction, it unpacks byte <em>x and byte y</em> of 32-bit chunks in Rs1 into
two 16-bit signed halfwords and writes the results to the top part and the bottom part of 32-bit
chunks in Rd.

<strong>Operations</strong>:\n
@code 
Rd.W[m].H[1] = SE16(Rs1.W[m].B[x])
Rd.W[m].H[0] = SE16(Rs1.W[m].B[y])
// SUNPKD810, x=1,y=0
// SUNPKD820, x=2,y=0
// SUNPKD830, x=3,y=0
// SUNPKD831, x=3,y=1
// SUNPKD832, x=3,y=2
for RV32: m=0,
for RV64: m=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__UNPACK_1ga922f7523e4d512fe391795edd7a81239';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SUNPKD820';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '10855';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SUNPKD820 (Signed Unpacking Bytes 2 & 0)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
SUNPKD8xy Rd, Rs1
xy = {10, 20, 30, 31, 32}
@endcode

<strong>Purpose</strong>:\n
Unpack byte <em>x and byte y</em> of 32-bit chunks in a register into two 16-bit signed halfwords
of 32-bit chunks in a register.

<strong>Description</strong>:\n
For the <tt>SUNPKD8(x)(*y*)</tt> instruction, it unpacks byte <em>x and byte y</em> of 32-bit chunks in Rs1 into
two 16-bit signed halfwords and writes the results to the top part and the bottom part of 32-bit
chunks in Rd.

<strong>Operations</strong>:\n
@code 
Rd.W[m].H[1] = SE16(Rs1.W[m].B[x])
Rd.W[m].H[0] = SE16(Rs1.W[m].B[y])
// SUNPKD810, x=1,y=0
// SUNPKD820, x=2,y=0
// SUNPKD830, x=3,y=0
// SUNPKD831, x=3,y=1
// SUNPKD832, x=3,y=2
for RV32: m=0,
for RV64: m=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__UNPACK_1ga8d213189a39651f3bcad77da2eb1f530';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SUNPKD830';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '10901';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SUNPKD830 (Signed Unpacking Bytes 3 & 0)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
SUNPKD8xy Rd, Rs1
xy = {10, 20, 30, 31, 32}
@endcode

<strong>Purpose</strong>:\n
Unpack byte <em>x and byte y</em> of 32-bit chunks in a register into two 16-bit signed halfwords
of 32-bit chunks in a register.

<strong>Description</strong>:\n
For the <tt>SUNPKD8(x)(*y*)</tt> instruction, it unpacks byte <em>x and byte y</em> of 32-bit chunks in Rs1 into
two 16-bit signed halfwords and writes the results to the top part and the bottom part of 32-bit
chunks in Rd.

<strong>Operations</strong>:\n
@code 
Rd.W[m].H[1] = SE16(Rs1.W[m].B[x])
Rd.W[m].H[0] = SE16(Rs1.W[m].B[y])
// SUNPKD810, x=1,y=0
// SUNPKD820, x=2,y=0
// SUNPKD830, x=3,y=0
// SUNPKD831, x=3,y=1
// SUNPKD832, x=3,y=2
for RV32: m=0,
for RV64: m=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__UNPACK_1gad3da1a88ec99f6c5733a3035d26b3bbf';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SUNPKD831';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '10947';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SUNPKD831 (Signed Unpacking Bytes 3 & 1)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
SUNPKD8xy Rd, Rs1
xy = {10, 20, 30, 31, 32}
@endcode

<strong>Purpose</strong>:\n
Unpack byte <em>x and byte y</em> of 32-bit chunks in a register into two 16-bit signed halfwords
of 32-bit chunks in a register.

<strong>Description</strong>:\n
For the <tt>SUNPKD8(x)(*y*)</tt> instruction, it unpacks byte <em>x and byte y</em> of 32-bit chunks in Rs1 into
two 16-bit signed halfwords and writes the results to the top part and the bottom part of 32-bit
chunks in Rd.

<strong>Operations</strong>:\n
@code 
Rd.W[m].H[1] = SE16(Rs1.W[m].B[x])
Rd.W[m].H[0] = SE16(Rs1.W[m].B[y])
// SUNPKD810, x=1,y=0
// SUNPKD820, x=2,y=0
// SUNPKD830, x=3,y=0
// SUNPKD831, x=3,y=1
// SUNPKD832, x=3,y=2
for RV32: m=0,
for RV64: m=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__UNPACK_1ga869283b10c6656ef6b529487d244449c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SUNPKD832';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '10993';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SUNPKD832 (Signed Unpacking Bytes 3 & 2)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
SUNPKD8xy Rd, Rs1
xy = {10, 20, 30, 31, 32}
@endcode

<strong>Purpose</strong>:\n
Unpack byte <em>x and byte y</em> of 32-bit chunks in a register into two 16-bit signed halfwords
of 32-bit chunks in a register.

<strong>Description</strong>:\n
For the <tt>SUNPKD8(x)(*y*)</tt> instruction, it unpacks byte <em>x and byte y</em> of 32-bit chunks in Rs1 into
two 16-bit signed halfwords and writes the results to the top part and the bottom part of 32-bit
chunks in Rd.

<strong>Operations</strong>:\n
@code 
Rd.W[m].H[1] = SE16(Rs1.W[m].B[x])
Rd.W[m].H[0] = SE16(Rs1.W[m].B[y])
// SUNPKD810, x=1,y=0
// SUNPKD820, x=2,y=0
// SUNPKD830, x=3,y=0
// SUNPKD831, x=3,y=1
// SUNPKD832, x=3,y=2
for RV32: m=0,
for RV64: m=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1gaaea4771a7ac766be7bfec89c7bf6cda8';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SWAP8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '11030';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SWAP8 (Swap Byte within Halfword)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
SWAP8 Rd, Rs1
@endcode

<strong>Purpose</strong>:\n
Swap the bytes within each halfword of a register.

<strong>Description</strong>:\n
This instruction swaps the bytes within each halfword of Rs1 and writes the result to
Rd.

<strong>Operations</strong>:\n
@code 
Rd.H[x] = CONCAT(Rs1.H[x][7:0],Rs1.H[x][15:8]);
for RV32: x=1...0,
for RV64: x=3...0
@endcode

@param [in]  a    unsigned long type of value stored in a
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1gadab9655b01398363507f94180fd41ba4';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SWAP16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '11067';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SWAP16 (Swap Halfword within Word)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
SWAP16 Rd, Rs1
@endcode

<strong>Purpose</strong>:\n
Swap the 16-bit halfwords within each word of a register.

<strong>Description</strong>:\n
This instruction swaps the 16-bit halfwords within each word of Rs1 and writes the
result to Rd.

<strong>Operations</strong>:\n
@code 
Rd.W[x] = CONCAT(Rs1.W[x][15:0],Rs1.H[x][31:16]);
for RV32: x=0,
for RV64: x=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__CMP_1ga7bb0f1ec7077c679107517472935145d';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UCMPLE8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '11254';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UCMPLE8 (SIMD 8-bit Unsigned Compare Less Than & Equal)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
UCMPLE8 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 8-bit unsigned integer elements less than & equal comparisons simultaneously.

<strong>Description</strong>:\n
This instruction compares the 8-bit unsigned integer elements in Rs1 with the 8-bit
unsigned integer elements in Rs2 to see if the one in Rs1 is less than or equal to the one in Rs2. If it
is true, the result is 0xFF; otherwise, the result is 0x0. The four comparison results are written to
Rd.

<strong>Operations</strong>:\n
@code 
Rd.B[x] = (Rs1.B[x] <=u Rs2.B[x])? 0xff : 0x0;
for RV32: x=3...0,
for RV64: x=7...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__CMP_1ga1c90d69f90f54607d8b137b8efafdc88';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UCMPLE16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '11294';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UCMPLE16 (SIMD 16-bit Unsigned Compare Less Than & Equal)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
UCMPLE16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit unsigned integer elements less than & equal comparisons simultaneously.

<strong>Description</strong>:\n
This instruction compares the 16-bit unsigned integer elements in Rs1 with the 16-bit
unsigned integer elements in Rs2 to see if the one in Rs1 is less than or equal to the one in Rs2. If it
is true, the result is 0xFFFF; otherwise, the result is 0x0. The element comparison results are
written to Rd.

<strong>Operations</strong>:\n
@code 
Rd.H[x] = (Rs1.H[x] <=u Rs2.H[x])? 0xffff : 0x0;
for RV32: x=1...0,
for RV64: x=3...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__CMP_1ga6d69bc358f1d79a21f67027a3fcf2320';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UCMPLT8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '11333';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UCMPLT8 (SIMD 8-bit Unsigned Compare Less Than)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
UCMPLT8 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 8-bit unsigned integer elements less than comparisons simultaneously.

<strong>Description</strong>:\n
This instruction compares the 8-bit unsigned integer elements in Rs1 with the 8-bit
unsigned integer elements in Rs2 to see if the one in Rs1 is less than the one in Rs2. If it is true, the
result is 0xFF; otherwise, the result is 0x0. The element comparison results are written to Rd.

<strong>Operations</strong>:\n
@code 
Rd.B[x] = (Rs1.B[x] <u Rs2.B[x])? 0xff : 0x0;
for RV32: x=3...0,
for RV64: x=7...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__CMP_1ga566fff4ed2e21cc7e247ecb8b2258bd2';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UCMPLT16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '11372';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UCMPLT16 (SIMD 16-bit Unsigned Compare Less Than)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
UCMPLT16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit unsigned integer elements less than comparisons simultaneously.

<strong>Description</strong>:\n
This instruction compares the 16-bit unsigned integer elements in Rs1 with the 16-bit
unsigned integer elements in Rs2 to see if the one in Rs1 is less than the one in Rs2. If it is true, the
result is 0xFFFF; otherwise, the result is 0x0. The element comparison results are written to Rd.

<strong>Operations</strong>:\n
@code 
Rd.H[x] = (Rs1.H[x] <u Rs2.H[x])? 0xffff : 0x0;
for RV32: x=1...0,
for RV64: x=3...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__ADDSUB_1ga4b8d09eb6958b8eabea15a82ab8edef7';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UKADD8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '11417';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UKADD8 (SIMD 8-bit Unsigned Saturating Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
UKADD8 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 8-bit unsigned integer element saturating additions simultaneously.

<strong>Description</strong>:\n
This instruction adds the 8-bit unsigned integer elements in Rs1 with the 8-bit
unsigned integer elements in Rs2. If any of the results are beyond the 8-bit unsigned number range
(0 <= RES <= 28-1), they are saturated to the range and the OV bit is set to 1. The saturated results are
written to Rd.

<strong>Operations</strong>:\n
@code 
res[x] = Rs1.B[x] + Rs2.B[x];
if (res[x] > (2^8)-1) {
  res[x] = (2^8)-1;
  OV = 1;
}
Rd.B[x] = res[x];
for RV32: x=3...0,
for RV64: x=7...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga5ab8ad2484f1d4b0ffbbd48443be73d0';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UKADD16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '11462';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UKADD16 (SIMD 16-bit Unsigned Saturating Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
UKADD16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit unsigned integer element saturating additions simultaneously.

<strong>Description</strong>:\n
This instruction adds the 16-bit unsigned integer elements in Rs1 with the 16-bit
unsigned integer elements in Rs2. If any of the results are beyond the 16-bit unsigned number
range (0 <= RES <= 2^16-1), they are saturated to the range and the OV bit is set to 1. The saturated
results are written to Rd.

<strong>Operations</strong>:\n
@code 
res[x] = Rs1.H[x] + Rs2.H[x];
if (res[x] > (2^16)-1) {
  res[x] = (2^16)-1;
  OV = 1;
}
Rd.H[x] = res[x];
for RV32: x=1...0,
for RV64: x=3...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__64B__ADDSUB_1ga8f5a5ff9c41c49dfe0d7981c2e5ab139';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UKADD64';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '11524';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UKADD64 (64-bit Unsigned Saturating Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (64-bit Profile)

<strong>Syntax</strong>:\n
@code 
UKADD64 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Add two 64-bit unsigned integers. The result is saturated to the U64 range.

<strong>RV32 Description</strong>:\n
This instruction adds the 64-bit unsigned integer of an even/odd pair of registers
specified by Rs1(4,1) with the 64-bit unsigned integer of an even/odd pair of registers specified by
Rs2(4,1). If the 64-bit result is beyond the U64 number range (0 <= U64 <= 2^64-1), it is saturated to the
range and the OV bit is set to 1. The saturated result is written to an even/odd pair of registers
specified by Rd(4,1).
Rx(4,1), i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair
includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the high 32-bit of the result and the even <tt>2d</tt> register
of the pair contains the low 32-bit of the result.

<strong>RV64 Description</strong>:\n
This instruction adds the 64-bit unsigned integer in Rs1 with the 64-bit unsigned
integer in Rs2. If the 64-bit result is beyond the U64 number range (0 <= U64 <= 2^64-1), it is saturated to
the range and the OV bit is set to 1. The saturated result is written to Rd.

<strong>Operations</strong>:\n
@code 
* RV32:
t_L = CONCAT(Rt(4,1),1'b0); t_H = CONCAT(Rt(4,1),1'b1);
a_L = CONCAT(Ra(4,1),1'b0); a_H = CONCAT(Ra(4,1),1'b1);
b_L = CONCAT(Rb(4,1),1'b0); b_H = CONCAT(Rb(4,1),1'b1);
result = R[a_H].R[a_L] + R[b_H].R[b_L];
if (result > (2^64)-1) {
  result = (2^64)-1; OV = 1;
}
R[t_H].R[t_L] = result;
* RV64:
result = Rs1 + Rs2;
if (result > (2^64)-1) {
  result = (2^64)-1; OV = 1;
}
Rd = result;
@endcode

@param [in]  a    unsigned long long type of value stored in a
@param [in]  b    unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q15__SAT__ALU_1gaf5a82ca7a98ea1c06cd7a468d035abcd';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UKADDH';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '11566';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UKADDH (Unsigned Addition with U16 Saturation)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
UKADDH Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Add the unsigned lower 32-bit content of two registers with U16 saturation.

<strong>Description</strong>:\n
The unsigned lower 32-bit content of Rs1 is added with the unsigned lower 32-bit
content of Rs2. And the result is saturated to the 16-bit unsigned integer range of [0, 2^16-1] and then
sign-extended and written to Rd. If saturation happens, this instruction sets the OV flag.

<strong>Operations</strong>:\n
@code 
tmp = Rs1.W[0] + Rs2.W[0];
if (tmp > (2^16)-1) {
  tmp = (2^16)-1;
  OV = 1;
}
Rd = SE(tmp[15:0]);
@endcode

@param [in]  a    unsigned int type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1ga836b1f78407443c88b5958a7cfb3361f';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UKADDW';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '11609';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UKADDW (Unsigned Addition with U32 Saturation)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
UKADDW Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Add the unsigned lower 32-bit content of two registers with U32 saturation.

<strong>Description</strong>:\n
The unsigned lower 32-bit content of Rs1 is added with the unsigned lower 32-bit
content of Rs2. And the result is saturated to the 32-bit unsigned integer range of [0, 2^32-1] and then
sign-extended and written to Rd. If saturation happens, this instruction sets the OV flag.

<strong>Operations</strong>:\n
@code 
tmp = Rs1.W[0] + Rs2.W[0];
if (tmp > (2^32)-1) {
  tmp[31:0] = (2^32)-1;
  OV = 1;
}
Rd = tmp[31:0]; // RV32
Rd = SE(tmp[31:0]); // RV64
@endcode

@param [in]  a    unsigned int type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga3d8ee80d3beca9f62d44d96a52037f92';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UKCRAS16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '11665';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UKCRAS16 (SIMD 16-bit Unsigned Saturating Cross Addition & Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
UKCRAS16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do one 16-bit unsigned integer element saturating addition and one 16-bit unsigned
integer element saturating subtraction in a 32-bit chunk simultaneously. Operands are from crossed
positions in 32-bit chunks.

<strong>Description</strong>:\n
This instruction adds the 16-bit unsigned integer element in [31:16] of 32-bit chunks in
Rs1 with the 16-bit unsigned integer element in [15:0] of 32-bit chunks in Rs2; at the same time, it
subtracts the 16-bit unsigned integer element in [31:16] of 32-bit chunks in Rs2 from the 16-bit
unsigned integer element in [15:0] of 32-bit chunks in Rs1. If any of the results are beyond the 16-bit
unsigned number range (0 <= RES <= 2^16-1), they are saturated to the range and the OV bit is set to 1.
The saturated results are written to [31:16] of 32-bit chunks in Rd for addition and [15:0] of 32-bit
chunks in Rd for subtraction.

<strong>Operations</strong>:\n
@code 
res1 = Rs1.W[x][31:16] + Rs2.W[x][15:0];
res2 = Rs1.W[x][15:0] - Rs2.W[x][31:16];
if (res1 > (2^16)-1) {
  res1 = (2^16)-1;
  OV = 1;
}
if (res2 < 0) {
  res2 = 0;
  OV = 1;
}
Rd.W[x][31:16] = res1;
Rd.W[x][15:0] = res2;
for RV32, x=0
for RV64, x=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga469a05a9449e9ec44d89d5f37df09d04';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UKCRSA16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '11720';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UKCRSA16 (SIMD 16-bit Unsigned Saturating Cross Subtraction & Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
UKCRSA16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do one 16-bit unsigned integer element saturating subtraction and one 16-bit unsigned
integer element saturating addition in a 32-bit chunk simultaneously. Operands are from crossed
positions in 32-bit chunks.

<strong>Description</strong>:\n
This instruction subtracts the 16-bit unsigned integer element in [15:0] of 32-bit
chunks in Rs2 from the 16-bit unsigned integer element in [31:16] of 32-bit chunks in Rs1; at the
same time, it adds the 16-bit unsigned integer element in [31:16] of 32-bit chunks in Rs2 with the 16-
bit unsigned integer element in [15:0] of 32-bit chunks in Rs1. If any of the results are beyond the
16-bit unsigned number range (0 <= RES <= 2^16-1), they are saturated to the range and the OV bit is set
to 1. The saturated results are written to [31:16] of 32-bit chunks in Rd for subtraction and [15:0] of
32-bit chunks in Rd for addition.

<strong>Operations</strong>:\n
@code 
res1 = Rs1.W[x][31:16] - Rs2.W[x][15:0];
res2 = Rs1.W[x][15:0] + Rs2.W[x][31:16];
if (res1 < 0) {
  res1 = 0;
  OV = 1;
} else if (res2 > (2^16)-1) {
  res2 = (2^16)-1;
  OV = 1;
}
Rd.W[x][31:16] = res1;
Rd.W[x][15:0] = res2;
for RV32, x=0
for RV64, x=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__32B__MULT__64B__ADDSUB_1gac196974cb320c6111c4708989d0e1e49';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UKMAR64';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '11785';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UKMAR64 (Unsigned Multiply and Saturating Add to 64-Bit Data)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (64-bit Profile)

<strong>Syntax</strong>:\n
@code 
UKMAR64 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the 32-bit unsigned elements in two registers and add the 64-bit multiplication
results to the 64-bit unsigned data of a pair of registers (RV32) or a register (RV64). The result is
saturated to the U64 range and written back to the pair of registers (RV32) or the register (RV64).

<strong>RV32 Description</strong>:\n
This instruction multiplies the 32-bit unsigned data of Rs1 with that of Rs2. It
adds the 64-bit multiplication result to the 64-bit unsigned data of an even/odd pair of registers
specified by Rd(4,1) with unlimited precision. If the 64-bit addition result is beyond the U64 number
range (0 <= U64 <= 2^64-1), it is saturated to the range and the OV bit is set to 1. The saturated result is
written back to the even/odd pair of registers specified by Rd(4,1).
Rx(4,1), i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair
includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the high 32-bit of the result and the even <tt>2d</tt> register
of the pair contains the low 32-bit of the result.

<strong>RV64 Description</strong>:\n
This instruction multiplies the 32-bit unsigned elements of Rs1 with that of Rs2.
It adds the 64-bit multiplication results to the 64-bit unsigned data in Rd with unlimited precision. If
the 64-bit addition result is beyond the U64 number range (0 <= U64 <= 2^64-1), it is saturated to the
range and the OV bit is set to 1. The saturated result is written back to Rd.

<strong>Operations</strong>:\n
@code 
* RV32:
t_L = CONCAT(Rd(4,1),1'b0); t_H = CONCAT(Rd(4,1),1'b1);
result = R[t_H].R[t_L] + (Rs1 * Rs2);
if (result > (2^64)-1) {
  result = (2^64)-1; OV = 1;
}
R[t_H].R[t_L] = result;
* RV64:
// `result` has unlimited precision
result = Rd + (Rs1.W[0] u* Rs2.W[0]) + (Rs1.W[1] u* Rs2.W[1]);
if (result > (2^64)-1) {
  result = (2^64)-1; OV = 1;
}
Rd = result;
@endcode

@param [in]  t    unsigned long long type of value stored in t
@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__32B__MULT__64B__ADDSUB_1ga7feff7a2f338e3730f0af2f054cfdd71';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UKMSR64';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '11850';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UKMSR64 (Unsigned Multiply and Saturating Subtract from 64-Bit Data)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (64-bit Profile)

<strong>Syntax</strong>:\n
@code 
UKMSR64 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the 32-bit unsigned elements in two registers and subtract the 64-bit
multiplication results from the 64-bit unsigned data of a pair of registers (RV32) or a register (RV64).
The result is saturated to the U64 range and written back to the pair of registers (RV32) or a register
(RV64).

<strong>RV32 Description</strong>:\n
This instruction multiplies the 32-bit unsigned data of Rs1 with that of Rs2. It
subtracts the 64-bit multiplication result from the 64-bit unsigned data of an even/odd pair of
registers specified by Rd(4,1) with unlimited precision. If the 64-bit subtraction result is beyond the
U64 number range (0 <= U64 <= 2^64-1), it is saturated to the range and the OV bit is set to 1. The
saturated result is written back to the even/odd pair of registers specified by Rd(4,1).
Rx(4,1), i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair
includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the high 32-bit of the result and the even <tt>2d</tt> register
of the pair contains the low 32-bit of the result.

<strong>RV64 Description</strong>:\n
This instruction multiplies the 32-bit unsigned elements of Rs1 with that of Rs2.
It subtracts the 64-bit multiplication results from the 64-bit unsigned data of Rd with unlimited
precision. If the 64-bit subtraction result is beyond the U64 number range (0 <= U64 <= 2^64-1), it is
saturated to the range and the OV bit is set to 1. The saturated result is written back to Rd.

<strong>Operations</strong>:\n
@code 
* RV32:
t_L = CONCAT(Rd(4,1),1'b0); t_H = CONCAT(Rd(4,1),1'b1);
result = R[t_H].R[t_L] - (Rs1 u* Rs2);
if (result < 0) {
  result = 0; OV = 1;
}
R[t_H].R[t_L] = result;
* RV64:
// `result` has unlimited precision
result = Rd - (Rs1.W[0] u* Rs2.W[0]) - (Rs1.W[1] u* Rs2.W[1]);
if (result < 0) {
  result = 0; OV = 1;
}
Rd = result;
@endcode

@param [in]  t    unsigned long long type of value stored in t
@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1gac5ee1051a7643e3ed68a807f61665e7c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UKSTAS16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '11905';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UKSTAS16 (SIMD 16-bit Unsigned Saturating Straight Addition & Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
UKSTAS16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do one 16-bit unsigned integer element saturating addition and one 16-bit unsigned
integer element saturating subtraction in a 32-bit chunk simultaneously. Operands are from
corresponding positions in 32-bit chunks.

<strong>Description</strong>:\n
This instruction adds the 16-bit unsigned integer element in [31:16] of 32-bit chunks in
Rs1 with the 16-bit unsigned integer element in [31:16] of 32-bit chunks in Rs2; at the same time, it
subtracts the 16-bit unsigned integer element in [15:0] of 32-bit chunks in Rs2 from the 16-bit
unsigned integer element in [15:0] of 32-bit chunks in Rs1. If any of the results are beyond the 16-bit
unsigned number range (0 <= RES <= 2^16-1), they are saturated to the range and the OV bit is set to 1.
The saturated results are written to [31:16] of 32-bit chunks in Rd for addition and [15:0] of 32-bit
chunks in Rd for subtraction.

<strong>Operations</strong>:\n
@code 
res1 = Rs1.W[x][31:16] + Rs2.W[x][31:16];
res2 = Rs1.W[x][15:0] - Rs2.W[x][15:0];
if (res1 > (2^16)-1) {
  res1 = (2^16)-1;
  OV = 1;
}
if (res2 < 0) {
  res2 = 0;
  OV = 1;
}
Rd.W[x][31:16] = res1;
Rd.W[x][15:0] = res2;
for RV32, x=0
for RV64, x=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1gaed116dce964990e1d8f0905a607b9541';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UKSTSA16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '11960';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UKSTSA16 (SIMD 16-bit Unsigned Saturating Straight Subtraction & Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
UKSTSA16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do one 16-bit unsigned integer element saturating subtraction and one 16-bit unsigned
integer element saturating addition in a 32-bit chunk simultaneously. Operands are from
corresponding positions in 32-bit chunks.

<strong>Description</strong>:\n
This instruction subtracts the 16-bit unsigned integer element in [31:16] of 32-bit
chunks in Rs2 from the 16-bit unsigned integer element in [31:16] of 32-bit chunks in Rs1; at the
same time, it adds the 16-bit unsigned integer element in [15:0] of 32-bit chunks in Rs2 with the 16-
bit unsigned integer element in [15:0] of 32-bit chunks in Rs1. If any of the results are beyond the
16-bit unsigned number range (0 <= RES <= 2^16-1), they are saturated to the range and the OV bit is set
to 1. The saturated results are written to [31:16] of 32-bit chunks in Rd for subtraction and [15:0] of
32-bit chunks in Rd for addition.

<strong>Operations</strong>:\n
@code 
res1 = Rs1.W[x][31:16] - Rs2.W[x][31:16];
res2 = Rs1.W[x][15:0] + Rs2.W[x][15:0];
if (res1 < 0) {
  res1 = 0;
  OV = 1;
} else if (res2 > (2^16)-1) {
  res2 = (2^16)-1;
  OV = 1;
}
Rd.W[x][31:16] = res1;
Rd.W[x][15:0] = res2;
for RV32, x=0
for RV64, x=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__ADDSUB_1ga28d53441b9c0106fb6caed6dc77f89ad';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UKSUB8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '12005';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UKSUB8 (SIMD 8-bit Unsigned Saturating Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
UKSUB8 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 8-bit unsigned integer elements saturating subtractions simultaneously.

<strong>Description</strong>:\n
This instruction subtracts the 8-bit unsigned integer elements in Rs2 from the 8-bit
unsigned integer elements in Rs1. If any of the results are beyond the 8-bit unsigned number range
(0 <= RES <= 28-1), they are saturated to the range and the OV bit is set to 1. The saturated results are
written to Rd.

<strong>Operations</strong>:\n
@code 
res[x] = Rs1.B[x] - Rs2.B[x];
if (res[x] < 0) {
  res[x] = 0;
  OV = 1;
}
Rd.B[x] = res[x];
for RV32: x=3...0,
for RV64: x=7...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1gae159a5930299163247cc7704d2903c73';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UKSUB16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '12050';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UKSUB16 (SIMD 16-bit Unsigned Saturating Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
UKSUB16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit unsigned integer elements saturating subtractions simultaneously.

<strong>Description</strong>:\n
This instruction subtracts the 16-bit unsigned integer elements in Rs2 from the 16-bit
unsigned integer elements in Rs1. If any of the results are beyond the 16-bit unsigned number
range (0 <= RES <= 2^16-1), they are saturated to the range and the OV bit is set to 1. The saturated
results are written to Rd.

<strong>Operations</strong>:\n
@code 
res[x] = Rs1.H[x] - Rs2.H[x];
if (res[x] < 0) {
  res[x] = 0;
  OV = 1;
}
Rd.H[x] = res[x];
for RV32: x=1...0,
for RV64: x=3...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__64B__ADDSUB_1ga8c38b38409eba3d05396b9d09c1b8382';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UKSUB64';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '12113';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UKSUB64 (64-bit Unsigned Saturating Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (64-bit Profile)

<strong>Syntax</strong>:\n
@code 
UKSUB64 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Perform a 64-bit signed integer subtraction. The result is saturated to the U64 range.

<strong>RV32 Description</strong>:\n
This instruction subtracts the 64-bit unsigned integer of an even/odd pair of
registers specified by Rs2(4,1) from the 64-bit unsigned integer of an even/odd pair of registers
specified by Rs1(4,1). If the 64-bit result is beyond the U64 number range (0 <= U64 <= 2^64-1), it is
saturated to the range and the OV bit is set to 1. The saturated result is then written to an even/odd
pair of registers specified by Rd(4,1).
Rx(4,1), i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair
includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the high 32-bit of the operand and the even <tt>2d</tt>
register of the pair contains the low 32-bit of the operand.

<strong>RV64 Description</strong>:\n
This instruction subtracts the 64-bit unsigned integer of Rs2 from the 64-bit
unsigned integer of an even/odd pair of Rs1. If the 64-bit result is beyond the U64 number range (0 <=
U64 <= 2^64-1), it is saturated to the range and the OV bit is set to 1. The saturated result is then written
to Rd.

<strong>Operations</strong>:\n
@code 
* RV32:
t_L = CONCAT(Rd(4,1),1'b0); t_H = CONCAT(Rd(4,1),1'b1);
a_L = CONCAT(Rs1(4,1),1'b0); a_H = CONCAT(Rs1(4,1),1'b1);
b_L = CONCAT(Rs2(4,1),1'b0); b_H = CONCAT(Rs2(4,1),1'b1);
result = R[a_H].R[a_L] - R[b_H].R[b_L];
if (result < 0) {
  result = 0; OV = 1;
}
R[t_H].R[t_L] = result;
* RV64
result = Rs1 - Rs2;
if (result < 0) {
  result = 0; OV = 1;
}
Rd = result;
@endcode

@param [in]  a    unsigned long long type of value stored in a
@param [in]  b    unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q15__SAT__ALU_1ga8f7265e350aad977038169d60af14e55';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UKSUBH';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '12159';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UKSUBH (Unsigned Subtraction with U16 Saturation)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
UKSUBH Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Subtract the unsigned lower 32-bit content of two registers with U16 saturation.

<strong>Description</strong>:\n
The unsigned lower 32-bit content of Rs2 is subtracted from the unsigned lower 32-bit
content of Rs1. And the result is saturated to the 16-bit unsigned integer range of [0, 2^16-1] and then
sign-extended and written to Rd. If saturation happens, this instruction sets the OV flag.

<strong>Operations</strong>:\n
@code 
tmp = Rs1.W[0] - Rs2.W[0];
if (tmp > (2^16)-1) {
  tmp = (2^16)-1;
  OV = 1;
}
else if (tmp < 0) {
  tmp = 0;
  OV = 1;
}
Rd = SE(tmp[15:0]);
@endcode

@param [in]  a    unsigned int type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1gae102902e2e1e3a606807064ab3ea763f';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UKSUBW';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '12203';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UKSUBW (Unsigned Subtraction with U32 Saturation)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
UKSUBW Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Subtract the unsigned lower 32-bit content of two registers with unsigned 32-bit
saturation.

<strong>Description</strong>:\n
The unsigned lower 32-bit content of Rs2 is subtracted from the unsigned lower 32-bit
content of Rs1. And the result is saturated to the 32-bit unsigned integer range of [0, 2^32-1] and then
sign-extended and written to Rd. If saturation happens, this instruction sets the OV flag.

<strong>Operations</strong>:\n
@code 
tmp = Rs1.W[0] - Rs2.W[0];
if (tmp < 0) {
  tmp[31:0] = 0;
  OV = 1;
}
Rd = tmp[31:0]; // RV32
Rd = SE(tmp[31:0]); // RV64
@endcode

@param [in]  a    unsigned int type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__32B__MULT__64B__ADDSUB_1gadfcd132e9036eac41fbe56909d8acaa4';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UMAR64';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '12257';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UMAR64 (Unsigned Multiply and Add to 64-Bit Data)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (64-bit Profile)

<strong>Syntax</strong>:\n
@code 
UMAR64 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the 32-bit unsigned elements in two registers and add the 64-bit multiplication
results to the 64-bit unsigned data of a pair of registers (RV32) or a register (RV64). The result is
written back to the pair of registers (RV32) or a register (RV64).

<strong>RV32 Description</strong>:\n
This instruction multiplies the 32-bit unsigned data of Rs1 with that of Rs2. It
adds the 64-bit multiplication result to the 64-bit unsigned data of an even/odd pair of registers
specified by Rd(4,1). The addition result is written back to the even/odd pair of registers specified by
Rd(4,1).
Rx(4,1), i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair
includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the high 32-bit of the result and the even <tt>2d</tt> register
of the pair contains the low 32-bit of the result.

<strong>RV64 Description</strong>:\n
This instruction multiplies the 32-bit unsigned elements of Rs1 with that of Rs2.
It adds the 64-bit multiplication results to the 64-bit unsigned data of Rd. The addition result is
written back to Rd.

<strong>Operations</strong>:\n
@code 
* RV32:
t_L = CONCAT(Rd(4,1),1'b0); t_H = CONCAT(Rd(4,1),1'b1);
R[t_H].R[t_L] = R[t_H].R[t_L] + (Rs1 * Rs2);
* RV64:
Rd = Rd + (Rs1.W[0] u* Rs2.W[0]) + (Rs1.W[1] u* Rs2.W[1]);
@endcode

@param [in]  t    unsigned long long type of value stored in t
@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__8B__MULT__32B__ADD_1ga86598a907350dc26b358e7660f721482';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UMAQA';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '12301';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UMAQA (Unsigned Multiply Four Bytes with 32- bit Adds)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
UMAQA Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do four unsigned 8-bit multiplications from 32-bit chunks of two registers; and then adds
the four 16-bit results and the content of corresponding 32-bit chunks of a third register together.

<strong>Description</strong>:\n
This instruction multiplies the four unsigned 8-bit elements of 32-bit chunks of Rs1 with the four
unsigned 8-bit elements of 32-bit chunks of Rs2 and then adds the four results together with the
unsigned content of the corresponding 32-bit chunks of Rd. The final results are written back to the
corresponding 32-bit chunks in Rd.

<strong>Operations</strong>:\n
@code 
res[x] = Rd.W[x] + (Rs1.W[x].B[3] u* Rs2.W[x].B[3]) +
         (Rs1.W[x].B[2] u* Rs2.W[x].B[2]) + (Rs1.W[x].B[1] u* Rs2.W[x].B[1]) +
         (Rs1.W[x].B[0] u* Rs2.W[x].B[0]);
Rd.W[x] = res[x];
for RV32: x=0,
for RV64: x=1...0
@endcode

@param [in]  t    unsigned long type of value stored in t
@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MISC_1ga83c4e6f30012da45ea00703d8aafccbe';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UMAX8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '12339';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UMAX8 (SIMD 8-bit Unsigned Maximum)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
UMAX8 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 8-bit unsigned integer elements finding maximum operations simultaneously.

<strong>Description</strong>:\n
This instruction compares the 8-bit unsigned integer elements in Rs1 with the four 8-
bit unsigned integer elements in Rs2 and selects the numbers that is greater than the other one. The
two selected results are written to Rd.

<strong>Operations</strong>:\n
@code 
Rd.B[x] = (Rs1.B[x] >u Rs2.B[x])? Rs1.B[x] : Rs2.B[x];
for RV32: x=3...0,
for RV64: x=7...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MISC_1gaa75623ba7f5f23a440782f47f62f1f6f';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UMAX16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '12378';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UMAX16 (SIMD 16-bit Unsigned Maximum)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
UMAX16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit unsigned integer elements finding maximum operations simultaneously.

<strong>Description</strong>:\n
This instruction compares the 16-bit unsigned integer elements in Rs1 with the 16-bit
unsigned integer elements in Rs2 and selects the numbers that is greater than the other one. The
selected results are written to Rd.

<strong>Operations</strong>:\n
@code 
Rd.H[x] = (Rs1.H[x] >u Rs2.H[x])? Rs1.H[x] : Rs2.H[x];
for RV32: x=1...0,
for RV64: x=3...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MISC_1gaea0e139e2e2392c423aaf9f7f18056f2';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UMIN8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '12417';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UMIN8 (SIMD 8-bit Unsigned Minimum)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
UMIN8 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 8-bit unsigned integer elements finding minimum operations simultaneously.

<strong>Description</strong>:\n
This instruction compares the 8-bit unsigned integer elements in Rs1 with the 8-bit
unsigned integer elements in Rs2 and selects the numbers that is less than the other one. The
selected results are written to Rd.

<strong>Operations</strong>:\n
@code 
Rd.B[x] = (Rs1.B[x] <u Rs2.B[x])? Rs1.B[x] : Rs2.B[x];
for RV32: x=3...0,
for RV64: x=7...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MISC_1gaa7c689ce557d35cb4847d43846579a40';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UMIN16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '12456';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UMIN16 (SIMD 16-bit Unsigned Minimum)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
UMIN16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit unsigned integer elements finding minimum operations simultaneously.

<strong>Description</strong>:\n
This instruction compares the 16-bit unsigned integer elements in Rs1 with the 16-bit
unsigned integer elements in Rs2 and selects the numbers that is less than the other one. The
selected results are written to Rd.

<strong>Operations</strong>:\n
@code 
Rd.H[x] = (Rs1.H[x] <u Rs2.H[x])? Rs1.H[x] : Rs2.H[x];
for RV32: x=1...0,
for RV64: x=3...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__32B__MULT__64B__ADDSUB_1ga6011dd7028a2a50e4fac5a3a1da22d54';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UMSR64';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '12510';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UMSR64 (Unsigned Multiply and Subtract from 64-Bit Data)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (64-bit Profile)

<strong>Syntax</strong>:\n
@code 
UMSR64 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the 32-bit unsigned elements in two registers and subtract the 64-bit
multiplication results from the 64-bit unsigned data of a pair of registers (RV32) or a register (RV64).
The result is written back to the pair of registers (RV32) or a register (RV64).

<strong>RV32 Description</strong>:\n
This instruction multiplies the 32-bit unsigned data of Rs1 with that of Rs2. It
subtracts the 64-bit multiplication result from the 64-bit unsigned data of an even/odd pair of
registers specified by Rd(4,1). The subtraction result is written back to the even/odd pair of registers
specified by Rd(4,1).
Rx(4,1), i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair
includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the high 32-bit of the result and the even <tt>2d</tt> register
of the pair contains the low 32-bit of the result.

<strong>RV64 Description</strong>:\n
This instruction multiplies the 32-bit unsigned elements of Rs1 with that of Rs2.
It subtracts the 64-bit multiplication results from the 64-bit unsigned data of Rd. The subtraction
result is written back to Rd.

<strong>Operations</strong>:\n
@code 
* RV32:
t_L = CONCAT(Rd(4,1),1'b0); t_H = CONCAT(Rd(4,1),1'b1);
R[t_H].R[t_L] = R[t_H].R[t_L] - (Rs1 * Rs2);
* RV64:
Rd = Rd - (Rs1.W[0] u* Rs2.W[0]) - (Rs1.W[1] u* Rs2.W[1]);
@endcode

@param [in]  t    unsigned long long type of value stored in t
@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MULTIPLY_1ga119cf7edda88230d8d62fd642fff046b';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UMUL8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '12593';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UMUL8 (SIMD Unsigned 8-bit Multiply)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
UMUL8 Rd, Rs1, Rs2
UMULX8 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do unsigned 8-bit multiplications and generate four 16-bit results simultaneously.

<strong>RV32 Description</strong>:\n
For the <tt>UMUL8</tt> instruction, multiply the unsigned 8-bit data elements of Rs1
with the corresponding unsigned 8-bit data elements of Rs2.
For the <tt>UMULX8</tt> instruction, multiply the first and second unsigned 8-bit data elements of Rs1
with the second and first unsigned 8-bit data elements of Rs2. At the same time, multiply the third
and fourth unsigned 8-bit data elements of Rs1 with the fourth and third unsigned 8-bit data
elements of Rs2.
The four 16-bit results are then written into an even/odd pair of registers specified by Rd(4,1).
Rd(4,1), i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair
includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the two 16-bit results calculated from the top part of
Rs1 and the even <tt>2d</tt> register of the pair contains the two 16-bit results calculated from the bottom
part of Rs1.

<strong>RV64 Description</strong>:\n
For the <tt>UMUL8</tt> instruction, multiply the unsigned 8-bit data elements of Rs1
with the corresponding unsigned 8-bit data elements of Rs2.
For the <tt>UMULX8</tt> instruction, multiply the first and second unsigned 8-bit data elements of Rs1
with the second and first unsigned 8-bit data elements of Rs2. At the same time, multiply the third
and fourth unsigned 8-bit data elements of Rs1 with the fourth and third unsigned 8-bit data
elements of Rs2.
The four 16-bit results are then written into Rd. The Rd.W[1] contains the two 16-bit results
calculated from the top part of Rs1 and the Rd.W[0] contains the two 16-bit results calculated from
the bottom part of Rs1.

<strong>Operations</strong>:\n
@code 
* RV32:
if (is `UMUL8`) {
  op1t[x/2] = Rs1.B[x+1]; op2t[x/2] = Rs2.B[x+1]; // top
  op1b[x/2] = Rs1.B[x]; op2b[x/2] = Rs2.B[x]; // bottom
} else if (is `UMULX8`) {
  op1t[x/2] = Rs1.B[x+1]; op2t[x/2] = Rs2.B[x]; // Rs1 top
  op1b[x/2] = Rs1.B[x]; op2b[x/2] = Rs2.B[x+1]; // Rs1 bottom
}
rest[x/2] = op1t[x/2] u* op2t[x/2];
resb[x/2] = op1b[x/2] u* op2b[x/2];
t_L = CONCAT(Rd(4,1),1'b0); t_H = CONCAT(Rd(4,1),1'b1);
R[t_H].H[1] = rest[1]; R[t_H].H[0] = resb[1];
R[t_L].H[1] = rest[0]; R[t_L].H[0] = resb[0];
x = 0 and 2
* RV64:
if (is `UMUL8`) {
    op1t[x/2] = Rs1.B[x+1]; op2t[x/2] = Rs2.B[x+1]; // top
    op1b[x/2] = Rs1.B[x]; op2b[x/2] = Rs2.B[x]; // bottom
} else if (is `UMULX8`) {
    op1t[x/2] = Rs1.B[x+1]; op2t[x/2] = Rs2.B[x]; // Rs1 top
    op1b[x/2]  =  Rs1.B[x]; op2b[x/2]  =  Rs2.B[x+1];  //  Rs1  bottom
}
rest[x/2]  =  op1t[x/2]  u*  op2t[x/2];
resb[x/2]  =  op1b[x/2]  u*  op2b[x/2];
t_L  =  CONCAT(Rd(4,1),1'b0); t_H  =  CONCAT(Rd(4,1),1'b1);
Rd.W[1].H[1] = rest[1]; Rd.W[1].H[0] = resb[1];
Rd.W[0].H[1] = rest[0]; Rd.W[0].H[0] = resb[0]; x = 0 and 2
@endcode

@param [in]  a    unsigned int type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MULTIPLY_1gab655cbf1d89adb8bc28a1600d6e770aa';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UMULX8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '12677';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UMULX8 (SIMD Unsigned Crossed 8-bit Multiply)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
UMUL8 Rd, Rs1, Rs2
UMULX8 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do unsigned 8-bit multiplications and generate four 16-bit results simultaneously.

<strong>RV32 Description</strong>:\n
For the <tt>UMUL8</tt> instruction, multiply the unsigned 8-bit data elements of Rs1
with the corresponding unsigned 8-bit data elements of Rs2.
For the <tt>UMULX8</tt> instruction, multiply the first and second unsigned 8-bit data elements of Rs1
with the second and first unsigned 8-bit data elements of Rs2. At the same time, multiply the third
and fourth unsigned 8-bit data elements of Rs1 with the fourth and third unsigned 8-bit data
elements of Rs2.
The four 16-bit results are then written into an even/odd pair of registers specified by Rd(4,1).
Rd(4,1), i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair
includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the two 16-bit results calculated from the top part of
Rs1 and the even <tt>2d</tt> register of the pair contains the two 16-bit results calculated from the bottom
part of Rs1.

<strong>RV64 Description</strong>:\n
For the <tt>UMUL8</tt> instruction, multiply the unsigned 8-bit data elements of Rs1
with the corresponding unsigned 8-bit data elements of Rs2.
For the <tt>UMULX8</tt> instruction, multiply the first and second unsigned 8-bit data elements of Rs1
with the second and first unsigned 8-bit data elements of Rs2. At the same time, multiply the third
and fourth unsigned 8-bit data elements of Rs1 with the fourth and third unsigned 8-bit data
elements of Rs2.
The four 16-bit results are then written into Rd. The Rd.W[1] contains the two 16-bit results
calculated from the top part of Rs1 and the Rd.W[0] contains the two 16-bit results calculated from
the bottom part of Rs1.

<strong>Operations</strong>:\n
@code 
* RV32:
if (is `UMUL8`) {
  op1t[x/2] = Rs1.B[x+1]; op2t[x/2] = Rs2.B[x+1]; // top
  op1b[x/2] = Rs1.B[x]; op2b[x/2] = Rs2.B[x]; // bottom
} else if (is `UMULX8`) {
  op1t[x/2] = Rs1.B[x+1]; op2t[x/2] = Rs2.B[x]; // Rs1 top
  op1b[x/2] = Rs1.B[x]; op2b[x/2] = Rs2.B[x+1]; // Rs1 bottom
}
rest[x/2] = op1t[x/2] u* op2t[x/2];
resb[x/2] = op1b[x/2] u* op2b[x/2];
t_L = CONCAT(Rd(4,1),1'b0); t_H = CONCAT(Rd(4,1),1'b1);
R[t_H].H[1] = rest[1]; R[t_H].H[0] = resb[1];
R[t_L].H[1] = rest[0]; R[t_L].H[0] = resb[0];
x = 0 and 2
* RV64:
if (is `UMUL8`) {
    op1t[x/2] = Rs1.B[x+1]; op2t[x/2] = Rs2.B[x+1]; // top
    op1b[x/2] = Rs1.B[x]; op2b[x/2] = Rs2.B[x]; // bottom
} else if (is `UMULX8`) {
    op1t[x/2] = Rs1.B[x+1]; op2t[x/2] = Rs2.B[x]; // Rs1 top
    op1b[x/2]  =  Rs1.B[x]; op2b[x/2]  =  Rs2.B[x+1];  //  Rs1  bottom
}
rest[x/2]  =  op1t[x/2]  u*  op2t[x/2];
resb[x/2]  =  op1b[x/2]  u*  op2b[x/2];
t_L  =  CONCAT(Rd(4,1),1'b0); t_H  =  CONCAT(Rd(4,1),1'b1);
Rd.W[1].H[1] = rest[1]; Rd.W[1].H[0] = resb[1];
Rd.W[0].H[1] = rest[0]; Rd.W[0].H[0] = resb[0]; x = 0 and 2
@endcode

@param [in]  a    unsigned int type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MULTIPLY_1ga0b8735b23131378b6bcad1dd67255513';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UMUL16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '12762';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UMUL16 (SIMD Unsigned 16-bit Multiply)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
UMUL16 Rd, Rs1, Rs2
UMULX16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do unsigned 16-bit multiplications and generate two 32-bit results simultaneously.

<strong>RV32 Description</strong>:\n
For the <tt>UMUL16</tt> instruction, multiply the top 16-bit U16 content of Rs1 with
the top 16-bit U16 content of Rs2. At the same time, multiply the bottom 16-bit U16 content of Rs1
with the bottom 16-bit U16 content of Rs2.
For the <tt>UMULX16</tt> instruction, multiply the top 16-bit U16 content of Rs1 with the bottom 16-bit
U16 content of Rs2. At the same time, multiply the bottom 16-bit U16 content of Rs1 with the top 16-
bit U16 content of Rs2.
The two U32 results are then written into an even/odd pair of registers specified by Rd(4,1). Rd(4,1),
i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair includes
register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the 32-bit result calculated from the top part of Rs1 and
the even <tt>2d</tt> register of the pair contains the 32-bit result calculated from the bottom part of Rs1.

<strong>RV64 Description</strong>:\n
For the <tt>UMUL16</tt> instruction, multiply the top 16-bit U16 content of the lower
32-bit word in Rs1 with the top 16-bit U16 content of the lower 32-bit word in Rs2. At the same time,
multiply the bottom 16-bit U16 content of the lower 32-bit word in Rs1 with the bottom 16-bit U16
content of the lower 32-bit word in Rs2.
For the <tt>UMULX16</tt> instruction, multiply the top 16-bit U16 content of the lower 32-bit word in Rs1
with the bottom 16-bit U16 content of the lower 32-bit word in Rs2. At the same time, multiply the
bottom 16-bit U16 content of the lower 32-bit word in Rs1 with the top 16-bit U16 content of the
lower 32-bit word in Rs2.
The two 32-bit U32 results are then written into Rd. The result calculated from the top 16-bit of the
lower 32-bit word in Rs1 is written to Rd.W[1]. And the result calculated from the bottom 16-bit of
the lower 32-bit word in Rs1 is written to Rd.W[0]

<strong>Operations</strong>:\n
@code 
* RV32:
if (is `UMUL16`) {
  op1t = Rs1.H[1]; op2t = Rs2.H[1]; // top
  op1b = Rs1.H[0]; op2b = Rs2.H[0]; // bottom
} else if (is `UMULX16`) {
  op1t = Rs1.H[1]; op2t = Rs2.H[0]; // Rs1 top
  op1b = Rs1.H[0]; op2b = Rs2.H[1]; // Rs1 bottom
}
for ((aop,bop,res) in [(op1t,op2t,rest), (op1b,op2b,resb)]) {
  res = aop u* bop;
}
t_L = CONCAT(Rd(4,1),1'b0); t_H = CONCAT(Rd(4,1),1'b1);
R[t_H] = rest;
R[t_L] = resb;
* RV64:
if (is `UMUL16`) {
  op1t = Rs1.H[1]; op2t = Rs2.H[1]; // top
  op1b = Rs1.H[0]; op2b = Rs2.H[0]; // bottom
} else if (is `UMULX16`) {
  op1t = Rs1.H[1]; op2t = Rs2.H[0]; // Rs1 top
  op1b = Rs1.H[0]; op2b = Rs2.H[1]; // Rs1 bottom
}
for ((aop,bop,res) in [(op1t,op2t,rest), (op1b,op2b,resb)]) {
  res = aop u* bop;
}
Rd.W[1] = rest;
Rd.W[0] = resb;
@endcode

@param [in]  a    unsigned int type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MULTIPLY_1ga32ff52a5adf2d53a6d661c48ba6e58c4';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UMULX16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '12847';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UMULX16 (SIMD Unsigned Crossed 16-bit Multiply)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
UMUL16 Rd, Rs1, Rs2
UMULX16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do unsigned 16-bit multiplications and generate two 32-bit results simultaneously.

<strong>RV32 Description</strong>:\n
For the <tt>UMUL16</tt> instruction, multiply the top 16-bit U16 content of Rs1 with
the top 16-bit U16 content of Rs2. At the same time, multiply the bottom 16-bit U16 content of Rs1
with the bottom 16-bit U16 content of Rs2.
For the <tt>UMULX16</tt> instruction, multiply the top 16-bit U16 content of Rs1 with the bottom 16-bit
U16 content of Rs2. At the same time, multiply the bottom 16-bit U16 content of Rs1 with the top 16-
bit U16 content of Rs2.
The two U32 results are then written into an even/odd pair of registers specified by Rd(4,1). Rd(4,1),
i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair includes
register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the 32-bit result calculated from the top part of Rs1 and
the even <tt>2d</tt> register of the pair contains the 32-bit result calculated from the bottom part of Rs1.

<strong>RV64 Description</strong>:\n
For the <tt>UMUL16</tt> instruction, multiply the top 16-bit U16 content of the lower
32-bit word in Rs1 with the top 16-bit U16 content of the lower 32-bit word in Rs2. At the same time,
multiply the bottom 16-bit U16 content of the lower 32-bit word in Rs1 with the bottom 16-bit U16
content of the lower 32-bit word in Rs2.
For the <tt>UMULX16</tt> instruction, multiply the top 16-bit U16 content of the lower 32-bit word in Rs1
with the bottom 16-bit U16 content of the lower 32-bit word in Rs2. At the same time, multiply the
bottom 16-bit U16 content of the lower 32-bit word in Rs1 with the top 16-bit U16 content of the
lower 32-bit word in Rs2.
The two 32-bit U32 results are then written into Rd. The result calculated from the top 16-bit of the
lower 32-bit word in Rs1 is written to Rd.W[1]. And the result calculated from the bottom 16-bit of
the lower 32-bit word in Rs1 is written to Rd.W[0]

<strong>Operations</strong>:\n
@code 
* RV32:
if (is `UMUL16`) {
  op1t = Rs1.H[1]; op2t = Rs2.H[1]; // top
  op1b = Rs1.H[0]; op2b = Rs2.H[0]; // bottom
} else if (is `UMULX16`) {
  op1t = Rs1.H[1]; op2t = Rs2.H[0]; // Rs1 top
  op1b = Rs1.H[0]; op2b = Rs2.H[1]; // Rs1 bottom
}
for ((aop,bop,res) in [(op1t,op2t,rest), (op1b,op2b,resb)]) {
  res = aop u* bop;
}
t_L = CONCAT(Rd(4,1),1'b0); t_H = CONCAT(Rd(4,1),1'b1);
R[t_H] = rest;
R[t_L] = resb;
* RV64:
if (is `UMUL16`) {
  op1t = Rs1.H[1]; op2t = Rs2.H[1]; // top
  op1b = Rs1.H[0]; op2b = Rs2.H[0]; // bottom
} else if (is `UMULX16`) {
  op1t = Rs1.H[1]; op2t = Rs2.H[0]; // Rs1 top
  op1b = Rs1.H[0]; op2b = Rs2.H[1]; // Rs1 bottom
}
for ((aop,bop,res) in [(op1t,op2t,rest), (op1b,op2b,resb)]) {
  res = aop u* bop;
}
Rd.W[1] = rest;
Rd.W[0] = resb;
@endcode

@param [in]  a    unsigned int type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__ADDSUB_1ga3024b858bfff004934d319dfa6b73102';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_URADD8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '12894';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
URADD8 (SIMD 8-bit Unsigned Halving Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
URADD8 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 8-bit unsigned integer element additions simultaneously. The results are halved to
avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction adds the 8-bit unsigned integer elements in Rs1 with the 8-bit
unsigned integer elements in Rs2. The results are first logically right-shifted by 1 bit and then
written to Rd.

<strong>Examples</strong>:\n
@code 
* Ra = 0x7F, Rb = 0x7F, Rt = 0x7F
* Ra = 0x80, Rb = 0x80, Rt = 0x80
* Ra = 0x40, Rb = 0x80, Rt = 0x60
@endcode

<strong>Operations</strong>:\n
@code 
Rd.B[x] = (Rs1.B[x] + Rs2.B[x]) u>> 1;
for RV32: x=3...0,
for RV64: x=7...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga4bb70d87c28d883e2c4cdd71671076e4';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_URADD16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '12941';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
URADD16 (SIMD 16-bit Unsigned Halving Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
URADD16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit unsigned integer element additions simultaneously. The results are halved to
avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction adds the 16-bit unsigned integer elements in Rs1 with the 16-bit
unsigned integer elements in Rs2. The results are first logically right-shifted by 1 bit and then
written to Rd.

<strong>Examples</strong>:\n
@code 
* Ra = 0x7FFF, Rb = 0x7FFF Rt = 0x7FFF
* Ra = 0x8000, Rb = 0x8000 Rt = 0x8000
* Ra = 0x4000, Rb = 0x8000 Rt = 0x6000
@endcode

<strong>Operations</strong>:\n
@code 
Rd.H[x] = (Rs1.H[x] + Rs2.H[x]) u>> 1;
for RV32: x=1...0,
for RV64: x=3...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__64B__ADDSUB_1ga8458d1a5a3564b122ebe6b84115877e1';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_URADD64';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '12993';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
URADD64 (64-bit Unsigned Halving Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (64-bit Profile)

<strong>Syntax</strong>:\n
@code 
URADD64 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Add two 64-bit unsigned integers. The result is halved to avoid overflow or saturation.

<strong>RV32 Description</strong>:\n
This instruction adds the 64-bit unsigned integer of an even/odd pair of registers
specified by Rs1(4,1) with the 64-bit unsigned integer of an even/odd pair of registers specified by
Rs2(4,1). The 64-bit addition result is first logically right-shifted by 1 bit and then written to an
even/odd pair of registers specified by Rd(4,1).
Rx(4,1), i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair
includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the high 32-bit of the result and the even <tt>2d</tt> register
of the pair contains the low 32-bit of the result.

<strong>RV64 Description</strong>:\n
This instruction adds the 64-bit unsigned integer in Rs1 with the 64-bit unsigned
integer Rs2. The 64-bit addition result is first logically right-shifted by 1 bit and then written to Rd.

<strong>Operations</strong>:\n
@code 
* RV32:
t_L = CONCAT(Rt(4,1),1'b0); t_H = CONCAT(Rt(4,1),1'b1);
a_L = CONCAT(Ra(4,1),1'b0); a_H = CONCAT(Ra(4,1),1'b1);
b_L = CONCAT(Rb(4,1),1'b0); b_H = CONCAT(Rb(4,1),1'b1);
R[t_H].R[t_L] = (R[a_H].R[a_L] + R[b_H].R[b_L]) u>> 1;
* RV64:
Rd = (Rs1 + Rs2) u>> 1;
@endcode

@param [in]  a    unsigned long long type of value stored in a
@param [in]  b    unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__32B__COMPUTATION_1gad8c7e0a31ab014db941c83a0a704da8d';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_URADDW';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '13041';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
URADDW (32-bit Unsigned Halving Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
URADDW Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Add 32-bit unsigned integers and the results are halved to avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction adds the first 32-bit unsigned integer in Rs1 with the first 32-bit
unsigned integer in Rs2. The result is first logically right-shifted by 1 bit and then sign-extended and
written to Rd.

<strong>Examples</strong>:\n
@code 
* Ra = 0x7FFFFFFF, Rb = 0x7FFFFFFF Rt = 0x7FFFFFFF
* Ra = 0x80000000, Rb = 0x80000000 Rt = 0x80000000
* Ra = 0x40000000, Rb = 0x80000000 Rt = 0x60000000
@endcode

<strong>Operations</strong>:\n
@code 
* RV32:
Rd[31:0] = (Rs1[31:0] + Rs2[31:0]) u>> 1;
* RV64:
resw[31:0] = (Rs1[31:0] + Rs2[31:0]) u>> 1;
Rd[63:0] = SE(resw[31:0]);
@endcode

@param [in]  a    unsigned int type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga50231b389038f448ea1eb29b45c90b9e';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_URCRAS16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '13090';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
URCRAS16 (SIMD 16-bit Unsigned Halving Cross Addition & Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
URCRAS16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit unsigned integer element addition and 16-bit unsigned integer element
subtraction in a 32-bit chunk simultaneously. Operands are from crossed positions in 32-bit chunks.
The results are halved to avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction adds the 16-bit unsigned integer in [31:16] of 32-bit chunks in Rs1
with the 16-bit unsigned integer in [15:0] of 32-bit chunks in Rs2, and subtracts the 16-bit unsigned
integer in [31:16] of 32-bit chunks in Rs2 from the 16-bit unsigned integer in [15:0] of 32-bit chunks
in Rs1. The element results are first logically right-shifted by 1 bit and then written to [31:16] of 32-
bit chunks in Rd and [15:0] of 32-bit chunks in Rd.

<strong>Examples</strong>:\n
@code 
Please see `URADD16` and `URSUB16` instructions.
@endcode

<strong>Operations</strong>:\n
@code 
Rd.W[x][31:16] = (Rs1.W[x][31:16] + Rs2.W[x][15:0]) u>> 1;
Rd.W[x][15:0] = (Rs1.W[x][15:0] - Rs2.W[x][31:16]) u>> 1;
for RV32, x=0
for RV64, x=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1gad4abe7a167aebc8b921be0e901c59f8d';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_URCRSA16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '13139';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
URCRSA16 (SIMD 16-bit Unsigned Halving Cross Subtraction & Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
URCRSA16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit unsigned integer element subtraction and 16-bit unsigned integer element
addition in a 32-bit chunk simultaneously. Operands are from crossed positions in 32-bit chunks.
The results are halved to avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction subtracts the 16-bit unsigned integer in [15:0] of 32-bit chunks in Rs2
from the 16-bit unsigned integer in [31:16] of 32-bit chunks in Rs1, and adds the 16-bit unsigned
integer in [15:0] of 32-bit chunks in Rs1 with the 16-bit unsigned integer in [31:16] of 32-bit chunks
in Rs2. The two results are first logically right-shifted by 1 bit and then written to [31:16] of 32-bit
chunks in Rd and [15:0] of 32-bit chunks in Rd.

<strong>Examples</strong>:\n
@code 
Please see `URADD16` and `URSUB16` instructions.
@endcode

<strong>Operations</strong>:\n
@code 
Rd.W[x][31:16] = (Rs1.W[x][31:16] - Rs2.W[x][15:0]) u>> 1;
Rd.W[x][15:0] = (Rs1.W[x][15:0] + Rs2.W[x][31:16]) u>> 1;
for RV32, x=0
for RV64, x=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga972d51a1eebdd2a479b549286a2d8d92';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_URSTAS16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '13188';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
URSTAS16 (SIMD 16-bit Unsigned Halving Straight Addition & Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
URSTAS16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit unsigned integer element addition and 16-bit unsigned integer element
subtraction in a 32-bit chunk simultaneously. Operands are from corresponding positions in 32-bit
chunks. The results are halved to avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction adds the 16-bit unsigned integer in [31:16] of 32-bit chunks in Rs1
with the 16-bit unsigned integer in [31:16] of 32-bit chunks in Rs2, and subtracts the 16-bit unsigned
integer in [15:0] of 32-bit chunks in Rs2 from the 16-bit unsigned integer in [15:0] of 32-bit chunks
in Rs1. The element results are first logically right-shifted by 1 bit and then written to [31:16] of 32-
bit chunks in Rd and [15:0] of 32-bit chunks in Rd.

<strong>Examples</strong>:\n
@code 
Please see `URADD16` and `URSUB16` instructions.
@endcode

<strong>Operations</strong>:\n
@code 
Rd.W[x][31:16] = (Rs1.W[x][31:16] + Rs2.W[x][31:16]) u>> 1;
Rd.W[x][15:0] = (Rs1.W[x][15:0] - Rs2.W[x][15:0]) u>> 1;
for RV32, x=0
for RV64, x=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1gadacb909a5ebc2d520bec4f86c0467a2c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_URSTSA16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '13237';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
URSTSA16 (SIMD 16-bit Unsigned Halving Straight Subtraction & Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
URCRSA16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit unsigned integer element subtraction and 16-bit unsigned integer element
addition in a 32-bit chunk simultaneously. Operands are from corresponding positions in 32-bit
chunks. The results are halved to avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction subtracts the 16-bit unsigned integer in [31:16] of 32-bit chunks in Rs2
from the 16-bit unsigned integer in [31:16] of 32-bit chunks in Rs1, and adds the 16-bit unsigned
integer in [15:0] of 32-bit chunks in Rs1 with the 16-bit unsigned integer in [15:0] of 32-bit chunks in
Rs2. The two results are first logically right-shifted by 1 bit and then written to [31:16] of 32-bit
chunks in Rd and [15:0] of 32-bit chunks in Rd.

<strong>Examples</strong>:\n
@code 
Please see `URADD16` and `URSUB16` instructions.
@endcode

<strong>Operations</strong>:\n
@code 
Rd.W[x][31:16] = (Rs1.W[x][31:16] - Rs2.W[x][31:16]) u>> 1;
Rd.W[x][15:0] = (Rs1.W[x][15:0] + Rs2.W[x][15:0]) u>> 1;
for RV32, x=0
for RV64, x=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__ADDSUB_1gae016aa9f76f26a0e5ce7d3a0120e8afd';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_URSUB8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '13284';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
URSUB8 (SIMD 8-bit Unsigned Halving Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
URSUB8 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 8-bit unsigned integer element subtractions simultaneously. The results are halved to
avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction subtracts the 8-bit unsigned integer elements in Rs2 from the 8-bit
unsigned integer elements in Rs1. The results are first logically right-shifted by 1 bit and then
written to Rd.

<strong>Examples</strong>:\n
@code 
* Ra = 0x7F, Rb = 0x80 Rt = 0xFF
* Ra = 0x80, Rb = 0x7F Rt = 0x00
* Ra = 0x80, Rb = 0x40 Rt = 0x20
@endcode

<strong>Operations</strong>:\n
@code 
Rd.B[x] = (Rs1.B[x] - Rs2.B[x]) u>> 1;
for RV32: x=3...0,
for RV64: x=7...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga34716b9076a8f42d4001047705447f1d';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_URSUB16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '13331';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
URSUB16 (SIMD 16-bit Unsigned Halving Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
URSUB16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit unsigned integer element subtractions simultaneously. The results are halved to
avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction subtracts the 16-bit unsigned integer elements in Rs2 from the 16-bit
unsigned integer elements in Rs1. The results are first logically right-shifted by 1 bit and then
written to Rd.

<strong>Examples</strong>:\n
@code 
* Ra = 0x7FFF, Rb = 0x8000 Rt = 0xFFFF
* Ra = 0x8000, Rb = 0x7FFF Rt = 0x0000
* Ra = 0x8000, Rb = 0x4000 Rt = 0x2000
@endcode

<strong>Operations</strong>:\n
@code 
Rd.H[x] = (Rs1.H[x] - Rs2.H[x]) u>> 1;
for RV32: x=1...0,
for RV64: x=3...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__64B__ADDSUB_1gabe20856e2f82d33c17ce4963ee2db286';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_URSUB64';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '13385';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
URSUB64 (64-bit Unsigned Halving Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (64-bit Profile)

<strong>Syntax</strong>:\n
@code 
URSUB64 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Perform a 64-bit unsigned integer subtraction. The result is halved to avoid overflow or
saturation.

<strong>RV32 Description</strong>:\n
This instruction subtracts the 64-bit unsigned integer of an even/odd pair of
registers specified by Rs2(4,1) from the 64-bit unsigned integer of an even/odd pair of registers
specified by Rs1(4,1). The subtraction result is first logically right-shifted by 1 bit and then written
to an even/odd pair of registers specified by Rd(4,1).
Rx(4,1), i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair
includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the high 32-bit of the result and the even <tt>2d</tt> register
of the pair contains the low 32-bit of the result.

<strong>RV64 Description</strong>:\n
This instruction subtracts the 64-bit unsigned integer in Rs2 from the 64-bit
unsigned integer in Rs1. The subtraction result is first logically right-shifted by 1 bit and then
written to Rd.

<strong>Operations</strong>:\n
@code 
* RV32:
t_L = CONCAT(Rt(4,1),1'b0); t_H = CONCAT(Rt(4,1),1'b1);
a_L = CONCAT(Ra(4,1),1'b0); a_H = CONCAT(Ra(4,1),1'b1);
b_L = CONCAT(Rb(4,1),1'b0); b_H = CONCAT(Rb(4,1),1'b1);
R[t_H].R[t_L] = (R[a_H].R[a_L] - R[b_H].R[b_L]) u>> 1;
* RV64:
Rd = (Rs1 - Rs2) u>> 1;
@endcode

@param [in]  a    unsigned long long type of value stored in a
@param [in]  b    unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__32B__COMPUTATION_1gaf80c041da49050e0469a6e945f5df1fd';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_URSUBW';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '13433';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
URSUBW (32-bit Unsigned Halving Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
URSUBW Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Subtract 32-bit unsigned integers and the result is halved to avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction subtracts the first 32-bit signed integer in Rs2 from the first 32-bit
signed integer in Rs1. The result is first logically right-shifted by 1 bit and then sign-extended and
written to Rd.

<strong>Examples</strong>:\n
@code 
* Ra = 0x7FFFFFFF, Rb = 0x80000000 Rt = 0xFFFFFFFF
* Ra = 0x80000000, Rb = 0x7FFFFFFF Rt = 0x00000000
* Ra = 0x80000000, Rb = 0x40000000 Rt = 0x20000000
@endcode

<strong>Operations</strong>:\n
@code 
* RV32:
Rd[31:0] = (Rs1[31:0] - Rs2[31:0]) u>> 1;
* RV64:
resw[31:0] = (Rs1[31:0] - Rs2[31:0]) u>> 1;
Rd[63:0] = SE(resw[31:0]);
@endcode

@param [in]  a    unsigned int type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1ga92ce02b48c9b1f373c8b7e602c6bcc5f';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_WEXT';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '13537';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
WEXT (Extract Word from 64-bit)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
WEXT Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Extract a 32-bit word from a 64-bit value stored in an even/odd pair of registers (RV32) or
a register (RV64) starting from a specified LSB bit position in a register.

<strong>RV32 Description</strong>:\n
This instruction extracts a 32-bit word from a 64-bit value of an even/odd pair of registers specified
by Rs1(4,1) starting from a specified LSB bit position, specified in Rs2[4:0]. The extracted word is
written to Rd.
Rs1(4,1), i.e., d, determines the even/odd pair group of the two registers. Specifically, the register
pair includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the high 32-bit of the 64-bit value and the even <tt>2d</tt>
register of the pair contains the low 32-bit of the 64-bit value.

<strong>Operations</strong>:\n
@code 
* RV32:
Idx0 = CONCAT(Rs1(4,1),1'b0); Idx1 = CONCAT(Rs1(4,1),1'b1);
src[63:0] = Concat(R[Idx1], R[Idx0]);
LSBloc = Rs2[4:0];
Rd = src[31+LSBloc:LSBloc];
* RV64:
LSBloc = Rs2[4:0];
ExtractW = Rs1[31+LSBloc:LSBloc];
Rd = SE(ExtractW)
@endcode

@param [in]  a    long long type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__UNPACK_1ga0deca77382416530ac829ea0a18d36a5';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_ZUNPKD810';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '13583';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
ZUNPKD810 (Unsigned Unpacking Bytes 1 & 0)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
ZUNPKD8xy Rd, Rs1
xy = {10, 20, 30, 31, 32}
@endcode

<strong>Purpose</strong>:\n
Unpack byte x and byte y of 32-bit chunks in a register into two 16-bit unsigned
halfwords of 32-bit chunks in a register.

<strong>Description</strong>:\n
For the <tt>ZUNPKD8(x)(*y*)</tt> instruction, it unpacks byte <em>x and byte y</em> of 32-bit chunks in Rs1 into
two 16-bit unsigned halfwords and writes the results to the top part and the bottom part of 32-bit
chunks in Rd.

<strong>Operations</strong>:\n
@code 
Rd.W[m].H[1] = ZE16(Rs1.W[m].B[x])
Rd.W[m].H[0] = ZE16(Rs1.W[m].B[y])
// ZUNPKD810, x=1,y=0
// ZUNPKD820, x=2,y=0
// ZUNPKD830, x=3,y=0
// ZUNPKD831, x=3,y=1
// ZUNPKD832, x=3,y=2
for RV32: m=0,
for RV64: m=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__UNPACK_1ga0a124400d7a60b3f860c73b2ef10f753';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_ZUNPKD820';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '13629';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
ZUNPKD820 (Unsigned Unpacking Bytes 2 & 0)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
ZUNPKD8xy Rd, Rs1
xy = {10, 20, 30, 31, 32}
@endcode

<strong>Purpose</strong>:\n
Unpack byte x and byte y of 32-bit chunks in a register into two 16-bit unsigned
halfwords of 32-bit chunks in a register.

<strong>Description</strong>:\n
For the <tt>ZUNPKD8(x)(*y*)</tt> instruction, it unpacks byte <em>x and byte y</em> of 32-bit chunks in Rs1 into
two 16-bit unsigned halfwords and writes the results to the top part and the bottom part of 32-bit
chunks in Rd.

<strong>Operations</strong>:\n
@code 
Rd.W[m].H[1] = ZE16(Rs1.W[m].B[x])
Rd.W[m].H[0] = ZE16(Rs1.W[m].B[y])
// ZUNPKD810, x=1,y=0
// ZUNPKD820, x=2,y=0
// ZUNPKD830, x=3,y=0
// ZUNPKD831, x=3,y=1
// ZUNPKD832, x=3,y=2
for RV32: m=0,
for RV64: m=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__UNPACK_1ga2ffff9289e72fb5163731af36b82bd96';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_ZUNPKD830';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '13675';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
ZUNPKD830 (Unsigned Unpacking Bytes 3 & 0)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
ZUNPKD8xy Rd, Rs1
xy = {10, 20, 30, 31, 32}
@endcode

<strong>Purpose</strong>:\n
Unpack byte x and byte y of 32-bit chunks in a register into two 16-bit unsigned
halfwords of 32-bit chunks in a register.

<strong>Description</strong>:\n
For the <tt>ZUNPKD8(x)(*y*)</tt> instruction, it unpacks byte <em>x and byte y</em> of 32-bit chunks in Rs1 into
two 16-bit unsigned halfwords and writes the results to the top part and the bottom part of 32-bit
chunks in Rd.

<strong>Operations</strong>:\n
@code 
Rd.W[m].H[1] = ZE16(Rs1.W[m].B[x])
Rd.W[m].H[0] = ZE16(Rs1.W[m].B[y])
// ZUNPKD810, x=1,y=0
// ZUNPKD820, x=2,y=0
// ZUNPKD830, x=3,y=0
// ZUNPKD831, x=3,y=1
// ZUNPKD832, x=3,y=2
for RV32: m=0,
for RV64: m=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__UNPACK_1ga833374dc8db34294d48e728512a2068f';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_ZUNPKD831';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '13721';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
ZUNPKD831 (Unsigned Unpacking Bytes 3 & 1)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
ZUNPKD8xy Rd, Rs1
xy = {10, 20, 30, 31, 32}
@endcode

<strong>Purpose</strong>:\n
Unpack byte x and byte y of 32-bit chunks in a register into two 16-bit unsigned
halfwords of 32-bit chunks in a register.

<strong>Description</strong>:\n
For the <tt>ZUNPKD8(x)(*y*)</tt> instruction, it unpacks byte <em>x and byte y</em> of 32-bit chunks in Rs1 into
two 16-bit unsigned halfwords and writes the results to the top part and the bottom part of 32-bit
chunks in Rd.

<strong>Operations</strong>:\n
@code 
Rd.W[m].H[1] = ZE16(Rs1.W[m].B[x])
Rd.W[m].H[0] = ZE16(Rs1.W[m].B[y])
// ZUNPKD810, x=1,y=0
// ZUNPKD820, x=2,y=0
// ZUNPKD830, x=3,y=0
// ZUNPKD831, x=3,y=1
// ZUNPKD832, x=3,y=2
for RV32: m=0,
for RV64: m=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__UNPACK_1ga7fdf5939f3c0be0a64c2659b930a9faa';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_ZUNPKD832';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '13767';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
ZUNPKD832 (Unsigned Unpacking Bytes 3 & 2)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
ZUNPKD8xy Rd, Rs1
xy = {10, 20, 30, 31, 32}
@endcode

<strong>Purpose</strong>:\n
Unpack byte x and byte y of 32-bit chunks in a register into two 16-bit unsigned
halfwords of 32-bit chunks in a register.

<strong>Description</strong>:\n
For the <tt>ZUNPKD8(x)(*y*)</tt> instruction, it unpacks byte <em>x and byte y</em> of 32-bit chunks in Rs1 into
two 16-bit unsigned halfwords and writes the results to the top part and the bottom part of 32-bit
chunks in Rd.

<strong>Operations</strong>:\n
@code 
Rd.W[m].H[1] = ZE16(Rs1.W[m].B[x])
Rd.W[m].H[0] = ZE16(Rs1.W[m].B[y])
// ZUNPKD810, x=1,y=0
// ZUNPKD820, x=2,y=0
// ZUNPKD830, x=3,y=0
// ZUNPKD831, x=3,y=1
// ZUNPKD832, x=3,y=2
for RV32: m=0,
for RV64: m=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__ADDSUB_1gac67bdd2881a8f2c648cf191c9279ffa2';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_ADD32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '13809';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
ADD32 (SIMD 32-bit Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code 
ADD32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit integer element additions simultaneously.

<strong>Description</strong>:\n
This instruction adds the 32-bit integer elements in Rs1 with the 32-bit integer
elements in Rs2, and then writes the 32-bit element results to Rd.

<strong>Note</strong>:\n
This instruction can be used for either signed or unsigned addition.

<strong>Operations</strong>:\n
@code 
Rd.W[x] = Rs1.W[x] + Rs2.W[x];
for RV64: x=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__ADDSUB_1ga3b9b82077d31deb6b0f88d434d6d3e0a';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_CRAS32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '13852';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CRAS32 (SIMD 32-bit Cross Addition & Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code 
CRAS32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit integer element addition and 32-bit integer element subtraction in a 64-bit
chunk simultaneously. Operands are from crossed 32-bit elements.

<strong>Description</strong>:\n
This instruction adds the 32-bit integer element in [63:32] of Rs1 with the 32-bit
integer element in [31:0] of Rs2, and writes the result to [63:32] of Rd; at the same time, it subtracts
the 32-bit integer element in [63:32] of Rs2 from the 32-bit integer element in [31:0] of Rs1, and
writes the result to [31:0] of Rd.

<strong>Note</strong>:\n
This instruction can be used for either signed or unsigned operations.

<strong>Operations</strong>:\n
@code 
Rd.W[1] = Rs1.W[1] + Rs2.W[0];
Rd.W[0] = Rs1.W[0] - Rs2.W[1];
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__ADDSUB_1ga1d6af7d28c27dd44d2742cd873505a3c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_CRSA32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '13894';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CRSA32 (SIMD 32-bit Cross Subtraction & Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code 
CRSA32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit integer element subtraction and 32-bit integer element addition in a 64-bit
chunk simultaneously. Operands are from crossed 32-bit elements.
*Description: *
This instruction subtracts the 32-bit integer element in [31:0] of Rs2 from the 32-bit integer element
in [63:32] of Rs1, and writes the result to [63:32] of Rd; at the same time, it adds the 32-bit integer
element in [31:0] of Rs1 with the 32-bit integer element in [63:32] of Rs2, and writes the result to
[31:0] of Rd

<strong>Note</strong>:\n
This instruction can be used for either signed or unsigned operations.

<strong>Operations</strong>:\n
@code 
Rd.W[1] = Rs1.W[1] - Rs2.W[0];
Rd.W[0] = Rs1.W[0] + Rs2.W[1];
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__MISC_1gadf701d97707e23112985581dc96763e3';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KABS32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '13954';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KABS32 (Scalar 32-bit Absolute Value with Saturation)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
   <strong>Type</strong>: DSP (RV64 Only)
24    20
19    15
14    12
11    7
KABS32
10010
Rs1
000
Rd
6    0
GE80B
1111111

   <strong>Syntax</strong>:\n
@code 
   KABS32 Rd, Rs1
   @endcode

   <strong>Purpose</strong>:\n
   Get the absolute value of signed 32-bit integer elements in a general register.

   <strong>Description</strong>:\n
   This instruction calculates the absolute value of signed 32-bit integer elements stored
   in Rs1. The results are written to Rd. This instruction with the minimum negative integer input of
   0x80000000 will produce a saturated output of maximum positive integer of 0x7fffffff and the OV
   flag will be set to 1.

   <strong>Operations</strong>:\n
@code 
   if (Rs1.W[x] >= 0) {
     res[x] = Rs1.W[x];
   } else {
     If (Rs1.W[x] == 0x80000000) {
       res[x] = 0x7fffffff;
       OV = 1;
     } else {
       res[x] = -Rs1.W[x];
     }
   }
   Rd.W[x] = res[x];
   for RV64: x=1...0
   @endcode

@param [in]  a    unsigned long type of value stored in a
   \return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__ADDSUB_1gaa25d2d07545bb75c2d64a81c4c5115a3';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KADD32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '14000';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KADD32 (SIMD 32-bit Signed Saturating Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code 
KADD32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit signed integer element saturating additions simultaneously.

<strong>Description</strong>:\n
This instruction adds the 32-bit signed integer elements in Rs1 with the 32-bit signed
integer elements in Rs2. If any of the results are beyond the Q31 number range (-2^31 <= Q31 <= 2^31-1),
they are saturated to the range and the OV bit is set to 1. The saturated results are written to Rd.

<strong>Operations</strong>:\n
@code 
res[x] = Rs1.W[x] + Rs2.W[x];
if (res[x] > (2^31)-1) {
  res[x] = (2^31)-1;
  OV = 1;
} else if (res[x] < -2^31) {
  res[x] = -2^31;
  OV = 1;
}
Rd.W[x] = res[x];
for RV64: x=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__ADDSUB_1ga5e004a2f68b21b6cd06a5506b3752a23';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KCRAS32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '14051';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KCRAS32 (SIMD 32-bit Signed Saturating Cross Addition & Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIM (RV64 Only)

<strong>Syntax</strong>:\n
@code 
KCRAS32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit signed integer element saturating addition and 32-bit signed integer element
saturating subtraction in a 64-bit chunk simultaneously. Operands are from crossed 32-bit elements.

<strong>Description</strong>:\n
This instruction adds the 32-bit integer element in [63:32] of Rs1 with the 32-bit
integer element in [31:0] of Rs2; at the same time, it subtracts the 32-bit integer element in [63:32] of
Rs2 from the 32-bit integer element in [31:0] of Rs1. If any of the results are beyond the Q31 number
range (-2^31 <= Q31 <= 2^31-1), they are saturated to the range and the OV bit is set to 1. The saturated
results are written to [63:32] of Rd for addition and [31:0] of Rd for subtraction.

<strong>Operations</strong>:\n
@code 
res[1] = Rs1.W[1] + Rs2.W[0];
res[0] = Rs1.W[0] - Rs2.W[1];
if (res[x] > (2^31)-1) {
  res[x] = (2^31)-1;
  OV = 1;
} else if (res < -2^31) {
  res[x] = -2^31;
  OV = 1;
}
Rd.W[1] = res[1];
Rd.W[0] = res[0];
for RV64, x=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__ADDSUB_1ga4e558d37a01694248417454240fdd58c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KCRSA32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '14101';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KCRSA32 (SIMD 32-bit Signed Saturating Cross Subtraction & Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code 
KCRSA32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit signed integer element saturating subtraction and 32-bit signed integer element
saturating addition in a 64-bit chunk simultaneously. Operands are from crossed 32-bit elements.
*Description: *
This instruction subtracts the 32-bit integer element in [31:0] of Rs2 from the 32-bit integer element
in [63:32] of Rs1; at the same time, it adds the 32-bit integer element in [31:0] of Rs1 with the 32-bit
integer element in [63:32] of Rs2. If any of the results are beyond the Q31 number range (-2^31 <= Q31
<= 2^31-1), they are saturated to the range and the OV bit is set to 1. The saturated results are written to
[63:32] of Rd for subtraction and [31:0] of Rd for addition.

<strong>Operations</strong>:\n
@code 
res[1] = Rs1.W[1] - Rs2.W[0];
res[0] = Rs1.W[0] + Rs2.W[1];
if (res[x] > (2^31)-1) {
  res[x] = (2^31)-1;
  OV = 1;
} else if (res < -2^31) {
  res[x] = -2^31;
  OV = 1;
}
Rd.W[1] = res[1];
Rd.W[0] = res[0];
for RV64, x=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__Q15__SAT__MULT_1ga2ef54e3c36ac953d6b0c5505bcb82fa7';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KDMBB16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '14153';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KDMBB16 (SIMD Signed Saturating Double Multiply B16 x B16)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 only)

<strong>Syntax</strong>:\n
@code 
KDMxy16 Rd, Rs1, Rs2 (xy = BB, BT, TT)
@endcode

<strong>Purpose</strong>:\n
Multiply the signed Q15 integer contents of two 16-bit data in the corresponding portion
of the 32-bit chunks in registers and then double and saturate the Q31 results into the 32-bit chunks
in the destination register. If saturation happens, an overflow flag OV will be set.

<strong>Description</strong>:\n
Multiply the top or bottom 16-bit Q15 content of the 32-bit portions in Rs1 with the top
or bottom 16-bit Q15 content of the 32-bit portions in Rs2. The Q30 results are then doubled and
saturated into Q31 values. The Q31 values are then written into the 32-bit chunks in Rd. When both
the two Q15 inputs are 0x8000, saturation will happen. The result will be saturated to 0x7FFFFFFF
and the overflow flag OV will be set.

<strong>Operations</strong>:\n
@code 
// KDMBB16: (x,y,z)=(0,0,0),(2,2,1)
// KDMBT16: (x,y,z)=(0,1,0),(2,3,1)
// KDMTT16: (x,y,z)=(1,1,0),(3,3,1)
aop[z] = Rs1.H[x]; bop[z] = Rs2.H[y];
If (0x8000 != aop[z] | 0x8000 != bop[z]) {
  Mresult[z] = aop[z] * bop[z];
  resQ31[z] = Mresult[z] << 1;
} else {
  resQ31[z] = 0x7FFFFFFF;
  OV = 1;
}
Rd.W[z] = resQ31[z];
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__Q15__SAT__MULT_1gaabd178e790fb3e2f172efe367869982e';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KDMBT16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '14205';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KDMBT16 (SIMD Signed Saturating Double Multiply B16 x T16)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 only)

<strong>Syntax</strong>:\n
@code 
KDMxy16 Rd, Rs1, Rs2 (xy = BB, BT, TT)
@endcode

<strong>Purpose</strong>:\n
Multiply the signed Q15 integer contents of two 16-bit data in the corresponding portion
of the 32-bit chunks in registers and then double and saturate the Q31 results into the 32-bit chunks
in the destination register. If saturation happens, an overflow flag OV will be set.

<strong>Description</strong>:\n
Multiply the top or bottom 16-bit Q15 content of the 32-bit portions in Rs1 with the top
or bottom 16-bit Q15 content of the 32-bit portions in Rs2. The Q30 results are then doubled and
saturated into Q31 values. The Q31 values are then written into the 32-bit chunks in Rd. When both
the two Q15 inputs are 0x8000, saturation will happen. The result will be saturated to 0x7FFFFFFF
and the overflow flag OV will be set.

<strong>Operations</strong>:\n
@code 
// KDMBB16: (x,y,z)=(0,0,0),(2,2,1)
// KDMBT16: (x,y,z)=(0,1,0),(2,3,1)
// KDMTT16: (x,y,z)=(1,1,0),(3,3,1)
aop[z] = Rs1.H[x]; bop[z] = Rs2.H[y];
If (0x8000 != aop[z] | 0x8000 != bop[z]) {
  Mresult[z] = aop[z] * bop[z];
  resQ31[z] = Mresult[z] << 1;
} else {
  resQ31[z] = 0x7FFFFFFF;
  OV = 1;
}
Rd.W[z] = resQ31[z];
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__Q15__SAT__MULT_1ga05495c1787257dcc91b826929f7185c7';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KDMTT16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '14257';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KDMTT16 (SIMD Signed Saturating Double Multiply T16 x T16)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 only)

<strong>Syntax</strong>:\n
@code 
KDMxy16 Rd, Rs1, Rs2 (xy = BB, BT, TT)
@endcode

<strong>Purpose</strong>:\n
Multiply the signed Q15 integer contents of two 16-bit data in the corresponding portion
of the 32-bit chunks in registers and then double and saturate the Q31 results into the 32-bit chunks
in the destination register. If saturation happens, an overflow flag OV will be set.

<strong>Description</strong>:\n
Multiply the top or bottom 16-bit Q15 content of the 32-bit portions in Rs1 with the top
or bottom 16-bit Q15 content of the 32-bit portions in Rs2. The Q30 results are then doubled and
saturated into Q31 values. The Q31 values are then written into the 32-bit chunks in Rd. When both
the two Q15 inputs are 0x8000, saturation will happen. The result will be saturated to 0x7FFFFFFF
and the overflow flag OV will be set.

<strong>Operations</strong>:\n
@code 
// KDMBB16: (x,y,z)=(0,0,0),(2,2,1)
// KDMBT16: (x,y,z)=(0,1,0),(2,3,1)
// KDMTT16: (x,y,z)=(1,1,0),(3,3,1)
aop[z] = Rs1.H[x]; bop[z] = Rs2.H[y];
If (0x8000 != aop[z] | 0x8000 != bop[z]) {
  Mresult[z] = aop[z] * bop[z];
  resQ31[z] = Mresult[z] << 1;
} else {
  resQ31[z] = 0x7FFFFFFF;
  OV = 1;
}
Rd.W[z] = resQ31[z];
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__Q15__SAT__MULT_1ga2ac7979002270bfa658be6a6e041c5f9';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KDMABB16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '14323';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KDMABB16 (SIMD Signed Saturating Double Multiply Addition B16 x B16)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 only)

<strong>Syntax</strong>:\n
@code 
KDMAxy16 Rd, Rs1, Rs2 (xy = BB, BT, TT)
@endcode

<strong>Purpose</strong>:\n
Multiply the signed Q15 integer contents of two 16-bit data in the corresponding portion
of the 32-bit chunks in registers and then double and saturate the Q31 results, add the results with
the values of the corresponding 32-bit chunks from the destination register and write the saturated
addition results back into the corresponding 32-bit chunks of the destination register. If saturation
happens, an overflow flag OV will be set.

<strong>Description</strong>:\n
Multiply the top or bottom 16-bit Q15 content of the 32-bit portions in Rs1 with the top
or bottom 16-bit Q15 content of the corresponding 32-bit portions in Rs2. The Q30 results are then
doubled and saturated into Q31 values. The Q31 values are then added with the content of the
corresponding 32-bit portions of Rd. If the addition results are beyond the Q31 number range (-2^31 <=
Q31 <= 2^31-1), they are saturated to the range and the OV flag is set to 1. The results after saturation
are written back to Rd.
When both the two Q15 inputs are 0x8000, saturation will happen and the overflow flag OV will be
set.

<strong>Operations</strong>:\n
@code 
// KDMABB16: (x,y,z)=(0,0,0),(2,2,1)
// KDMABT16: (x,y,z)=(0,1,0),(2,3,1)
// KDMATT16: (x,y,z)=(1,1,0),(3,3,1)
aop[z] = Rs1.H[x]; bop[z] = Rs2.H[y];
If (0x8000 != aop[z] | 0x8000 != bop[z]) {
  Mresult[z] = aop[z] * bop[z];
  resQ31[z] = Mresult[z] << 1;
} else {
  resQ31[z] = 0x7FFFFFFF;
  OV = 1;
}
resadd[z] = Rd.W[z] + resQ31[z];
if (resadd[z] > (2^31)-1) {
  resadd[z] = (2^31)-1;
  OV = 1;
} else if (resadd[z] < -2^31) {
  resadd[z] = -2^31;
  OV = 1;
}
Rd.W[z] = resadd[z];
@endcode

@param [in]  t    unsigned long type of value stored in t
@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__Q15__SAT__MULT_1ga180a49b034ce67949bc0db6bfbdce058';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KDMABT16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '14388';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KDMABT16 (SIMD Signed Saturating Double Multiply Addition B16 x T16)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 only)

<strong>Syntax</strong>:\n
@code 
KDMAxy16 Rd, Rs1, Rs2 (xy = BB, BT, TT)
@endcode

<strong>Purpose</strong>:\n
Multiply the signed Q15 integer contents of two 16-bit data in the corresponding portion
of the 32-bit chunks in registers and then double and saturate the Q31 results, add the results with
the values of the corresponding 32-bit chunks from the destination register and write the saturated
addition results back into the corresponding 32-bit chunks of the destination register. If saturation
happens, an overflow flag OV will be set.

<strong>Description</strong>:\n
Multiply the top or bottom 16-bit Q15 content of the 32-bit portions in Rs1 with the top
or bottom 16-bit Q15 content of the corresponding 32-bit portions in Rs2. The Q30 results are then
doubled and saturated into Q31 values. The Q31 values are then added with the content of the
corresponding 32-bit portions of Rd. If the addition results are beyond the Q31 number range (-2^31 <=
Q31 <= 2^31-1), they are saturated to the range and the OV flag is set to 1. The results after saturation
are written back to Rd.
When both the two Q15 inputs are 0x8000, saturation will happen and the overflow flag OV will be
set.

<strong>Operations</strong>:\n
@code 
// KDMABB16: (x,y,z)=(0,0,0),(2,2,1)
// KDMABT16: (x,y,z)=(0,1,0),(2,3,1)
// KDMATT16: (x,y,z)=(1,1,0),(3,3,1)
aop[z] = Rs1.H[x]; bop[z] = Rs2.H[y];
If (0x8000 != aop[z] | 0x8000 != bop[z]) {
  Mresult[z] = aop[z] * bop[z];
  resQ31[z] = Mresult[z] << 1;
} else {
  resQ31[z] = 0x7FFFFFFF;
  OV = 1;
}
resadd[z] = Rd.W[z] + resQ31[z];
if (resadd[z] > (2^31)-1) {
  resadd[z] = (2^31)-1;
  OV = 1;
} else if (resadd[z] < -2^31) {
  resadd[z] = -2^31;
  OV = 1;
}
Rd.W[z] = resadd[z];
@endcode

@param [in]  t    unsigned long type of value stored in t
@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__Q15__SAT__MULT_1ga952ad06fdf63f05d19c3bc4a2a8cc9b8';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KDMATT16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '14453';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KDMATT16 (SIMD Signed Saturating Double Multiply Addition T16 x T16)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 only)

<strong>Syntax</strong>:\n
@code 
KDMAxy16 Rd, Rs1, Rs2 (xy = BB, BT, TT)
@endcode

<strong>Purpose</strong>:\n
Multiply the signed Q15 integer contents of two 16-bit data in the corresponding portion
of the 32-bit chunks in registers and then double and saturate the Q31 results, add the results with
the values of the corresponding 32-bit chunks from the destination register and write the saturated
addition results back into the corresponding 32-bit chunks of the destination register. If saturation
happens, an overflow flag OV will be set.

<strong>Description</strong>:\n
Multiply the top or bottom 16-bit Q15 content of the 32-bit portions in Rs1 with the top
or bottom 16-bit Q15 content of the corresponding 32-bit portions in Rs2. The Q30 results are then
doubled and saturated into Q31 values. The Q31 values are then added with the content of the
corresponding 32-bit portions of Rd. If the addition results are beyond the Q31 number range (-2^31 <=
Q31 <= 2^31-1), they are saturated to the range and the OV flag is set to 1. The results after saturation
are written back to Rd.
When both the two Q15 inputs are 0x8000, saturation will happen and the overflow flag OV will be
set.

<strong>Operations</strong>:\n
@code 
// KDMABB16: (x,y,z)=(0,0,0),(2,2,1)
// KDMABT16: (x,y,z)=(0,1,0),(2,3,1)
// KDMATT16: (x,y,z)=(1,1,0),(3,3,1)
aop[z] = Rs1.H[x]; bop[z] = Rs2.H[y];
If (0x8000 != aop[z] | 0x8000 != bop[z]) {
  Mresult[z] = aop[z] * bop[z];
  resQ31[z] = Mresult[z] << 1;
} else {
  resQ31[z] = 0x7FFFFFFF;
  OV = 1;
}
resadd[z] = Rd.W[z] + resQ31[z];
if (resadd[z] > (2^31)-1) {
  resadd[z] = (2^31)-1;
  OV = 1;
} else if (resadd[z] < -2^31) {
  resadd[z] = -2^31;
  OV = 1;
}
Rd.W[z] = resadd[z];
@endcode

@param [in]  t    unsigned long type of value stored in t
@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__Q15__SAT__MULT_1ga58ec69e4c58f7cb34556ef4f4a153615';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KHMBB16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '14505';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KHMBB16 (SIMD Signed Saturating Half Multiply B16 x B16)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code 
KHMxy16 Rd, Rs1, Rs2 (xy = BB, BT, TT)
@endcode

<strong>Purpose</strong>:\n
Multiply the signed Q15 integer contents of two 16-bit data in the corresponding portion
of the 32-bit chunks in registers and then right-shift 15 bits to turn the Q30 results into Q15
numbers again and saturate the Q15 results into the destination register. If saturation happens, an
overflow flag OV will be set.

<strong>Description</strong>:\n
Multiply the top or bottom 16-bit Q15 content of the 32-bit portions in Rs1 with the top
or bottom 16-bit Q15 content of the 32-bit portion in Rs2. The Q30 results are then right-shifted 15-
bits and saturated into Q15 values. The 32-bit Q15 values are then written into the 32-bit chunks in
Rd. When both the two Q15 inputs are 0x8000, saturation will happen. The result will be saturated
to 0x7FFF and the overflow flag OV will be set.

<strong>Operations</strong>:\n
@code 
// KHMBB16: (x,y,z)=(0,0,0),(2,2,1)
// KHMBT16: (x,y,z)=(0,1,0),(2,3,1)
// KHMTT16: (x,y,z)=(1,1,0),(3,3,1)
aop = Rs1.H[x]; bop = Rs2.H[y];
If (0x8000 != aop | 0x8000 != bop) {
  Mresult[31:0] = aop * bop;
  res[15:0] = Mresult[30:15];
} else {
  res[15:0] = 0x7FFF;
  OV = 1;
}
Rd.W[z] = SE32(res[15:0]);
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__Q15__SAT__MULT_1ga30da509f228f12e85fccc10646cebc28';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KHMBT16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '14558';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KHMBT16 (SIMD Signed Saturating Half Multiply B16 x T16)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code 
KHMxy16 Rd, Rs1, Rs2 (xy = BB, BT, TT)
@endcode

<strong>Purpose</strong>:\n
Multiply the signed Q15 integer contents of two 16-bit data in the corresponding portion
of the 32-bit chunks in registers and then right-shift 15 bits to turn the Q30 results into Q15
numbers again and saturate the Q15 results into the destination register. If saturation happens, an
overflow flag OV will be set.

<strong>Description</strong>:\n
Multiply the top or bottom 16-bit Q15 content of the 32-bit portions in Rs1 with the top
or bottom 16-bit Q15 content of the 32-bit portion in Rs2. The Q30 results are then right-shifted 15-
bits and saturated into Q15 values. The 32-bit Q15 values are then written into the 32-bit chunks in
Rd. When both the two Q15 inputs are 0x8000, saturation will happen. The result will be saturated
to 0x7FFF and the overflow flag OV will be set.

<strong>Operations</strong>:\n
@code 
// KHMBB16: (x,y,z)=(0,0,0),(2,2,1)
// KHMBT16: (x,y,z)=(0,1,0),(2,3,1)
// KHMTT16: (x,y,z)=(1,1,0),(3,3,1)
aop = Rs1.H[x]; bop = Rs2.H[y];
If (0x8000 != aop | 0x8000 != bop) {
  Mresult[31:0] = aop * bop;
  res[15:0] = Mresult[30:15];
} else {
  res[15:0] = 0x7FFF;
  OV = 1;
}
Rd.W[z] = SE32(res[15:0]);
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__Q15__SAT__MULT_1ga93e865bc3f39a52053267fdce080a7a1';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KHMTT16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '14611';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KHMTT16 (SIMD Signed Saturating Half Multiply T16 x T16)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code 
KHMxy16 Rd, Rs1, Rs2 (xy = BB, BT, TT)
@endcode

<strong>Purpose</strong>:\n
Multiply the signed Q15 integer contents of two 16-bit data in the corresponding portion
of the 32-bit chunks in registers and then right-shift 15 bits to turn the Q30 results into Q15
numbers again and saturate the Q15 results into the destination register. If saturation happens, an
overflow flag OV will be set.

<strong>Description</strong>:\n
Multiply the top or bottom 16-bit Q15 content of the 32-bit portions in Rs1 with the top
or bottom 16-bit Q15 content of the 32-bit portion in Rs2. The Q30 results are then right-shifted 15-
bits and saturated into Q15 values. The 32-bit Q15 values are then written into the 32-bit chunks in
Rd. When both the two Q15 inputs are 0x8000, saturation will happen. The result will be saturated
to 0x7FFF and the overflow flag OV will be set.

<strong>Operations</strong>:\n
@code 
// KHMBB16: (x,y,z)=(0,0,0),(2,2,1)
// KHMBT16: (x,y,z)=(0,1,0),(2,3,1)
// KHMTT16: (x,y,z)=(1,1,0),(3,3,1)
aop = Rs1.H[x]; bop = Rs2.H[y];
If (0x8000 != aop | 0x8000 != bop) {
  Mresult[31:0] = aop * bop;
  res[15:0] = Mresult[30:15];
} else {
  res[15:0] = 0x7FFF;
  OV = 1;
}
Rd.W[z] = SE32(res[15:0]);
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__32B__MULT__ADD_1ga085a8ed11950722dbf0822387c6624c2';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMABB32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '14674';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMABB32 (Saturating Signed Multiply Bottom Words & Add)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (RV64 Only)

<strong>Syntax</strong>:\n
@code 
KMABB32 Rd, Rs1, Rs2
KMABT32 Rd, Rs1, Rs2
KMATT32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit element in a register with the 32-bit element in another register
and add the result to the content of 64-bit data in the third register. The addition result may be
saturated and is written to the third register.
* KMABB32: rd + bottom*bottom
* KMABT32: rd + bottom*top
* KMATT32: rd + top*top

<strong>Description</strong>:\n
For the <tt>KMABB32</tt> instruction, it multiplies the bottom 32-bit element in Rs1 with the bottom 32-bit
element in Rs2.
For the <tt>KMABT32</tt> instruction, it multiplies the bottom 32-bit element in Rs1 with the top 32-bit
element in Rs2.
For the <tt>KMATT32</tt> instruction, it multiplies the top 32-bit element in Rs1 with the top 32-bit
element in Rs2.
The multiplication result is added to the content of 64-bit data in Rd. If the addition result is beyond
the Q63 number range (-2^63 <= Q63 <= 2^63-1), it is saturated to the range and the OV bit is set to 1. The
result after saturation is written to Rd. The 32-bit contents of Rs1 and Rs2 are treated as signed
integers.

<strong>Operations</strong>:\n
@code 
res = Rd + (Rs1.W[0] * Rs2.W[0]); // KMABB32
 res = Rd + (Rs1.W[0] * Rs2.W[1]); // KMABT32
 res = Rd + (Rs1.W[1] * Rs2.W[1]); // KMATT32
 if (res > (2^63)-1) {
   res = (2^63)-1;
   OV = 1;
 } else if (res < -2^63) {
   res = -2^63;
   OV = 1;
 }
 Rd = res;
*Exceptions:* None
@endcode

@param [in]  t    long type of value stored in t
@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__32B__MULT__ADD_1ga04b5c41f73199a8722cae46a4d8ed12c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMABT32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '14736';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMABT32 (Saturating Signed Multiply Bottom & Top Words & Add)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (RV64 Only)

<strong>Syntax</strong>:\n
@code 
KMABB32 Rd, Rs1, Rs2
KMABT32 Rd, Rs1, Rs2
KMATT32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit element in a register with the 32-bit element in another register
and add the result to the content of 64-bit data in the third register. The addition result may be
saturated and is written to the third register.
* KMABB32: rd + bottom*bottom
* KMABT32: rd + bottom*top
* KMATT32: rd + top*top

<strong>Description</strong>:\n
For the <tt>KMABB32</tt> instruction, it multiplies the bottom 32-bit element in Rs1 with the bottom 32-bit
element in Rs2.
For the <tt>KMABT32</tt> instruction, it multiplies the bottom 32-bit element in Rs1 with the top 32-bit
element in Rs2.
For the <tt>KMATT32</tt> instruction, it multiplies the top 32-bit element in Rs1 with the top 32-bit
element in Rs2.
The multiplication result is added to the content of 64-bit data in Rd. If the addition result is beyond
the Q63 number range (-2^63 <= Q63 <= 2^63-1), it is saturated to the range and the OV bit is set to 1. The
result after saturation is written to Rd. The 32-bit contents of Rs1 and Rs2 are treated as signed
integers.

<strong>Operations</strong>:\n
@code 
res = Rd + (Rs1.W[0] * Rs2.W[0]); // KMABB32
 res = Rd + (Rs1.W[0] * Rs2.W[1]); // KMABT32
 res = Rd + (Rs1.W[1] * Rs2.W[1]); // KMATT32
 if (res > (2^63)-1) {
   res = (2^63)-1;
   OV = 1;
 } else if (res < -2^63) {
   res = -2^63;
   OV = 1;
 }
 Rd = res;
*Exceptions:* None
@endcode

@param [in]  t    long type of value stored in t
@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__32B__MULT__ADD_1ga0dd16ba83a434e451bbe33110acd8bf5';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMATT32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '14798';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMATT32 (Saturating Signed Multiply Top Words & Add)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (RV64 Only)

<strong>Syntax</strong>:\n
@code 
KMABB32 Rd, Rs1, Rs2
KMABT32 Rd, Rs1, Rs2
KMATT32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit element in a register with the 32-bit element in another register
and add the result to the content of 64-bit data in the third register. The addition result may be
saturated and is written to the third register.
* KMABB32: rd + bottom*bottom
* KMABT32: rd + bottom*top
* KMATT32: rd + top*top

<strong>Description</strong>:\n
For the <tt>KMABB32</tt> instruction, it multiplies the bottom 32-bit element in Rs1 with the bottom 32-bit
element in Rs2.
For the <tt>KMABT32</tt> instruction, it multiplies the bottom 32-bit element in Rs1 with the top 32-bit
element in Rs2.
For the <tt>KMATT32</tt> instruction, it multiplies the top 32-bit element in Rs1 with the top 32-bit
element in Rs2.
The multiplication result is added to the content of 64-bit data in Rd. If the addition result is beyond
the Q63 number range (-2^63 <= Q63 <= 2^63-1), it is saturated to the range and the OV bit is set to 1. The
result after saturation is written to Rd. The 32-bit contents of Rs1 and Rs2 are treated as signed
integers.

<strong>Operations</strong>:\n
@code 
res = Rd + (Rs1.W[0] * Rs2.W[0]); // KMABB32
 res = Rd + (Rs1.W[0] * Rs2.W[1]); // KMABT32
 res = Rd + (Rs1.W[1] * Rs2.W[1]); // KMATT32
 if (res > (2^63)-1) {
   res = (2^63)-1;
   OV = 1;
 } else if (res < -2^63) {
   res = -2^63;
   OV = 1;
 }
 Rd = res;
*Exceptions:* None
@endcode

@param [in]  t    long type of value stored in t
@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__32B__PARALLEL__MAC_1ga11979b97e4c9c39a6207a233773ab2c6';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMADA32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '14854';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMADA32 (Saturating Signed Multiply Two Words and Two Adds)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (RV64 Only)

<strong>Syntax</strong>:\n
@code 
KMADA32 Rd, Rs1, Rs2
KMAXDA32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 32-bit multiplications from 32-bit data in two registers; and then adds the
two 64-bit results and 64-bit data in a third register together. The addition result may be saturated.
* KMADA32: rd + top*top + bottom*bottom
* KMAXDA32: rd + top*bottom + bottom*top

<strong>Description</strong>:\n
For the <tt>KMADA32</tt> instruction, it multiplies the bottom 32-bit element in Rs1 with the bottom 32-
bit element in Rs2 and then adds the result to the result of multiplying the top 32-bit element in Rs1
with the top 32-bit element in Rs2. It is actually an alias of the <tt>KMAR64</tt> instruction.
For the <tt>KMAXDA32</tt> instruction, it multiplies the top 32-bit element in Rs1 with the bottom 32-bit
element in Rs2 and then adds the result to the result of multiplying the bottom 32-bit element in Rs1
with the top 32-bit element in Rs2.
The result is added to the content of 64-bit data in Rd. If the addition result is beyond the Q63
number range (-2^63 <= Q63 <= 2^63-1), it is saturated to the range and the OV bit is set to 1. The 64-bit
result is written to Rd. The 32-bit contents of Rs1 and Rs2 are treated as signed integers.

<strong>Operations</strong>:\n
@code 
res = Rd + (Rs1.W[1] * Rs2.w[1]) + (Rs1.W[0] * Rs2.W[0]); // KMADA32
res = Rd + (Rs1.W[1] * Rs2.W[0]) + (Rs1.W[0] * Rs2.W[1]); // KMAXDA32
if (res > (2^63)-1) {
  res = (2^63)-1;
  OV = 1;
} else if (res < -2^63) {
  res = -2^63;
  OV = 1;
}
Rd = res;
@endcode

@param [in]  t    long type of value stored in t
@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__32B__PARALLEL__MAC_1gad15b341acf9f631a3cf1bc188846bd3f';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMAXDA32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '14910';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMAXDA32 (Saturating Signed Crossed Multiply Two Words and Two Adds)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (RV64 Only)

<strong>Syntax</strong>:\n
@code 
KMADA32 Rd, Rs1, Rs2
KMAXDA32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 32-bit multiplications from 32-bit data in two registers; and then adds the
two 64-bit results and 64-bit data in a third register together. The addition result may be saturated.
* KMADA32: rd + top*top + bottom*bottom
* KMAXDA32: rd + top*bottom + bottom*top

<strong>Description</strong>:\n
For the <tt>KMADA32</tt> instruction, it multiplies the bottom 32-bit element in Rs1 with the bottom 32-
bit element in Rs2 and then adds the result to the result of multiplying the top 32-bit element in Rs1
with the top 32-bit element in Rs2. It is actually an alias of the <tt>KMAR64</tt> instruction.
For the <tt>KMAXDA32</tt> instruction, it multiplies the top 32-bit element in Rs1 with the bottom 32-bit
element in Rs2 and then adds the result to the result of multiplying the bottom 32-bit element in Rs1
with the top 32-bit element in Rs2.
The result is added to the content of 64-bit data in Rd. If the addition result is beyond the Q63
number range (-2^63 <= Q63 <= 2^63-1), it is saturated to the range and the OV bit is set to 1. The 64-bit
result is written to Rd. The 32-bit contents of Rs1 and Rs2 are treated as signed integers.

<strong>Operations</strong>:\n
@code 
res = Rd + (Rs1.W[1] * Rs2.w[1]) + (Rs1.W[0] * Rs2.W[0]); // KMADA32
res = Rd + (Rs1.W[1] * Rs2.W[0]) + (Rs1.W[0] * Rs2.W[1]); // KMAXDA32
if (res > (2^63)-1) {
  res = (2^63)-1;
  OV = 1;
} else if (res < -2^63) {
  res = -2^63;
  OV = 1;
}
Rd = res;
@endcode

@param [in]  t    long type of value stored in t
@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__32B__PARALLEL__MAC_1ga02b187fe2c874439b89f7e4aaf1cfbd2';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMDA32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '14961';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMDA32 (Signed Multiply Two Words and Add)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (RV64 Only)

<strong>Syntax</strong>:\n
@code 
KMDA32 Rd, Rs1, Rs2
KMXDA32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 32-bit multiplications from the 32-bit element of two registers; and then
adds the two 64-bit results together. The addition result may be saturated.
* KMDA32: top*top + bottom*bottom
* KMXDA32: top*bottom + bottom*top

<strong>Description</strong>:\n
For the <tt>KMDA32</tt> instruction, it multiplies the bottom 32-bit element of Rs1 with the bottom 32-bit
element of Rs2 and then adds the result to the result of multiplying the top 32-bit element of Rs1
with the top 32-bit element of Rs2.
For the <tt>KMXDA32</tt> instruction, it multiplies the bottom 32-bit element of Rs1 with the top 32-bit
element of Rs2 and then adds the result to the result of multiplying the top 32-bit element of Rs1
with the bottom 32-bit element of Rs2.
The addition result is checked for saturation. If saturation happens, the result is saturated to 2^63-1.
The final result is written to Rd. The 32-bit contents are treated as signed integers.

<strong>Operations</strong>:\n
@code 
if ((Rs1 != 0x8000000080000000) or (Rs2 != 0x8000000080000000)) {
  Rd = (Rs1.W[1] * Rs2.W[1]) + (Rs1.W[0] * Rs2.W[0]); // KMDA32
  Rd = (Rs1.W[1] * Rs2.W[0]) + (Rs1.W[0] * Rs2.W[1]); // KMXDA32
} else {
  Rd = 0x7fffffffffffffff;
  OV = 1;
}
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__32B__PARALLEL__MAC_1ga708d857b175929adb849e6c7318bec61';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMXDA32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '15013';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMXDA32 (Signed Crossed Multiply Two Words and Add)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (RV64 Only)

<strong>Syntax</strong>:\n
@code 
KMDA32 Rd, Rs1, Rs2
KMXDA32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 32-bit multiplications from the 32-bit element of two registers; and then
adds the two 64-bit results together. The addition result may be saturated.
* KMDA32: top*top + bottom*bottom
* KMXDA32: top*bottom + bottom*top

<strong>Description</strong>:\n
For the <tt>KMDA32</tt> instruction, it multiplies the bottom 32-bit element of Rs1 with the bottom 32-bit
element of Rs2 and then adds the result to the result of multiplying the top 32-bit element of Rs1
with the top 32-bit element of Rs2.
For the <tt>KMXDA32</tt> instruction, it multiplies the bottom 32-bit element of Rs1 with the top 32-bit
element of Rs2 and then adds the result to the result of multiplying the top 32-bit element of Rs1
with the bottom 32-bit element of Rs2.
The addition result is checked for saturation. If saturation happens, the result is saturated to 2^63-1.
The final result is written to Rd. The 32-bit contents are treated as signed integers.

<strong>Operations</strong>:\n
@code 
if ((Rs1 != 0x8000000080000000) or (Rs2 != 0x8000000080000000)) {
  Rd = (Rs1.W[1] * Rs2.W[1]) + (Rs1.W[0] * Rs2.W[0]); // KMDA32
  Rd = (Rs1.W[1] * Rs2.W[0]) + (Rs1.W[0] * Rs2.W[1]); // KMXDA32
} else {
  Rd = 0x7fffffffffffffff;
  OV = 1;
}
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__32B__PARALLEL__MAC_1ga03f7197d2d11120ff89858efb9a15781';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMADS32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '15078';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMADS32 (Saturating Signed Multiply Two Words & Subtract & Add)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (RV64 Only)

<strong>Syntax</strong>:\n
@code 
KMADS32 Rd, Rs1, Rs2
KMADRS32 Rd, Rs1, Rs2
KMAXDS32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 32-bit multiplications from 32-bit elements in two registers; and then
perform a subtraction operation between the two 64-bit results. Then add the subtraction result to
64-bit data in a third register. The addition result may be saturated.
* KMADS32: rd + (top*top - bottom*bottom)
* KMADRS32: rd + (bottom*bottom - top*top)
* KMAXDS32: rd + (top*bottom - bottom*top)

<strong>Description</strong>:\n
For the <tt>KMADS32</tt> instruction, it multiplies the bottom 32-bit element in Rs1 with the bottom 32-bit
element in Rs2 and then subtracts the result from the result of multiplying the top 32-bit element in
Rs1 with the top 32-bit element in Rs2.
For the <tt>KMADRS32</tt> instruction, it multiplies the top 32-bit element in Rs1 with the top 32-bit
element in Rs2 and then subtracts the result from the result of multiplying the bottom 32-bit
element in Rs1 with the bottom 32-bit element in Rs2.
For the <tt>KMAXDS32</tt> instruction, it multiplies the bottom 32-bit element in Rs1 with the top 32-bit
element in Rs2 and then subtracts the result from the result of multiplying the top 32-bit element in
Rs1 with the bottom 32-bit element in Rs2.
The subtraction result is then added to the content of 64-bit data in Rd. If the addition result is
beyond the Q63 number range (-2^63 <= Q63 <= 2^63-1), it is saturated to the range and the OV bit is set to
1. The 64-bit result after saturation is written to Rd. The 32-bit contents of Rs1 and Rs2 are treated
as signed integers.

<strong>Operations</strong>:\n
@code 
res = Rd + (Rs1.W[1] * Rs2.W[1]) - (Rs1.W[0] * Rs2.W[0]); // KMADS32
res = Rd + (Rs1.W[0] * Rs2.W[0]) - (Rs1.W[1] * Rs2.W[1]); // KMADRS32
res = Rd + (Rs1.W[1] * Rs2.W[0]) - (Rs1.W[0] * Rs2.W[1]); // KMAXDS32
if (res > (2^63)-1) {
  res = (2^63)-1;
  OV = 1;
} else if (res < -2^63) {
  res = -2^63;
  OV = 1;
}
Rd = res;
@endcode

@param [in]  t    long type of value stored in t
@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__32B__PARALLEL__MAC_1ga0e378131d68d54303123bd67263ac732';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMADRS32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '15142';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMADRS32 (Saturating Signed Multiply Two Words & Reverse Subtract & Add)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (RV64 Only)

<strong>Syntax</strong>:\n
@code 
KMADS32 Rd, Rs1, Rs2
KMADRS32 Rd, Rs1, Rs2
KMAXDS32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 32-bit multiplications from 32-bit elements in two registers; and then
perform a subtraction operation between the two 64-bit results. Then add the subtraction result to
64-bit data in a third register. The addition result may be saturated.
* KMADS32: rd + (top*top - bottom*bottom)
* KMADRS32: rd + (bottom*bottom - top*top)
* KMAXDS32: rd + (top*bottom - bottom*top)

<strong>Description</strong>:\n
For the <tt>KMADS32</tt> instruction, it multiplies the bottom 32-bit element in Rs1 with the bottom 32-bit
element in Rs2 and then subtracts the result from the result of multiplying the top 32-bit element in
Rs1 with the top 32-bit element in Rs2.
For the <tt>KMADRS32</tt> instruction, it multiplies the top 32-bit element in Rs1 with the top 32-bit
element in Rs2 and then subtracts the result from the result of multiplying the bottom 32-bit
element in Rs1 with the bottom 32-bit element in Rs2.
For the <tt>KMAXDS32</tt> instruction, it multiplies the bottom 32-bit element in Rs1 with the top 32-bit
element in Rs2 and then subtracts the result from the result of multiplying the top 32-bit element in
Rs1 with the bottom 32-bit element in Rs2.
The subtraction result is then added to the content of 64-bit data in Rd. If the addition result is
beyond the Q63 number range (-2^63 <= Q63 <= 2^63-1), it is saturated to the range and the OV bit is set to
1. The 64-bit result after saturation is written to Rd. The 32-bit contents of Rs1 and Rs2 are treated
as signed integers.

<strong>Operations</strong>:\n
@code 
res = Rd + (Rs1.W[1] * Rs2.W[1]) - (Rs1.W[0] * Rs2.W[0]); // KMADS32
res = Rd + (Rs1.W[0] * Rs2.W[0]) - (Rs1.W[1] * Rs2.W[1]); // KMADRS32
res = Rd + (Rs1.W[1] * Rs2.W[0]) - (Rs1.W[0] * Rs2.W[1]); // KMAXDS32
if (res > (2^63)-1) {
  res = (2^63)-1;
  OV = 1;
} else if (res < -2^63) {
  res = -2^63;
  OV = 1;
}
Rd = res;
@endcode

@param [in]  t    long type of value stored in t
@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__32B__PARALLEL__MAC_1ga9e65096c66f1b9d4137ffa769c8fd0f8';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMAXDS32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '15206';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMAXDS32 (Saturating Signed Crossed Multiply Two Words & Subtract & Add)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (RV64 Only)

<strong>Syntax</strong>:\n
@code 
KMADS32 Rd, Rs1, Rs2
KMADRS32 Rd, Rs1, Rs2
KMAXDS32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 32-bit multiplications from 32-bit elements in two registers; and then
perform a subtraction operation between the two 64-bit results. Then add the subtraction result to
64-bit data in a third register. The addition result may be saturated.
* KMADS32: rd + (top*top - bottom*bottom)
* KMADRS32: rd + (bottom*bottom - top*top)
* KMAXDS32: rd + (top*bottom - bottom*top)

<strong>Description</strong>:\n
For the <tt>KMADS32</tt> instruction, it multiplies the bottom 32-bit element in Rs1 with the bottom 32-bit
element in Rs2 and then subtracts the result from the result of multiplying the top 32-bit element in
Rs1 with the top 32-bit element in Rs2.
For the <tt>KMADRS32</tt> instruction, it multiplies the top 32-bit element in Rs1 with the top 32-bit
element in Rs2 and then subtracts the result from the result of multiplying the bottom 32-bit
element in Rs1 with the bottom 32-bit element in Rs2.
For the <tt>KMAXDS32</tt> instruction, it multiplies the bottom 32-bit element in Rs1 with the top 32-bit
element in Rs2 and then subtracts the result from the result of multiplying the top 32-bit element in
Rs1 with the bottom 32-bit element in Rs2.
The subtraction result is then added to the content of 64-bit data in Rd. If the addition result is
beyond the Q63 number range (-2^63 <= Q63 <= 2^63-1), it is saturated to the range and the OV bit is set to
1. The 64-bit result after saturation is written to Rd. The 32-bit contents of Rs1 and Rs2 are treated
as signed integers.

<strong>Operations</strong>:\n
@code 
res = Rd + (Rs1.W[1] * Rs2.W[1]) - (Rs1.W[0] * Rs2.W[0]); // KMADS32
res = Rd + (Rs1.W[0] * Rs2.W[0]) - (Rs1.W[1] * Rs2.W[1]); // KMADRS32
res = Rd + (Rs1.W[1] * Rs2.W[0]) - (Rs1.W[0] * Rs2.W[1]); // KMAXDS32
if (res > (2^63)-1) {
  res = (2^63)-1;
  OV = 1;
} else if (res < -2^63) {
  res = -2^63;
  OV = 1;
}
Rd = res;
@endcode

@param [in]  t    long type of value stored in t
@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__32B__PARALLEL__MAC_1ga13d8c47ce9716d7ca5af629d0a81c0c7';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMSDA32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '15261';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMSDA32 (Saturating Signed Multiply Two Words & Add & Subtract)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (RV64 Only)

<strong>Syntax</strong>:\n
@code 
KMSDA32 Rd, Rs1, Rs2
KMSXDA32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 32-bit multiplications from the 32-bit element of two registers; and then
subtracts the two 64-bit results from a third register. The subtraction result may be saturated.
* KMSDA: rd - top*top - bottom*bottom
* KMSXDA: rd - top*bottom - bottom*top

<strong>Description</strong>:\n
For the <tt>KMSDA32</tt> instruction, it multiplies the bottom 32-bit element of Rs1 with the bottom 32-bit
element of Rs2 and multiplies the top 32-bit element of Rs1 with the top 32-bit element of Rs2.
For the <tt>KMSXDA32</tt> instruction, it multiplies the bottom 32-bit element of Rs1 with the top 32-bit
element of Rs2 and multiplies the top 32-bit element of Rs1 with the bottom 32-bit element of Rs2.
The two 64-bit multiplication results are then subtracted from the content of Rd. If the subtraction
result is beyond the Q63 number range (-2^63 <= Q63 <= 2^63-1), it is saturated to the range and the OV bit
is set to 1. The result after saturation is written to Rd. The 32-bit contents are treated as signed
integers.

<strong>Operations</strong>:\n
@code 
res = Rd - (Rs1.W[1] * Rs2.W[1]) - (Rs1.W[0] * Rs2.W[0]); // KMSDA32
res = Rd - (Rs1.W[1] * Rs2.W[0]) - (Rs1.W[0] * Rs2.W[1]); // KMSXDA32
if (res > (2^63)-1) {
  res = (2^63)-1;
  OV = 1;
} else if (res < -2^63) {
  res = -2^63;
  OV = 1;
}
Rd = res;
@endcode

@param [in]  t    long type of value stored in t
@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__32B__PARALLEL__MAC_1gaf92365cb63eca2c56201f0a0c054664b';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMSXDA32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '15316';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMSXDA32 (Saturating Signed Crossed Multiply Two Words & Add & Subtract)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (RV64 Only)

<strong>Syntax</strong>:\n
@code 
KMSDA32 Rd, Rs1, Rs2
KMSXDA32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 32-bit multiplications from the 32-bit element of two registers; and then
subtracts the two 64-bit results from a third register. The subtraction result may be saturated.
* KMSDA: rd - top*top - bottom*bottom
* KMSXDA: rd - top*bottom - bottom*top

<strong>Description</strong>:\n
For the <tt>KMSDA32</tt> instruction, it multiplies the bottom 32-bit element of Rs1 with the bottom 32-bit
element of Rs2 and multiplies the top 32-bit element of Rs1 with the top 32-bit element of Rs2.
For the <tt>KMSXDA32</tt> instruction, it multiplies the bottom 32-bit element of Rs1 with the top 32-bit
element of Rs2 and multiplies the top 32-bit element of Rs1 with the bottom 32-bit element of Rs2.
The two 64-bit multiplication results are then subtracted from the content of Rd. If the subtraction
result is beyond the Q63 number range (-2^63 <= Q63 <= 2^63-1), it is saturated to the range and the OV bit
is set to 1. The result after saturation is written to Rd. The 32-bit contents are treated as signed
integers.

<strong>Operations</strong>:\n
@code 
res = Rd - (Rs1.W[1] * Rs2.W[1]) - (Rs1.W[0] * Rs2.W[0]); // KMSDA32
res = Rd - (Rs1.W[1] * Rs2.W[0]) - (Rs1.W[0] * Rs2.W[1]); // KMSXDA32
if (res > (2^63)-1) {
  res = (2^63)-1;
  OV = 1;
} else if (res < -2^63) {
  res = -2^63;
  OV = 1;
}
Rd = res;
@endcode

@param [in]  t    long type of value stored in t
@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__SHIFT_1ga4f3e9c4c72aaa40f0fb4b143933178ce';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KSLL32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '15367';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KSLL32 (SIMD 32-bit Saturating Shift Left Logical)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code 
KSLL32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit elements logical left shift operations with saturation simultaneously. The shift
amount is a variable from a GPR.

<strong>Description</strong>:\n
The 32-bit data elements in Rs1 are left-shifted logically. The shifted out bits are filled
with zero and the shift amount is specified by the low-order 5-bits of the value in the Rs2 register.
Any shifted value greater than 2^31-1 is saturated to 2^31-1. Any shifted value smaller than -2^31 is
saturated to -2^31. And the saturated results are written to Rd. If any saturation is performed, set OV
bit to 1.

<strong>Operations</strong>:\n
@code 
sa = Rs2[4:0];
if (sa != 0) {
  res[(31+sa):0] = Rs1.W[x] << sa;
  if (res > (2^31)-1) {
    res = 0x7fffffff; OV = 1;
  } else if (res < -2^31) {
    res = 0x80000000; OV = 1;
  }
  Rd.W[x] = res[31:0];
} else {
  Rd = Rs1;
}
for RV64: x=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__SHIFT_1gaac9d8fddae94b97c09f59f93f01b81c9';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KSLRA32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '15485';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KSLRA32 (SIMD 32-bit Shift Left Logical with Saturation or Shift Right Arithmetic)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code 
KSLRA32 Rd, Rs1, Rs2
KSLRA32.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit elements logical left (positive) or arithmetic right (negative) shift operation with
Q31 saturation for the left shift. The <tt>.u</tt> form performs additional rounding up operations for the
right shift.

<strong>Description</strong>:\n
The 32-bit data elements of Rs1 are left-shifted logically or right-shifted arithmetically
based on the value of Rs2[5:0]. Rs2[5:0] is in the signed range of [-25, 25-1]. A positive Rs2[5:0] means
logical left shift and a negative Rs2[5:0] means arithmetic right shift. The shift amount is the
absolute value of Rs2[5:0]. However, the behavior of <tt>Rs2[5:0]==-25 (0x20)</tt> is defined to be
equivalent to the behavior of <tt>Rs2[5:0]==-(25-1) (0x21)</tt>.
The left-shifted results are saturated to the 32-bit signed integer range of [-2^31, 2^31-1]. For the <tt>.u</tt>
form of the instruction, the right-shifted results are added a 1 to the most significant discarded bit
position for rounding effect. After the shift, saturation, or rounding, the final results are written to
Rd. If any saturation happens, this instruction sets the OV flag. The value of Rs2[31:6] will not affect
this instruction.

<strong>Operations</strong>:\n
@code 
if (Rs2[5:0] < 0) {
  sa = -Rs2[5:0];
  sa = (sa == 32)? 31 : sa;
  if (`.u` form) {
    res[31:-1] = SE33(Rs1.W[x][31:sa-1]) + 1;
    Rd.W[x] = res[31:0];
  } else {
    Rd.W[x] = SE32(Rs1.W[x][31:sa]);
  }
} else {
  sa = Rs2[4:0];
  res[(31+sa):0] = Rs1.W[x] <<(logic) sa;
  if (res > (2^31)-1) {
    res[31:0] = 0x7fffffff; OV = 1;
  } else if (res < -2^31) {
    res[31:0] = 0x80000000; OV = 1;
  }
  Rd.W[x] = res[31:0];
}
for RV64: x=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__SHIFT_1gaf432cd440b93dcd519459b4107691173';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KSLRA32_U';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '15551';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KSLRA32.u (SIMD 32-bit Shift Left Logical with Saturation or Rounding Shift Right Arithmetic)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code 
KSLRA32 Rd, Rs1, Rs2
KSLRA32.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit elements logical left (positive) or arithmetic right (negative) shift operation with
Q31 saturation for the left shift. The <tt>.u</tt> form performs additional rounding up operations for the
right shift.

<strong>Description</strong>:\n
The 32-bit data elements of Rs1 are left-shifted logically or right-shifted arithmetically
based on the value of Rs2[5:0]. Rs2[5:0] is in the signed range of [-25, 25-1]. A positive Rs2[5:0] means
logical left shift and a negative Rs2[5:0] means arithmetic right shift. The shift amount is the
absolute value of Rs2[5:0]. However, the behavior of <tt>Rs2[5:0]==-25 (0x20)</tt> is defined to be
equivalent to the behavior of <tt>Rs2[5:0]==-(25-1) (0x21)</tt>.
The left-shifted results are saturated to the 32-bit signed integer range of [-2^31, 2^31-1]. For the <tt>.u</tt>
form of the instruction, the right-shifted results are added a 1 to the most significant discarded bit
position for rounding effect. After the shift, saturation, or rounding, the final results are written to
Rd. If any saturation happens, this instruction sets the OV flag. The value of Rs2[31:6] will not affect
this instruction.

<strong>Operations</strong>:\n
@code 
if (Rs2[5:0] < 0) {
  sa = -Rs2[5:0];
  sa = (sa == 32)? 31 : sa;
  if (`.u` form) {
    res[31:-1] = SE33(Rs1.W[x][31:sa-1]) + 1;
    Rd.W[x] = res[31:0];
  } else {
    Rd.W[x] = SE32(Rs1.W[x][31:sa]);
  }
} else {
  sa = Rs2[4:0];
  res[(31+sa):0] = Rs1.W[x] <<(logic) sa;
  if (res > (2^31)-1) {
    res[31:0] = 0x7fffffff; OV = 1;
  } else if (res < -2^31) {
    res[31:0] = 0x80000000; OV = 1;
  }
  Rd.W[x] = res[31:0];
}
for RV64: x=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__ADDSUB_1gabfa35c8c4da10b658fc4f9f295945c40';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KSTAS32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '15603';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KSTAS32 (SIMD 32-bit Signed Saturating Straight Addition & Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code 
KSTAS32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit signed integer element saturating addition and 32-bit signed integer element
saturating subtraction in a 64-bit chunk simultaneously. Operands are from corresponding 32-bit
elements.

<strong>Description</strong>:\n
This instruction adds the 32-bit integer element in [63:32] of Rs1 with the 32-bit
integer element in [63:32] of Rs2; at the same time, it subtracts the 32-bit integer element in [31:0] of
Rs2 from the 32-bit integer element in [31:0] of Rs1. If any of the results are beyond the Q31 number
range (-2^31 <= Q31 <= 2^31-1), they are saturated to the range and the OV bit is set to 1. The saturated
results are written to [63:32] of Rd for addition and [31:0] of Rd for subtraction.

<strong>Operations</strong>:\n
@code 
res[1] = Rs1.W[1] + Rs2.W[1];
res[0] = Rs1.W[0] - Rs2.W[0];
if (res[x] > (2^31)-1) {
  res[x] = (2^31)-1;
  OV = 1;
} else if (res < -2^31) {
  res[x] = -2^31;
  OV = 1;
}
Rd.W[1] = res[1];
Rd.W[0] = res[0];
for RV64, x=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__ADDSUB_1gafcc677fb6b75c7ae82abbec436bf5ae1';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KSTSA32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '15654';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KSTSA32 (SIMD 32-bit Signed Saturating Straight Subtraction & Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIM (RV64 Only)

<strong>Syntax</strong>:\n
@code 
KSTSA32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit signed integer element saturating subtraction and 32-bit signed integer element
saturating addition in a 64-bit chunk simultaneously. Operands are from corresponding 32-bit
elements.
*Description: *
This instruction subtracts the 32-bit integer element in [63:32] of Rs2 from the 32-bit integer
element in [63:32] of Rs1; at the same time, it adds the 32-bit integer element in [31:0] of Rs1 with
the 32-bit integer element in [31:0] of Rs2. If any of the results are beyond the Q31 number range (
-2^31 <= Q31 <= 2^31-1), they are saturated to the range and the OV bit is set to 1. The saturated results are
written to [63:32] of Rd for subtraction and [31:0] of Rd for addition.

<strong>Operations</strong>:\n
@code 
res[1] = Rs1.W[1] - Rs2.W[1];
res[0] = Rs1.W[0] + Rs2.W[0];
if (res[x] > (2^31)-1) {
  res[x] = (2^31)-1;
  OV = 1;
} else if (res < -2^31) {
  res[x] = -2^31;
  OV = 1;
}
Rd.W[1] = res[1];
Rd.W[0] = res[0];
for RV64, x=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__ADDSUB_1ga2c48127c84b6c0ec441cab1d048d2082';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KSUB32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '15701';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KSUB32 (SIMD 32-bit Signed Saturating Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code 
KSUB32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit signed integer elements saturating subtractions simultaneously.

<strong>Description</strong>:\n
This instruction subtracts the 32-bit signed integer elements in Rs2 from the 32-bit
signed integer elements in Rs1. If any of the results are beyond the Q31 number range (-2^31 <= Q31 <=
2^31-1), they are saturated to the range and the OV bit is set to 1. The saturated results are written to
Rd.

<strong>Operations</strong>:\n
@code 
res[x] = Rs1.W[x] - Rs2.W[x];
if (res[x] > (2^31)-1) {
  res[x] = (2^31)-1;
  OV = 1;
} else if (res[x] < -2^31) {
  res[x] = -2^31;
  OV = 1;
}
Rd.W[x] = res[x];
for RV64: x=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__32B__PACK_1ga56dff3ebca8b83c5b6fafc649a564fe9';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_PKBB32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '15749';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
PKBB32 (Pack Two 32-bit Data from Both Bottom Half)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (RV64 Only)

<strong>Syntax</strong>:\n
@code 
PKBB32 Rd, Rs1, Rs2
PKBT32 Rd, Rs1, Rs2
PKTT32 Rd, Rs1, Rs2
PKTB32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Pack 32-bit data from 64-bit chunks in two registers.
* PKBB32: bottom.bottom
* PKBT32: bottom.top
* PKTT32: top.top
* PKTB32: top.bottom

<strong>Description</strong>:\n
(PKBB32) moves Rs1.W[0] to Rd.W[1] and moves Rs2.W[0] to Rd.W[0].
(PKBT32) moves Rs1.W[0] to Rd.W[1] and moves Rs2.W[1] to Rd.W[0].
(PKTT32) moves Rs1.W[1] to Rd.W[1] and moves Rs2.W[1] to Rd.W[0].
(PKTB32) moves Rs1.W[1] to Rd.W[1] and moves Rs2.W[0] to Rd.W[0].

<strong>Operations</strong>:\n
@code 
Rd = CONCAT(Rs1.W[_*0*_], Rs2.W[_*0*_]); // PKBB32
Rd = CONCAT(Rs1.W[_*0*_], Rs2.W[_*1*_]); // PKBT32
Rd = CONCAT(Rs1.W[_*1*_], Rs2.W[_*1*_]); // PKTT32
Rd = CONCAT(Rs1.W[_*1*_], Rs2.W[_*0*_]); // PKTB32
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__32B__PACK_1ga469c59f0918b6427ce1e84834969f975';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_PKBT32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '15797';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
PKBT32 (Pack Two 32-bit Data from Bottom and Top Half)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (RV64 Only)

<strong>Syntax</strong>:\n
@code 
PKBB32 Rd, Rs1, Rs2
PKBT32 Rd, Rs1, Rs2
PKTT32 Rd, Rs1, Rs2
PKTB32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Pack 32-bit data from 64-bit chunks in two registers.
* PKBB32: bottom.bottom
* PKBT32: bottom.top
* PKTT32: top.top
* PKTB32: top.bottom

<strong>Description</strong>:\n
(PKBB32) moves Rs1.W[0] to Rd.W[1] and moves Rs2.W[0] to Rd.W[0].
(PKBT32) moves Rs1.W[0] to Rd.W[1] and moves Rs2.W[1] to Rd.W[0].
(PKTT32) moves Rs1.W[1] to Rd.W[1] and moves Rs2.W[1] to Rd.W[0].
(PKTB32) moves Rs1.W[1] to Rd.W[1] and moves Rs2.W[0] to Rd.W[0].

<strong>Operations</strong>:\n
@code 
Rd = CONCAT(Rs1.W[_*0*_], Rs2.W[_*0*_]); // PKBB32
Rd = CONCAT(Rs1.W[_*0*_], Rs2.W[_*1*_]); // PKBT32
Rd = CONCAT(Rs1.W[_*1*_], Rs2.W[_*1*_]); // PKTT32
Rd = CONCAT(Rs1.W[_*1*_], Rs2.W[_*0*_]); // PKTB32
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__32B__PACK_1ga89607536fe1c8fca11131ea66b909507';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_PKTT32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '15845';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
PKTT32 (Pack Two 32-bit Data from Both Top Half)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (RV64 Only)

<strong>Syntax</strong>:\n
@code 
PKBB32 Rd, Rs1, Rs2
PKBT32 Rd, Rs1, Rs2
PKTT32 Rd, Rs1, Rs2
PKTB32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Pack 32-bit data from 64-bit chunks in two registers.
* PKBB32: bottom.bottom
* PKBT32: bottom.top
* PKTT32: top.top
* PKTB32: top.bottom

<strong>Description</strong>:\n
(PKBB32) moves Rs1.W[0] to Rd.W[1] and moves Rs2.W[0] to Rd.W[0].
(PKBT32) moves Rs1.W[0] to Rd.W[1] and moves Rs2.W[1] to Rd.W[0].
(PKTT32) moves Rs1.W[1] to Rd.W[1] and moves Rs2.W[1] to Rd.W[0].
(PKTB32) moves Rs1.W[1] to Rd.W[1] and moves Rs2.W[0] to Rd.W[0].

<strong>Operations</strong>:\n
@code 
Rd = CONCAT(Rs1.W[_*0*_], Rs2.W[_*0*_]); // PKBB32
Rd = CONCAT(Rs1.W[_*0*_], Rs2.W[_*1*_]); // PKBT32
Rd = CONCAT(Rs1.W[_*1*_], Rs2.W[_*1*_]); // PKTT32
Rd = CONCAT(Rs1.W[_*1*_], Rs2.W[_*0*_]); // PKTB32
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__32B__PACK_1gaf8183f498b9d4e3f7cc20e3452f6d194';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_PKTB32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '15893';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
PKTB32 (Pack Two 32-bit Data from Top and Bottom Half)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (RV64 Only)

<strong>Syntax</strong>:\n
@code 
PKBB32 Rd, Rs1, Rs2
PKBT32 Rd, Rs1, Rs2
PKTT32 Rd, Rs1, Rs2
PKTB32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Pack 32-bit data from 64-bit chunks in two registers.
* PKBB32: bottom.bottom
* PKBT32: bottom.top
* PKTT32: top.top
* PKTB32: top.bottom

<strong>Description</strong>:\n
(PKBB32) moves Rs1.W[0] to Rd.W[1] and moves Rs2.W[0] to Rd.W[0].
(PKBT32) moves Rs1.W[0] to Rd.W[1] and moves Rs2.W[1] to Rd.W[0].
(PKTT32) moves Rs1.W[1] to Rd.W[1] and moves Rs2.W[1] to Rd.W[0].
(PKTB32) moves Rs1.W[1] to Rd.W[1] and moves Rs2.W[0] to Rd.W[0].

<strong>Operations</strong>:\n
@code 
Rd = CONCAT(Rs1.W[_*0*_], Rs2.W[_*0*_]); // PKBB32
Rd = CONCAT(Rs1.W[_*0*_], Rs2.W[_*1*_]); // PKBT32
Rd = CONCAT(Rs1.W[_*1*_], Rs2.W[_*1*_]); // PKTT32
Rd = CONCAT(Rs1.W[_*1*_], Rs2.W[_*0*_]); // PKTB32
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__ADDSUB_1gae5b48cbde9950674461afbfb0037943c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_RADD32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '15939';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RADD32 (SIMD 32-bit Signed Halving Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code 
RADD32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit signed integer element additions simultaneously. The results are halved to avoid
overflow or saturation.

<strong>Description</strong>:\n
This instruction adds the 32-bit signed integer elements in Rs1 with the 32-bit signed
integer elements in Rs2. The results are first arithmetically right-shifted by 1 bit and then written to
Rd.

<strong>Examples</strong>:\n
@code 
* Rs1 = 0x7FFFFFFF, Rs2 = 0x7FFFFFFF Rd = 0x7FFFFFFF
* Rs1 = 0x80000000, Rs2 = 0x80000000 Rd = 0x80000000
* Rs1 = 0x40000000, Rs2 = 0x80000000 Rd = 0xE0000000
@endcode

<strong>Operations</strong>:\n
@code 
Rd.W[x] = (Rs1.W[x] + Rs2.W[x]) s>> 1;
for RV64: x=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__ADDSUB_1ga2ec462dcdc30cdad71726efe43ee34b0';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_RCRAS32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '15986';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RCRAS32 (SIMD 32-bit Signed Halving Cross Addition & Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code 
RCRAS32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit signed integer element addition and 32-bit signed integer element subtraction in
a 64-bit chunk simultaneously. Operands are from crossed 32-bit elements. The results are halved to
avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction adds the 32-bit signed integer element in [63:32] of Rs1 with the 32-bit
signed integer element in [31:0] of Rs2, and subtracts the 32-bit signed integer element in [63:32] of
Rs2 from the 32-bit signed integer element in [31:0] of Rs1. The element results are first
arithmetically right-shifted by 1 bit and then written to [63:32] of Rd for addition and [31:0] of Rd
for subtraction.

<strong>Examples</strong>:\n
@code 
Please see `RADD32` and `RSUB32` instructions.
@endcode

<strong>Operations</strong>:\n
@code 
Rd.W[1] = (Rs1.W[1] + Rs2.W[0]) s>> 1;
Rd.W[0] = (Rs1.W[0] - Rs2.W[1]) s>> 1;
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__ADDSUB_1ga33061b2476bd16965e249987b8ccf74b';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_RCRSA32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '16033';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RCRSA32 (SIMD 32-bit Signed Halving Cross Subtraction & Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code 
RCRSA32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit signed integer element subtraction and 32-bit signed integer element addition in
a 64-bit chunk simultaneously. Operands are from crossed 32-bit elements. The results are halved to
avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction subtracts the 32-bit signed integer element in [31:0] of Rs2 from the
32-bit signed integer element in [63:32] of Rs1, and adds the 32-bit signed element integer in [31:0]
of Rs1 with the 32-bit signed integer element in [63:32] of Rs2. The two results are first
arithmetically right-shifted by 1 bit and then written to [63:32] of Rd for subtraction and [31:0] of
Rd for addition.

<strong>Examples</strong>:\n
@code 
Please see `RADD32` and `RSUB32` instructions.
@endcode

<strong>Operations</strong>:\n
@code 
Rd.W[1] = (Rs1.W[1] - Rs2.W[0]) s>> 1;
Rd.W[0] = (Rs1.W[0] + Rs2.W[1]) s>> 1;
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__ADDSUB_1gaced91aec5bed74368de805e174999475';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_RSTAS32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '16080';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RSTAS32 (SIMD 32-bit Signed Halving Straight Addition & Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code 
RSTAS32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit signed integer element addition and 32-bit signed integer element subtraction in
a 64-bit chunk simultaneously. Operands are from corresponding 32-bit elements. The results are
halved to avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction adds the 32-bit signed integer element in [63:32] of Rs1 with the 32-bit
signed integer element in [63:32] of Rs2, and subtracts the 32-bit signed integer element in [31:0] of
Rs2 from the 32-bit signed integer element in [31:0] of Rs1. The element results are first
arithmetically right-shifted by 1 bit and then written to [63:32] of Rd for addition and [31:0] of Rd
for subtraction.

<strong>Examples</strong>:\n
@code 
Please see `RADD32` and `RSUB32` instructions.
@endcode

<strong>Operations</strong>:\n
@code 
Rd.W[1] = (Rs1.W[1] + Rs2.W[1]) s>> 1;
Rd.W[0] = (Rs1.W[0] - Rs2.W[0]) s>> 1;
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__ADDSUB_1ga93aba0996a17d19ad3cc1e67288b3270';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_RSTSA32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '16126';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RSTSA32 (SIMD 32-bit Signed Halving Straight Subtraction & Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code 
RSTSA32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit signed integer element subtraction and 32-bit signed integer element addition in
a 64-bit chunk simultaneously. Operands are from corresponding 32-bit elements. The results are
halved to avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction subtracts the 32-bit signed integer element in [63:32] of Rs2 from the
32-bit signed integer element in [63:32] of Rs1, and adds the 32-bit signed element integer in [31:0]
of Rs1 with the 32-bit signed integer element in [31:0] of Rs2. The two results are first arithmetically
right-shifted by 1 bit and then written to [63:32] of Rd for subtraction and [31:0] of Rd for addition.

<strong>Examples</strong>:\n
@code 
Please see `RADD32` and `RSUB32` instructions.
@endcode

<strong>Operations</strong>:\n
@code 
Rd.W[1] = (Rs1.W[1] - Rs2.W[1]) s>> 1;
Rd.W[0] = (Rs1.W[0] + Rs2.W[0]) s>> 1;
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__ADDSUB_1ga816e85e762afdbbbf6073ccdd84dab9d';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_RSUB32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '16172';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RSUB32 (SIMD 32-bit Signed Halving Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code 
RSUB32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit signed integer element subtractions simultaneously. The results are halved to
avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction subtracts the 32-bit signed integer elements in Rs2 from the 32-bit
signed integer elements in Rs1. The results are first arithmetically right-shifted by 1 bit and then
written to Rd.

<strong>Examples</strong>:\n
@code 
* Ra = 0x7FFFFFFF, Rb = 0x80000000 Rt = 0x7FFFFFFF
* Ra = 0x80000000, Rb = 0x7FFFFFFF Rt = 0x80000000
* Ra = 0x80000000, Rb = 0x40000000 Rt = 0xA0000000
@endcode

<strong>Operations</strong>:\n
@code 
Rd.W[x] = (Rs1.W[x] - Rs2.W[x]) s>> 1;
for RV64: x=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__SHIFT_1gada1903a81ca0df7a3c28c169a85a1dab';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SLL32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '16212';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SLL32 (SIMD 32-bit Shift Left Logical)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code 
SLL32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit elements logical left shift operations simultaneously. The shift amount is a
variable from a GPR.

<strong>Description</strong>:\n
The 32-bit elements in Rs1 are left-shifted logically. And the results are written to Rd.
The shifted out bits are filled with zero and the shift amount is specified by the low-order 5-bits of
the value in the Rs2 register.

<strong>Operations</strong>:\n
@code 
sa = Rs2[4:0];
Rd.W[x] = Rs1.W[x] << sa;
for RV64: x=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__MISC_1ga7ebc0969cd46664712766e7acd3cba73';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMAX32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '16290';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMAX32 (SIMD 32-bit Signed Maximum)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code 
SMAX32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit signed integer elements finding maximum operations simultaneously.

<strong>Description</strong>:\n
This instruction compares the 32-bit signed integer elements in Rs1 with the 32-bit
signed integer elements in Rs2 and selects the numbers that is greater than the other one. The
selected results are written to Rd.

<strong>Operations</strong>:\n
@code 
Rd.W[x] = (Rs1.W[x] > Rs2.W[x])? Rs1.W[x] : Rs2.W[x];
for RV64: x=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__32B__MULT_1ga67f3972b5510e84004471785925aa25b';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMBB32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '16339';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMBB32 (Signed Multiply Bottom Word & Bottom Word)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (RV64 Only)

<strong>Syntax</strong>:\n
@code 
SMBB32 Rd, Rs1, Rs2
SMBT32 Rd, Rs1, Rs2
SMTT32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit element of a register with the signed 32-bit element of another
register and write the 64-bit result to a third register.
* SMBB32: bottom*bottom
* SMBT32: bottom*top
* SMTT32: top*top

<strong>Description</strong>:\n
For the <tt>SMBB32</tt> instruction, it multiplies the bottom 32-bit element of Rs1 with the bottom 32-bit
element of Rs2. It is actually an alias of <tt>MULSR64</tt> instruction.
For the <tt>SMBT32</tt> instruction, it multiplies the bottom 32-bit element of Rs1 with the top 32-bit
element of Rs2.
For the <tt>SMTT32</tt> instruction, it multiplies the top 32-bit element of Rs1 with the top 32-bit element
of Rs2.
The 64-bit multiplication result is written to Rd. The 32-bit contents of Rs1 and Rs2 are treated as
signed integers.

<strong>Operations</strong>:\n
@code 
res = Rs1.W[0] * Rs2.W[0]; // SMBB32 res = Rs1.W[0] * Rs2.w[1]; // SMBT32 res = Rs1.W[1] * Rs2.W[1];
// SMTT32 Rd = res;
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__32B__MULT_1gaba92f1975a35bbd2d6dd3d4c684a0e88';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMBT32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '16388';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMBT32 (Signed Multiply Bottom Word & Top Word)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (RV64 Only)

<strong>Syntax</strong>:\n
@code 
SMBB32 Rd, Rs1, Rs2
SMBT32 Rd, Rs1, Rs2
SMTT32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit element of a register with the signed 32-bit element of another
register and write the 64-bit result to a third register.
* SMBB32: bottom*bottom
* SMBT32: bottom*top
* SMTT32: top*top

<strong>Description</strong>:\n
For the <tt>SMBB32</tt> instruction, it multiplies the bottom 32-bit element of Rs1 with the bottom 32-bit
element of Rs2. It is actually an alias of <tt>MULSR64</tt> instruction.
For the <tt>SMBT32</tt> instruction, it multiplies the bottom 32-bit element of Rs1 with the top 32-bit
element of Rs2.
For the <tt>SMTT32</tt> instruction, it multiplies the top 32-bit element of Rs1 with the top 32-bit element
of Rs2.
The 64-bit multiplication result is written to Rd. The 32-bit contents of Rs1 and Rs2 are treated as
signed integers.

<strong>Operations</strong>:\n
@code 
res = Rs1.W[0] * Rs2.W[0]; // SMBB32 res = Rs1.W[0] * Rs2.w[1]; // SMBT32 res = Rs1.W[1] * Rs2.W[1];
// SMTT32 Rd = res;
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__32B__MULT_1ga655719f1d3c7ef9ac168ef81838feaee';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMTT32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '16437';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMTT32 (Signed Multiply Top Word & Top Word)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (RV64 Only)

<strong>Syntax</strong>:\n
@code 
SMBB32 Rd, Rs1, Rs2
SMBT32 Rd, Rs1, Rs2
SMTT32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit element of a register with the signed 32-bit element of another
register and write the 64-bit result to a third register.
* SMBB32: bottom*bottom
* SMBT32: bottom*top
* SMTT32: top*top

<strong>Description</strong>:\n
For the <tt>SMBB32</tt> instruction, it multiplies the bottom 32-bit element of Rs1 with the bottom 32-bit
element of Rs2. It is actually an alias of <tt>MULSR64</tt> instruction.
For the <tt>SMBT32</tt> instruction, it multiplies the bottom 32-bit element of Rs1 with the top 32-bit
element of Rs2.
For the <tt>SMTT32</tt> instruction, it multiplies the top 32-bit element of Rs1 with the top 32-bit element
of Rs2.
The 64-bit multiplication result is written to Rd. The 32-bit contents of Rs1 and Rs2 are treated as
signed integers.

<strong>Operations</strong>:\n
@code 
res = Rs1.W[0] * Rs2.W[0]; // SMBB32 res = Rs1.W[0] * Rs2.w[1]; // SMBT32 res = Rs1.W[1] * Rs2.W[1];
// SMTT32 Rd = res;
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__32B__PARALLEL__MAC_1ga10d42564124518365b51ba8fc999e42d';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMDS32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '16490';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMDS32 (Signed Multiply Two Words and Subtract)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (RV64 Only)

<strong>Syntax</strong>:\n
@code 
SMDS32 Rd, Rs1, Rs2
SMDRS32 Rd, Rs1, Rs2
SMXDS32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 32-bit multiplications from the l 32-bit element of two registers; and then
perform a subtraction operation between the two 64-bit results.
* SMDS32: top*top - bottom*bottom
* SMDRS32: bottom*bottom - top*top
* SMXDS32: top*bottom - bottom*top

<strong>Description</strong>:\n
For the <tt>SMDS32</tt> instruction, it multiplies the bottom 32-bit element of Rs1 with the bottom 32-bit
element of Rs2 and then subtracts the result from the result of multiplying the top 32-bit element of
Rs1 with the top 32-bit element of Rs2.
For the <tt>SMDRS32</tt> instruction, it multiplies the top 32-bit element of Rs1 with the top 32-bit
element of Rs2 and then subtracts the result from the result of multiplying the bottom 32-bit
element of Rs1 with the bottom 32-bit element of Rs2.
For the <tt>SMXDS32</tt> instruction, it multiplies the bottom 32-bit element of Rs1 with the top 32-bit
element of Rs2 and then subtracts the result from the result of multiplying the top 32-bit element of
Rs1 with the bottom 32-bit element of Rs2.
The subtraction result is written to Rd. The 32-bit contents of Rs1 and Rs2 are treated as signed
integers.

<strong>Operations</strong>:\n
@code 
Rt = (Rs1.W[1] * Rs2.W[1]) - (Rs1.W[0] * Rs2.W[0]); // SMDS32
Rt = (Rs1.W[0] * Rs2.W[0]) - (Rs1.W[1] * Rs2.W[1]); // SMDRS32
Rt = (Rs1.W[1] * Rs2.W[0]) - (Rs1.W[0] * Rs2.W[1]); // SMXDS32
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__32B__PARALLEL__MAC_1ga211678cfa93e9cc7155746a699a457ba';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMDRS32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '16543';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMDRS32 (Signed Multiply Two Words and Reverse Subtract)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (RV64 Only)

<strong>Syntax</strong>:\n
@code 
SMDS32 Rd, Rs1, Rs2
SMDRS32 Rd, Rs1, Rs2
SMXDS32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 32-bit multiplications from the l 32-bit element of two registers; and then
perform a subtraction operation between the two 64-bit results.
* SMDS32: top*top - bottom*bottom
* SMDRS32: bottom*bottom - top*top
* SMXDS32: top*bottom - bottom*top

<strong>Description</strong>:\n
For the <tt>SMDS32</tt> instruction, it multiplies the bottom 32-bit element of Rs1 with the bottom 32-bit
element of Rs2 and then subtracts the result from the result of multiplying the top 32-bit element of
Rs1 with the top 32-bit element of Rs2.
For the <tt>SMDRS32</tt> instruction, it multiplies the top 32-bit element of Rs1 with the top 32-bit
element of Rs2 and then subtracts the result from the result of multiplying the bottom 32-bit
element of Rs1 with the bottom 32-bit element of Rs2.
For the <tt>SMXDS32</tt> instruction, it multiplies the bottom 32-bit element of Rs1 with the top 32-bit
element of Rs2 and then subtracts the result from the result of multiplying the top 32-bit element of
Rs1 with the bottom 32-bit element of Rs2.
The subtraction result is written to Rd. The 32-bit contents of Rs1 and Rs2 are treated as signed
integers.

<strong>Operations</strong>:\n
@code 
Rt = (Rs1.W[1] * Rs2.W[1]) - (Rs1.W[0] * Rs2.W[0]); // SMDS32
Rt = (Rs1.W[0] * Rs2.W[0]) - (Rs1.W[1] * Rs2.W[1]); // SMDRS32
Rt = (Rs1.W[1] * Rs2.W[0]) - (Rs1.W[0] * Rs2.W[1]); // SMXDS32
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__32B__PARALLEL__MAC_1ga1f2c26b1da4fb4329ecde53421e18c78';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMXDS32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '16596';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMXDS32 (Signed Crossed Multiply Two Words and Subtract)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (RV64 Only)

<strong>Syntax</strong>:\n
@code 
SMDS32 Rd, Rs1, Rs2
SMDRS32 Rd, Rs1, Rs2
SMXDS32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 32-bit multiplications from the l 32-bit element of two registers; and then
perform a subtraction operation between the two 64-bit results.
* SMDS32: top*top - bottom*bottom
* SMDRS32: bottom*bottom - top*top
* SMXDS32: top*bottom - bottom*top

<strong>Description</strong>:\n
For the <tt>SMDS32</tt> instruction, it multiplies the bottom 32-bit element of Rs1 with the bottom 32-bit
element of Rs2 and then subtracts the result from the result of multiplying the top 32-bit element of
Rs1 with the top 32-bit element of Rs2.
For the <tt>SMDRS32</tt> instruction, it multiplies the top 32-bit element of Rs1 with the top 32-bit
element of Rs2 and then subtracts the result from the result of multiplying the bottom 32-bit
element of Rs1 with the bottom 32-bit element of Rs2.
For the <tt>SMXDS32</tt> instruction, it multiplies the bottom 32-bit element of Rs1 with the top 32-bit
element of Rs2 and then subtracts the result from the result of multiplying the top 32-bit element of
Rs1 with the bottom 32-bit element of Rs2.
The subtraction result is written to Rd. The 32-bit contents of Rs1 and Rs2 are treated as signed
integers.

<strong>Operations</strong>:\n
@code 
Rt = (Rs1.W[1] * Rs2.W[1]) - (Rs1.W[0] * Rs2.W[0]); // SMDS32
Rt = (Rs1.W[0] * Rs2.W[0]) - (Rs1.W[1] * Rs2.W[1]); // SMDRS32
Rt = (Rs1.W[1] * Rs2.W[0]) - (Rs1.W[0] * Rs2.W[1]); // SMXDS32
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__MISC_1gaeef74d8a0d235bffb4e1a05204d90494';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMIN32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '16634';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMIN32 (SIMD 32-bit Signed Minimum)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code 
SMIN32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit signed integer elements finding minimum operations simultaneously.

<strong>Description</strong>:\n
This instruction compares the 32-bit signed integer elements in Rs1 with the 32-bit
signed integer elements in Rs2 and selects the numbers that is less than the other one. The selected
results are written to Rd.

<strong>Operations</strong>:\n
@code 
Rd.W[x] = (Rs1.W[x] < Rs2.W[x])? Rs1.W[x] : Rs2.W[x];
for RV64: x=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__SHIFT_1ga0de6fada321c089b1d6eb655a5b5085d';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SRA32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '16687';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SRA32 (SIMD 32-bit Shift Right Arithmetic)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code 
SRA32 Rd, Rs1, Rs2
SRA32.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit element arithmetic right shift operations simultaneously. The shift amount is a
variable from a GPR. The <tt>.u</tt> form performs additional rounding up operations on the shifted
results.

<strong>Description</strong>:\n
The 32-bit data elements in Rs1 are right-shifted arithmetically, that is, the shifted out
bits are filled with the sign-bit of the data elements. The shift amount is specified by the low-order
5-bits of the value in the Rs2 register. For the rounding operation of the <tt>.u</tt> form, a value of 1 is
added to the most significant discarded bit of each 32-bit data element to calculate the final results.
And the results are written to Rd.

<strong>Operations</strong>:\n
@code 
sa = Rs2[4:0];
if (sa > 0) {
  if (`.u` form) { // SRA32.u
    res[31:-1] = SE33(Rs1.W[x][31:sa-1]) + 1;
    Rd.W[x] = res[31:0];
  else { // SRA32
    Rd.W[x] = SE32(Rs1.W[x][31:sa])
  }
} else {
  Rd = Rs1;
}
for RV64: x=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__SHIFT_1gaedf16a534575de0f435869923c6b536a';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SRA32_U';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '16740';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SRA32.u (SIMD 32-bit Rounding Shift Right Arithmetic)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code 
SRA32 Rd, Rs1, Rs2
SRA32.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit element arithmetic right shift operations simultaneously. The shift amount is a
variable from a GPR. The <tt>.u</tt> form performs additional rounding up operations on the shifted
results.

<strong>Description</strong>:\n
The 32-bit data elements in Rs1 are right-shifted arithmetically, that is, the shifted out
bits are filled with the sign-bit of the data elements. The shift amount is specified by the low-order
5-bits of the value in the Rs2 register. For the rounding operation of the <tt>.u</tt> form, a value of 1 is
added to the most significant discarded bit of each 32-bit data element to calculate the final results.
And the results are written to Rd.

<strong>Operations</strong>:\n
@code 
sa = Rs2[4:0];
if (sa > 0) {
  if (`.u` form) { // SRA32.u
    res[31:-1] = SE33(Rs1.W[x][31:sa-1]) + 1;
    Rd.W[x] = res[31:0];
  else { // SRA32
    Rd.W[x] = SE32(Rs1.W[x][31:sa])
  }
} else {
  Rd = Rs1;
}
for RV64: x=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__SHIFT_1gaa527b5f65f359f77a0d667fb5e99cf73';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SRL32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '16947';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SRL32 (SIMD 32-bit Shift Right Logical)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code 
SRL32 Rd, Rs1, Rs2
SRL32.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit element logical right shift operations simultaneously. The shift amount is a
variable from a GPR. The <tt>.u</tt> form performs additional rounding up operations on the shifted
results.

<strong>Description</strong>:\n
The 32-bit data elements in Rs1 are right-shifted logically, that is, the shifted out bits
are filled with zero. The shift amount is specified by the low-order 5-bits of the value in the Rs2
register. For the rounding operation of the <tt>.u</tt> form, a value of 1 is added to the most significant
discarded bit of each 32-bit data element to calculate the final results. And the results are written to
Rd.

<strong>Operations</strong>:\n
@code 
sa = Rs2[4:0];
if (sa > 0) {
  if (`.u` form) { // SRA32.u
    res[31:-1] = ZE33(Rs1.W[x][31:sa-1]) + 1;
    Rd.W[x] = res[31:0];
  else { // SRA32
    Rd.W[x] = ZE32(Rs1.W[x][31:sa])
  }
} else {
  Rd = Rs1;
}
for RV64: x=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__SHIFT_1ga1f6513e3a91fab5673495cdb5cdd0a1b';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SRL32_U';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '17000';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SRL32.u (SIMD 32-bit Rounding Shift Right Logical)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code 
SRL32 Rd, Rs1, Rs2
SRL32.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit element logical right shift operations simultaneously. The shift amount is a
variable from a GPR. The <tt>.u</tt> form performs additional rounding up operations on the shifted
results.

<strong>Description</strong>:\n
The 32-bit data elements in Rs1 are right-shifted logically, that is, the shifted out bits
are filled with zero. The shift amount is specified by the low-order 5-bits of the value in the Rs2
register. For the rounding operation of the <tt>.u</tt> form, a value of 1 is added to the most significant
discarded bit of each 32-bit data element to calculate the final results. And the results are written to
Rd.

<strong>Operations</strong>:\n
@code 
sa = Rs2[4:0];
if (sa > 0) {
  if (`.u` form) { // SRA32.u
    res[31:-1] = ZE33(Rs1.W[x][31:sa-1]) + 1;
    Rd.W[x] = res[31:0];
  else { // SRA32
    Rd.W[x] = ZE32(Rs1.W[x][31:sa])
  }
} else {
  Rd = Rs1;
}
for RV64: x=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__ADDSUB_1gadd4e3651aa97d430e2eed42cbcb61c3f';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_STAS32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '17147';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
STAS32 (SIMD 32-bit Straight Addition & Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code 
STAS32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit integer element addition and 32-bit integer element subtraction in a 64-bit
chunk simultaneously. Operands are from corresponding 32-bit elements.

<strong>Description</strong>:\n
This instruction adds the 32-bit integer element in [63:32] of Rs1 with the 32-bit
integer element in [63:32] of Rs2, and writes the result to [63:32] of Rd; at the same time, it subtracts
the 32-bit integer element in [31:0] of Rs2 from the 32-bit integer element in [31:0] of Rs1, and
writes the result to [31:0] of Rd.

<strong>Note</strong>:\n
This instruction can be used for either signed or unsigned operations.

<strong>Operations</strong>:\n
@code 
Rd.W[1] = Rs1.W[1] + Rs2.W[1];
Rd.W[0] = Rs1.W[0] - Rs2.W[0];
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__ADDSUB_1ga8f25a6df3979e6e3ced2876ad7aee194';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_STSA32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '17189';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
STSA32 (SIMD 32-bit Straight Subtraction & Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code 
STSA32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit integer element subtraction and 32-bit integer element addition in a 64-bit
chunk simultaneously. Operands are from corresponding 32-bit elements.
*Description: *
This instruction subtracts the 32-bit integer element in [63:32] of Rs2 from the 32-bit integer
element in [63:32] of Rs1, and writes the result to [63:32] of Rd; at the same time, it adds the 32-bit
integer element in [31:0] of Rs1 with the 32-bit integer element in [31:0] of Rs2, and writes the result
to [31:0] of Rd

<strong>Note</strong>:\n
This instruction can be used for either signed or unsigned operations.

<strong>Operations</strong>:\n
@code 
Rd.W[1] = Rs1.W[1] - Rs2.W[1];
Rd.W[0] = Rs1.W[0] + Rs2.W[0];
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__ADDSUB_1ga6ce1575be07d2858f589016578743160';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SUB32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '17229';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SUB32 (SIMD 32-bit Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (RV64 Only)

<strong>Syntax</strong>:\n
@code 
SUB32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit integer element subtractions simultaneously.

<strong>Description</strong>:\n
This instruction subtracts the 32-bit integer elements in Rs2 from the 32-bit integer
elements in Rs1, and then writes the results to Rd.

<strong>Note</strong>:\n
This instruction can be used for either signed or unsigned subtraction.

<strong>Operations</strong>:\n
@code 
Rd.W[x] = Rs1.W[x] - Rs2.W[x];
for RV64: x=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__ADDSUB_1ga0ae6b98529fa5176cb906a4add123778';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UKADD32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '17273';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UKADD32 (SIMD 32-bit Unsigned Saturating Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code 
UKADD32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit unsigned integer element saturating additions simultaneously.

<strong>Description</strong>:\n
This instruction adds the 32-bit unsigned integer elements in Rs1 with the 32-bit
unsigned integer elements in Rs2. If any of the results are beyond the 32-bit unsigned number
range (0 <= RES <= 2^32-1), they are saturated to the range and the OV bit is set to 1. The saturated
results are written to Rd.

<strong>Operations</strong>:\n
@code 
res[x] = Rs1.W[x] + Rs2.W[x];
if (res[x] > (2^32)-1) {
  res[x] = (2^32)-1;
  OV = 1;
}
Rd.W[x] = res[x];
for RV64: x=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__ADDSUB_1gadb9440a09e140829a1b0295b4171fa0b';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UKCRAS32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '17326';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UKCRAS32 (SIMD 32-bit Unsigned Saturating Cross Addition & Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code 
UKCRAS32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do one 32-bit unsigned integer element saturating addition and one 32-bit unsigned
integer element saturating subtraction in a 64-bit chunk simultaneously. Operands are from crossed
32-bit elements.

<strong>Description</strong>:\n
This instruction adds the 32-bit unsigned integer element in [63:32] of Rs1 with the 32-
bit unsigned integer element in [31:0] of Rs2; at the same time, it subtracts the 32-bit unsigned
integer element in [63:32] of Rs2 from the 32-bit unsigned integer element in [31:0] Rs1. If any of the
results are beyond the 32-bit unsigned number range (0 <= RES <= 2^32-1), they are saturated to the
range and the OV bit is set to 1. The saturated results are written to [63:32] of Rd for addition and
[31:0] of Rd for subtraction.

<strong>Operations</strong>:\n
@code 
res1 = Rs1.W[1] + Rs2.W[0];
res2 = Rs1.W[0] - Rs2.W[1];
if (res1 > (2^32)-1) {
  res1 = (2^32)-1;
  OV = 1;
}
if (res2 < 0) {
  res2 = 0;
  OV = 1;
}
Rd.W[1] = res1;
Rd.W[0] = res2;
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__ADDSUB_1ga32c3976c47a200878be3bbaaf28de26c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UKCRSA32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '17378';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UKCRSA32 (SIMD 32-bit Unsigned Saturating Cross Subtraction & Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code 
UKCRSA32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do one 32-bit unsigned integer element saturating subtraction and one 32-bit unsigned
integer element saturating addition in a 64-bit chunk simultaneously. Operands are from crossed
32-bit elements.

<strong>Description</strong>:\n
This instruction subtracts the 32-bit unsigned integer element in [31:0] of Rs2 from the
32-bit unsigned integer element in [63:32] of Rs1; at the same time, it adds the 32-bit unsigned
integer element in [63:32] of Rs2 with the 32-bit unsigned integer element in [31:0] Rs1. If any of the
results are beyond the 32-bit unsigned number range (0 <= RES <= 2^32-1), they are saturated to the
range and the OV bit is set to 1. The saturated results are written to [63:32] of Rd for subtraction and
[31:0] of Rd for addition.

<strong>Operations</strong>:\n
@code 
res1 = Rs1.W[1] - Rs2.W[0];
res2 = Rs1.W[0] + Rs2.W[1];
if (res1 < 0) {
  res1 = 0;
  OV = 1;
} else if (res2 > (2^32)-1) {
  res2 = (2^32)-1;
  OV = 1;
}
Rd.W[1] = res1;
Rd.W[0] = res2;
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__ADDSUB_1ga042afa2a6b552b4ef0c5258d8bf02461';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UKSTAS32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '17431';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UKSTAS32 (SIMD 32-bit Unsigned Saturating Straight Addition & Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code 
UKSTAS32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do one 32-bit unsigned integer element saturating addition and one 32-bit unsigned
integer element saturating subtraction in a 64-bit chunk simultaneously. Operands are from
corresponding 32-bit elements.

<strong>Description</strong>:\n
This instruction adds the 32-bit unsigned integer element in [63:32] of Rs1 with the 32-
bit unsigned integer element in [63:32] of Rs2; at the same time, it subtracts the 32-bit unsigned
integer element in [31:0] of Rs2 from the 32-bit unsigned integer element in [31:0] Rs1. If any of the
results are beyond the 32-bit unsigned number range (0 <= RES <= 2^32-1), they are saturated to the
range and the OV bit is set to 1. The saturated results are written to [63:32] of Rd for addition and
[31:0] of Rd for subtraction.

<strong>Operations</strong>:\n
@code 
res1 = Rs1.W[1] + Rs2.W[1];
res2 = Rs1.W[0] - Rs2.W[0];
if (res1 > (2^32)-1) {
  res1 = (2^32)-1;
  OV = 1;
}
if (res2 < 0) {
  res2 = 0;
  OV = 1;
}
Rd.W[1] = res1;
Rd.W[0] = res2;
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__ADDSUB_1gaea266bb7b2d939d5cc49c50dca75be65';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UKSTSA32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '17483';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UKSTSA32 (SIMD 32-bit Unsigned Saturating Straight Subtraction & Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code 
UKSTSA32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do one 32-bit unsigned integer element saturating subtraction and one 32-bit unsigned
integer element saturating addition in a 64-bit chunk simultaneously. Operands are from
corresponding 32-bit elements.

<strong>Description</strong>:\n
This instruction subtracts the 32-bit unsigned integer element in [63:32] of Rs2 from
the 32-bit unsigned integer element in [63:32] of Rs1; at the same time, it adds the 32-bit unsigned
integer element in [31:0] of Rs2 with the 32-bit unsigned integer element in [31:0] Rs1. If any of the
results are beyond the 32-bit unsigned number range (0 <= RES <= 2^32-1), they are saturated to the
range and the OV bit is set to 1. The saturated results are written to [63:32] of Rd for subtraction and
[31:0] of Rd for addition.

<strong>Operations</strong>:\n
@code 
res1 = Rs1.W[1] - Rs2.W[1];
res2 = Rs1.W[0] + Rs2.W[0];
if (res1 < 0) {
  res1 = 0;
  OV = 1;
} else if (res2 > (2^32)-1) {
  res2 = (2^32)-1;
  OV = 1;
}
Rd.W[1] = res1;
Rd.W[0] = res2;
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__ADDSUB_1ga169028d26efc2ec4eb0914a2da5354a6';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UKSUB32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '17527';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UKSUB32 (SIMD 32-bit Unsigned Saturating Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code 
UKSUB32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit unsigned integer elements saturating subtractions simultaneously.

<strong>Description</strong>:\n
This instruction subtracts the 32-bit unsigned integer elements in Rs2 from the 32-bit
unsigned integer elements in Rs1. If any of the results are beyond the 32-bit unsigned number
range (0 <= RES <= 2^32-1), they are saturated to the range and the OV bit is set to 1. The saturated
results are written to Rd.

<strong>Operations</strong>:\n
@code 
res[x] = Rs1.W[x] - Rs2.W[x];
if (res[x] < 0) {
  res[x] = 0;
  OV = 1;
}
Rd.W[x] = res[x];
for RV64: x=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__MISC_1ga298ea777bdb92725501538d9db8c9364';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UMAX32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '17565';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UMAX32 (SIMD 32-bit Unsigned Maximum)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code 
UMAX32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit unsigned integer elements finding maximum operations simultaneously.

<strong>Description</strong>:\n
This instruction compares the 32-bit unsigned integer elements in Rs1 with the 32-bit
unsigned integer elements in Rs2 and selects the numbers that is greater than the other one. The
selected results are written to Rd.

<strong>Operations</strong>:\n
@code 
Rd.W[x] = (Rs1.W[x] u> Rs2.W[x])? Rs1.W[x] : Rs2.W[x];
for RV64: x=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__MISC_1ga65104f0f5fabadc6c8c2777571a66d74';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UMIN32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '17603';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UMIN32 (SIMD 32-bit Unsigned Minimum)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code 
UMIN32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit unsigned integer elements finding minimum operations simultaneously.

<strong>Description</strong>:\n
This instruction compares the 32-bit unsigned integer elements in Rs1 with the 32-bit
unsigned integer elements in Rs2 and selects the numbers that is less than the other one. The
selected results are written to Rd.

<strong>Operations</strong>:\n
@code 
Rd.W[x] = (Rs1.W[x] <u Rs2.W[x])? Rs1.W[x] : Rs2.W[x];
for RV64: x=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__ADDSUB_1ga70ed498e86037d80ebe470cfb6591a57';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_URADD32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '17649';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
URADD32 (SIMD 32-bit Unsigned Halving Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code 
URADD32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit unsigned integer element additions simultaneously. The results are halved to
avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction adds the 32-bit unsigned integer elements in Rs1 with the 32-bit
unsigned integer elements in Rs2. The results are first logically right-shifted by 1 bit and then
written to Rd.

<strong>Examples</strong>:\n
@code 
* Ra = 0x7FFFFFFF, Rb = 0x7FFFFFFF Rt = 0x7FFFFFFF
* Ra = 0x80000000, Rb = 0x80000000 Rt = 0x80000000
* Ra = 0x40000000, Rb = 0x80000000 Rt = 0x60000000
@endcode

<strong>Operations</strong>:\n
@code 
Rd.W[x] = (Rs1.W[x] + Rs2.W[x]) u>> 1;
for RV64: x=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__ADDSUB_1gadb3203c272e4d13e1f6b0df92f575da7';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_URCRAS32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '17696';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
URCRAS32 (SIMD 32-bit Unsigned Halving Cross Addition & Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code 
URCRAS32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit unsigned integer element addition and 32-bit unsigned integer element
subtraction in a 64-bit chunk simultaneously. Operands are from crossed 32-bit elements. The
results are halved to avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction adds the 32-bit unsigned integer element in [63:32] of Rs1 with the 32-
bit unsigned integer element in [31:0] of Rs2, and subtracts the 32-bit unsigned integer element in
[63:32] of Rs2 from the 32-bit unsigned integer element in [31:0] of Rs1. The element results are first
logically right-shifted by 1 bit and then written to [63:32] of Rd for addition and [31:0] of Rd for
subtraction.

<strong>Examples</strong>:\n
@code 
Please see `URADD32` and `URSUB32` instructions.
@endcode

<strong>Operations</strong>:\n
@code 
Rd.W[1] = (Rs1.W[1] + Rs2.W[0]) u>> 1;
Rd.W[0] = (Rs1.W[0] - Rs2.W[1]) u>> 1;
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__ADDSUB_1gab4e8e05c30ec9907dce962832329817e';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_URCRSA32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '17743';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
URCRSA32 (SIMD 32-bit Unsigned Halving Cross Subtraction & Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code 
URCRSA32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit unsigned integer element subtraction and 32-bit unsigned integer element
addition in a 64-bit chunk simultaneously. Operands are from crossed 32-bit elements. The results
are halved to avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction subtracts the 32-bit unsigned integer element in [31:0] of Rs2 from the
32-bit unsigned integer element in [63:32] of Rs1, and adds the 32-bit unsigned element integer in
[31:0] of Rs1 with the 32-bit unsigned integer element in [63:32] of Rs2. The two results are first
logically right-shifted by 1 bit and then written to [63:32] of Rd for subtraction and [31:0] of Rd for
addition.

<strong>Examples</strong>:\n
@code 
Please see `URADD32` and `URSUB32` instructions.
@endcode

<strong>Operations</strong>:\n
@code 
Rd.W[1] = (Rs1.W[1] - Rs2.W[0]) u>> 1;
Rd.W[0] = (Rs1.W[0] + Rs2.W[1]) u>> 1;
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__ADDSUB_1ga651311ceca6fb06dcdecc5a67b15a683';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_URSTAS32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '17790';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
URSTAS32 (SIMD 32-bit Unsigned Halving Straight Addition & Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code 
URSTAS32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit unsigned integer element addition and 32-bit unsigned integer element
subtraction in a 64-bit chunk simultaneously. Operands are from corresponding 32-bit elements.
The results are halved to avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction adds the 32-bit unsigned integer element in [63:32] of Rs1 with the 32-
bit unsigned integer element in [63:32] of Rs2, and subtracts the 32-bit unsigned integer element in
[31:0] of Rs2 from the 32-bit unsigned integer element in [31:0] of Rs1. The element results are first
logically right-shifted by 1 bit and then written to [63:32] of Rd for addition and [31:0] of Rd for
subtraction.

<strong>Examples</strong>:\n
@code 
Please see `URADD32` and `URSUB32` instructions.
@endcode

<strong>Operations</strong>:\n
@code 
Rd.W[1] = (Rs1.W[1] + Rs2.W[1]) u>> 1;
Rd.W[0] = (Rs1.W[0] - Rs2.W[0]) u>> 1;
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__ADDSUB_1ga97737cc391f6eafc760c002866dc7ead';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_URSTSA32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '17837';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
URSTSA32 (SIMD 32-bit Unsigned Halving Straight Subtraction & Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code 
URSTSA32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit unsigned integer element subtraction and 32-bit unsigned integer element
addition in a 64-bit chunk simultaneously. Operands are from corresponding 32-bit elements. The
results are halved to avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction subtracts the 32-bit unsigned integer element in [63:32] of Rs2 from
the 32-bit unsigned integer element in [63:32] of Rs1, and adds the 32-bit unsigned element integer
in [31:0] of Rs1 with the 32-bit unsigned integer element in [31:0] of Rs2. The two results are first
logically right-shifted by 1 bit and then written to [63:32] of Rd for subtraction and [31:0] of Rd for
addition.

<strong>Examples</strong>:\n
@code 
Please see `URADD32` and `URSUB32` instructions.
@endcode

<strong>Operations</strong>:\n
@code 
Rd.W[1] = (Rs1.W[1] - Rs2.W[1]) u>> 1;
Rd.W[0] = (Rs1.W[0] + Rs2.W[0]) u>> 1;
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__ADDSUB_1gaba8b5c1a6f91c0b19cdea558a76968d3';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_URSUB32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '17883';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
URSUB32 (SIMD 32-bit Unsigned Halving Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code 
URSUB32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit unsigned integer element subtractions simultaneously. The results are halved to
avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction subtracts the 32-bit unsigned integer elements in Rs2 from the 32-bit
unsigned integer elements in Rs1. The results are first logically right-shifted by 1 bit and then
written to Rd.

<strong>Examples</strong>:\n
@code 
* Ra = 0x7FFFFFFF, Rb = 0x80000000, Rt = 0xFFFFFFFF
* Ra = 0x80000000, Rb = 0x7FFFFFFF, Rt = 0x00000000
* Ra = 0x80000000, Rb = 0x40000000, Rt = 0x20000000
@endcode

<strong>Operations</strong>:\n
@code 
Rd.W[x] = (Rs1.W[x] - Rs2.W[x]) u>> 1;
for RV64: x=1...0
@endcode

@param [in]  a    unsigned long type of value stored in a
@param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__Default_1ga1bdbaa4714d2052c162a076e676f4ea4';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_EXPD80';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '17928';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
EXPD80 (Expand and Copy Byte 0 to 32bit(when rv32) or 64bit(when rv64))
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
EXPD80 Rd, Rs1
@endcode

<strong>Purpose</strong>:\n
When rv32, Copy 8-bit data from 32-bit chunks into 4 bytes in a register.
When rv64, Copy 8-bit data from 64-bit chunks into 8 bytes in a register.

<strong>Description</strong>:\n
Moves Rs1.B[0][7:0] to Rd.[0][7:0], Rd.[1][7:0], Rd.[2][7:0], Rd.[3][7:0]

<strong>Operations</strong>:\n
@code 
Rd.W[x][31:0] = CONCAT(Rs1.B[0][7:0], Rs1.B[0][7:0], Rs1.B[0][7:0], Rs1.B[0][7:0]);
for RV32: x=0
@endcode

@param [in]  a unsigned long type of value stored in a
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__Default_1gad690c697580b52820282c03d6a6567c5';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_EXPD81';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '17963';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
EXPD81 (Expand and Copy Byte 1 to 32bit(rv32) or 64bit(when rv64))
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
EXPD81 Rd, Rs1
@endcode

<strong>Purpose</strong>:\n
Copy 8-bit data from 32-bit chunks into 4 bytes in a register.

<strong>Description</strong>:\n
Moves Rs1.B[1][7:0] to Rd.[0][7:0], Rd.[1][7:0], Rd.[2][7:0], Rd.[3][7:0]

<strong>Operations</strong>:\n
@code 
Rd.W[x][31:0] = CONCAT(Rs1.B[1][7:0], Rs1.B[1][7:0], Rs1.B[1][7:0], Rs1.B[1][7:0]);
for RV32: x=0
@endcode

@param [in]  a unsigned long type of value stored in a
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__Default_1gafc4a523cfa64150d691bdc5d7d038810';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_EXPD82';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '17998';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
EXPD82 (Expand and Copy Byte 2 to 32bit(rv32) or 64bit(when rv64))
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
EXPD82 Rd, Rs1
@endcode

<strong>Purpose</strong>:\n
Copy 8-bit data from 32-bit chunks into 4 bytes in a register.

<strong>Description</strong>:\n
Moves Rs1.B[2][7:0] to Rd.[0][7:0], Rd.[1][7:0], Rd.[2][7:0], Rd.[3][7:0]

<strong>Operations</strong>:\n
@code 
Rd.W[x][31:0] = CONCAT(Rs1.B[2][7:0], Rs1.B[2][7:0], Rs1.B[2][7:0], Rs1.B[2][7:0]);
for RV32: x=0
@endcode

@param [in]  a unsigned long type of value stored in a
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__Default_1ga6d8dce49013b778d0290cd057cf45dd0';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_EXPD83';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '18033';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
EXPD83 (Expand and Copy Byte 3 to 32bit(rv32) or 64bit(when rv64))
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
EXPD83 Rd, Rs1
@endcode

<strong>Purpose</strong>:\n
Copy 8-bit data from 32-bit chunks into 4 bytes in a register.

<strong>Description</strong>:\n
Moves Rs1.B[3][7:0] to Rd.[0][7:0], Rd.[1][7:0], Rd.[2][7:0], Rd.[3][7:0]

<strong>Operations</strong>:\n
@code 
Rd.W[x][31:0] = CONCAT(Rs1.B[3][7:0], Rs1.B[3][7:0], Rs1.B[3][7:0], Rs1.B[3][7:0]);
for RV32: x=0
@endcode

@param [in]  a unsigned long type of value stored in a
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N1_1ga036660946bc3f379a731983caffca53b';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DKHM8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '18251';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DKHM8 (64-bit SIMD Signed Saturating Q7 Multiply)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DKHM8 Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Do Q7xQ7 element multiplications simultaneously. The Q14 results are then reduced to Q7
numbers again.

<strong>Description</strong>:\n
For the <tt>DKHM8</tt> instruction, multiply the top 8-bit Q7 content of 16-bit chunks in Rs1
with the top 8-bit Q7 content of 16-bit chunks in Rs2. At the same time, multiply the bottom 8-bit Q7
content of 16-bit chunks in Rs1 with the bottom 8-bit Q7 content of 16-bit chunks in Rs2.

The Q14 results are then right-shifted 7-bits and saturated into Q7 values. The Q7 results are then
written into Rd. When both the two Q7 inputs of a multiplication are 0x80, saturation will happen.
The result will be saturated to 0x7F and the overflow flag OV will be set.

<strong>Operations</strong>:\n
@code 
op1t = Rs1.B[x+1]; op2t = Rs2.B[x+1]; // top
op1b = Rs1.B[x]; op2b = Rs2.B[x]; // bottom
for ((aop,bop,res) in [(op1t,op2t,rest), (op1b,op2b,resb)]) {
  if (0x80 != aop | 0x80 != bop) {
    res = (aop s* bop) >> 7;
  } else {
    res= 0x7F;
    OV = 1;
  }
}
Rd.H[x/2] = concat(rest, resb);
for RV32, x=0,2,4,6
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N1_1gae39257eb12a014d3059394217135b9fb';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DKHM16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '18306';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DKHM16 (64-bit SIMD Signed Saturating Q15 Multiply)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DKHM16 Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Do Q15xQ15 element multiplications simultaneously. The Q30 results are then reduced to
Q15 numbers again.

<strong>Description</strong>:\n
For the <tt>DKHM16</tt> instruction, multiply the top 16-bit Q15 content of 32-bit chunks in
Rs1 with the top 16-bit Q15 content of 32-bit chunks in Rs2. At the same time, multiply the bottom
16-bit Q15 content of 32-bit chunks in Rs1 with the bottom 16-bit Q15 content of 32-bit chunks in
Rs2.

The Q30 results are then right-shifted 15-bits and saturated into Q15 values. The Q15 results are
then written into Rd. When both the two Q15 inputs of a multiplication are 0x8000, saturation will
happen. The result will be saturated to 0x7FFF and the overflow flag OV will be set.

<strong>Operations</strong>:\n
@code 
op1t = Rs1.H[x+1]; op2t = Rs2.H[x+1]; // top
op1b = Rs1.H[x]; op2b = Rs2.H[x]; // bottom
for ((aop,bop,res) in [(op1t,op2t,rest), (op1b,op2b,resb)]) {
  if (0x8000 != aop | 0x8000 != bop) {
    res = (aop s* bop) >> 15;
  } else {
    res= 0x7FFF;
    OV = 1;
  }
}
Rd.W[x/2] = concat(rest, resb);
for RV32: x=0, 2
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N1_1ga7279c1730c173384063a9bef9c986010';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DKABS8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '18351';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DKABS8 (64-bit SIMD 8-bit Saturating Absolute)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DKABS8 Rd, Rs1
# Rd, Rs1 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Get the absolute value of 8-bit signed integer elements simultaneously.

<strong>Description</strong>:\n
This instruction calculates the absolute value of 8-bit signed integer elements stored
in Rs1 and writes the element results to Rd. If the input number is 0x80, this instruction generates
0x7f as the output and sets the OV bit to 1.

<strong>Operations</strong>:\n
@code 
src = Rs1.B[x];
if (src == 0x80) {
  src = 0x7f;
  OV = 1;
} else if (src[7] == 1)
  src = -src;
}
Rd.B[x] = src;
for RV32: x=7...0,
@endcode

@param [in]  a unsigned long long type of value stored in a
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N1_1ga7d5691b06128c42939278415561c2dc4';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DKABS16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '18396';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DKABS16 (64-bit SIMD 16-bit Saturating Absolute)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DKABS16 Rd, Rs1
# Rd, Rs1 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Get the absolute value of 16-bit signed integer elements simultaneously.

<strong>Description</strong>:\n
This instruction calculates the absolute value of 16-bit signed integer elements stored
in Rs1 and writes the element results to Rd. If the input number is 0x8000, this instruction
generates 0x7fff as the output and sets the OV bit to 1.

<strong>Operations</strong>:\n
@code 
src = Rs1.H[x];
if (src == 0x8000) {
  src = 0x7fff;
  OV = 1;
} else if (src[15] == 1)
  src = -src;
}
Rd.H[x] = src;
for RV32: x=3...0,
@endcode

@param [in]  a unsigned long long type of value stored in a
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N1_1ga0f7b1184bde378bc5ae6e23f155ecb89';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DKSLRA8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '18454';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DKSLRA8 (64-bit SIMD 8-bit Shift Left Logical with Saturation or Shift Right Arithmetic)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DKSLRA8 Rd, Rs1, Rs2
# Rd, Rs1 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Do 8-bit elements logical left (positive) or arithmetic right (negative) shift operation with
Q7 saturation for the left shift.

<strong>Description</strong>:\n
The 8-bit data elements of Rs1 are left-shifted logically or right-shifted arithmetically
based on the value of Rs2[3:0]. Rs2[3:0] is in the signed range of [-2^3, 2^3-1]. A positive Rs2[3:0] means
logical left shift and a negative Rs2[3:0] means arithmetic right shift. The shift amount is the
absolute value of Rs2[3:0]. However, the behavior of <tt>Rs2[3:0]==-2^3 (0x8)</tt> is defined to be
equivalent to the behavior of <tt>Rs2[3:0]==-(2^3-1) (0x9)</tt>.
The left-shifted results are saturated to the 8-bit signed integer range of [-2^7, 2^7-1].
If any saturation happens, this instruction sets the OV flag. The value of Rs2[31:4] will not affect
this instruction.

<strong>Operations</strong>:\n
@code 
if (Rs2[3:0] < 0) {
  sa = -Rs2[3:0];
  sa = (sa == 8)? 7 : sa;
  Rd.B[x] = SE8(Rs1.B[x][7:sa]);
} else {
  sa = Rs2[2:0];
  res[(7+sa):0] = Rs1.B[x] <<(logic) sa;
  if (res > (2^7)-1) {
    res[7:0] = 0x7f; OV = 1;
  } else if (res < -2^7) {
    res[7:0] = 0x80; OV = 1;
  }
  Rd.B[x] = res[7:0];
}
for RV32: x=7...0,
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b int type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N1_1ga1b02a9f2e52abd456bfdadc1dac9e188';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DKSLRA16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '18513';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DKSLRA16 (64-bit SIMD 16-bit Shift Left Logical with Saturation or Shift Right Arithmetic)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DKSLRA16 Rd, Rs1, Rs2
# Rd, Rs1 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Do 16-bit elements logical left (positive) or arithmetic right (negative) shift operation with
Q15 saturation for the left shift.

<strong>Description</strong>:\n
The 16-bit data elements of Rs1 are left-shifted logically or right-shifted arithmetically
based on the value of Rs2[4:0]. Rs2[4:0] is in the signed range of [-2^4, 2^4-1]. A positive Rs2[4:0] means
logical left shift and a negative Rs2[4:0] means arithmetic right shift. The shift amount is the
absolute value of Rs2[4:0]. However, the behavior of <tt>Rs2[4:0]==-2^4 (0x10)</tt> is defined to be
equivalent to the behavior of <tt>Rs2[4:0]==-(2^4-1) (0x11)</tt>.
The left-shifted results are saturated to the 16-bit signed integer range of [-2^15, 2^15-1].
After the shift, saturation, or rounding, the final results are written to
Rd. If any saturation happens, this instruction sets the OV flag. The value of Rs2[31:5] will not affect
this instruction.

<strong>Operations</strong>:\n
@code 
if (Rs2[4:0] < 0) {
  sa = -Rs2[4:0];
  sa = (sa == 16)? 15 : sa;
  Rd.H[x] = SE16(Rs1.H[x][15:sa]);
} else {
  sa = Rs2[3:0];
  res[(15+sa):0] = Rs1.H[x] <<(logic) sa;
  if (res > (2^15)-1) {
    res[15:0] = 0x7fff; OV = 1;
  } else if (res < -2^15) {
    res[15:0] = 0x8000; OV = 1;
  }
  d.H[x] = res[15:0];
}
for RV32: x=3...0,
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b int type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N1_1ga7f2598c19678a959960b6c6d3379e465';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DKADD8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '18560';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DKADD8 (64-bit SIMD 8-bit Signed Saturating Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DKADD8 Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Do 8-bit signed integer element saturating additions simultaneously.

<strong>Description</strong>:\n
This instruction adds the 8-bit signed integer elements in Rs1 with the 8-bit signed
integer elements in Rs2. If any of the results are beyond the Q7 number range (-2^7 <= Q7 <= 2^7-1), they
are saturated to the range and the OV bit is set to 1. The saturated results are written to Rd.

<strong>Operations</strong>:\n
@code 
res[x] = Rs1.B[x] + Rs2.B[x];
if (res[x] > 127) {
  res[x] = 127;
  OV = 1;
} else if (res[x] < -128) {
  res[x] = -128;
  OV = 1;
}
Rd.B[x] = res[x];
for RV32: x=7...0,
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N1_1gaeb50cbc43674d8dd32e7455b6c25b394';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DKADD16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '18607';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DKADD16 (64-bit SIMD 16-bit Signed Saturating Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DKADD16 Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Do 16-bit signed integer element saturating additions simultaneously.

<strong>Description</strong>:\n
This instruction adds the 16-bit signed integer elements in Rs1 with the 16-bit signed
integer elements in Rs2. If any of the results are beyond the Q15 number range (-2^15 <= Q15 <= 2^15-1),
they are saturated to the range and the OV bit is set to 1. The saturated results are written to Rd.

<strong>Operations</strong>:\n
@code 
res[x] = Rs1.H[x] + Rs2.H[x];
if (res[x] > 32767) {
  res[x] = 32767;
  OV = 1;
} else if (res[x] < -32768) {
  res[x] = -32768;
  OV = 1;
}
Rd.H[x] = res[x];
for RV32: x=3...0,
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N1_1ga5dbe06f7b351ff1477851894d6d0c927';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DKSUB8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '18654';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DKSUB8 (64-bit SIMD 8-bit Signed Saturating Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DKSUB8 Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Do 8-bit signed elements saturating subtractions simultaneously.

<strong>Description</strong>:\n
This instruction subtracts the 8-bit signed integer elements in Rs2 from the 8-bit
signed integer elements in Rs1. If any of the results are beyond the Q7 number range (-2^7 <= Q7 <= 2^7-1),
they are saturated to the range and the OV bit is set to 1. The saturated results are written to Rd.

<strong>Operations</strong>:\n
@code 
res[x] = Rs1.B[x] - Rs2.B[x];
if (res[x] > (2^7)-1) {
  res[x] = (2^7)-1;
  OV = 1;
} else if (res[x] < -2^7) {
  res[x] = -2^7;
  OV = 1;
}
Rd.B[x] = res[x];
for RV32: x=7...0,
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N1_1gaa5dfb634a380181e51e0636cb216fbb1';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DKSUB16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '18702';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DKSUB16 (64-bit SIMD 16-bit Signed Saturating Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DKSUB16 Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Do 16-bit signed integer elements saturating subtractions simultaneously.

<strong>Description</strong>:\n
This instruction subtracts the 16-bit signed integer elements in Rs2 from the 16-bit
signed integer elements in Rs1. If any of the results are beyond the Q15 number range (-2^15 <= Q15 <=
2^15-1), they are saturated to the range and the OV bit is set to 1. The saturated results are written to
Rd.

<strong>Operations</strong>:\n
@code 
res[x] = Rs1.H[x] - Rs2.H[x];
if (res[x] > (2^15)-1) {
  res[x] = (2^15)-1;
  OV = 1;
} else if (res[x] < -2^15) {
  res[x] = -2^15;
  OV = 1;
}
Rd.H[x] = res[x];
for RV32: x=3...0,
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1ga700c59226e8a8997222833ada4768cca';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DKHMX8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '18755';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DKHMX8 (64-bit SIMD Signed Crossed Saturating Q7 Multiply)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DKHMX8 Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Do Q7xQ7 element crossed multiplications simultaneously. The Q15 results are then reduced to Q7 numbers again.

<strong>Description</strong>:\n
For the <tt>KHM8</tt> instruction, multiply the top 8-bit Q7 content of 16-bit chunks in Rs1 with the
bottom 8-bit Q7 content of 16-bit chunks in Rs2. At the same time, multiply the bottom 8-bit Q7
content of 16-bit chunks in Rs1 with the top 8-bit Q7 content of 16-bit chunks in Rs2.

The Q14 results are then right-shifted 7-bits and saturated into Q7 values. The Q7 results are then
written into Rd. When both the two Q7 inputs of a multiplication are 0x80, saturation will happen.
The result will be saturated to 0x7F and the overflow flag OV will be set.

<strong>Operations</strong>:\n
@code 
op1t = Rs1.B[x+1]; op2t = Rs2.B[x]; // top
op1b = Rs1.B[x]; op2b = Rs2.B[x+1]; // bottom
for ((aop,bop,res) in [(op1t,op2t,rest), (op1b,op2b,resb)]) {
  if (0x80 != aop | 0x80 != bop) {
    res = (aop s* bop) >> 7;
  } else {
    res= 0x7F;
    OV = 1;
  }
}
Rd.H[x/2] = concat(rest, resb);
for RV32, x=0,2,4,6
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1ga1bb3b6e75a4f77fa9bb3f9b8e1e1881b';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DKHMX16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '18808';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DKHMX16 (64-bit SIMD Signed Crossed Saturating Q15 Multiply)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DKHMX16 Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Do Q15xQ15 element crossed multiplications simultaneously. The Q31 results are then reduced to Q15 numbers again.

<strong>Description</strong>:\n
For the <tt>KHMX16</tt> instruction, multiply the top 16-bit Q15 content of 32-bit chunks in Rs1 with the
bottom 16-bit Q15 content of 32-bit chunks in Rs2. At the same time, multiply the bottom 16-bit Q15
content of 32-bit chunks in Rs1 with the top 16-bit Q15 content of 32-bit chunks in Rs2.

The Q30 results are then right-shifted 15-bits and saturated into Q15 values. The Q15 results are
then written into Rd. When both the two Q15 inputs of a multiplication are 0x8000, saturation will
happen. The result will be saturated to 0x7FFF and the overflow flag OV will be set.

<strong>Operations</strong>:\n
@code 
op1t = Rs1.H[x+1]; op2t = Rs2.H[x]; // top
op1b = Rs1.H[x]; op2b = Rs2.H[x+1]; // bottom
for ((aop,bop,res) in [(op1t,op2t,rest), (op1b,op2b,resb)]) {
  if (0x8000 != aop | 0x8000 != bop) {
    res = (aop s* bop) >> 15;
  } else {
    res= 0x7FFF;
    OV = 1;
  }
}
Rd.W[x/2] = concat(rest, resb);
for RV32, x=0,2
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1ga07e2d8e255b06c416625c0d8cea1a1e7';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DSMMUL';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '18853';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DSMMUL (64-bit MSW 32x32 Signed Multiply)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DSMMUL Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Do MSW 32x32 element signed multiplications simultaneously. The results are written into Rd.

<strong>Description</strong>:\n
This instruction multiplies the 32-bit elements of Rs1 with the 32-bit elements of Rs2 and writes the
most significant 32-bit multiplication results to the corresponding 32-bit elements of Rd. The 32-bit
elements of Rs1 and Rs2 are treated as signed integers. The .u form of the instruction rounds up
the most significant 32-bit of the 64-bit multiplication results by adding a 1 to bit 31 of the results.

<strong>Operations</strong>:\n
@code 
op1t = Rs1.W[x+1]; op2t = Rs2.W[x+1]; // top
op1b = Rs1.W[x]; op2b = Rs2.W[x]; // bottom
for ((aop,bop,res) in [(op1t,op2t,rest), (op1b,op2b,resb)]) {
  res = (aop s* bop)[63:32];
}
Rd = concat(rest, resb);
x=0
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1gadc610a96a2ef9fcf0e7d97cca37dd397';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DSMMUL_U';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '18898';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DSMMUL.u (64-bit MSW 32x32 Unsigned Multiply)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DSMMUL.u Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Do MSW 32x32 element unsigned multiplications simultaneously. The results are written into Rd.

<strong>Description</strong>:\n
This instruction multiplies the 32-bit elements of Rs1 with the 32-bit elements of Rs2 and writes the
most significant 32-bit multiplication results to the corresponding 32-bit elements of Rd. The 32-bit
elements of Rs1 and Rs2 are treated as unsigned integers. The .u form of the instruction rounds up
the most significant 32-bit of the 64-bit multiplication results by adding a 1 to bit 31 of the results.

<strong>Operations</strong>:\n
@code 
op1t = Rs1.W[x+1]; op2t = Rs2.W[x+1]; // top
op1b = Rs1.W[x]; op2b = Rs2.W[x]; // bottom
for ((aop,bop,res) in [(op1t,op2t,rest), (op1b,op2b,resb)]) {
  res = RUND(aop u* bop)[63:32];
}
Rd = concat(rest, resb);
x=0
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1ga9fd4689e0a01c0bb0cfe68d6c1eaebaa';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DKWMMUL';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '18945';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DKWMMUL (64-bit MSW 32x32 Signed Multiply & Double)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DKWMMUL Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Do MSW 32x32 element signed multiplications simultaneously and double. The results are written into Rd.

<strong>Description</strong>:\n
This instruction multiplies the 32-bit elements of Rs1 with the 32-bit elements of Rs2. It then shifts
the multiplication results one bit to the left and takes the most significant 32-bit results. If the
shifted result is greater than 2^31-1, it is saturated to 2^31-1 and the OV flag is set to 1. The final element
result is written to Rd. The 32-bit elements of Rs1 and Rs2 are treated as signed integers. The .u
form of the instruction additionally rounds up the 64-bit multiplication results by adding a 1 to bit
30 before the shift and saturation operations.

<strong>Operations</strong>:\n
@code 
op1t = Rs1.W[x+1]; op2t = Rs2.W[x+1]; // top
op1b = Rs1.W[x]; op2b = Rs2.W[x]; // bottom
for ((aop,bop,res) in [(op1t,op2t,rest), (op1b,op2b,resb)]) {
    res = sat.q31((aop s* bop) << 1)[63:32];
}
Rd = concat(rest, resb);
x=0
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1gaf2e8745d5ac00cf97dbb25d36e1587d9';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DKWMMUL_U';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '18992';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DKWMMUL.u (64-bit MSW 32x32 Unsigned Multiply & Double)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DKWMMUL.u Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Do MSW 32x32 element unsigned multiplications simultaneously and double. The results are written into Rd.

<strong>Description</strong>:\n
This instruction multiplies the 32-bit elements of Rs1 with the 32-bit elements of Rs2. It then shifts
the multiplication results one bit to the left and takes the most significant 32-bit results. If the
shifted result is greater than 2^31-1, it is saturated to 2^31-1 and the OV flag is set to 1. The final element
result is written to Rd. The 32-bit elements of Rs1 and Rs2 are treated as signed integers. The .u
form of the instruction additionally rounds up the 64-bit multiplication results by adding a 1 to bit
30 before the shift and saturation operations.

<strong>Operations</strong>:\n
@code 
op1t = Rs1.W[x+1]; op2t = Rs2.W[x+1]; // top
op1b = Rs1.W[x]; op2b = Rs2.W[x]; // bottom
for ((aop,bop,res) in [(op1t,op2t,rest), (op1b,op2b,resb)]) {
  res = sat.q31(RUND(aop u* bop) << 1)[63:32];
}
Rd = concat(rest, resb);
x=0
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1gab6f49baa86f45b546a25d6cdf6797010';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DKABS32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '19037';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DKABS32 (64-bit SIMD 32-bit Saturating Absolute)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DKABS32 Rd, Rs1
# Rd, Rs1 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Get the absolute value of 32-bit signed integer elements simultaneously.

<strong>Description</strong>:\n
This instruction calculates the absolute value of 32-bit signed integer elements stored in Rs1 and writes the element
results to Rd. If the input number is 0x8000_0000, this instruction generates 0x7fff_ffff as the output and sets the OV
bit to 1.

<strong>Operations</strong>:\n
@code 
src = Rs1.W[x];
if (src == 0x8000_0000) {
  src = 0x7fff_ffff;
  OV = 1;
} else if (src[31] == 1)
  src = -src;
}
Rd.W[x] = src;
x=1...0
@endcode

@param [in]  a unsigned long long type of value stored in a
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1gad9519c0bc27ad6d1a16c740f414267d1';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DKSLRA32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '19090';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DKSLRA32 (64-bit SIMD 32-bit Shift Left Logical with Saturation or Shift Right Arithmetic)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DKSLRA32 Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Do 31-bit elements logical left (positive) or arithmetic right (negative) shift operation with Q31 saturation for the left shift.

<strong>Description</strong>:\n
The 31-bit data elements of Rs1 are left-shifted logically or right-shifted arithmetically based on the value of Rs2[5:0].
Rs2[5:0] is in the signed range of [-2^5, 2^5-1]. A positive Rs2[5:0] means logical left shift and a negative Rs2[4:0]
means arithmetic right shift. The shift amount is the absolute value of Rs2[5:0]. However, the behavior of Rs2[5:0]==-
2^5 (0x20) is defined to be equivalent to the behavior of Rs2[5:0]==-(2^5-1) (0x21).

<strong>Operations</strong>:\n
@code 
if (Rs2[5:0] < 0) {
  sa = -Rs2[5:0];
  sa = (sa == 32)? 31 : sa;
  Rd.W[x] = SE32(Rs1.W[x][31:sa]);
} else {
  sa = Rs2[4:0];
  res[(31+sa):0] = Rs1.W[x] <<(logic) sa;
  if (res > (2^31)-1) {
  res[31:0] = 0x7fff_ffff; OV = 1;
} else if (res < -2^31) {
  res[31:0] = 0x8000_0000; OV = 1;
}
  Rd.W[x] = res[31:0];
}
x=1...0
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b int type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1ga90921c9527ce607bd5183595083f071d';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DKADD32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '19137';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DKADD32(64-bit SIMD 32-bit Signed Saturating Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DKADD32 Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Do 32-bit signed integer element saturating additions simultaneously.

<strong>Description</strong>:\n
This instruction adds the 32-bit signed integer elements in Rs1 with the 32-bit signed integer elements in Rs2. If any
of the results are beyond the Q31 number range (-2^31 <= Q31 <= 2^31-1), they are saturated to the range and the OV
bit is set to 1. The saturated results are written to Rd.

<strong>Operations</strong>:\n
@code 
res[x] = Rs1.W[x] + Rs2.W[x];
if (res[x] > 0x7fff_ffff) {
  res[x] = 0x7fff_ffff;
  OV = 1;
} else if (res[x] < 0x8000_0000) {
  res[x] = 0x8000_0000;
  OV = 1;
}
Rd.W[x] = res[x];
x=1...0
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1gaedffea41061169059f7335f386757983';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DKSUB32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '19184';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DKSUB32 (64-bit SIMD 32-bit Signed Saturating Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DKSUB32 Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Do 32-bit signed integer element saturating subtractions simultaneously.

<strong>Description</strong>:\n
This instruction subtracts the 32-bit signed integer elements in Rs2 from the 32-bit signed integer elements in Rs1. If
any of the results are beyond the Q31 number range (-2^31 <= Q31 <= 2^31-1), they are saturated to the range and the
OV bit is set to 1. The saturated results are written to Rd.

<strong>Operations</strong>:\n
@code 
res[x] = Rs1.W[x] - Rs2.W[x];
if (res[x] > (2^31)-1) {
  res[x] = (2^31)-1;
  OV = 1;
} else if (res[x] < -2^31) {
  res[x] = -2^31;
  OV = 1;
}
Rd.W[x] = res[x];
x=1...0
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1gaa576216e24b87799195342638d6ae986';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DRADD16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '19222';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DRADD16 (64-bit SIMD 16-bit Halving Signed Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DRADD16 Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Do 16-bit signed integer element additions simultaneously. The results are halved to avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction adds the 16-bit signed integer elements in Rs1 with the 16-bit signed integer elements in Rs2. The results
are first arithmetically right-shifted by 1 bit and then written to Rd.

<strong>Operations</strong>:\n
@code 
Rd.H[x] = [(Rs1.H[x]) + (Rs2.H[x])] s>> 1;
x=3...0
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1ga3d8ee9fc075ca85c73b06f49849a63f3';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DSUB16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '19260';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DSUB16 (64-bit SIMD 16-bit Halving Signed Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DSUB16 Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Do 16-bit integer element subtractions simultaneously.

<strong>Description</strong>:\n
This instruction adds the 16-bit signed integer elements in Rs1 with the 16-bit signed integer elements in Rs2. The results
are first arithmetically right-shifted by 1 bit and then written to Rd.

<strong>Operations</strong>:\n
@code 
Rd.H[x] = [(Rs1.H[x]) - (Rs2.H[x])] ;
x=3...0
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1ga5ebe2f35badcadb4dc707fc1e95b9a43';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DRADD32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '19298';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DRADD32 (64-bit SIMD 32-bit Halving Signed Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DRADD32 Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Do 32-bit signed integer element additions simultaneously. The results are halved to avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction adds the 32-bit signed integer elements in Rs1 with the 32-bit signed integer elements in Rs2. The results
are first arithmetically right-shifted by 1 bit and then written to Rd.

<strong>Operations</strong>:\n
@code 
Rd.W[x] = [(Rs1.W[x]) + (Rs2.W[x])] s>> 1;
x=1...0
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1ga446f379679ef078a0caabfac22cec188';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DSUB32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '19336';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DSUB32 (64-bit SIMD 32-bit Halving Signed Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DSUB32 Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Do 32-bit integer element subtractions simultaneously.

<strong>Description</strong>:\n
This instruction subtracts the 32-bit signed integer elements in Rs2 from the 32-bit signed integer elements in Rs1 . The
results are written to Rd.

<strong>Operations</strong>:\n
@code 
Rd.W[x] = [(Rs1.E[x]) - (Rs2.E[x])] ;
x=1...0
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1ga1b99da0a6b54d89cb9679916a0e4175a';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DMSR16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '19381';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DMSR16 (Signed Multiply Halfs with Right Shift 16-bit and Cross Multiply Halfs with Right Shift 16-bit)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DMSR16 Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Do two signed 16-bit multiplications and cross multiplications from the 16-bit elements of two registers; and each multiplications performs a right shift operation.

<strong>Description</strong>:\n
For the <tt>DMSR16</tt> instruction, multiply the top 16-bit Q15 content of 32-bit chunks in Rs1 with the top 16-bit Q15 content
of 32-bit chunks in Rs2, multiply the bottom 16-bit Q15 content of 32-bit chunks in Rs1 with the bottom 16-bit Q15 content
of 32-bit chunks in Rs2.
At the same time, multiply the top 16-bit Q15 content of 32-bit chunks in Rs1 with the bottom16-bit Q15 content of 32-bit
chunks in Rs2 and multiply the bottom16-bit Q15 content of 32-bit chunks in Rs1 with the top16-bit Q15 content of 32-bit
chunks in Rs2. The Q31 results are then right-shifted 16-bits and clipped to Q15 values. The Q15 results are then written
into Rd.

<strong>Operations</strong>:\n
@code 
Rd.H[0] = (Rs1.H[0] s* Rs2.H[0]) s>> 16
Rd.H[1] = (Rs1.H[1] s* Rs2.H[1]) s>> 16
Rd.H[2] = (Rs1.H[1] s* Rs2.H[0]) s>> 16
Rd.H[3] = (Rs1.H[0] s* Rs2.H[1]) s>> 16
@endcode

@param [in]  a unsigned long type of value stored in a
@param [in]  b unsigned long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1ga9c5217dd48b5b3b257dff72720129c45';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DMSR17';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '19427';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DMSR17 (Signed Multiply Halfs with Right Shift 17-bit and Cross Multiply Halfs with Right Shift 17-bit)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DMSR17 Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Do two signed 16-bit multiplications and cross multiplications from the 16-bit elements of two registers;
and each multiplications performs a right shift operation.

<strong>Description</strong>:\n
For the <tt>DMSR17</tt> instruction, multiply the top 16-bit Q15 content of 32-bit chunks in Rs1 with the top 16-bit Q15 content
of 32-bit chunks in Rs2, multiply the bottom 16-bit Q15 content of 32-bit chunks in Rs1 with the bottom 16-bit Q15 content
of 32-bit chunks in Rs2.
At the same time, multiply the top 16-bit Q15 content of 32-bit chunks in Rs1 with the bottom 16-bit Q15 content of 32-bit
chunks in Rs2 and multiply the bottom 16-bit Q15 content of 32-bit chunks in Rs1 with the top 16-bit Q15 content of 32-bit
chunks in Rs2. The Q31 results are then right-shifted 17-bits and clipped to Q15 values. The Q15 results are then written
into Rd.

<strong>Operations</strong>:\n
@code 
Rd.H[0] = (Rs1.H[0] s* Rs2.H[0]) s>> 17
Rd.H[1] = (Rs1.H[1] s* Rs2.H[1]) s>> 17
Rd.H[2] = (Rs1.H[1] s* Rs2.H[0]) s>> 17
Rd.H[3] = (Rs1.H[0] s* Rs2.H[1]) s>> 17
@endcode

@param [in]  a unsigned long type of value stored in a
@param [in]  b unsigned long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1ga7ff13bd949317e079d8e2c841a778ed0';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DMSR33';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '19468';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DMSR33 (Signed Multiply with Right Shift 33-bit and Cross Multiply with Right Shift 33-bit)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DMSR33 Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Do two signed 32-bit multiplications from the 32-bit elements of two registers, and each multiplications performs a right
shift operation.

<strong>Description</strong>:\n
For the <tt>DMSR33</tt> instruction, multiply the top 32-bit Q31 content of 64-bit chunks in Rs1 with the top 32-bit Q31 content
of 64-bit chunks in Rs2. At the same time, multiply the bottom 32-bit Q31 content of 64bit chunks in Rs1 with the bottom 
32-bit Q31 content of 64-bit. 
The Q64 results are then right-shifted 33-bits and clipped to Q31 values. The Q31 results are then written into Rd.

<strong>Operations</strong>:\n
@code 
Rd.W[0] = (Rs1.W[0] s* Rs2.W[0]) s>> 33
Rd.W[1] = (Rs1.W[1] s* Rs2.W[1]) s>> 33
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1gaf636c7933f0d1523af01ff6c28e2baf7';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DMXSR33';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '19509';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DMXSR33 (Signed Multiply with Right Shift 33-bit and Cross Multiply with Right Shift 33-bit)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DMXSR33 Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Do two signed 32-bit cross multiplications from the 32-bit elements of two registers, and each multiplications performs a
right shift operation.

<strong>Description</strong>:\n
For the <tt>DMXSR33</tt> instruction, multiply the top 32-bit Q31 content of 64-bit chunks in Rs1 with the bottom 32-bit Q31
content of 64-bit chunks in Rs2. At the same time, multiply the bottom 32-bit Q31 content of 64-bit chunks in Rs1 with
the top 32-bit Q31 content of 64-bit chunks in Rs2.
The Q63 results are then right-shifted 33-bits and clipped to Q31 values. The Q31 results are then written into Rd.

<strong>Operations</strong>:\n
@code 
Rd.W[0] = (Rs1.W[0] s* Rs2.W[1]) s>> 33
Rd.W[1] = (Rs1.W[1] s* Rs2.W[0]) s>> 33
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1gae0f7b184a55b59c997b69f224e95d2d9';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DREDAS16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '19547';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DREDAS16 (Reduced Addition and Reduced Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DREDAS16 Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Do halfs reduced subtraction and halfs reduced addition from a register. The result is written to Rd.

<strong>Description</strong>:\n
For the <tt>DREDAS16</tt> instruction, subtract the top 16-bit Q15 element from the bottom 16-bit Q15 element of the bottom
32-bit Q31 content of 64-bit chunks in Rs1. At the same time, add the the top16-bit Q15 element with the bottom16-bit
Q15 element of the top 32-bit Q31 content of 64-bit chunks in Rs1. The two Q15 results are then written into Rd.

<strong>Operations</strong>:\n
@code 
Rd.H[0] = Rs1.H[0] - Rs1.H[1]
Rd.H[1] = Rs1.H[2] + Rs1.H[3]
@endcode

@param [in]  a unsigned long long type of value stored in a
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1ga1ba235b778d4753aeb52d4f14a91e707';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DREDSA16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '19583';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DREDSA16 (Reduced Subtraction and Reduced Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DREDSA16 Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Do halfs reduced subtraction and halfs reduced addition from a register. The result is written to Rd.

<strong>Description</strong>:\n
For the <tt>DREDSA16</tt> instruction, add the top 16-bit Q15 element from the bottom 16-bit Q15  element of the bottom 32-bit Q31 content of 64-bit chunks in Rs1. At the same time,  subtract the the top16-bit Q15 element with the bottom16-bit Q15 element of the top 32-bit Q31 content of 64-bit chunks in Rs1. The two Q15 results are then written into Rd. 

<strong>Operations</strong>:\n
@code 
Rd.H[0] = Rs1.H[0] + Rs1.H[1]
Rd.H[1] = Rs1.H[2] - Rs1.H[3]
@endcode

@param [in]  a unsigned long longtype of value stored in a
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1gaca9bc9ac16f311806f6d2a624b8c3c92';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE int16_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DKCLIP64';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '19630';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DKCLIP64 (64-bit Clipped to 16-bit Saturation Value)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DKCLIP64 Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Do 15-bit element arithmetic right shift operations and limit result into 32-bit int,then do saturate operation to 16-bit and
clip result to 16-bit Q15.

<strong>Description</strong>:\n
For the <tt>DKCLIP64</tt> instruction, shift the input 15 bits to the right and data convert the result to 32-bit int type, after
which the input is saturated to limit the data to between 2^15-1 and -2^15. the result is converted to 16-bits q15 type. The
final results are written to Rd.

<strong>Operations</strong>:\n
@code 
const int32_t max = (int32_t)((1U << 15U) - 1U);
const int32_t min = -1 - max ;
int32_t val = (int32_t)(Rs s>> 15);
if (val > max) {
  Rd = max;
} else if (val < min) {
  Rd = min;
} else {
  Rd = (int16_t)val;
}
@endcode

@param [in]  a unsigned long long type of value stored in a
\return value stored in int16_t type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1ga120b4b891efd6800c209976a5e3f37b0';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DKMDA';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '19677';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DKMDA (Signed Multiply Two Halfs and Add)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DKMDA Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Do two signed 16-bit multiplications from the 32-bit elements of two registers; and then adds the two 32-bit results together.
The addition result may be saturated.

<strong>Description</strong>:\n
This instruction multiplies the bottom 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit content of the
32-bit elements of Rs2 and then adds the result to the result of multiplying the top 16-bit content of the 32-bit elements of
Rs1 with the top 16-bit content of the 32-bit elements of Rs2.
The addition result is checked for saturation. If saturation happens, the result is saturated to 2^31-1 The final results are
written to Rd. The 16-bit contents are treated as signed integers

<strong>Operations</strong>:\n
@code 
if (Rs1.W[x] != 0x80008000) or (Rs2.W[x] != 0x80008000){
  Rd.W[x] = (Rs1.W[x].H[1] * Rs2.W[x].H[1]) + (Rs1.W[x].H[0] * Rs2.W[x].H[0]);
} else {
  Rd.W[x] = 0x7fffffff;
  OV = 1;
}
x=1...0
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1gae9b238138d5868d18a418b2e7e43f767';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DKMXDA';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '19724';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DKMXDA (Signed Crossed Multiply Two Halfs and Add)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DKMXDA Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 16-bit multiplications from the 32-bit elements of two registers; and then adds the two 32-bit results together.
The addition result may be saturated.
* DKMXDA: top*bottom + top*bottom (per 32-bit element)

<strong>Description</strong>:\n
This instruction multiplies the bottom 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the 32-bit
elements of Rs2 and then adds the result to the result of multiplying the top 16-bit content of the 32-bit elements of Rs1
with the bottom 16-bit content of the 32-bit elements of Rs2.
The addition result is checked for saturation.If saturation happens, the result is saturated to 2^31-1 The final results are
written to Rd. The 16-bit contents are treated as signed integers.

<strong>Operations</strong>:\n
@code 
if (Rs1.W[x] != 0x80008000) or (Rs2.W[x] != 0x80008000){
Rd.W[x] = (Rs1.W[x].H[1] * Rs2.W[x].H[0]) + (Rs1.W[x].H[0] * Rs2.W[x].H[1]);
} else {
Rd.W[x] = 0x7fffffff;
OV = 1;
}
x=1...0
@endcode

@param [in]  a    unsigned long long type of value stored in a
@param [in]  b    unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1ga31d9821d74608355076a74913c655552';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DSMDRS';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '19765';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DSMDRS (Signed Multiply Two Halfs and Reverse Subtract)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DSMDRS Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 16-bit multiplications from the 32-bit elements of two registers; and then perform a subtraction operation
between the two 32-bit results.
* DSMDRS: bottom*bottom - top*top (per 32-bit element)

<strong>Description</strong>:\n
This instruction multiplies the top 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the 32-bit
elements of Rs2 and then subtracts the result from the result of multiplying the bottom 16-bit content of the 32-bit elements
of Rs1 with the bottom 16-bit content of the 32-bit elements of Rs2.
The subtraction result is written to the corresponding 32-bit element of Rd (The 16-bit contents of multiplication are
treated as signed integers).

<strong>Operations</strong>:\n
@code 
Rd.W[x] = (Rs1.W[x].H[0] * Rs2.W[x].H[0]) - (Rs1.W[x].H[1] * Rs2.W[x].H[1]); x = 1...0
@endcode

@param [in]  a    unsigned long long type of value stored in a
@param [in]  b    unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1ga925e17a7f4bbaa82af7193d549ad6e60';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DSMXDS';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '19806';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DSMXDS (Signed Crossed Multiply Two Halfs and Subtract)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DSMXDS Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 16-bit multiplications from the 32-bit elements of two registers; and then perform a subtraction operation
between the two 32-bit results.
* DSMXDS: top*bottom - bottom*top (per 32-bit element)

<strong>Description</strong>:\n
This instruction multiplies the bottom 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the 32-bit
elements of Rs2 and then subtracts the result from the result of multiplying the top 16-bit content of the 32-bit elements
of Rs1 with the bottom 16-bit content of the 32-bit elements of Rs2.
The subtraction result is written to the corresponding 32-bit element of Rd. The 16-bit contents of multiplication are
treated as signed integers.

<strong>Operations</strong>:\n
@code 
Rd.W[x] = (Rs1.W[x].H[1] * Rs2.W[x].H[0]) - (Rs1.W[x].H[0] * Rs2.W[x].H[1]); x = 1...0
@endcode

@param [in]  a    unsigned long long type of value stored in a
@param [in]  b    unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1ga26ade687b419c6a6137dc6fbc39ebcc2';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DSMBB32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '19844';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DSMBB32 (Signed Multiply Bottom Word & Bottom Word)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DSMBB32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit element of a register with the signed 32-bit element of another register and write the 64-bit result to a third register.
* DSMBB32: bottom*bottom

<strong>Description</strong>:\n
This instruction multiplies the bottom 32-bit element of Rs1 with the bottom 32-bit element of Rs2. The 64-bit multiplication result is written to Rd.
The 32-bit contents of Rs1 and Rs2 are treated as signed integers.

<strong>Operations</strong>:\n
@code 
res = (Rs1.W[0] * Rs2.W[0]);
Rd = res;
@endcode

@param [in]  a    unsigned long long type of value stored in a
@param [in]  b    unsigned long long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1ga81f8cd1ba30e275cd7545744d19fe89c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DSMBB32_SRA14';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '19883';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DSMBB32.sra14 (Signed Crossed Multiply Two Halfs and Subtract with Right Shift 14)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DSMBB32.sra14 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit element of a register with the signed 32-bit element of another register, then right shift 14-
bit,finally write the 64-bit result to a third register.
* DSMBB32.sra14: bottom*bottom s>> 14

<strong>Description</strong>:\n
This instruction multiplies the bottom 32-bit element of Rs1 with the bottom 32-bit element of Rs2. The 64-bit multiplication result is written to Rd after right shift 14-bit.
The 32-bit contents of Rs1 and Rs2 are treated as signed integers.

<strong>Operations</strong>:\n
@code 
res = (Rs1.W[0] * Rs2.W[0]) s>> 14;
Rd = res;
@endcode

@param [in]  a    unsigned long long type of value stored in a
@param [in]  b    unsigned long long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1ga72c9458f1d113833e3a1348b0d33701d';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DSMBB32_SRA32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '19923';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DSMBB32.sra32 (Signed Crossed Multiply Two Halfs and Subtract with Right Shift 32)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DSMBB32.sra32 Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit element of a register with the signed 32-bit element of another register, then right shift 32-
bit,finally write the 64-bit result to a third register.
* DSMBB32.sra32: bottom*bottom s >> 32

<strong>Description</strong>:\n
This instruction multiplies the bottom 32-bit element of Rs1 with the bottom 32-bit element of Rs2.
The 64-bit multiplication result is written to Rd after right shift 32-bit. The 32-bit contents of Rs1 and Rs2 are treated as signed integers.

<strong>Operations</strong>:\n
@code 
res = (Rs1.W[0] * Rs2.W[0]) s>> 32;
Rd = res;
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1ga36afd1d27865babe06ad9637e024d229';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DSMBT32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '19963';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMBT32 (Signed Multiply Bottom Word & Top Word)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DSMBT32 Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit element of a register with the signed 32-bit element of another register and write the 64-bit
result to a third register.
* DSMBT32: bottom*top

<strong>Description</strong>:\n
This instruction multiplies the bottom 32-bit element of Rs1 with the top 32-bit element of Rs2. The 64-bit multiplication
result is written to Rd. The 32-bit contents of Rs1 and Rs2 are treated as signed integers.

<strong>Operations</strong>:\n
@code 
res = (Rs1.W[0] * Rs2.W[0]);
Rd = res;
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1gae0547ad950a611d38c4aab53a22fae32';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DSMBT32_SRA14';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '20003';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DSMBT32.sra14 (Signed Multiply Bottom Word & Top Word with Right Shift 14)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DSMBT32.sra14 Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit element of a register with the signed 32-bit element of another register, then right shift 14-
bit,finally write the 64-bit result to a third register.
* DSMBT32.sra14: bottom*bottom s>> 14

<strong>Description</strong>:\n
This instruction multiplies the bottom 32-bit element of Rs1 with the top 32-bit element of Rs2. The 64-bit multiplication
result is written to Rd after right shift 14-bit. The 32-bit contents of Rs1 and Rs2 are treated as signed integers.

<strong>Operations</strong>:\n
@code 
res = (Rs1.W[0] * Rs2.W[0]) s>> 14;
Rd = res;
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1ga205796bb06f69a3889e05afda1f12a32';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DSMBT32_SRA32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '20043';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DSMBT32.sra32 (Signed Crossed Multiply Two Halfs and Subtract with Right Shift 32)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DSMBT32.sra32 Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit element of a register with the signed 32-bit element of another register, then right shift 32-
bit,finally write the 64-bit result to a third register.
* DSMBT32.sra32: bottom*bottom s>> 32

<strong>Description</strong>:\n
This instruction multiplies the bottom 32-bit element of Rs1 with the top 32-bit element of Rs2. The 64-bit multiplication
result is written to Rd after right shift 32-bit. The 32-bit contents of Rs1 and Rs2 are treated as signed integers.

<strong>Operations</strong>:\n
@code 
res = (Rs1.W[0] * Rs2.W[0]) s>> 14;
Rd = res;
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1ga922c6eea8fc1f8da6ce4ace404cdf67e';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DSMTT32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '20083';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DSMTT32 (Signed Multiply Top Word & Top Word)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DSMTT32 Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit element of a register with the signed 32-bit element of another register and write the 64-bit
result to a third register.
* DSMTT32: top*top

<strong>Description</strong>:\n
This instruction multiplies the top 32-bit element of Rs1 with the top 32-bit element of Rs2. The 64-bit multiplication
result is written to Rd. The 32-bit contents of Rs1 and Rs2 are treated as signed integers.

<strong>Operations</strong>:\n
@code 
res = Rs1.W[1] * Rs2.W[1];
Rd = res;
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1gaf7d32df6897ea5ceb4c83a27d070a9c6';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DSMTT32_SRA14';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '20123';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DSMTT32.sra14 (Signed Multiply Top Word & Top Word with Right Shift 14-bit)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DSMTT32.sra14 Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit element of a register with the signed 32-bit element of another register,then right shift 14-bit,
finally write the 64-bit result to a third register.
* DSMTT32.sra14: top*top s>> 14

<strong>Description</strong>:\n
This instruction multiplies the top 32-bit element of Rs1 with the top 32-bit element of Rs2. The 64-bit multiplication
result is written to Rd after right shift 14-bit. The 32-bit contents of Rs1 and Rs2 are treated as signed integers.

<strong>Operations</strong>:\n
@code 
res = Rs1.W[1] * Rs2.W[1] >> 14;
Rd = res;
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1ga178e4d2fab114e292f29d48ad96a8a9c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DSMTT32_SRA32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '20163';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DSMTT32.sra32 (Signed Multiply Top Word & Top Word with Right Shift 32-bit)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DSMTT32.sra32 Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit element of a register with the signed 32-bit element of another register,then right shift 32-bit,
finally write the 64-bit result to a third register.
* DSMTT32.sra32: top*top s>> 32

<strong>Description</strong>:\n
This instruction multiplies the top 32-bit element of Rs1 with the top 32-bit element of Rs2. The 64-bit multiplication
result is written to Rd after right shift 32-bit. The 32-bit contents of Rs1 and Rs2 are treated as signed integers.

<strong>Operations</strong>:\n
@code 
res = Rs1.W[1] * Rs2.W[1] >> 32;
Rd = res;
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1ga8a93d5c54519e497d9fb186ea48aa4c8';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DPKBB32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '20200';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DPKBB32 (Pack Two 32-bit Data from Both Bottom Half)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DPKBB32 Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Pack 32-bit data from 64-bit chunks in two registers.
* DPKBB32: bottom.bottom

<strong>Description</strong>:\n
This instruction moves Rs1.W[0] to Rd.W[1] and moves Rs2.W[0] to Rd.W[0].

<strong>Operations</strong>:\n
@code 
Rd = CONCAT(Rs1.W[0], Rs2.W[0]);
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1ga1e74949ff110a8c88fc3c097b59b037f';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DPKBT32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '20237';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DPKBT32 (Pack Two 32-bit Data from Bottom and Top Half)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DPKBT32 Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Pack 32-bit data from 64-bit chunks in two registers.
* DPKBT32: bottom.top

<strong>Description</strong>:\n
This instruction moves Rs1.W[0] to Rd.W[1] and moves Rs2.W[1] to Rd.W[0].

<strong>Operations</strong>:\n
@code 
Rd = CONCAT(Rs1.W[0], Rs2.W[1]);
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1gaae0d073b29f2c897975a4bbabb9e292c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DPKTT32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '20274';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DPKTT32 (Pack Two 32-bit Data from Both Top Half)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DPKTT32 Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Pack 32-bit data from 64-bit chunks in two registers.
* DPKTT32: top.top

<strong>Description</strong>:\n
This instruction moves Rs1.W[1] to Rd.W[0] and moves Rs2.W[1] to Rd.W[0].

<strong>Operations</strong>:\n
@code 
Rd = CONCAT(Rs1.W[1], Rs2.W[1]);
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1ga99a6b614cf6972dc5c4ac45e823dff7b';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DPKTB32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '20311';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DPKTB32 (Pack Two 32-bit Data from Top and Bottom Half)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DPKTB32 Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Pack 32-bit data from 64-bit chunks in two registers.
* DPKTB32: top.bottom

<strong>Description</strong>:\n
This instruction moves Rs1.W[1] to Rd.W[1] and moves Rs2.W[0] to Rd.W[0].

<strong>Operations</strong>:\n
@code 
Rd = CONCAT(Rs1.W[1], Rs2.W[0]);
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1ga603696225caebf6c759a3c0be30357de';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DPKTB16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '20349';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DPKTB16 (Pack Two 32-bit Data from Top and Bottom Half)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DPKTB16 Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Pack 16-bit data from 32-bit chunks in two registers.
* DPKTB16: top.bottom

<strong>Description</strong>:\n
This instruction moves Rs1.W[x] [31:16] to Rd.W[x] [31:16] and moves Rs2.W[x] [15:0] to Rd.W[x] [15:0].

<strong>Operations</strong>:\n
@code 
Rd.W[x][31:0] = CONCAT(Rs1.W[x][31:16], Rs2.W[x][15:0]);
x=1...0
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1ga4b05fd599132f060555635eee54552d4';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DPKBB16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '20387';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DPKBB16 (Pack Two 16-bit Data from Both Bottom Half)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DPKBB16 Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Pack 16-bit data from 32-bit chunks in two registers.
* PKBB16: bottom.bottom

<strong>Description</strong>:\n
This instruction moves Rs1.W[x][15:0] to Rd.W[x][31:16] and moves Rs2.W[x] [15:0] to Rd.W[x] [15:0].

<strong>Operations</strong>:\n
@code 
Rd.W[x][31:0] = CONCAT(Rs1.W[x][15:0], Rs2.W[x][15:0]);
x=1...0
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1ga981352d8d6ce0e1c8254e8cd1393fb0b';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DPKBT16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '20425';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DPKBT16 (Pack Two 16-bit Data from Bottom and Top Half)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DPKBT16 Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Pack 16-bit data from 32-bit chunks in two registers.
* PKBT16: bottom.top

<strong>Description</strong>:\n
This instruction moves Rs1.W[x] [15:0] to Rd.W[x] [31:16] and moves Rs2.W[x] [31:16] to Rd.W[x] [15:0].

<strong>Operations</strong>:\n
@code 
Rd.W[x][31:0] = CONCAT(Rs1.W[x][15:0], Rs2.W[x][31:16]);
x=1...0
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1gaceadcfd902c2a0be51cfb020518be0bd';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DPKTT16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '20463';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DPKTT16 (Pack Two 16-bit Data from Both Top Half)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DPKTT16 Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Pack 16-bit data from 32-bit chunks in two registers.
* PKTT16 top.top 

<strong>Description</strong>:\n
This instruction moves Rs1.W[x] [31:16] to Rd.W[x] [31:16] and moves Rs2.W[x] [31:16] to Rd.W[x] [15:0].

<strong>Operations</strong>:\n
@code 
Rd.W[x][31:0] = CONCAT(Rs1.W[x][31:16], Rs2.W[x][31:16]);
x=1...0
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1gad6c1637811223b3d4b12e4f0ef402b69';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DSRA16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '20508';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DSRA16 (SIMD 16-bit Shift Right Arithmetic)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DSRA16 Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Do 16-bit element arithmetic right shift operations simultaneously. The shift amount is a variable from a GPR.

<strong>Description</strong>:\n
The 16-bit data elements in Rs1 are right-shifted arithmetically, that is, the shifted out bits are filled with the sign-bit of
the data elements. The shift amount is specified by the low-order 4-bits of the value in the Rs2 register. And the results
are written to Rd.

<strong>Operations</strong>:\n
@code 
sa = Rs2[3:0];
if (sa != 0)
{
Rd.H[x] = SE16(Rs1.H[x][15:sa]);
} else {
Rd = Rs1;
}
x=3...0
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1ga79fc72d376416ca068181c11718a4978';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DADD16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '20546';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DADD16 (16-bit Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DADD16 Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Do 16-bit integer element additions simultaneously.

<strong>Description</strong>:\n
This instruction adds the 16-bit unsigned integer elements in Rs1 with the 16-bit unsigned integer elements in Rs2. And
the results are written to Rd.

<strong>Operations</strong>:\n
@code 
Rd.H[x] = Rs1.H[x] + Rs2.H[x];
x=3...0
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1ga56c7cc26e264801f2dd35f55391bb626';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DADD32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '20584';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DADD32 (32-bit Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DADD32 Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Do 32-bit integer element additions simultaneously.

<strong>Description</strong>:\n
This instruction adds the 32-bit integer elements in Rs1 with the 32-bit integer elements in Rs2, and then writes the 32-bit
element results to Rd.

<strong>Operations</strong>:\n
@code 
Rd.W[x] = Rs1.W[x] + Rs2.W[x];
x=1...0
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1ga9343b4b4d6da5219178e0d901ff72263';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DSMBB16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '20625';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DSMBB16 (Signed Multiply Bottom Half & Bottom Half)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DSMBB16 Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 16-bit content of the 32-bit elements of a register with the signed 16-bit content of the 32-bit elements
of another register and write the result to a third register.
* DSMBB16: W[x].bottom*W[x].bottom

<strong>Description</strong>:\n
For the <tt>DSMBB16</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1 with the bottom
16-bit content of the 32-bit elements of Rs2.
The multiplication results are written to Rd. The 16-bit contents of Rs1 and Rs2 are treated as signed integers.

<strong>Operations</strong>:\n
@code 
Rd.W[x] = Rs1.W[x].H[0] * Rs2.W[x].H[0];
x=1...0
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1ga27f3420248612f37ae63a736a2727509';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DSMBT16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '20666';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DSMBT16 (Signed Multiply Bottom Half & Top Half)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DSMBT16 Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 16-bit content of the 32-bit elements of a register with the signed 16-bit content of the 32-bit
elements of another register and write the result to a third register.
* DSMBT16: W[x].bottom *W[x].top

<strong>Description</strong>:\n
For the <tt>DSMBT16</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1 with the top 16-bit
content of the 32-bit elements of Rs2.
The multiplication results are written to Rd. The 16-bit contents of Rs1 and Rs2 are treated as signed integers.

<strong>Operations</strong>:\n
@code 
Rd.W[x] = Rs1.W[x].H[0] * Rs2.W[x].H[1];
x=1...0
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1ga223beb785ea1098f82284603af18e042';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DSMTT16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '20707';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DSMTT16 (Signed Multiply Top Half & Top Half)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DSMTT16 Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 16-bit content of the 32-bit elements of a register with the signed 16-bit content of the 32-bit
elements of another register and write the result to a third register.
* DSMTT16: W[x].top * W[x].top

<strong>Description</strong>:\n
For the <tt>DSMTT16</tt> instruction, it multiplies the top 16-bit content of the 32-bit elements of Rs1 with the top 16-bit
content of the 32-bit elements of Rs2.
The multiplication results are written to Rd. The 16-bit contents of Rs1 and Rs2 are treated as signed integers.

<strong>Operations</strong>:\n
@code 
Rd.W[x] = Rs1.W[x].H[1] * Rs2.W[x].H[1];
x=1...0
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1ga265ea39fd40337442a0c5326bab03d46';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DRCRSA16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '20749';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DRCRSA16 (16-bit Signed Halving Cross Subtraction & Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DRCRSA16 Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Do 16-bit signed integer element subtraction and 16-bit signed integer element addition in a 32-bit chunk simultaneously.
Operands are from crossed positions in 32-bit chunks. The results are halved to avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction subtracts the 16-bit signed integer in [31:16] of 32-bit chunks in Rs1 with the 16-bit signed integer in
[15:0] of 32-bit chunks in Rs2, and adds the 16-bit signed integer in [31:16] of 32-bit chunks in Rs2 from the 16-bit signed
integer in [15:0] of 32-bit chunks in Rs1. The element results are first logically right-shifted by 1 bit and then written to
[31:16] of 32- bit chunks in Rd and [15:0] of 32-bit chunks in Rd.

<strong>Operations</strong>:\n
@code 
Rd.W[x][31:16] = (Rs1.W[x][31:16] - Rs2.W[x][15:0]) s>> 1;
Rd.W[x][15:0] = (Rs1.W[x][15:0] + Rs2.W[x][31:16]) s>> 1;
x=1...0
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1gac9221dfb77a93c2095845fd7d8665547';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DRCRSA32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '20790';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DRCRSA32 (32-bit Signed Halving Cross Subtraction & Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DRCRSA32 Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Do 32-bit signed integer element subtraction and 32-bit signed integer element addition in a 64-bit chunk simultaneously.
Operands are from crossed 32-bit elements. The results are halved to avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction subtracts the 32-bit signed integer element in [63:32] of Rs1 with the 32-bit signed integer element in
[31:0] of Rs2, and adds the 32-bit signed integer element in [63:32] of Rs2 from the 32-bit signed integer element in [31:0]
of Rs1. The element results are first arithmetically right-shifted by 1 bit and then written to [63:32] of Rd for addition and
[31:0] of Rd for subtraction.

<strong>Operations</strong>:\n
@code 
Rd.W[1] = (Rs1.W[1] - Rs2.W[0]) s>> 1;
Rd.W[0] = (Rs1.W[0] + Rs2.W[1]) s>> 1;
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1gac74998a99020b8235ed9be9e2fe82d89';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DRCRAS16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '20832';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DRCRAS16 (16-bit Signed Halving Cross Addition & Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DRCRAS16 Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Do 16-bit signed integer element subtraction and 16-bit signed integer element addition in a 32-bit chunk simultaneously.
Operands are from crossed positions in 32-bit chunks. The results are halved to avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction adds the 16-bit unsigned integer in [31:16] of 32-bit chunks in Rs1 with the 16-bit unsigned integer in
[15:0] of 32-bit chunks in Rs2, and subtracts the 16-bit unsigned integer in [31:16] of 32-bit chunks in Rs2 from the 16-bit
unsigned integer in [15:0] of 32-bit chunks in Rs1. The element results are first logically right-shifted by 1 bit and then
written to [31:16] of 32-bit chunks in Rd and [15:0] of 32-bit chunks in Rd.

<strong>Operations</strong>:\n
@code 
Rd.W[x][31:16] = (Rs1.W[x][31:16] + Rs2.W[x][15:0]) s>> 1;
Rd.W[x][15:0] = (Rs1.W[x][15:0] - Rs2.W[x][31:16]) s>> 1;
x=1...0
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1ga4b48520c3bc829f5db4c24cb1ca9a60b';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DRCRAS32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '20873';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DRCRAS32 (32-bit Signed Cross Addition & Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DRCRAS32 Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Do 32-bit signed integer element addition and 32-bit signed integer element subtraction in a 64-bit chunk simultaneously.
Operands are from crossed 32-bit elements. The results are halved to avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction adds the 32-bit signed integer element in [63:32] of Rs1 with the 32-bit signed integer element in [31:0]
of Rs2, and subtracts the 32-bit signed integer element in [63:32] of Rs2 from the 32-bit signed integer element in [31:0]
of Rs1. The element results are first arithmetically right-shifted by 1 bit and then written to [63:32] of Rd for addition
and [31:0] of Rd for subtraction.

<strong>Operations</strong>:\n
@code 
Rd.W[1] = (Rs1.W[1] + Rs2.W[0]) s>> 1;
Rd.W[0] = (Rs1.W[0] - Rs2.W[1]) s>> 1;
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1ga1d7c2e1cce7258f0d09e8f4396fc6aa4';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DKCRAS16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '20928';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DKCRAS16 (16-bit Signed Saturating Cross Addition & Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DKCRAS16 Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Do 16-bit signed integer element saturating addition and 16-bit signed integer element saturating subtraction in a 32-bit
chunk simultaneously. Operands are from crossed positions in 32-bit chunks.

<strong>Description</strong>:\n
This instruction adds the 16-bit signed integer element in [31:16] of 32-bit chunks in Rs1 with the 16-bit signed integer
element in [15:0] of 32-bit chunks in Rs2; at the same time, it subtracts the 16-bit signed integer element in [31:16] of
32-bit chunks in Rs2 from the 16-bit signed integer element in [15:0] of 32-bit chunks in Rs1.
If any of the results are beyond the Q15 number range (-2^15 <= Q15 <= 2^15-1), they are saturated to the range and the OV
bit is set to 1. The saturated results are written to [31:16] of 32-bit chunks in Rd for subtraction and [15:0] of 32-bit chunks
in Rd for addition.

<strong>Operations</strong>:\n
@code 
res1 = Rs1.W[x][31:16] - Rs2.W[x][15:0];
res2 = Rs1.W[x][15:0] + Rs2.W[x][31:16];
for (res in [res1, res2]) {
  if (res > (2^15)-1) {
    res = (2^15)-1;
    OV = 1;
  } else if (res < -2^15) {
    res = -2^15;
    OV = 1;
  }
}
Rd.W[x][31:16] = res1;
Rd.W[x][15:0] = res2;
x=1...0
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1ga4b2356822fa07c18590368633ea00c29';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DKCRSA16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '20983';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DKCRSA16 (16-bit Signed Saturating Cross Subtraction & Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DKCRSA16 Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Do 16-bit signed integer element saturating subtraction and 16-bit signed integer element saturating addition in a 32-bit
chunk simultaneously. Operands are from crossed positions in 32-bit chunks.

<strong>Description</strong>:\n
This instruction subtracts the 16-bit signed integer element in [15:0] of 32-bit chunks in Rs2 from the 16-bit signed integer
element in [31:16] of 32-bit chunks in Rs1; at the same time, it adds the 16-bit signed integer element in [31:16] of 32-bit
chunks in Rs2 with the 16-bit signed integer element in [15:0] of 32-bit chunks in Rs1.
If any of the results are beyond the Q15 number range (-2^15 <= Q15 <= 2^15-1), they are saturated to the range and the OV
bit is set to 1. The saturated results are written to [31:16] of 32-bit chunks in Rd for addition and [15:0] of 32-bit chunks
in Rd for subtraction.

<strong>Operations</strong>:\n
@code 
res1 = Rs1.W[x][31:16] + Rs2.W[x][15:0];
res2 = Rs1.W[x][15:0] - Rs2.W[x][31:16];
for (res in [res1, res2]) {
  if (res > (2^15)-1) {
    res = (2^15)-1;
    OV = 1;
  } else if (res < -2^15) {
    res = -2^15;
    OV = 1;
  }
}
Rd.W[x][31:16] = res1;
Rd.W[x][15:0] = res2;
x=1...0
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1ga88d97ec77da277767bdc4830b5862f0f';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DRSUB16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '21021';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DRSUB16 (16-bit Signed Halving Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DRSUB16 Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Do 16-bit signed integer element subtractions simultaneously. The results are halved to avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction subtracts the 16-bit signed integer elements in Rs2 from the 16-bit signed integer elements in Rs1. The
results are first arithmetically right-shifted by 1 bit and then written to Rd.

<strong>Operations</strong>:\n
@code 
Rd.H[x] = (Rs1.H[x] - Rs2.H[x]) s>> 1;
x=3...0
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1ga3f89415b5a9a149b5609aa2994602774';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DSTSA32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '21061';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DSTSA32 (32-bit Straight Subtraction & Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DSTSA32 Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Do 32-bit integer element subtraction and 32-bit integer element addition in a 64-bit chunk simultaneously. Operands are
from corresponding 32-bit elements.

<strong>Description</strong>:\n
This instruction subtracts the 32-bit integer element in [63:32] of Rs2 from the 32-bit integer element in [63:32] of Rs1,
and writes the result to [63:32] of Rd; at the same time, it adds the 32-bit integer element in [31:0] of Rs1 with the 32-bit
integer element in [31:0] of Rs2, and writes the result to [31:0] of Rd.

<strong>Operations</strong>:\n
@code 
Rd.W[1] = Rs1.W[1] - Rs2.W[1];
Rd.W[0] = Rs1.W[0] + Rs2.W[0];
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1gadf3844246a4dce8d3943d9404fc65a23';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DSTAS32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '21101';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DSTAS32 (SIMD 32-bit Straight Addition & Subtractionn)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DSTAS32 Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Do 32-bit integer element addition and 32-bit integer element subtraction in a 64-bit chunk simultaneously. Operands are
from corresponding 32-bit elements.

<strong>Description</strong>:\n
This instruction adds the 32-bit integer element in [63:32] of Rs1 with the 32-bit integer element in [63:32] of Rs2,
and writes the result to [63:32] of Rd; at the same time, it subtracts the 32-bit integer element in [31:0] of Rs2
from the 32-bit integer element in [31:0] of Rs1, and writes the result to [31:0] of Rd.

<strong>Operations</strong>:\n
@code 
Rd.W[1] = Rs1.W[1] + Rs2.W[1];
Rd.W[0] = Rs1.W[0] - Rs2.W[0];
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1ga8aa79becc51fb6eccabc07d2eaeb7417';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DKCRSA32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '21151';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DKCRSA32 (32-bit Signed Saturating Cross Subtraction & Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DKCRSA32 Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Do 32-bit signed integer element saturating subtraction and 32-bit signed integer element saturating addition in a 64-bit
chunk simultaneously. Operands are from crossed 32-bit elements.

<strong>Description</strong>:\n
This instruction subtracts the 32-bit integer element in [31:0] of Rs2 from the 32-bit integer element in [63:32] of Rs1; at
the same time, it adds the 32-bit integer element in [31:0] of Rs1 with the 32-bit integer element in [63:32] of Rs2. If any
of the results are beyond the Q31 number range (-2^31 <= Q31 <= 2^31-1), they are saturated to the range and the OV bit is
set to 1. The saturated results are written to [63:32] of Rd for subtraction and [31:0] of Rd for addition.

<strong>Operations</strong>:\n
@code 
res[1] = Rs1.W[1] - Rs2.W[0];
res[0] = Rs1.W[0] + Rs2.W[1];
if (res[x] > (2^31)-1) {
  res[x] = (2^31)-1;
  OV = 1;
} else if (res < -2^31) {
  res[x] = -2^31;
  OV = 1;
}
Rd.W[1] = res[1];
Rd.W[0] = res[0];
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1ga2d34dfb2d43b56d07ea917d5733cf92d';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DKCRAS32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '21201';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DKCRAS32 (32-bit Signed Saturating Cross Addition & Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DKCRAS32 Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Do 32-bit signed integer element saturating subtraction and 32-bit signed integer element saturating addition in a 64-bit
chunk simultaneously. Operands are from crossed 32-bit elements.

<strong>Description</strong>:\n
This instruction adds the 32-bit integer element in [31:0] of Rs2 from the 32-bit integer element in [63:32] of Rs1; at the
same time, it subtracts the 32-bit integer element in [31:0] of Rs1 with the 32-bit integer element in [63:32] of Rs2. If any
of the results are beyond the Q31 number range (-2^31 <= Q31 <= 2^31-1), they are saturated to the range and the OV bit is
set to 1. The saturated results are written to [63:32] of Rd for subtraction and [31:0] of Rd for addition.

<strong>Operations</strong>:\n
@code 
res[1] = Rs1.W[1] + Rs2.W[0];
res[0] = Rs1.W[0] - Rs2.W[1];
if (res[x] > (2^31)-1) {
  res[x] = (2^31)-1;
  OV = 1;
} else if (res < -2^31) {
  res[x] = -2^31;
  OV = 1;
}
Rd.W[1] = res[1];
Rd.W[0] = res[0];
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1gac22b3cf23ab45ecc88896aa673bc14b2';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DCRSA32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '21241';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DCRSA32 (32-bit Cross Subtraction & Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DCRSA32 Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Do 32-bit integer element subtraction and 32-bit integer element addition in a 64-bit chunk simultaneously. Operands are
from crossed 32-bit elements.

<strong>Description</strong>:\n
This instruction adds the 32-bit integer element in [63:32] of Rs1 with the 32-bit integer element in [31:0] of Rs2, and
writes the result to [63:32] of Rd; at the same time, it subtracts the 32-bit integer element in [63:32] of Rs2 from the 32-bit
integer element in [31:0] of Rs1, and writes the result to [31:0] of Rd.

<strong>Operations</strong>:\n
@code 
res[1] = Rs1.W[1] - Rs2.W[0];
res[0] = Rs1.W[0] + Rs2.W[1];
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1ga2b2f54d957b473835a5b9df270916c6e';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DCRAS32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '21281';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DCRAS32 (32-bit Cross Addition & Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DCRAS32 Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Do 32-bit integer element addition and 32-bit integer element subtraction in a 64-bit chunk simultaneously. Operands are
from crossed 32-bit elements.

<strong>Description</strong>:\n
This instruction subtracts the 32-bit integer element in [63:32] of Rs1 with the 32-bit integer element in [31:0] of Rs2, and
writes the result to [63:32] of Rd; at the same time, it adds the 32-bit integer element in [63:32] of Rs2 from the 32-bit
integer element in [31:0] of Rs1, and writes the result to [31:0] of Rd.

<strong>Operations</strong>:\n
@code 
res[1] = Rs1.W[1] - Rs2.W[0];
res[0] = Rs1.W[0] + Rs2.W[1];
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1ga175bab1f91566dd9eae21df35beadd55';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DKSTSA16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '21336';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DKSTSA16 (16-bit Signed Saturating Straight Subtraction & Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DKSTSA16 Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Do 16-bit signed integer element saturating subtraction and 16-bit signed integer element saturating addition in a 32-bit
chunk simultaneously. Operands are from corresponding positions in 32-bit chunks.

<strong>Description</strong>:\n
This instruction subtracts the 16-bit signed integer element in [31:16] of 32-bit chunks in Rs2 from the 16-bit signed integer
element in [31:16] of 32-bit chunks in Rs1; at the same time, it adds the 16-bit signed integer element in [15:0] of 32-bit
chunks in Rs2 with the 16-bit signed integer element in [15:0] of 32-bit chunks in Rs1.
If any of the results are beyond the Q15 number range (-2^15 <= Q15 <= 2^15-1), they are saturated to the range and the OV
bit is set to 1. The saturated results are written to [31:16] of 32-bit chunks in Rd for subtraction and [15:0] of 32-bit chunks
in Rd for addition.

<strong>Operations</strong>:\n
@code 
res1 = Rs1.W[x][31:16] - Rs2.W[x][31:16];
res2 = Rs1.W[x][15:0] + Rs2.W[x][15:0];
for (res in [res1, res2]) {
  if (res > (2^15)-1) {
    res = (2^15)-1;
    OV = 1;
  } else if (res < -2^15) {
    res = -2^15;
    OV = 1;
  }
}
Rd.W[x][31:16] = res1;
Rd.W[x][15:0] = res2;
x=1...0
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1gabd71785e8bf5fb70a6a726088f2905b2';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DKSTAS16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '21391';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DKSTAS16 (16-bit Signed Saturating Straight Addition & Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DKSTAS16 Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Do 16-bit signed integer element saturating addition and 16-bit signed integer element saturating subtraction in a 32-bit
chunk simultaneously. Operands are from corresponding positions in 32-bit chunks.

<strong>Description</strong>:\n
This instruction adds the 16-bit signed integer element in [31:16] of 32-bit chunks in Rs1 with the 16-bit signed integer
element in [31:16] of 32-bit chunks in Rs2; at the same time, it subtracts the 16-bit signed integer element in [15:0] of
32-bit chunks in Rs2 from the 16-bit signed integer element in [15:0] of 32-bit chunks in Rs1.
If any of the results are beyond the Q15 number range (-2^15 <= Q15 <= 2^15-1), they are saturated to the range and the OV
bit is set to 1. The saturated results are written to [31:16] of 32-bit chunks in Rd for subtraction and [15:0] of 32-bit chunks
in Rd for addition.

<strong>Operations</strong>:\n
@code 
res1 = Rs1.W[x][31:16] + Rs2.W[x][31:16];
res2 = Rs1.W[x][15:0] - Rs2.W[x][15:0];
for (res in [res1, res2]) {
  if (res > (2^15)-1) {
    res = (2^15)-1;
    OV = 1;
  } else if (res < -2^15) {
    res = -2^15;
    OV = 1;
  }
}
Rd.W[x][31:16] = res1;
Rd.W[x][15:0] = res2;
x=1...0
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1gadab19b34f09451cadefc88ecd82721b1';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DRSUB32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '21573';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DRSUB32 (32-bit Signed Halving Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DRSUB32 Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Do 32-bit signed integer element subtractions simultaneously. The results are halved to avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction subtracts the 32-bit signed integer elements in Rs2 from the 32-bit signed integer elements in Rs1. The
results are first arithmetically right-shifted by 1 bit and then written to Rd.

<strong>Operations</strong>:\n
@code 
Rd.W[x] = (Rs1.W[x] - Rs2.W[x]) s>> 1;
x=1...0
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1gaa1887dcccf8392283f2208653e6e91f2';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DPACK32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
signed long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
signed long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '21609';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DPACK32 (SIMD Pack Two 32-bit Data To 64-bit)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DPACK32 Rd, Rs1, Rs2
# Rd is even/odd pair of register
@endcode

<strong>Purpose</strong>:\n
Pack two 32-bit datas which from two registers into a 64-bit data.

<strong>Description</strong>:\n
This instruction moves 32-bit Rs1 to Rd.W[1] and moves 32-bit Rs2 to Rd.W[0].

<strong>Operations</strong>:\n
@code 
Rd = CONCAT(Rs1.W , Rs2.W);
@endcode

@param [in]  a signed long type of value stored in a
@param [in]  b signed long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1gaae12b28bf525b3bdb5ab5c58f9b804bc';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DSUNPKD810';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '21646';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DSUNPKD810 (Signed Unpacking Bytes 1 & 0)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DSUNPKD810 Rd, Rs1
# Rd, Rs1 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Unpack byte 1 and byte 0 of 32-bit chunks in a register into two 16-bit signed halfwords of 32-bit chunks in a register.

<strong>Description</strong>:\n
For the <tt>DSUNPKD810</tt> instruction, it unpacks byte 1 and byte 0 of 32-bit chunks in Rs1 into two 16-bit signed halfwords
and writes the results to the top part and the bottom part of 32-bit chunks in Rd.

<strong>Operations</strong>:\n
@code 
Rd.W[m].H[1] = SE16(Rs1.W[m].B[1])
Rd.W[m].H[0] = SE16(Rs1.W[m].B[0])
@endcode

@param [in]  a unsigned long long type of value stored in a
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1ga29f3343effd16b57bc06eb264f129a52';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DSUNPKD820';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '21683';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DSUNPKD820 (Signed Unpacking Bytes 2 & 0)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DSUNPKD820 Rd, Rs1
# Rd, Rs1 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Unpack byte 2 and byte 0 of 32-bit chunks in a register into two 16-bit signed halfwords of 32-bit chunks in a register.

<strong>Description</strong>:\n
For the <tt>DSUNPKD820</tt> instruction, it unpacks byte 2 and byte 0 of 32-bit chunks in Rs1 into two 16-bit signed halfwords
and writes the results to the top part and the bottom part of 32-bit chunks in Rd.

<strong>Operations</strong>:\n
@code 
Rd.W[m].H[1] = SE16(Rs1.W[m].B[2])
Rd.W[m].H[0] = SE16(Rs1.W[m].B[0])
@endcode

@param [in]  a unsigned long long type of value stored in a
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1ga8ea563f4e3fb4dceeef6b45879a42df0';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DSUNPKD830';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '21720';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DSUNPKD830 (Signed Unpacking Bytes 3 & 0)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DSUNPKD830 Rd, Rs1
# Rd, Rs1 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Unpack byte 3 and byte 0 of 32-bit chunks in a register into two 16-bit signed halfwords of 32-bit chunks in a register.

<strong>Description</strong>:\n
For the <tt>DSUNPKD830</tt> instruction, it unpacks byte 3 and byte 0 of 32-bit chunks in Rs1 into two 16-bit signed halfwords
and writes the results to the top part and the bottom part of 32-bit chunks in Rd.

<strong>Operations</strong>:\n
@code 
Rd.W[m].H[1] = SE16(Rs1.W[m].B[3])
Rd.W[m].H[0] = SE16(Rs1.W[m].B[0])
@endcode

@param [in]  a unsigned long long type of value stored in a
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1gad03ded061df6fe72565b76967e5a401f';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DSUNPKD831';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '21757';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DSUNPKD831 (Signed Unpacking Bytes 3 & 1)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DSUNPKD831 Rd, Rs1
# Rd, Rs1 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Unpack byte 3 and byte 1 of 32-bit chunks in a register into two 16-bit signed halfwords of 32-bit chunks in a register.

<strong>Description</strong>:\n
For the <tt>DSUNPKD831</tt> instruction, it unpacks byte 3 and byte 1 of 32-bit chunks in Rs1 into two 16-bit signed halfwords
and writes the results to the top part and the bottom part of 32-bit chunks in Rd.

<strong>Operations</strong>:\n
@code 
Rd.W[m].H[1] = SE16(Rs1.W[m].B[3])
Rd.W[m].H[0] = SE16(Rs1.W[m].B[1])
@endcode

@param [in]  a unsigned long long type of value stored in a
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1ga97fc24ecf2560383496dd963e4fc8802';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DSUNPKD832';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '21794';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DSUNPKD832 (Signed Unpacking Bytes 3 & 2)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DSUNPKD832 Rd, Rs1
# Rd, Rs1 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Unpack byte 3 and byte 2 of 32-bit chunks in a register into two 16-bit signed halfwords of 32-bit chunks in a register.

<strong>Description</strong>:\n
For the <tt>DSUNPKD832</tt> instruction, it unpacks byte 3 and byte 2 of 32-bit chunks in Rs1 into two 16-bit signed halfwords
and writes the results to the top part and the bottom part of 32-bit chunks in Rd.

<strong>Operations</strong>:\n
@code 
Rd.W[m].H[1] = SE16(Rs1.W[m].B[3])
Rd.W[m].H[0] = SE16(Rs1.W[m].B[2])
@endcode

@param [in]  a unsigned long long type of value stored in a
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1ga5e6485e422d9d6d323fb497c734cb795';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DZUNPKD810';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '21831';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DZUNPKD810 (UnSigned Unpacking Bytes 1 & 0)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DZUNPKD810 Rd, Rs1
# Rd, Rs1 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Unpack byte 1 and byte 0 of 32-bit chunks in a register into two 16-bit unsigned halfwords of 32-bit chunks in a register.

<strong>Description</strong>:\n
For the <tt>DZUNPKD810</tt> instruction, it unpacks byte 1 and byte 0 of 32-bit chunks in Rs1 into two 16-bit unsigned halfwords
and writes the results to the top part and the bottom part of 32-bit chunks in Rd.

<strong>Operations</strong>:\n
@code 
Rd.W[m].H[1] = SE16(Rs1.W[m].B[1])
Rd.W[m].H[0] = SE16(Rs1.W[m].B[0])
@endcode

@param [in]  a unsigned long long type of value stored in a
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1gaa3d99557d5850f47c9892a2b5b366c99';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DZUNPKD820';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '21868';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DZUNPKD820 (UnSigned Unpacking Bytes 2 & 0)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DZUNPKD820 Rd, Rs1
# Rd, Rs1 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Unpack byte 2 and byte 0 of 32-bit chunks in a register into two 16-bit unsigned halfwords of 32-bit chunks in a register.

<strong>Description</strong>:\n
For the <tt>DZUNPKD820</tt> instruction, it unpacks byte 2 and byte 0 of 32-bit chunks in Rs1 into two 16-bit unsigned halfwords
and writes the results to the top part and the bottom part of 32-bit chunks in Rd.

<strong>Operations</strong>:\n
@code 
Rd.W[m].H[1] = SE16(Rs1.W[m].B[2])
Rd.W[m].H[0] = SE16(Rs1.W[m].B[0])
@endcode

@param [in]  a unsigned long long type of value stored in a
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1ga924503b1b8c1a87dff702c3047d7a390';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DZUNPKD830';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '21905';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DZUNPKD830 (UnSigned Unpacking Bytes 3 & 0)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DZUNPKD830 Rd, Rs1
# Rd, Rs1 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Unpack byte 3 and byte 0 of 32-bit chunks in a register into two 16-bit unsigned halfwords of 32-bit chunks in a register.

<strong>Description</strong>:\n
For the <tt>DZUNPKD830</tt> instruction, it unpacks byte 3 and byte 0 of 32-bit chunks in Rs1 into two 16-bit unsigned halfwords
and writes the results to the top part and the bottom part of 32-bit chunks in Rd.

<strong>Operations</strong>:\n
@code 
Rd.W[m].H[1] = SE16(Rs1.W[m].B[3])
Rd.W[m].H[0] = SE16(Rs1.W[m].B[0])
@endcode

@param [in]  a unsigned long long type of value stored in a
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1ga7c749413e4fc5ac3eb68f166fc697969';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DZUNPKD831';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '21942';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DZUNPKD831 (UnSigned Unpacking Bytes 3 & 1)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DZUNPKD831 Rd, Rs1
# Rd, Rs1 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Unpack byte 3 and byte 1 of 32-bit chunks in a register into two 16-bit unsigned halfwords of 32-bit chunks in a register.

<strong>Description</strong>:\n
For the <tt>DZUNPKD831</tt> instruction, it unpacks byte 3 and byte 1 of 32-bit chunks in Rs1 into two 16-bit unsigned halfwords
and writes the results to the top part and the bottom part of 32-bit chunks in Rd.

<strong>Operations</strong>:\n
@code 
Rd.W[m].H[1] = SE16(Rs1.W[m].B[3])
Rd.W[m].H[0] = SE16(Rs1.W[m].B[1])
@endcode

@param [in]  a unsigned long long type of value stored in a
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N2_1ga569ec2f8d9dc3c6a83b1ccbff2a70f7a';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DZUNPKD832';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '21979';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DZUNPKD832 (UnSigned Unpacking Bytes 3 & 2)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DZUNPKD832 Rd, Rs1
# Rd, Rs1 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Unpack byte 3 and byte 2 of 32-bit chunks in a register into two 16-bit unsigned halfwords of 32-bit chunks in a register.

<strong>Description</strong>:\n
For the <tt>DZUNPKD832</tt> instruction, it unpacks byte 3 and byte 2 of 32-bit chunks in Rs1 into two 16-bit unsigned halfwords
and writes the results to the top part and the bottom part of 32-bit chunks in Rd.

<strong>Operations</strong>:\n
@code 
Rd.W[m].H[1] = SE16(Rs1.W[m].B[3])
Rd.W[m].H[0] = SE16(Rs1.W[m].B[2])
@endcode

@param [in]  a unsigned long long type of value stored in a
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N3_1ga6b2803a4466dc2d9fa9c3fa6764c10e7';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DKMMAC';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '22027';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DKMMAC (64-bit MSW 32x32 Signed Multiply and Saturating Add)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DKMMAC Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Do MSW 32x32 element signed multiplications and saturating addition simultaneously. The results are written into Rd.

<strong>Description</strong>:\n
This instruction multiplies the signed 32-bit elements of Rs1 with the signed 32-bit elements of Rs2
and adds the most significant 32-bit multiplication results with the signed 32-bit elements of Rd. If
the addition result is beyond the Q31 number range (-2^31 <= Q31 <= 2^31-1), it is saturated to the range
and the OV bit is set to 1. The results after saturation are written to Rd. The .u form of the
instruction additionally rounds up the most significant 32-bit of the 64-bit multiplication results by
adding a 1 to bit 31 of the results.

<strong>Operations</strong>:\n
@code 
op1t = Rs1.W[x+1]; op2t = Rs2.W[x+1]; op3t = Rd.W[x+1] // top
op1b = Rs1.W[x]; op2b = Rs2.W[x]; op3b = Rd.W[x] // bottom
for ((aop,bop,dop,res) in [(op1t,op2t,op3t,rest), (op1b,op2b,op3b,resb)]) {
   res = sat.q31(dop + (aop s* bop)[63:32]);
}
Rd = concat(rest, resb);
x=0
@endcode

@param [in]  t unsigned long long type of value stored in t
@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N3_1gad679ed92e7f225b53d8c270e05788df1';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DKMMAC_U';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '22074';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DKMMAC.u (64-bit MSW 32x32 Unsigned Multiply and Saturating Add)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DKMMAC.u Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Do MSW 32x32 element unsigned multiplications and saturating addition simultaneously. The results are written into Rd.

<strong>Description</strong>:\n
This instruction multiplies the signed 32-bit elements of Rs1 with the signed 32-bit elements of Rs2
and adds the most significant 32-bit multiplication results with the signed 32-bit elements of Rd. If
the addition result is beyond the Q31 number range (-2^31 <= Q31 <= 2^31-1), it is saturated to the range
and the OV bit is set to 1. The results after saturation are written to Rd. The .u form of the
instruction additionally rounds up the most significant 32-bit of the 64-bit multiplication results by
adding a 1 to bit 31 of the results.

<strong>Operations</strong>:\n
@code 
op1t = Rs1.W[x+1]; op2t = Rs2.W[x+1]; op3t = Rd.W[x+1] // top
op1b = Rs1.W[x]; op2b = Rs2.W[x]; op3b = Rd.W[x] // bottom
for ((aop,bop,dop,res) in [(op1t,op2t,op3t,rest), (op1b,op2b,op3b,resb)]) {
  res = sat.q31(dop + RUND(aop u* bop)[63:32]);
}
Rd = concat(rest, resb);
x=0
@endcode

@param [in]  t unsigned long long type of value stored in t
@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N3_1ga42957db5ba2bddda334d658215b887eb';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DKMMSB';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '22121';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DKMMSB (64-bit MSW 32x32 Signed Multiply and Saturating Sub)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DKMMSB Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Do MSW 32x32 element signed multiplications and saturating subtraction simultaneously. The results are written into Rd.

<strong>Description</strong>:\n
This instruction multiplies the signed 32-bit elements of Rs1 with the signed 32-bit elements of Rs2
and subtracts the most significant 32-bit multiplication results from the signed 32-bit elements of
Rd. If the subtraction result is beyond the Q31 number range (-2^31 <= Q31 <= 2^31-1), it is saturated to the
range and the OV bit is set to 1. The results after saturation are written to Rd. The .u form of the
instruction additionally rounds up the most significant 32-bit of the 64-bit multiplication results by
adding a 1 to bit 31 of the results.

<strong>Operations</strong>:\n
@code 
op1t = Rs1.W[x+1]; op2t = Rs2.W[x+1]; op3t = Rd.W[x+1] // top
op1b = Rs1.W[x]; op2b = Rs2.W[x]; op3b = Rd.W[x] // bottom
for ((aop,bop,dop,res) in [(op1t,op2t,op3t,rest), (op1b,op2b,op3b,resb)]) {
   res = sat.q31(dop - (aop s* bop)[63:32]);
}
Rd = concat(rest, resb);
x=0
@endcode

@param [in]  t unsigned long long type of value stored in t
@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N3_1gad9c1087682cb81f144d91bbebc8f30e1';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DKMMSB_U';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '22168';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DKMMSB.u (64-bit MSW 32x32 Unsigned Multiply and Saturating Sub)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DKMMSB.u Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Do MSW 32x32 element unsigned multiplications and saturating subtraction simultaneously. The results are written into Rd.

<strong>Description</strong>:\n
This instruction multiplies the signed 32-bit elements of Rs1 with the signed 32-bit elements of Rs2
and subtracts the most significant 32-bit multiplication results from the signed 32-bit elements of
Rd. If the subtraction result is beyond the Q31 number range (-2^31 <= Q31 <= 2^31-1), it is saturated to the
range and the OV bit is set to 1. The results after saturation are written to Rd. The .u form of the
instruction additionally rounds up the most significant 32-bit of the 64-bit multiplication results by
adding a 1 to bit 31 of the results.

<strong>Operations</strong>:\n
@code 
op1t = Rs1.W[x+1]; op2t = Rs2.W[x+1]; op3t = Rd.W[x+1] // top
op1b = Rs1.W[x]; op2b = Rs2.W[x]; op3b = Rd.W[x] // bottom
for ((aop,bop,dop,res) in [(op1t,op2t,op3t,rest), (op1b,op2b,op3b,resb)]) {
   res = sat.q31(dop - (aop u* bop)[63:32]);
}
Rd = concat(rest, resb);
x=0
@endcode

@param [in]  t unsigned long long type of value stored in t
@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N3_1ga2f7481dd64aeb65b81710b0532c66256';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DKMADA';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '22215';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DKMADA (Saturating Signed Multiply Two Halfs and Two Adds)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
DKMADA Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two 16x16 with 32-bit signed double addition simultaneously. The results are written into Rd.

<strong>Description</strong>:\n
It multiplies the bottom 16-bit content of 32-bit elements in Rs1 with
the bottom 16-bit content of 32-bit elements in Rs2 and then adds the result to the result of
multiplying the top 16-bit content of 32-bit elements in Rs1 with the top 16-bit content of 32-bit
elements in Rs2.

<strong>Operations</strong>:\n
@code 
op1t = Rs1.W[x+1]; op2t = Rs2.W[x+1]; op3t = Rd.W[x+1] // top
op1b = Rs1.W[x]; op2b = Rs2.W[x]; op3b = Rd.W[x] // bottom

for ((aop,bop,dop,res) in [(op1t,op2t,op3t,rest), (op1b,op2b,op3b,resb)]) {
  mul1 = aop.H[1] s* bop.H[1];
  mul2 = aop.H[0] s* bop.H[0];
  res = sat.q31(dop + mul1 + mul2);
}
Rd = concat(rest, resb);
x=0
@endcode

@param [in]  t unsigned long long type of value stored in t
@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N3_1gab9983670d81488fdbce21ce0ebefe221';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DKMAXDA';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '22261';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DKMAXDA (Two Cross 16x16 with 32-bit Signed Double Add)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
DKMAXDA Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two cross 16x16 with 32-bit signed double addition simultaneously. The results are written into Rd.

<strong>Description</strong>:\n
It multiplies the top 16-bit content of 32-bit elements in Rs1 with the bottom 16-bit content of 32-bit
elements in Rs2 and then adds the result to the result of multiplying the bottom 16-bit content of
32-bit elements in Rs1 with the top 16-bit content of 32-bit elements in elements in Rs2.

<strong>Operations</strong>:\n
@code 
op1t = Rs1.W[x+1]; op2t = Rs2.W[x+1]; op3t = Rd.W[x+1] // top
op1b = Rs1.W[x]; op2b = Rs2.W[x]; op3b = Rd.W[x] // bottom

for ((aop,bop,dop,res) in [(op1t,op2t,op3t,rest), (op1b,op2b,op3b,resb)]) {
  mul1 = aop.H[1] s* bop.H[0];
  mul2 = aop.H[0] s* bop.H[1];
  res = sat.q31(dop + mul1 + mul2);
}
Rd = concat(rest, resb);
x=0
@endcode

@param [in]  t unsigned long long type of value stored in t
@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N3_1ga062bb9b30ce7146a8916cba88aa5c83e';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DKMADS';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '22308';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DKMADS (Two 16x16 with 32-bit Signed Add and Sub)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
DKMADS Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two 16x16 with 32-bit signed addition and subtraction simultaneously. The results are written into Rd.

<strong>Description</strong>:\n
It multiplies the bottom 16-bit content of 32-bit elements in Rs1 with
the bottom 16-bit content of 32-bit elements in Rs2 and then subtracts the result from the result of
multiplying the top 16-bit content of 32-bit elements in Rs1 with the top 16-bit content of 32-bit
elements in Rs2.

<strong>Operations</strong>:\n
@code 
op1t = Rs1.W[x+1]; op2t = Rs2.W[x+1]; op3t = Rd.W[x+1] // top
op1b = Rs1.W[x]; op2b = Rs2.W[x]; op3b = Rd.W[x] // bottom

for ((aop,bop,dop,res) in [(op1t,op2t,op3t,rest), (op1b,op2b,op3b,resb)]) {
  mul1 = aop.H[1] s* bop.H[1];
  mul2 = aop.H[0] s* bop.H[0];
  res = sat.q31(dop + mul1 - mul2);
}
Rd = concat(rest, resb);
x=0
@endcode

@param [in]  t unsigned long long type of value stored in t
@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N3_1ga2dae07a4d5c3db07f69e22063febf266';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DKMADRS';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '22355';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DKMADRS (Two 16x16 with 32-bit Signed Add and Reversed Sub)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
DKMADRS Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two 16x16 with 32-bit signed addition and revered subtraction simultaneously. The results are written into Rd.

<strong>Description</strong>:\n
it multiplies the top 16-bit content of 32-bit elements in Rs1 with the
top 16-bit content of 32-bit elements in Rs2 and then subtracts the result from the result of
multiplying the bottom 16-bit content of 32-bit elements in Rs1 with the bottom 16-bit content of 32-
bit elements in Rs2

<strong>Operations</strong>:\n
@code 
op1t = Rs1.W[x+1]; op2t = Rs2.W[x+1]; op3t = Rd.W[x+1] // top
op1b = Rs1.W[x]; op2b = Rs2.W[x]; op3b = Rd.W[x] // bottom

for ((aop,bop,dop,res) in [(op1t,op2t,op3t,rest), (op1b,op2b,op3b,resb)]) {
  mul1 = aop.H[1] s* bop.H[1];
  mul2 = aop.H[0] s* bop.H[0];
  res = sat.q31(dop - mul1 + mul2);
}
Rd = concat(rest, resb);
x=0
@endcode

@param [in]  t unsigned long long type of value stored in t
@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N3_1gaef4e9ee0a3bda1d5ac72cb22860bb331';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DKMAXDS';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '22401';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DKMAXDS (Saturating Signed Crossed Multiply Two Halfs & Subtract & Add)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
DKMAXDS Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two cross 16x16 with 32-bit signed addition and subtraction simultaneously. The results are written into Rd.

<strong>Description</strong>:\n
Do two signed 16-bit multiplications from 32-bit elements in two registers; and then
perform a subtraction operation between the two 32-bit results. Then add the subtraction result to
the corresponding 32-bit elements in a third register. The addition result may be saturated.

<strong>Operations</strong>:\n
@code 
op1t = Rs1.W[x+1]; op2t = Rs2.W[x+1]; op3t = Rd.W[x+1] // top
op1b = Rs1.W[x]; op2b = Rs2.W[x]; op3b = Rd.W[x] // bottom

for ((aop,bop,dop,res) in [(op1t,op2t,op3t,rest), (op1b,op2b,op3b,resb)]) {
  mul1 = aop.H[1] s* bop.H[0];
  mul2 = aop.H[0] s* bop.H[1];
  res = sat.q31(dop + mul1 - mul2);
}
Rd = concat(rest, resb);
x=0
@endcode

@param [in]  t unsigned long long type of value stored in t
@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N3_1ga8734a62472c1e98bf004fa1f562ccba4';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DKMSDA';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '22447';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DKMSDA (Two 16x16 with 32-bit Signed Double Sub)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
DKMSDA Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two 16x16 with 32-bit signed double subtraction simultaneously. The results are written into Rd.

<strong>Description</strong>:\n
it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the bottom 16-bit content of the 32-bit elements of Rs2 and multiplies the top 16-bit content of
the 32-bit elements of Rs1 with the top 16-bit content of the 32-bit elements of Rs2.

<strong>Operations</strong>:\n
@code 
op1t = Rs1.W[x+1]; op2t = Rs2.W[x+1]; op3t = Rd.W[x+1] // top
op1b = Rs1.W[x]; op2b = Rs2.W[x]; op3b = Rd.W[x] // bottom

for ((aop,bop,dop,res) in [(op1t,op2t,op3t,rest), (op1b,op2b,op3b,resb)]) {
  mul1 = aop.H[1] s* bop.H[0];
  mul2 = aop.H[0] s* bop.H[1];
  res = sat.q31(dop - mul1 - mul2);
}
Rd = concat(rest, resb);
x=0
@endcode

@param [in]  t unsigned long long type of value stored in t
@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N3_1ga6b483f686d89af4a3257065ebb35e02e';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DKMSXDA';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '22493';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DKMSXDA (Two Cross 16x16 with 32-bit Signed Double Sub)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
DKMSXDA Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two cross 16x16 with 32-bit signed double subtraction simultaneously. The results are written into Rd.

<strong>Description</strong>:\n
It multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the top 16-bit content of the 32-bit elements of Rs2 and multiplies the top 16-bit content of the
32-bit elements of Rs1 with the bottom 16-bit content of the 32-bit elements of Rs2.

<strong>Operations</strong>:\n
@code 
op1t = Rs1.W[x+1]; op2t = Rs2.W[x+1]; op3t = Rd.W[x+1] // top
op1b = Rs1.W[x]; op2b = Rs2.W[x]; op3b = Rd.W[x] // bottom

for ((aop,bop,dop,res) in [(op1t,op2t,op3t,rest), (op1b,op2b,op3b,resb)]) {
  mul1 = aop.H[1] s* bop.H[0];
  mul2 = aop.H[0] s* bop.H[1];
  res = sat.q31(dop - mul1 - mul2);
}
Rd = concat(rest, resb);
x=0
@endcode

@param [in]  t unsigned long long type of value stored in t
@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N3_1ga1afde5a5f8859e47c0d83b97c6a5da42';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DSMAQA';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '22542';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DSMAQA (Four Signed 8x8 with 32-bit Signed Add)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
DSMAQA Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do four signed 8x8 with 32-bit signed addition simultaneously. The results are written into Rd.

<strong>Description</strong>:\n
This instruction multiplies the four signed 8-bit elements of 32-bit chunks of Rs1 with the four
signed 8-bit elements of 32-bit chunks of Rs2 and then adds the four results together with the signed
content of the corresponding 32-bit chunks of Rd. The final results are written back to the
corresponding 32-bit chunks in Rd.

<strong>Operations</strong>:\n
@code 
op1t = Rs1.W[x+1]; op2t = Rs2.W[x+1]; op3t = Rd.W[x+1] // top
op1b = Rs1.W[x]; op2b = Rs2.W[x]; op3b = Rd.W[x] // bottom

for ((aop,bop,dop,res) in [(op1t,op2t,op3t,rest), (op1b,op2b,op3b,resb)]) {
  m0 = aop.B[0] s* bop.B[0];
  m1 = aop.B[1] s* bop.B[1];
  m2 = aop.B[2] s* bop.B[2];
  m3 = aop.B[3] s* bop.B[3];
  res = dop + m0 + m1 + m2 + m3;
}
Rd = concat(rest, resb);
x=0
@endcode

@param [in]  t unsigned long long type of value stored in t
@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N3_1ga305c620aebab8431db94a2bbd1cd0423';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DSMAQA_SU';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '22591';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DSMAQA.SU (Four Signed 8 x Unsigned 8 with 32-bit Signed Add)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
DSMAQA.SU Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do four Signed 8 x Unsigned 8 with 32-bit unsigned addition simultaneously. The results are written into Rd.

<strong>Description</strong>:\n
This instruction multiplies the four unsigned 8-bit elements of 32-bit chunks of Rs1 with the four
signed 8-bit elements of 32-bit chunks of Rs2 and then adds the four results together with the unsigned
content of the corresponding 32-bit chunks of Rd. The final results are written back to the
corresponding 32-bit chunks in Rd.

<strong>Operations</strong>:\n
@code 
op1t = Rs1.W[x+1]; op2t = Rs2.W[x+1]; op3t = Rd.W[x+1] // top
op1b = Rs1.W[x]; op2b = Rs2.W[x]; op3b = Rd.W[x] // bottom

for ((aop,bop,dop,res) in [(op1t,op2t,op3t,rest), (op1b,op2b,op3b,resb)]) {
  m0 = aop.B[0] su* bop.B[0];
  m1 = aop.B[1] su* bop.B[1];
  m2 = aop.B[2] su* bop.B[2];
  m3 = aop.B[3] su* bop.B[3];
  res = dop + m0 + m1 + m2 + m3;
}
Rd = concat(rest, resb);
x=0
@endcode

@param [in]  t unsigned long long type of value stored in t
@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N3_1ga06aed600a1df4dce18fc77cd4638dbeb';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DUMAQA';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '22640';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DUMAQA (Four Unsigned 8x8 with 32-bit Unsigned Add)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
DUMAQA Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do four unsigned 8x8 with 32-bit unsigned addition simultaneously. The results are written into Rd.

<strong>Description</strong>:\n
This instruction multiplies the four unsigned 8-bit elements of 32-bit chunks of Rs1 with the four
unsigned 8-bit elements of 32-bit chunks of Rs2 and then adds the four results together with the
unsigned content of the corresponding 32-bit chunks of Rd. The final results are written back to the
corresponding 32-bit chunks in Rd.

<strong>Operations</strong>:\n
@code 
op1t = Rs1.W[x+1]; op2t = Rs2.W[x+1]; op3t = Rd.W[x+1] // top
op1b = Rs1.W[x]; op2b = Rs2.W[x]; op3b = Rd.W[x] // bottom

for ((aop,bop,dop,res) in [(op1t,op2t,op3t,rest), (op1b,op2b,op3b,resb)]) {
  m0 = aop.B[0] su* bop.B[0];
  m1 = aop.B[1] su* bop.B[1];
  m2 = aop.B[2] su* bop.B[2];
  m3 = aop.B[3] su* bop.B[3];
  res = dop + m0 + m1 + m2 + m3;
}
Rd = concat(rest, resb);
x=0
@endcode

@param [in]  t unsigned long long type of value stored in t
@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N3_1gaf8b2216ac51522d6de07620dee2526f6';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DKMDA32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '22681';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DKMDA32 (Two Signed 32x32 with 64-bit Saturation Add)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
DKMDA32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 32x32 add the signed multiplication results with Q63 saturation. The results are written into Rd.

<strong>Description</strong>:\n
For the <tt>KMDA32</tt> instruction, it multiplies the bottom 32-bit element of Rs1 with the bottom 32-bit
element of Rs2 and then adds the result to the result of multiplying the top 32-bit element of Rs1
with the top 32-bit element of Rs2.

<strong>Operations</strong>:\n
@code 
op1t = Rs1.W[x+1]; op2t = Rs2.W[x+1]; // top
op1b = Rs1.W[x]; op2b = Rs2.W[x]; // bottom
t0 = op1b s* op2b;
t1 = op1t s* op2t;
Rd = concat(rest, resb);
x=0
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N3_1ga0055c94c3a715db06d359cc5e77e7a23';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DKMXDA32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '22723';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DKMXDA32 (Two Cross Signed 32x32 with 64-bit Saturation Add)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
DKMXDA32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two cross signed 32x32 and add the signed multiplication results with Q63 saturation. The results are written into Rd.

<strong>Description</strong>:\n
It multiplies the bottom 32-bit element of Rs1 with the top 32-bit
element of Rs2 and then adds the result to the result of multiplying the top 32-bit element of Rs1
with the bottom 32-bit element of Rs2.

<strong>Operations</strong>:\n
@code 
op1t = Rs1.W[x+1]; op2t = Rs2.W[x+1]; // top
op1b = Rs1.W[x]; op2b = Rs2.W[x]; // bottom
t01 = op1b s* op2t;
t10 = op1t s* op2b;
Rd = sat.q63(t01 + t10);
x=0
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N3_1gafd56932d65cfaa139966cb8105b33743';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DKMADA32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '22766';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DKMADA32 (Two Signed 32x32 with 64-bit Saturation Add)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
DKMADA32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 32x32 and add the signed multiplication results and a third register with Q63 saturation. The results are written into Rd.

<strong>Description</strong>:\n
It multiplies the bottom 32-bit element of Rs1 with the bottom 32-bit
element of Rs2 and then adds the result to the result of multiplying the top 32-bit element of Rs1
with the top 32-bit element of Rs2.

<strong>Operations</strong>:\n
@code 
op1t = Rs1.W[x+1]; op2t = Rs2.W[x+1]; // top
op1b = Rs1.W[x]; op2b = Rs2.W[x]; // bottom
t01 = op1b s* op2b;
t10 = op1t s* op2t;
Rd = sat.q63(t01 + t10);
x=0
@endcode

@param [in]  t long long type of value stored in t
@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N3_1ga7387ae7020249ae6044196ac7ed7edcf';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DKMAXDA32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '22809';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DKMAXDA32 (Two Cross Signed 32x32 with 64-bit Saturation Add)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
DKMAXDA32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two cross signed 32x32 and add the signed multiplication results and a third register with Q63 saturation. The
results are written into Rd.

<strong>Description</strong>:\n
It multiplies the top 32-bit element in Rs1 with the bottom 32-bit
element in Rs2 and then adds the result to the result of multiplying the bottom 32-bit element in Rs1
with the top 32-bit element in Rs2.

<strong>Operations</strong>:\n
@code 
op1t = Rs1.W[x+1]; op2t = Rs2.W[x+1]; // top
op1b = Rs1.W[x]; op2b = Rs2.W[x]; // bottom
t01 = op1b s* op2t;
t10 = op1t s* op2b;
Rd = sat.q63(Rd + t01 + t10);
x=0
@endcode

@param [in]  t long long type of value stored in t
@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N3_1gaa25ede966448dadbabfc4bf5f7b0e08a';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DKMADS32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '22853';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DKMADS32 (Two Signed 32x32 with 64-bit Saturation Add and Sub)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
DKMADS32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 32x32 and add the top signed multiplication results and subtraction bottom signed multiplication results
and add a third register with Q63 saturation. The results are written into Rd.

<strong>Description</strong>:\n
It multiplies the top 32-bit element in Rs1 with the bottom 32-bit
element in Rs2 and then subtracts the result to the result of multiplying the top 32-bit element in Rs1
with the top 32-bit element in Rs2.

<strong>Operations</strong>:\n
@code 
op1t = Rs1.W[x+1]; op2t = Rs2.W[x+1]; // top
op1b = Rs1.W[x]; op2b = Rs2.W[x]; // bottom

t0 = op1b s* op2b;
t1 = op1t s* op2t;
Rd = sat.q63(Rd - t0 + t1);
x=0
@endcode

@param [in]  t long long type of value stored in t
@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N3_1gaae4e38a92c7c47457b3f43876cb3be39';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DKMADRS32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '22897';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DKMADRS32 (Two Signed 32x32 with 64-bit Saturation Revered Add and Sub)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
DKMADRS32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 32x32 and add the signed multiplication results and a third register with Q63 saturation. The results
are written into Rd.Do two signed 32x32 and subtraction the top signed multiplication results and add bottom signed
multiplication results and add a third register with Q63 saturation. The results are written into Rd.

<strong>Description</strong>:\n
It multiplies the top 32-bit element in Rs1 with the top 32-bit
element in Rs2 and then subtracts the result from the result of multiplying the bottom 32-bit
element in Rs1 with the bottom 32-bit element in Rs2.

<strong>Operations</strong>:\n
@code 
op1t = Rs1.W[x+1]; op2t = Rs2.W[x+1]; // top
op1b = Rs1.W[x]; op2b = Rs2.W[x]; // bottom
t0 = op1b s* op2b;
t1 = op1t s* op2t;
Rd = sat.q63(Rd + t0 - t1);
x=0
@endcode

@param [in]  t long long type of value stored in t
@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N3_1ga5f074d9c07db6b025c4aadfb9f776f9a';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DKMAXDS32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '22941';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DKMAXDS32 (Two Cross Signed 32x32 with 64-bit Saturation Add and Sub)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
DKMAXDS32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 32x32 and add the top signed multiplication results and subtraction bottom signed multiplication results
and add a third register with Q63 saturation. The results are written into Rd.

<strong>Description</strong>:\n
It multiplies the bottom 32-bit element in Rs1 with the top 32-bit
element in Rs2 and then subtracts the result from the result of multiplying the top 32-bit element in
Rs1 with the bottom 32-bit element in Rs2.

<strong>Operations</strong>:\n
@code 
op1t = Rs1.W[x+1]; op2t = Rs2.W[x+1]; // top
op1b = Rs1.W[x]; op2b = Rs2.W[x]; // bottom

t01 = op1b s* op2t;
t10 = op1t s* op2b;
Rd = sat.q63(Rd - t01 + t10);
x=0
@endcode

@param [in]  t long long type of value stored in t
@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N3_1ga41b5e553d5376e4effb3a194ae164be0';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DKMSDA32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '22984';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DKMSDA32 (Two Signed 32x32 with 64-bit Saturation Sub)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
DKMSDA32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 32x32 and subtraction the top signed multiplication results and subtraction bottom signed multiplication
results and add a third register with Q63 saturation. The results are written into Rd.

<strong>Description</strong>:\n
It multiplies the bottom 32-bit element of Rs1 with the bottom 32-bit
element of Rs2 and multiplies the top 32-bit element of Rs1 with the top 32-bit element of Rs2.

<strong>Operations</strong>:\n
@code 
op1t = Rs1.W[x+1]; op2t = Rs2.W[x+1]; // top
op1b = Rs1.W[x]; op2b = Rs2.W[x]; // bottom

t0 = op1b s* op2b;
t1 = op1t s* op2t;
Rd = sat.q63(Rd - t0 - t1);
x=0
@endcode

@param [in]  t long long type of value stored in t
@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N3_1ga214b8347b24211288c46962fa5115da3';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DKMSXDA32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '23027';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DKMSXDA32 (Two Cross Signed 32x32 with 64-bit Saturation Sub)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
DKMSXDA32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two cross signed 32x32 and subtraction the top signed multiplication results and subtraction bottom signed multiplication
results and add a third register with Q63 saturation. The results are written into Rd.

<strong>Description</strong>:\n
It multiplies the bottom 32-bit element of Rs1 with the top 32-bit
element of Rs2 and multiplies the top 32-bit element of Rs1 with the bottom 32-bit element of Rs2.

<strong>Operations</strong>:\n
@code 
op1t = Rs1.W[x+1]; op2t = Rs2.W[x+1]; // top
op1b = Rs1.W[x]; op2b = Rs2.W[x]; // bottom

t0 = op1b s* op2t;
t1 = op1t s* op2b;
Rd = sat.q63(Rd - t0 - t1);
x=0
@endcode

@param [in]  t long long type of value stored in t
@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N3_1ga4e3cd78943d2ab82a3166c7bf704b1b9';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DSMDS32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '23070';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DSMDS32 (Two Signed 32x32 with 64-bit Sub)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
DSMDS32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 32x32 and add the top signed multiplication results and subtraction bottom signed multiplication. The
results are written into Rd.

<strong>Description</strong>:\n
It multiplies the bottom 32-bit element of Rs1 with the bottom 32-bit
element of Rs2 and then subtracts the result from the result of multiplying the top 32-bit element of
Rs1 with the top 32-bit element of Rs2.

<strong>Operations</strong>:\n
@code 
op1t = Rs1.W[x+1]; op2t = Rs2.W[x+1]; // top
op1b = Rs1.W[x]; op2b = Rs2.W[x]; // bottom

t0 = op1b s* op2t;
t1 = op1t s* op2b;
Rd = t1 - t0;
x=0
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N3_1ga40136ebb30a3106dd16b5b06c51866a5';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DSMDRS32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '23113';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DSMDRS32 (Two Signed 32x32 with 64-bit Revered Sub)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
DSMDRS32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 32x32 and subtraction the top signed multiplication results and add bottom signed multiplication. The results are written into Rd

<strong>Description</strong>:\n
It multiplies the top 32-bit element of Rs1 with the top 32-bit
element of Rs2 and then subtracts the result from the result of multiplying the bottom 32-bit
element of Rs1 with the bottom 32-bit element of Rs2.

<strong>Operations</strong>:\n
@code 
op1t = Rs1.W[x+1]; op2t = Rs2.W[x+1]; // top
op1b = Rs1.W[x]; op2b = Rs2.W[x]; // bottom

t0 = op1b s* op2b;
t1 = op1t s* op2t;
Rd = t1 - t0;
x=0
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N3_1ga8ffa8acbab0e10369b83564675a691d0';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DSMXDS32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '23157';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DSMXDS32 (Two Cross Signed 32x32 with 64-bit Sub)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
DSMXDS32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two cross signed 32x32 and add the top signed multiplication results and subtraction bottom signed multiplication.
The results are written into Rd.

<strong>Description</strong>:\n
It multiplies the bottom 32-bit element of Rs1 with the top 32-bit
element of Rs2 and then subtracts the result from the result of multiplying the top 32-bit element of
Rs1 with the bottom 32-bit element of Rs2.

<strong>Operations</strong>:\n
@code 
op1t = Rs1.W[x+1]; op2t = Rs2.W[x+1]; // top
op1b = Rs1.W[x]; op2b = Rs2.W[x]; // bottom

t01 = op1b s* op2t;
t10 = op1t s* op2b;
Rd = t1 - t0;
x=0
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N3_1ga2aedab1fed5388f600c433890737b8c8';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DSMALDA';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '23204';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DSMALDA (Four Signed 16x16 with 64-bit Add)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
DSMALDA Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do four signed 16x16 and add signed multiplication results and a third register. The results are written into Rd.

<strong>Description</strong>:\n
It multiplies the bottom 16-bit content of Rs1 with the bottom 16-bit
content of Rs2 and then adds the result to the result of multiplying the top 16-bit content of Rs1 with
the top 16-bit content of Rs2 with unlimited precision

<strong>Operations</strong>:\n
@code 
op1t = Rs1.W[x+1]; op2t = Rs2.W[x+1]; // top
op1b = Rs1.W[x]; op2b = Rs2.W[x]; // bottom

m0 = op1b.H[0] s* op2b.H[0];
m1 = op1b.H[1] s* op2b.H[1];
m2 = op1t.H[0] s* op2t.H[0];
m3 = op1t.H[1] s* op2t.H[1];

Rd = Rd + m0 + m1 + m2 + m3;
x=0
@endcode

@param [in]  t long long type of value stored in t
@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N3_1ga12f5a4b50839b2e7376683dd563793b8';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DSMALXDA';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '23250';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DSMALXDA (Four Signed 16x16 with 64-bit Add)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
DSMALXDA Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do four cross signed 16x16 and add signed multiplication results and a third register. The results are written into Rd.

<strong>Description</strong>:\n
It multiplies the top 16-bit content of Rs1 with the bottom 16-bit
content of Rs2 and then adds the result to the result of multiplying the bottom 16-bit content of Rs1
with the top 16-bit content of Rs2 with unlimited precision.

<strong>Operations</strong>:\n
@code 
op1t = Rs1.W[x+1]; op2t = Rs2.W[x+1]; // top
op1b = Rs1.W[x]; op2b = Rs2.W[x]; // bottom

m0 = op1b.H[0] s* op2b.H[1];
m1 = op1b.H[1] s* op2b.H[0];
m2 = op1t.H[0] s* op2t.H[1];
m3 = op1t.H[1] s* op2t.H[0];

Rd = Rd + m0 + m1 + m2 + m3;
x=0
@endcode

@param [in]  t long long type of value stored in t
@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N3_1ga5af33757d6a6720aa36648a029238666';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DSMALDS';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '23296';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DSMALDS (Four Signed 16x16 with 64-bit Add and Sub)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
DSMALDS Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do four signed 16x16 and add and subtraction signed multiplication results and a third register. The results are written into Rd.

<strong>Description</strong>:\n
It multiplies the bottom 16-bit content of Rs1 with the bottom 16-bit
content of Rs2 and then subtracts the result from the result of multiplying the top 16-bit content of
Rs1 with the top 16-bit content of Rs2.

<strong>Operations</strong>:\n
@code 
op1t = Rs1.W[x+1]; op2t = Rs2.W[x+1]; // top
op1b = Rs1.W[x]; op2b = Rs2.W[x]; // bottom

m0 = op1b.H[1] s* op2b.H[1];
m1 = op1b.H[0] s* op2b.H[0];
m2 = op1t.H[1] s* op2t.H[1];
m3 = op1t.H[0] s* op2t.H[0];

Rd = Rd + m0 - m1 + m2 - m3;
x=0
@endcode

@param [in]  t long long type of value stored in t
@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N3_1ga3109cf56e0b01748816f645b295c3f29';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DSMALDRS';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '23342';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DSMALDRS (Four Signed 16x16 with 64-bit Add and Revered Sub)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
DSMALDRS Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 16x16 and add and revered subtraction signed multiplication results and a third register. The results are written into Rd.

<strong>Description</strong>:\n
It multiplies the top 16-bit content of Rs1 with the top 16-bit content
of Rs2 and then subtracts the result from the result of multiplying the bottom 16-bit content of Rs1
with the bottom 16-bit content of Rs2.

<strong>Operations</strong>:\n
@code 
op1t = Rs1.W[x+1]; op2t = Rs2.W[x+1]; // top
op1b = Rs1.W[x]; op2b = Rs2.W[x]; // bottom

m0 = op1b.H[0] s* op2b.H[0];
m1 = op1b.H[1] s* op2b.H[1];
m2 = op1t.H[0] s* op2t.H[0];
m3 = op1t.H[1] s* op2t.H[1];

Rd = Rd + m0 - m1 + m2 - m3;
x=0
@endcode

@param [in]  t long long type of value stored in t
@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N3_1ga23e28aab58492bfc6bbca04ef56481fe';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DSMALXDS';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '23388';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DSMALXDS (Four Cross Signed 16x16 with 64-bit Add and Sub)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
DSMALXDS Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do four cross signed 16x16 and add and subtraction signed multiplication results and a third register. The results are written into Rd.

<strong>Description</strong>:\n
It multiplies the bottom 16-bit content of Rs1 with the top 16-bit
content of Rs2 and then subtracts the result from the result of multiplying the top 16-bit content of
Rs1 with the bottom 16-bit content of Rs2.

<strong>Operations</strong>:\n
@code 
op1t = Rs1.W[x+1]; op2t = Rs2.W[x+1]; // top
op1b = Rs1.W[x]; op2b = Rs2.W[x]; // bottom

m0 = op1b.H[1] s* op2b.H[0];
m1 = op1b.H[0] s* op2b.H[1];
m2 = op1t.H[1] s* op2t.H[0];
m3 = op1t.H[0] s* op2t.H[1];

Rd = Rd + m0 - m1 + m2 - m3;
x=0
@endcode

@param [in]  t long long type of value stored in t
@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N3_1ga50d5c2cb1784d47868ae0b4a76fbe4b9';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DSMSLDA';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '23433';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DSMSLDA (Four Signed 16x16 with 64-bit Sub)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
DSMSLDA Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do four signed 16x16 and subtraction signed multiplication results and add a third register. The results are written into Rd.

<strong>Description</strong>:\n
It multiplies the bottom 16-bit content of Rs1 with the bottom 16-bit
content Rs2 and multiplies the top 16-bit content of Rs1 with the top 16-bit content of Rs2.

<strong>Operations</strong>:\n
@code 
op1t = Rs1.W[x+1]; op2t = Rs2.W[x+1]; // top
op1b = Rs1.W[x]; op2b = Rs2.W[x]; // bottom

m0 = op1b.H[0] s* op2b.H[0];
m1 = op1b.H[1] s* op2b.H[1];
m2 = op1t.H[0] s* op2t.H[0];
m3 = op1t.H[1] s* op2t.H[1];

Rd = Rd - m0 - m1 - m2 - m3;
x=0
@endcode

@param [in]  t long long type of value stored in t
@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N3_1gafc0209949d8c5fb9d15681fcd23b6b78';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DSMSLXDA';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '23478';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DSMSLXDA (Four Cross Signed 16x16 with 64-bit Sub)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
DSMSLXDA Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do four signed 16x16 and subtraction signed multiplication results and add a third register. The results are written into Rd.

<strong>Description</strong>:\n
It multiplies the top 16-bit content of Rs1 with the bottom 16-bit
content of Rs2 and multiplies the bottom 16-bit content of Rs1 with the top 16-bit content of Rs2.

<strong>Operations</strong>:\n
@code 
op1t = Rs1.W[x+1]; op2t = Rs2.W[x+1]; // top
op1b = Rs1.W[x]; op2b = Rs2.W[x]; // bottom

m0 = op1b.H[0] s* op2b.H[1];
m1 = op1b.H[1] s* op2b.H[0];
m2 = op1t.H[0] s* op2t.H[1];
m3 = op1t.H[1] s* op2t.H[0];

Rd = Rd - m0 - m1 - m2 - m3;
x=0
@endcode

@param [in]  t long long type of value stored in t
@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N3_1ga74f966ad7493d0f1d4c306e8f93d0ec4';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DDSMAQA';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '23529';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DDSMAQA (Eight Signed 8x8 with 64-bit Add)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
DDSMAQA Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do eight signed 8x8 and add signed multiplication results and a third register. The results are written into Rd.

<strong>Description</strong>:\n
Do eight signed 8-bit multiplications from eight 8-bit chunks of two registers; and then adds
the eight 16-bit results and the content of 64-bit chunks of a third register.

<strong>Operations</strong>:\n
@code 
op1t = Rs1.W[x+1]; op2t = Rs2.W[x+1]; // top
op1b = Rs1.W[x]; op2b = Rs2.W[x]; // bottom

m0 = op1b.B[0] s* op2b.B[0];
m1 = op1b.B[1] s* op2b.B[1];
m2 = op1b.B[2] s* op2b.B[2];
m3 = op1b.B[3] s* op2b.B[3];
m4 = op1t.B[0] s* op2t.B[0];
m5 = op1t.B[1] s* op2t.B[1];
m6 = op1t.B[2] s* op2t.B[2];
m7 = op1t.B[3] s* op2t.B[3];

s0 = m0 + m1 + m2 + m3;
s1 = m4 + m5 + m6 + m7;
Rd = Rd + s0 + s1;
x=0
@endcode

@param [in]  t long long type of value stored in t
@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N3_1ga49e23148dcaee148ebcf22d8f00039fe';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DDSMAQA_SU';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '23580';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DDSMAQA.SU (Eight Signed 8 x Unsigned 8 with 64-bit Add)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
DDSMAQA.SU Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do eight signed 8 x unsigned 8 and add signed multiplication results and a third register. The results are written into Rd.

<strong>Description</strong>:\n
Do eight signed 8 x unsigned 8 and add signed multiplication results and a third register; and then adds
the eight 16-bit results and the content of 64-bit chunks of a third register.

<strong>Operations</strong>:\n
@code 
op1t = Rs1.W[x+1]; op2t = Rs2.W[x+1]; // top
op1b = Rs1.W[x]; op2b = Rs2.W[x]; // bottom

m0 = op1b.B[0] su* op2b.B[0];
m1 = op1b.B[1] su* op2b.B[1];
m2 = op1b.B[2] su* op2b.B[2];
m3 = op1b.B[3] su* op2b.B[3];
m4 = op1t.B[0] su* op2t.B[0];
m5 = op1t.B[1] su* op2t.B[1];
m6 = op1t.B[2] su* op2t.B[2];
m7 = op1t.B[3] su* op2t.B[3];

s0 = m0 + m1 + m2 + m3;
s1 = m4 + m5 + m6 + m7;
Rd = Rd + s0 + s1;
x=0
@endcode

@param [in]  t long long type of value stored in t
@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N3_1ga9b0c2e3bccd22cafe7043de6fcef22a3';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DDUMAQA';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '23631';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DDUMAQA (Eight Unsigned 8x8 with 64-bit Unsigned Add)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
DDUMAQA Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do eight unsigned 8x8 and add unsigned multiplication results and a third register. The results are written into Rd.

<strong>Description</strong>:\n
Do eight unsigned 8x8 and add unsigned multiplication results and a third register; and then adds
the eight 16-bit results and the content of 64-bit chunks of a third register.

<strong>Operations</strong>:\n
@code 
op1t = Rs1.W[x+1]; op2t = Rs2.W[x+1]; // top
op1b = Rs1.W[x]; op2b = Rs2.W[x]; // bottom

m0 = op1b.B[0] u* op2b.B[0];
m1 = op1b.B[1] u* op2b.B[1];
m2 = op1b.B[2] u* op2b.B[2];
m3 = op1b.B[3] u* op2b.B[3];
m4 = op1t.B[0] u* op2t.B[0];
m5 = op1t.B[1] u* op2t.B[1];
m6 = op1t.B[2] u* op2t.B[2];
m7 = op1t.B[3] u* op2t.B[3];

s0 = m0 + m1 + m2 + m3;
s1 = m4 + m5 + m6 + m7;
Rd = Rd + s0 + s1;
x=0
@endcode

@param [in]  t long long type of value stored in t
@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N3_1ga36678ca6946254785379ef4067d3d79c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DSMA32_U';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '23671';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DSMA32.u (64-bit SIMD 32-bit Signed Multiply Addition With Rounding and Clip)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
DSMA32.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 32x32 and add signed multiplication results with Rounding, then right shift 32-bit and clip q63 to q31.
The result is written to Rd.

<strong>Description</strong>:\n
For the <tt>DSMA32.u</tt> instruction, multiply the top 32-bit Q31 content of 64-bit chunks in Rs1 with the top 32-bit Q31
content of 64-bit chunks in Rs2. At the same time, multiply the bottom 32-bit Q31 content of 64-bit chunks in Rs1 with
the bottom 32-bit Q31 content of 64-bit chunks in Rs2.
Then, do the addtion for the results above and perform the addtional rounding operations, and then move the data to the right
by 32-bit, and clip the 64-bit data into 32-bit.The result is written to Rd.

<strong>Operations</strong>:\n
@code 
Rd = (q31_t)((Rs1.W[x] s* Rs2.W[x] + Rs1.W[x + 1] s* Rs2.W[x + 1] + 0x80000000LL) s>> 32);
x=0
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N3_1ga41229e42f94d6ac0c7025cfdcc2786bd';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DSMXS32_U';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '23712';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DSMXS32.u (64-bit SIMD 32-bit Signed Multiply Cross Subtraction With Rounding and Clip)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
DSMXS32.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two cross signed 32x32 and sub signed multiplication results with Rounding, then right shift 32-bit and clip q63 to
q31. The result is written to Rd.

<strong>Description</strong>:\n
For the <tt>DSMXS32.u</tt> instruction, multiply the top 32-bit Q31 content of 64-bit chunks in Rs1 with the bottom 32-bit
Q31 content of 64-bit chunks in Rs2. At the same time, multiply the bottom 32-bit Q31 content of 64-bit chunks in Rs1
with the top 32-bit Q31 content of 64-bit chunks in Rs2.
Then, do the subtraction for the results above and perform the addtional rounding operations, and then move the data to the right by
32-bit, and clip the 64-bit data into 32-bit.The result is written to Rd.

<strong>Operations</strong>:\n
@code 
Rd = (q31_t)((Rs1.W[x + 1] s* Rs2.W[x] - Rs1.W[x] s* Rs2.W[x + 1] + 0x80000000LL) s>> 32);
x=0
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N3_1ga753e1762340ccc0d55e2d8fb2a9013c3';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DSMXA32_U';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '23753';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DSMXA32.u (64-bit SIMD 32-bit Signed Cross Multiply Addition with Rounding and Clip)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
DSMXA32.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two cross signed 32x32 and add signed multiplication results with Rounding, then right shift 32-bit and clip q63 to
q31. The result is written to Rd.

<strong>Description</strong>:\n
For the <tt>DSMXA32.u</tt> instruction,multiply the top 32-bit Q31 content of 64-bit chunks in Rs1 with the bottom 32-bit Q31
content of 64-bit chunks in Rs2. At the same time, multiply the bottom 32-bit Q31 content of 64-bit chunks in Rs1 with
the top 32-bit Q31 content of 64-bit chunks in Rs2.
Then, do the addtion for the results above and perform the addtional rounding operations, and then move the data to the right
by 32-bit, and clip the 64-bit data into 32-bit.The result is written to Rd.

<strong>Operations</strong>:\n
@code 
Rd = (q31_t)((Rs1.W[x + 1] s* Rs2.W[x] + Rs1.W[x] s* Rs2.W[x + 1] + 0x80000000LL) s>> 32);
x=0
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N3_1ga92cbb899d73ca0f73b130ef52489231d';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DSMS32_U';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '23794';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DSMS32.u (64-bit SIMD 32-bit Signed Multiply Subtraction with Rounding and Clip)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code 
DSMS32.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 32x32 and sub signed multiplication results with Rounding, then right shift 32-bit and clip q63 to q31. The
result is written to Rd.

<strong>Description</strong>:\n
For the <tt>DSMS32.u</tt> instruction, multiply the bottom 32-bit Q31 content of 64-bit chunks in Rs1 with the bottom 32-bit
Q31 content of 64-bit chunks in Rs2. At the same time, multiply the top 32-bit Q31 content of 64-bit chunks in Rs1 with
the top 32-bit Q31 content of 64-bit chunks in Rs2.
Then, do the subtraction for the results above and perform the addtional rounding operations, and then move the data to the right by
32-bit, and clip the 64-bit data into 32-bit.The result is written to Rd.

<strong>Operations</strong>:\n
@code 
Rd = (q31_t)((Rs1.W[x] s* Rs2.W[x] - Rs1.W[x + 1] s* Rs2.W[x + 1] + 0x80000000LL) s>> 32);
x=0
@endcode

@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N3_1gab4bba593acc14aca79c024aa834d56c7';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DSMADA16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '23839';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DSMADA16 (Signed Multiply Two Halfs and Two Adds 32-bit)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DSMADA16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 16-bit multiplications of two 32-bit registers; and then adds the 32-bit results and the 32-bit value of an
even/odd pair of registers together.
* DSMADA16: rt pair+ top*top + bottom*bottom

<strong>Description</strong>:\n
This instruction multiplies the per 16-bit content of the 32-bit elements of Rs1 with the corresponding 16-bit content of
the 32-bit elements of Rs2. The result is added to the 32-bit value of an even/odd pair of registers specified by Rd(4,1).
The 32-bit addition result is written back to the register-pair. The 16-bit values of Rs1 and Rs2, and the 32-bit value of the
register-pair are treated as signed integers.

<strong>Operations</strong>:\n
@code 
Mres0[0][31:0] = (Rs1.W[0].H[0] * Rs2.W[0].H[0]);
Mres1[0][31:0] = (Rs1.W[0].H[1] * Rs2.W[0].H[1]);
Mres0[1][31:0] = (Rs1.W[1].H[0] * Rs2.W[1].H[0]);
Mres1[1][31:0] = (Rs1.W[1].H[1] * Rs2.W[1].H[1]);
Rd.W = Rd.W + SE32(Mres0[0][31:0]) + SE32(Mres1[0][31:0]) + SE32(Mres0[1][31:0]) + SE32(Mres1[1][31:0]);
@endcode

@param [in]  t long long type of value stored in t
@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N3_1gadc380e0f90223eb65107e0102dd8cc33';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DSMAXDA16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '23883';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DSMAXDA16 (Signed Crossed Multiply Two Halfs and Two Adds 32-bit)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DSMAXDA16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 16-bit multiplications of two 32-bit registers; and then adds the 32-bit results and the 32-bit value of an
even/odd pair of registers together.
* DSMAXDA: rt pair+ top*bottom + bottom*top (all 32-bit elements)

<strong>Description</strong>:\n
This instruction crossly multiplies the top 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit content of the 32-bit
elements of Rs2 and then adds the result to the result of multiplying the bottom 16-bit content of the 32-bit elements of
Rs1 with the top 16-bit content of the 32-bit elements of Rs2 with unlimited precision. The result is added to the 64-bit
value of an even/odd pair of registers specified by Rd(4,1).The 64-bit addition result is clipped to 32-bit result.

<strong>Operations</strong>:\n
@code 
Mres0[0][31:0] = (Rs1.W[0].H[0] * Rs2.W[0].H[1]);
Mres1[0][31:0] = (Rs1.W[0].H[1] * Rs2.W[0].H[0]);
Mres0[1][31:0] = (Rs1.W[1].H[0] * Rs2.W[1].H[1]);
Mres1[1][31:0] = (Rs1.W[1].H[1] * Rs2.W[1].H[0]);
Rd.W = Rd.W + SE32(Mres0[0][31:0]) + SE32(Mres1[0][31:0]) + SE32(Mres0[1][31:0]) + SE32(Mres1[1][31:0]);
@endcode

@param [in]  t long long type of value stored in t
@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N3_1ga420e161e20f81e9d7d144da28e780555';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DKSMS32_U';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '23922';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DKSMS32.u (Two Signed Multiply Shift-clip and Saturation with Rounding)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DKSMS32.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Computes saturated multiplication of two pairs of q31 type with shifted rounding.

<strong>Description</strong>:\n
Compute the multiplication of Rs1 and Rs2 of type q31_t, intercept [47:16] for the resulting 64-bit product
to get the 32-bit number, then add 1 to it to do rounding, and finally saturate the result after rounding.

<strong>Operations</strong>:\n
@code 
Mres[x][63:0] = Rs1.W[x] s* Rs2.W[x];
Round[x][32:0] = Mres[x][47:15] + 1;
Rd.W[x] = sat.31(Rd.W[x] + Round[x][32:1]);
x=1...0
@endcode

@param [in]  t unsigned long long type of value stored in t
@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N3_1ga5a76ac8f718b90bf1ab39d5cb194b705';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DMADA32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '23961';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DMADA32 ((Two Cross Signed 32x32 with 64-bit Add and Clip to 32-bit)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DMADA32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two cross signed 32x32 and add the signed multiplication results to q63, then clip the q63 result to q31 , the final results
are written into Rd.

<strong>Description</strong>:\n
For the <tt>DMADA32</tt> instruction, it multiplies the top 32-bit element in Rs1 with the bottom 32-bit element in Rs2 and
then adds the result to the result of multiplying the bottom 32-bit element in Rs1 with the top 32-bit element in Rs2, then
clip the q63 result to q31.

<strong>Operations</strong>:\n
@code 
res = (q31_t)((((q63_t) Rd.w[0] << 32) + (q63_t)Rs1.w[0] s*  Rs2.w[1] + (q63_t)Rs1.w[1] s*  Rs2.w[0]) s>> 32);
rd = res;
@endcode

@param [in]  t long long type of value stored in t
@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N3_1ga982c9f387c22ea362bb580a00de9455f';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DSMALBB';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '24002';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DSMALBB (Signed Multiply Bottom Halfs & Add 64-bit)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DSMALBB Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 16-bit content of the 32-bit elements of a register with the 16-bit content of the corresponding 32-bit
elements of another register and add the results with a 64-bit value of an even/odd pair of registers. The addition result 
is written back to the register-pair.
* DSMALBB: rt pair + bottom*bottom (all 32-bit elements)

<strong>Description</strong>:\n
For the <tt>DSMALBB</tt> instruction, it multiplies the bottom 16-bit content of Rs1 with the bottom 16-bit content of Rs2.The
multiplication results are added with the 64-bit value of Rd. The 64-bit addition result is written back to Rd.

<strong>Operations</strong>:\n
@code 
Mres[0][31:0] = Rs1.W[0].H[0] * Rs2.W[0].H[0];
Mres[1][31:0] = Rs1.W[1].H[0] * Rs2.W[1].H[0];
Rd = Rd + SE64(Mres[0][31:0]) + SE64(Mres[1][31:0]);
@endcode

@param [in]  t long long type of value stored in t
@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N3_1ga96438ae0e59a5d6c6b457a712c8c0525';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DSMALBT';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '24045';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DSMALBT (Signed Multiply Bottom Half & Top Half & Add 64-bit)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DSMALBT Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 16-bit content of the 32-bit elements of a register with the 16-bit content of the corresponding 32-bit
elements of another register and add the results with a 64-bit value of an even/odd pair of registers. The addition result
is written back to the register-pair.
* DSMALBT: rt pair + bottom*top (all 32-bit elements)

<strong>Description</strong>:\n
For the <tt>DSMALBT</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1 with the top 16-bit
content of the 32-bit elements of Rs2.
The multiplication results are added with the 64-bit value of Rd. The 64-bit addition result is written back to Rd. The
16-bit values of Rs1 and Rs2, and the 64-bit value of Rd are treated as signed integers

<strong>Operations</strong>:\n
@code 
Mres[0][31:0] = Rs1.W[0].H[0] * Rs2.W[0].H[1];
Mres[1][31:0] = Rs1.W[1].H[0] * Rs2.W[1].H[1];
Rd = Rd + SE64(Mres[0][31:0]) + SE64(Mres[1][31:0]);
@endcode

@param [in]  t long long type of value stored in t
@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N3_1ga4b1b0b1853924185a5d610cff900ccf8';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DSMALTT';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '24088';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DSMALTT (Signed Multiply Top Half & Add 64-bit)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DSMALTT Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 16-bit content of the 32-bit elements of a register with the 16-bit content of the corresponding 32-bit
elements of another register and add the results with a 64-bit value of an even/odd pair of registers. The addition result
is written back to the register-pair.
* DSMALTT: DSMALTT rt pair + top*top (all 32-bit elements)

<strong>Description</strong>:\n
For the <tt>DSMALTT</tt> instruction, it multiplies the top 16-bit content of the 32-bit elements of Rs1 with the top 16-bit
content of the 32-bit elements of Rs2.
The multiplication results are added with the 64-bit value of Rd. The 64-bit addition result is written back to Rd. The
16-bit values of Rs1 and Rs2, and the 64-bit value of Rd are treated as signed integers.

<strong>Operations</strong>:\n
@code 
Mres[0][31:0] = Rs1.W[0].H[1] * Rs2.W[0].H[1];
Mres[1][31:0] = Rs1.W[1].H[1] * Rs2.W[1].H[1];
Rd = Rd + SE64(Mres[0][31:0]) + SE64(Mres[1][31:0]);
@endcode

@param [in]  t long long type of value stored in t
@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N3_1gaa79a1ef52b672062fca03162df111d0f';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DKMABB32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '24136';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DKMABB32 (Saturating Signed Multiply Bottom Words & Add)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DKMABB32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit element in a register with the 32-bit element in another register and add the result to the content
of 64-bit data in the third register. The addition result may besaturated and is written to the third register.
* DKMABB32: rd + bottom*bottom

<strong>Description</strong>:\n
For the <tt>DKMABB32</tt> instruction, it multiplies the bottom 32-bit element in Rs1 with the bottom 32-bit element in Rs2
The multiplication result is added to the content of 64-bit data in Rd. If the addition result is beyond the Q63 number range
(-2^63 <= Q63 <= 2^63-1), it is saturated to the range and the OV bit is set to 1. The result after saturation is written to Rd.
The 32-bit contents of Rs1 and Rs2 are treated as signed integers.

<strong>Operations</strong>:\n
@code 
res = Rd + (Rs1.W[0] * Rs2.W[0]);
if (res > (2^63)-1) {
  res = (2^63)-1;
  OV = 1;
} else if (res < -2^63) {
  res = -2^63;
  OV = 1;
}
Rd = res;
@endcode

@param [in]  t long long type of value stored in t
@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N3_1gafb42d43241c143009968324676be05ef';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DKMABT32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '24184';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DKMABT32 (Saturating Signed Multiply Bottom & Top Words & Add)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DKMABT32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit element in a register with the 32-bit element in another register and add the result to the content
of 64-bit data in the third register. The addition result may be saturated and is written to the third register.
* DKMABT32: rd + bottom*top

<strong>Description</strong>:\n
For the <tt>DKMABT32</tt> instruction, it multiplies the bottom 32-bit element in Rs1 with the top 32-bit element in Rs2
The multiplication result is added to the content of 64-bit data in Rd. If the addition result is beyond the Q63 number range
(-2^63 <= Q63 <= 2^63-1), it is saturated to the range and the OV bit is set to 1. The result after saturation is written to Rd.
The 32-bit contents of Rs1 and Rs2 are treated as signed integers.

<strong>Operations</strong>:\n
@code 
res = Rd + (Rs1.W[0] * Rs2.W[1]);
if (res > (2^63)-1) {
  res = (2^63)-1;
  OV = 1;
} else if (res < -2^63) {
  res = -2^63;
  OV = 1;
}
Rd = res;
@endcode

@param [in]  t long long type of value stored in t
@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__N3_1ga720a6945daef5fd866af5f585601f62d';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DKMATT32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '24232';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DKMATT32 (Saturating Signed Multiply Bottom & Top Words & Add)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code 
DKMATT32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit element in a register with the 32-bit element in another register and add the result to the content
of 64-bit data in the third register. The addition result may be saturated and is written to the third register.
* DKMATT32: rd + top*top

<strong>Description</strong>:\n
For the <tt>DKMATT32</tt> instruction, it multiplies the top 32-bit element in Rs1 with the top 32-bit element in Rs2
The multiplication result is added to the content of 64-bit data in Rd. If the addition result is beyond the Q63 number range
(-2^63 <= Q63 <= 2^63-1), it is saturated to the range and the OV bit is set to 1. The result after saturation is written to Rd.
The 32-bit contents of Rs1 and Rs2 are treated as signed integers.

<strong>Operations</strong>:\n
@code 
res = Rd + (Rs1.W[1] * Rs2.W[1]);
if (res > (2^63)-1) {
  res = (2^63)-1;
  OV = 1;
} else if (res < -2^63) {
  res = -2^63;
  OV = 1;
}
Rd = res;
@endcode

@param [in]  t long long type of value stored in t
@param [in]  a unsigned long long type of value stored in a
@param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'core__feature__dsp_8h_1a653db82ff08bb9c099daa2b6a3c3a06d';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__SMUADX';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'op1';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'op2';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '24783';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Q setting sum of dual 16-bit signed multiply with exchange.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'core__feature__dsp_8h_1a346dfdfbe082ba3081ae913867f7a7db';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__SMLAD';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'op1';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'op2';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'acc';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '24792';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Q setting dual 16-bit signed multiply with single 32-bit accumulator.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'core__feature__dsp_8h_1a773b788a8c377d07b465a400c71e18a3';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__SMLADX';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'op1';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'op2';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'acc';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '24797';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Q setting pre-exchanged dual 16-bit signed multiply with single 32-bit accumulator.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
  <br>
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'core__feature__dsp_8h_1aa73208b2c8dbf0f0e77628e134487ef6';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__SMLSDX';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'op1';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'op2';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'acc';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '24802';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Q setting dual 16-bit signed multiply with exchange subtract with 32-bit accumulate.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
  <br>
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'core__feature__dsp_8h_1a6eae6623f76efe45ad0c0d983452e55a';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__SMLALD';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'op1';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'op2';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'acc';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '24807';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Dual 16-bit signed multiply with single 64-bit accumulator.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'core__feature__dsp_8h_1a3c6d110ce0c7746f35eae48315fd797f';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__SMLALDX';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'op1';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'op2';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'acc';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '24812';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Dual 16-bit signed multiply with exchange with single 64-bit accumulator.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
  <br>
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'core__feature__dsp_8h_1a2c5f8bb96a2bdf40db5f6806704bb0ee';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__SMUAD';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'op1';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'op2';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '24817';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Q setting sum of dual 16-bit signed multiply.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'core__feature__dsp_8h_1a189d0cb0cb0d506b4144338ddd8ef5ce';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__SMUSD';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'op1';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'op2';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '24822';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Dual 16-bit signed multiply returning difference.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'core__feature__dsp_8h_1a9d74f43acfde16a0df70498c11897736';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__SXTAB16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'op1';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'op2';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '24829';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Dual extracted 8-bit to 16-bit signed addition.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 TODO Need test 
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'core__feature__dsp_8h_1a7c8ac1d1a11005ca75f24ebf4a8cd080';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__SMMLA';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'op1';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'op2';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'acc';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '24836';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
32-bit signed multiply with 32-bit truncated accumulator.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    };
  file-full-name  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
DSP feature API header file for Nuclei N/NX Core.
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_



_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'core__feature__eclic_8h';
  file-name = 'core_feature_eclic.h';
    define = {
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ECLIC__Registers_1ga0ee0922b5a83b6ff92fed6c9dea63da3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CLIC_CLICCFG_NLBIT_Pos';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
1U
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '120';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CLIC CLICCFG: NLBIT Position.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ECLIC__Registers_1ga6c31823bbd3bd593dcecd6d7d5f0afbb';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CLIC_CLICCFG_NLBIT_Msk';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0xFUL << CLIC_CLICCFG_NLBIT_Pos)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '121';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CLIC CLICCFG: NLBIT Mask.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ECLIC__Registers_1gac63632ddf28ed47570b441f003ba5c5f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CLIC_CLICINFO_CTLBIT_Pos';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
21U
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '123';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CLIC INTINFO: CLICINTCTLBITS Position.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ECLIC__Registers_1ga146a1208d7982a0ec073f9c3bb77528f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CLIC_CLICINFO_CTLBIT_Msk';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0xFUL << CLIC_CLICINFO_CTLBIT_Pos)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '124';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CLIC INTINFO: CLICINTCTLBITS Mask.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ECLIC__Registers_1ga3047dd362f08b827b4f3595fdee555e1';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CLIC_CLICINFO_VER_Pos';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
13U
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '126';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CLIC CLICINFO: VERSION Position.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ECLIC__Registers_1ga2b40a58247f1ae1eb207ebfd224a6519';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CLIC_CLICINFO_VER_Msk';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0xFFUL << CLIC_CLICINFO_VER_Pos)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '127';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CLIC CLICINFO: VERSION Mask.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ECLIC__Registers_1ga39c37a90e1445851aede44b002a83a99';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CLIC_CLICINFO_NUM_Pos';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0U
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '129';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CLIC CLICINFO: NUM Position.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ECLIC__Registers_1ga7f3148e774c092b06d81b400ac6c80bb';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CLIC_CLICINFO_NUM_Msk';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x1FFFUL << CLIC_CLICINFO_NUM_Pos)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '130';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CLIC CLICINFO: NUM Mask.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ECLIC__Registers_1gab0047e9c230189453f8bca9bf0fa7061';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CLIC_INTIP_IP_Pos';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0U
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '132';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CLIC INTIP: IP Position.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ECLIC__Registers_1gad7395594207c3fa20c423a1c9ae26cb7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CLIC_INTIP_IP_Msk';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x1UL << CLIC_INTIP_IP_Pos)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '133';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CLIC INTIP: IP Mask.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ECLIC__Registers_1gaa6ea033a4802f0fd1354894436706cbd';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CLIC_INTIE_IE_Pos';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0U
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '135';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CLIC INTIE: IE Position.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ECLIC__Registers_1ga70aa615d81bc48ea8ed2b64c09c2d63f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CLIC_INTIE_IE_Msk';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x1UL << CLIC_INTIE_IE_Pos)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '136';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CLIC INTIE: IE Mask.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ECLIC__Registers_1ga8f717178dfafde83f26e4fe0d1002b7e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CLIC_INTATTR_MODE_Pos';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
6U
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '139';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CLIC INTATTA: Mode Position.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ECLIC__Registers_1ga6482dd03047b73bac1338838b510ca46';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CLIC_INTATTR_MODE_Msk';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x3U << CLIC_INTATTR_MODE_Pos)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '140';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CLIC INTATTA: Mode Mask.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ECLIC__Registers_1gac4ec4063ec15f49408130b8a095a2a91';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CLIC_INTATTR_TRIG_Pos';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
1U
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '143';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CLIC INTATTR: TRIG Position.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ECLIC__Registers_1ga476263a60ffcbb45417ab2b6864d47b4';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CLIC_INTATTR_TRIG_Msk';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x3UL << CLIC_INTATTR_TRIG_Pos)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '144';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CLIC INTATTR: TRIG Mask.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ECLIC__Registers_1ga49ea87f8a0207a2622f0ce467b7158dc';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CLIC_INTATTR_SHV_Pos';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0U
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '146';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CLIC INTATTR: SHV Position.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ECLIC__Registers_1ga2b6efddec2286b358747be5985110b3a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CLIC_INTATTR_SHV_Msk';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x1UL << CLIC_INTATTR_SHV_Pos)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '147';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CLIC INTATTR: SHV Mask.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ECLIC__Registers_1ga34443f8b2b2935d099e6a0119b96c712';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_MAX_NLBITS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
8U
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '149';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Max nlbit of the CLICINTCTLBITS.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ECLIC__Registers_1ga2bcc1789c000ec72b06b7d7e736aa1c3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_MODE_MTVEC_Msk';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
3U
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '150';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
ECLIC Mode mask for MTVT CSR Register.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ECLIC__Registers_1ga6a01697e0ba89c691f98fee801f4a25c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_NON_VECTOR_INTERRUPT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '152';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Non-Vector Interrupt Mode of ECLIC.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ECLIC__Registers_1ga915384ab6567d38315e8cf5a566f4840';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_VECTOR_INTERRUPT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '153';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Vector Interrupt Mode of ECLIC.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ECLIC__Registers_1gabc9b9f3a2d7717c1b174432bd462f33f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_BASE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_BASEADDR
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '174';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
ECLIC Base Address.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ECLIC__Registers_1gab5a72455ad01a7caea954a82c907256d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
((CLIC_Type *) ECLIC_BASE)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '175';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CLIC configuration struct.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1gad35a05a1e8fb89332d59c7db2904756b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_SetCfgNlbits';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_SetCfgNlbits
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '242';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1ga47f628da4dcf09a2fc43bfb7c8de1528';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_GetCfgNlbits';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_GetCfgNlbits
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '243';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1ga5d8158db12cd1bdfe0bfc82667eeffc5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_GetInfoVer';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_GetInfoVer
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '244';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1ga2b075534f2e421549ebe16b9c97a496f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_GetInfoCtlbits';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_GetInfoCtlbits
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '245';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1ga6308d1600c92e3f9dc67c7837c68f854';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_GetInfoNum';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_GetInfoNum
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '246';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1ga59e29ad3023110a58eb9163d976f44c6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_SetMth';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_SetMth
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '247';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1gaf52f1885d59864d30dd5da7681f5985b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_GetMth';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_GetMth
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '248';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1gaef478ada8e8906c9fe8d4dc2311a39e1';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_EnableIRQ';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_EnableIRQ
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '249';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1gacc2434143882fd815f46f546ecaf1371';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_GetEnableIRQ';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_GetEnableIRQ
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '250';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1ga2fd91a5d186fe3fb4ca3bed07df78813';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_DisableIRQ';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_DisableIRQ
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '251';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1ga2776c309447ab5f7258266299df2f6aa';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_SetPendingIRQ';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_SetPendingIRQ
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '252';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1gaf5a8f8a271f159769eac14959748ec92';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_GetPendingIRQ';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_GetPendingIRQ
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '253';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1ga2006752b49d78e3247b2b355652a429a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_ClearPendingIRQ';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_ClearPendingIRQ
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '254';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1gac0681d16f62ce0b08e48e89131995a05';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_SetTrigIRQ';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_SetTrigIRQ
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '255';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1gadaaf360694309accdc74c0808161755c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_GetTrigIRQ';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_GetTrigIRQ
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '256';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1ga0bd2875fbd02a00bec78735940704c13';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_SetShvIRQ';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_SetShvIRQ
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '257';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1gaa8dc0e0203d692a0cc565e59906fb706';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_GetShvIRQ';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_GetShvIRQ
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '258';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1ga44797af8a09e6b798cc7cb2bc3b9602b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_SetCtrlIRQ';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_SetCtrlIRQ
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '259';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1ga32d7fe236e9b906bfee340fb42a1a644';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_GetCtrlIRQ';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_GetCtrlIRQ
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '260';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1gad6f35a2f69908b97b083c5e31c1c5aad';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_SetLevelIRQ';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_SetLevelIRQ
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '261';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1gaf323b6babdd4236644d84057332e7533';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_GetLevelIRQ';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_GetLevelIRQ
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '262';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1ga721375660a030d16e429a9718c1271c8';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_SetPriorityIRQ';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_SetPriorityIRQ
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '263';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1ga0fe4f3d20b099c74db7dfef3eea81817';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_GetPriorityIRQ';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_GetPriorityIRQ
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '264';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1gaeabc671411216b8bcfc331bb3c8c0d35';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_SetModeIRQ';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_SetModeIRQ
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '268';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1ga999d22f65f99deb9a98a239808046bf6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_SetSth';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_SetSth
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '269';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1gae1eb96791bd77ca862f0c3051b52604a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_GetSth';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_GetSth
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '270';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1ga24e9eed74f15faf8520cbc92dd40fa25';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_SetTrigIRQ_S';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_SetTrigIRQ_S
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '271';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1gadd480f90b1c2784467cae5c26f33e01e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_GetTrigIRQ_S';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_GetTrigIRQ_S
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '272';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1gab09f39dabde0e2823234ae145cf4264f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_SetShvIRQ_S';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_SetShvIRQ_S
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '273';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1ga8b71708e740f71457b43f01ed3b81d0a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_GetShvIRQ_S';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_GetShvIRQ_S
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '274';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1gaa4d87c431a9ed767bf0e2f1b66e9fb48';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_SetCtrlIRQ_S';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_SetCtrlIRQ_S
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '275';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1gaa16ce008feeb234f5edb023285500f96';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_GetCtrlIRQ_S';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_GetCtrlIRQ_S
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '276';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1gafc63cc5748a7a6c69348496a11715560';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_SetLevelIRQ_S';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_SetLevelIRQ_S
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '277';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1ga6a4cd495f480fcc25723f26539e8eea8';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_GetLevelIRQ_S';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_GetLevelIRQ_S
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '278';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1ga152838b35c063ea7c5334531be34a62a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_SetPriorityIRQ_S';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_SetPriorityIRQ_S
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '279';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1gabe65e2025a3bc1b13e7b8ff0f14523b2';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_GetPriorityIRQ_S';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_GetPriorityIRQ_S
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '280';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1gae3748a626384ad0458f91de251108d9f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_EnableIRQ_S';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_EnableIRQ_S
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '281';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1ga679e22a0b02317a84ed73667b89980e4';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_GetEnableIRQ_S';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_GetEnableIRQ_S
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '282';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1ga70f49754f6d78fa4fdd411277f470e0e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_DisableIRQ_S';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_DisableIRQ_S
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '283';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1gaa7cacacc369af014a0008fe3b5705b77';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_SetVector';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_SetVector
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '294';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1ga76b3769badcf8362e1cb6a058f65c65e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_GetVector';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_GetVector
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '295';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1gada7015572c59ff6192fa36c53c253a97';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_SetVector_S';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_SetVector_S
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '298';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1gaabec414cf0d04fcda1f3c5446b65bb57';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_GetVector_S';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_GetVector_S
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '299';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1gab7b083edd7a39c7aa7b17b5f43f13452';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SAVE_IRQ_CSR_CONTEXT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
        rv_csr_t __mcause = __RV_CSR_READ(CSR_MCAUSE);                      \
        rv_csr_t __mepc = __RV_CSR_READ(CSR_MEPC);                          \
        rv_csr_t __msubm = __RV_CSR_READ(CSR_MSUBM);                        \
        __enable_irq();
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '1344';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Save necessary CSRs into variables for vector interrupt nesting.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
This macro is used to declare variables which are used for saving
CSRs(MCAUSE, MEPC, MSUB), and it will read these CSR content into
these variables, it need to be used in a vector-interrupt if nesting
is required.
\remarks
- Interrupt will be enabled after this macro is called
- It need to be used together with \ref RESTORE_IRQ_CSR_CONTEXT
- Don't use variable names __mcause, __mpec, __msubm in your ISR code
- If you want to enable interrupt nesting feature for vector interrupt,
you can do it like this:
@code 
// __INTERRUPT attribute will generates function entry and exit sequences suitable
// for use in an interrupt handler when this attribute is present
__INTERRUPT void eclic_mtip_handler(void)
{
    // Must call this to save CSRs
    SAVE_IRQ_CSR_CONTEXT();
    // !!!Interrupt is enabled here!!!
    // !!!Higher priority interrupt could nest it!!!

    // put you own interrupt handling code here

    // Must call this to restore CSRs
    RESTORE_IRQ_CSR_CONTEXT();
}
\endcode
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1ga23da4e44826cb8aec5fcc38873eda7e0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SAVE_IRQ_CSR_CONTEXT_S';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
        rv_csr_t __scause = __RV_CSR_READ(CSR_SCAUSE);                      \
        rv_csr_t __sepc = __RV_CSR_READ(CSR_SEPC);                          \
        __enable_irq_s();
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '1351';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Save necessary CSRs into variables for vector interrupt nesting in supervisor mode.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1gaefefc59dbf6bd6ef8cd0a9b58b2bbeaf';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'RESTORE_IRQ_CSR_CONTEXT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
        __disable_irq();                                                    \
        __RV_CSR_WRITE(CSR_MSUBM, __msubm);                                 \
        __RV_CSR_WRITE(CSR_MEPC, __mepc);                                   \
        __RV_CSR_WRITE(CSR_MCAUSE, __mcause);
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '1366';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Restore necessary CSRs from variables for vector interrupt nesting.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
This macro is used restore CSRs(MCAUSE, MEPC, MSUB) from pre-defined variables
in \ref SAVE_IRQ_CSR_CONTEXT macro.
\remarks
- Interrupt will be disabled after this macro is called
- It need to be used together with \ref SAVE_IRQ_CSR_CONTEXT
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1ga9fc76aaa0a2d3b0cd3a87a9386e78b5e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'RESTORE_IRQ_CSR_CONTEXT_S';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
        __disable_irq_s();                                                  \
        __RV_CSR_WRITE(CSR_SEPC, __sepc);                                   \
        __RV_CSR_WRITE(CSR_SCAUSE, __scause);
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '1373';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Restore necessary CSRs from variables for vector interrupt nesting in supervisor mode.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    };
    enum = {
    enum-member = {
      enum-mem-kind = 'enum';
      enum-mem-id   = 'group__NMSIS__Core__ECLIC__Registers_1ga35f79c25d5118ccfde82872bc5946ecf';
      enum-mem-virt = normal;
      enum-mem-prot = public;
      enum-mem-name = 'ECLIC_TRIGGER_Type';
      enum-mem-enum = { enum-name = ECLIC_LEVEL_TRIGGER; enum-value = '= 0x0'; };
      enum-mem-enum = { enum-name = ECLIC_POSTIVE_EDGE_TRIGGER; enum-value = '= 0x1'; };
      enum-mem-enum = { enum-name = ECLIC_NEGTIVE_EDGE_TRIGGER; enum-value = '= 0x3'; };
      enum-mem-enum = { enum-name = ECLIC_MAX_TRIGGER; enum-value = '= 0x3'; };
      enum-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      enum-mem-desc-line = '156';
      enum-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
ECLIC Trigger Enum for different Trigger Type.
_EnD_oF_dEf_TeXt_;
      enum-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* enum-member */
    enum-member = {
      enum-mem-kind = 'enum';
      enum-mem-id   = 'group__NMSIS__Core__IntExc_1ga7e1129cd8a196f4284d41db3e82ad5c8';
      enum-mem-virt = normal;
      enum-mem-prot = public;
      enum-mem-name = 'IRQn_Type';
      enum-mem-enum = { enum-name = Reserved0_IRQn; enum-value = '=   0'; };
      enum-mem-enum = { enum-name = Reserved1_IRQn; enum-value = '=   1'; };
      enum-mem-enum = { enum-name = Reserved2_IRQn; enum-value = '=   2'; };
      enum-mem-enum = { enum-name = SysTimerSW_IRQn; enum-value = '=   3'; };
      enum-mem-enum = { enum-name = Reserved3_IRQn; enum-value = '=   4'; };
      enum-mem-enum = { enum-name = Reserved4_IRQn; enum-value = '=   5'; };
      enum-mem-enum = { enum-name = Reserved5_IRQn; enum-value = '=   6'; };
      enum-mem-enum = { enum-name = SysTimer_IRQn; enum-value = '=   7'; };
      enum-mem-enum = { enum-name = Reserved6_IRQn; enum-value = '=   8'; };
      enum-mem-enum = { enum-name = Reserved7_IRQn; enum-value = '=   9'; };
      enum-mem-enum = { enum-name = Reserved8_IRQn; enum-value = '=  10'; };
      enum-mem-enum = { enum-name = Reserved9_IRQn; enum-value = '=  11'; };
      enum-mem-enum = { enum-name = Reserved10_IRQn; enum-value = '=  12'; };
      enum-mem-enum = { enum-name = Reserved11_IRQn; enum-value = '=  13'; };
      enum-mem-enum = { enum-name = Reserved12_IRQn; enum-value = '=  14'; };
      enum-mem-enum = { enum-name = Reserved13_IRQn; enum-value = '=  15'; };
      enum-mem-enum = { enum-name = Reserved14_IRQn; enum-value = '=  16'; };
      enum-mem-enum = { enum-name = Reserved15_IRQn; enum-value = '=  17'; };
      enum-mem-enum = { enum-name = Reserved16_IRQn; enum-value = '=  18'; };
      enum-mem-enum = { enum-name = FirstDeviceSpecificInterrupt_IRQn; enum-value = '= 19'; };
      enum-mem-enum = { enum-name = SOC_INT_MAX; };
      enum-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      enum-mem-desc-line = '202';
      enum-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Definition of IRQn numbers.
_EnD_oF_dEf_TeXt_;
      enum-mem-documentation = <<_EnD_oF_dEf_TeXt_
The core interrupt enumeration names for IRQn values are defined in the file <b><Device>.h</b>.
- Interrupt ID(IRQn) from 0 to 18 are reserved for core internal interrupts.
- Interrupt ID(IRQn) start from 19 represent device-specific external interrupts.
- The first device-specific interrupt has the IRQn value 19.

The table below describes the core interrupt names and their availability in various Nuclei Cores.
_EnD_oF_dEf_TeXt_;
    }; /* enum-member */
    };
    func = {
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1ga38900ce869dd78e9b432ac90d8006082';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_SetCfgNlbits';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'nlbits';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '313';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set nlbits value.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function set the nlbits value of CLICCFG register.
@param [in]    nlbits    nlbits value
\remarks
- nlbits is used to set the width of level in the CLICINTCTL[i].
\sa
- \ref ECLIC_GetCfgNlbits
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga6c31823bbd3bd593dcecd6d7d5f0afbb';
        func-mem-ref-line = '121';
        func-mem-ref-name = 'CLIC_CLICCFG_NLBIT_Msk';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga0ee0922b5a83b6ff92fed6c9dea63da3';
        func-mem-ref-line = '120';
        func-mem-ref-name = 'CLIC_CLICCFG_NLBIT_Pos';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gab5a72455ad01a7caea954a82c907256d';
        func-mem-ref-line = '175';
        func-mem-ref-name = 'ECLIC';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1ga1dce18ecc4a504cc128c62596d25f3ab';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_GetCfgNlbits';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '331';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get nlbits value.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function get the nlbits value of CLICCFG register.
\return   nlbits value of CLICCFG register
\remarks
- nlbits is used to set the width of level in the CLICINTCTL[i].
\sa
- \ref ECLIC_SetCfgNlbits
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga6c31823bbd3bd593dcecd6d7d5f0afbb';
        func-mem-ref-line = '121';
        func-mem-ref-name = 'CLIC_CLICCFG_NLBIT_Msk';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga0ee0922b5a83b6ff92fed6c9dea63da3';
        func-mem-ref-line = '120';
        func-mem-ref-name = 'CLIC_CLICCFG_NLBIT_Pos';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gab5a72455ad01a7caea954a82c907256d';
        func-mem-ref-line = '175';
        func-mem-ref-name = 'ECLIC';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga1ccefb6dd64211176683848ef52e5b8f';
        func-mem-ref-line = '677';
        func-mem-ref-name = '__ECLIC_GetLevelIRQ';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gadffa543aee3a9a814846c806d6a0db46';
        func-mem-ref-line = '1035';
        func-mem-ref-name = '__ECLIC_GetLevelIRQ_S';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga5e47fae9a66b286f1d0df6799e5a244c';
        func-mem-ref-line = '738';
        func-mem-ref-name = '__ECLIC_GetPriorityIRQ';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gafeeaef8b6180a99baa28ffd81a5e6d61';
        func-mem-ref-line = '1096';
        func-mem-ref-name = '__ECLIC_GetPriorityIRQ_S';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gae1d0b0d592b55bc57be6704ceeb314b1';
        func-mem-ref-line = '643';
        func-mem-ref-name = '__ECLIC_SetLevelIRQ';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga7e24b0018a216f1387f219eec862b9e4';
        func-mem-ref-line = '1000';
        func-mem-ref-name = '__ECLIC_SetLevelIRQ_S';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gaafd7870e3de2a0831a5ba0fec6795207';
        func-mem-ref-line = '708';
        func-mem-ref-name = '__ECLIC_SetPriorityIRQ';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga6f29dc953e258ce9b468406c6cc642e7';
        func-mem-ref-line = '1066';
        func-mem-ref-name = '__ECLIC_SetPriorityIRQ_S';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1ga062b7c1b16828b4dbc502a303648dbb1';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_GetInfoVer';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '347';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get the ECLIC version number.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function gets the hardware version information from CLICINFO register.
\return   hardware version number in CLICINFO register.
\remarks
- This function gets harware version information from CLICINFO register.
- Bit 20:17 for architecture version, bit 16:13 for implementation version.
\sa
- \ref ECLIC_GetInfoNum
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga2b40a58247f1ae1eb207ebfd224a6519';
        func-mem-ref-line = '127';
        func-mem-ref-name = 'CLIC_CLICINFO_VER_Msk';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga3047dd362f08b827b4f3595fdee555e1';
        func-mem-ref-line = '126';
        func-mem-ref-name = 'CLIC_CLICINFO_VER_Pos';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gab5a72455ad01a7caea954a82c907256d';
        func-mem-ref-line = '175';
        func-mem-ref-name = 'ECLIC';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1ga6db42f6efa6f57690930a78b35c64b40';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_GetInfoCtlbits';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '364';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get CLICINTCTLBITS.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function gets CLICINTCTLBITS from CLICINFO register.
\return  CLICINTCTLBITS from CLICINFO register.
\remarks
- In the CLICINTCTL[i] registers, with 2 <= CLICINTCTLBITS <= 8.
- The implemented bits are kept left-justified in the most-significant bits of each 8-bit
  CLICINTCTL[I] register, with the lower unimplemented bits treated as hardwired to 1.
\sa
- \ref ECLIC_GetInfoNum
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga146a1208d7982a0ec073f9c3bb77528f';
        func-mem-ref-line = '124';
        func-mem-ref-name = 'CLIC_CLICINFO_CTLBIT_Msk';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gac63632ddf28ed47570b441f003ba5c5f';
        func-mem-ref-line = '123';
        func-mem-ref-name = 'CLIC_CLICINFO_CTLBIT_Pos';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gab5a72455ad01a7caea954a82c907256d';
        func-mem-ref-line = '175';
        func-mem-ref-name = 'ECLIC';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1ga2875bb0f9e3ceb6c750dcd5396d099b7';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_GetInfoNum';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '380';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get number of maximum interrupt inputs supported.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function gets number of maximum interrupt inputs supported from CLICINFO register.
\return  number of maximum interrupt inputs supported from CLICINFO register.
\remarks
- This function gets number of maximum interrupt inputs supported from CLICINFO register.
- The num_interrupt field specifies the actual number of maximum interrupt inputs supported in this implementation.
\sa
- \ref ECLIC_GetInfoCtlbits
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga7f3148e774c092b06d81b400ac6c80bb';
        func-mem-ref-line = '130';
        func-mem-ref-name = 'CLIC_CLICINFO_NUM_Msk';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga39c37a90e1445851aede44b002a83a99';
        func-mem-ref-line = '129';
        func-mem-ref-name = 'CLIC_CLICINFO_NUM_Pos';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gab5a72455ad01a7caea954a82c907256d';
        func-mem-ref-line = '175';
        func-mem-ref-name = 'ECLIC';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1gaf4be616cd91685175abee3f2af47b342';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_SetMth';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'mth';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '393';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set Machine Mode Interrupt Level Threshold.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function sets machine mode interrupt level threshold.
@param [in]  mth       Interrupt Level Threshold.
\sa
- \ref ECLIC_GetMth
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gab5a72455ad01a7caea954a82c907256d';
        func-mem-ref-line = '175';
        func-mem-ref-name = 'ECLIC';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1ga36108f1b6b9e2545727701d856a63c6e';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint8_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_GetMth';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '406';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get Machine Mode Interrupt Level Threshold.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function gets machine mode interrupt level threshold.
\return       Interrupt Level Threshold.
\sa
- \ref ECLIC_SetMth
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gab5a72455ad01a7caea954a82c907256d';
        func-mem-ref-line = '175';
        func-mem-ref-name = 'ECLIC';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1gae081f15804b168a9573aca186c6176aa';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_EnableIRQ';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
IRQn_Type
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'IRQn';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '422';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Enable a specific interrupt.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function enables the specific interrupt \em IRQn.
@param [in]  IRQn  Interrupt number
\remarks
- IRQn must not be negative.
\sa
- \ref ECLIC_DisableIRQ
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga70aa615d81bc48ea8ed2b64c09c2d63f';
        func-mem-ref-line = '136';
        func-mem-ref-name = 'CLIC_INTIE_IE_Msk';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gab5a72455ad01a7caea954a82c907256d';
        func-mem-ref-line = '175';
        func-mem-ref-name = 'ECLIC';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1gad91c17c202ac4f466a9501c88d23e825';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_GetEnableIRQ';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
IRQn_Type
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'IRQn';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '441';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get a specific interrupt enable status.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function returns the interrupt enable status for the specific interrupt \em IRQn.
@param [in]  IRQn  Interrupt number
\returns
- 0  Interrupt is not enabled
- 1  Interrupt is pending
\remarks
- IRQn must not be negative.
\sa
- \ref ECLIC_EnableIRQ
- \ref ECLIC_DisableIRQ
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga70aa615d81bc48ea8ed2b64c09c2d63f';
        func-mem-ref-line = '136';
        func-mem-ref-name = 'CLIC_INTIE_IE_Msk';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gab5a72455ad01a7caea954a82c907256d';
        func-mem-ref-line = '175';
        func-mem-ref-name = 'ECLIC';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1gaa34edbcf50501a1ef4ebe1e2fbfae2b5';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_DisableIRQ';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
IRQn_Type
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'IRQn';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '456';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Disable a specific interrupt.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function disables the specific interrupt \em IRQn.
@param [in]  IRQn  Number of the external interrupt to disable
\remarks
- IRQn must not be negative.
\sa
- \ref ECLIC_EnableIRQ
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga70aa615d81bc48ea8ed2b64c09c2d63f';
        func-mem-ref-line = '136';
        func-mem-ref-name = 'CLIC_INTIE_IE_Msk';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gab5a72455ad01a7caea954a82c907256d';
        func-mem-ref-line = '175';
        func-mem-ref-name = 'ECLIC';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1gaa20c0e2158dbe29f589468de10abde12';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE int32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_GetPendingIRQ';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
IRQn_Type
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'IRQn';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '475';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get the pending specific interrupt.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function returns the pending status of the specific interrupt \em IRQn.
@param [in]      IRQn  Interrupt number
\returns
- 0  Interrupt is not pending
- 1  Interrupt is pending
\remarks
- IRQn must not be negative.
\sa
- \ref ECLIC_SetPendingIRQ
- \ref ECLIC_ClearPendingIRQ
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gad7395594207c3fa20c423a1c9ae26cb7';
        func-mem-ref-line = '133';
        func-mem-ref-name = 'CLIC_INTIP_IP_Msk';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gab5a72455ad01a7caea954a82c907256d';
        func-mem-ref-line = '175';
        func-mem-ref-name = 'ECLIC';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1gadadcfda306ae9024c5e7a5a79c3d49de';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_SetPendingIRQ';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
IRQn_Type
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'IRQn';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '491';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set a specific interrupt to pending.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function sets the pending bit for the specific interrupt \em IRQn.
@param [in]      IRQn  Interrupt number
\remarks
- IRQn must not be negative.
\sa
- \ref ECLIC_GetPendingIRQ
- \ref ECLIC_ClearPendingIRQ
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gad7395594207c3fa20c423a1c9ae26cb7';
        func-mem-ref-line = '133';
        func-mem-ref-name = 'CLIC_INTIP_IP_Msk';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gab5a72455ad01a7caea954a82c907256d';
        func-mem-ref-line = '175';
        func-mem-ref-name = 'ECLIC';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1ga79f14465b1588b3c970efd8d55422638';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_ClearPendingIRQ';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
IRQn_Type
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'IRQn';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '508';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Clear a specific interrupt from pending.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function removes the pending state of the specific interrupt \em IRQn.
\em IRQn cannot be a negative number.
@param [in]      IRQn  Interrupt number
\remarks
- IRQn must not be negative.
\sa
- \ref ECLIC_SetPendingIRQ
- \ref ECLIC_GetPendingIRQ
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gad7395594207c3fa20c423a1c9ae26cb7';
        func-mem-ref-line = '133';
        func-mem-ref-name = 'CLIC_INTIP_IP_Msk';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gab5a72455ad01a7caea954a82c907256d';
        func-mem-ref-line = '175';
        func-mem-ref-name = 'ECLIC';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1gaecf87e71c0c4a2ee711f0c292c3ebd8a';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_SetTrigIRQ';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
IRQn_Type
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'IRQn';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'trig';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '529';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set trigger mode and polarity for a specific interrupt.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function set trigger mode and polarity of the specific interrupt \em IRQn.
@param [in]      IRQn  Interrupt number
@param [in]      trig
                  - 00  level trigger, \ref ECLIC_LEVEL_TRIGGER
                  - 01  positive edge trigger, \ref ECLIC_POSTIVE_EDGE_TRIGGER
                  - 02  level trigger, \ref ECLIC_LEVEL_TRIGGER
                  - 03  negative edge trigger, \ref ECLIC_NEGTIVE_EDGE_TRIGGER
\remarks
- IRQn must not be negative.

\sa
- \ref ECLIC_GetTrigIRQ
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga476263a60ffcbb45417ab2b6864d47b4';
        func-mem-ref-line = '144';
        func-mem-ref-name = 'CLIC_INTATTR_TRIG_Msk';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gac4ec4063ec15f49408130b8a095a2a91';
        func-mem-ref-line = '143';
        func-mem-ref-name = 'CLIC_INTATTR_TRIG_Pos';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gab5a72455ad01a7caea954a82c907256d';
        func-mem-ref-line = '175';
        func-mem-ref-name = 'ECLIC';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1gabe634783ac950552cb51588e78ff2a57';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_GetTrigIRQ';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
IRQn_Type
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'IRQn';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '552';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get trigger mode and polarity for a specific interrupt.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function get trigger mode and polarity of the specific interrupt \em IRQn.
@param [in]      IRQn  Interrupt number
\return
                - 00  level trigger, \ref ECLIC_LEVEL_TRIGGER
                - 01  positive edge trigger, \ref ECLIC_POSTIVE_EDGE_TRIGGER
                - 02  level trigger, \ref ECLIC_LEVEL_TRIGGER
                - 03  negative edge trigger, \ref ECLIC_NEGTIVE_EDGE_TRIGGER
\remarks
    - IRQn must not be negative.
\sa
    - \ref ECLIC_SetTrigIRQ
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga476263a60ffcbb45417ab2b6864d47b4';
        func-mem-ref-line = '144';
        func-mem-ref-name = 'CLIC_INTATTR_TRIG_Msk';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gac4ec4063ec15f49408130b8a095a2a91';
        func-mem-ref-line = '143';
        func-mem-ref-name = 'CLIC_INTATTR_TRIG_Pos';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gab5a72455ad01a7caea954a82c907256d';
        func-mem-ref-line = '175';
        func-mem-ref-name = 'ECLIC';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1ga226570d14c924615a955e07b9883e415';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_SetShvIRQ';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
IRQn_Type
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'IRQn';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'shv';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '570';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set interrupt working mode for a specific interrupt.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function set selective hardware vector or non-vector working mode of the specific interrupt \em IRQn.
@param [in]      IRQn  Interrupt number
@param [in]      shv
                       - 0  non-vector mode, \ref ECLIC_NON_VECTOR_INTERRUPT
                       - 1  vector mode, \ref ECLIC_VECTOR_INTERRUPT
\remarks
- IRQn must not be negative.
\sa
- \ref ECLIC_GetShvIRQ
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga2b6efddec2286b358747be5985110b3a';
        func-mem-ref-line = '147';
        func-mem-ref-name = 'CLIC_INTATTR_SHV_Msk';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga49ea87f8a0207a2622f0ce467b7158dc';
        func-mem-ref-line = '146';
        func-mem-ref-name = 'CLIC_INTATTR_SHV_Pos';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gab5a72455ad01a7caea954a82c907256d';
        func-mem-ref-line = '175';
        func-mem-ref-name = 'ECLIC';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1gad7d7238a79c39c226a8289d027266cc0';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_GetShvIRQ';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
IRQn_Type
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'IRQn';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '591';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get interrupt working mode for a specific interrupt.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function get selective hardware vector or non-vector working mode of the specific interrupt \em IRQn.
@param [in]      IRQn  Interrupt number
\return       shv
                       - 0  non-vector mode, \ref ECLIC_NON_VECTOR_INTERRUPT
                       - 1  vector mode, \ref ECLIC_VECTOR_INTERRUPT
\remarks
- IRQn must not be negative.
\sa
- \ref ECLIC_SetShvIRQ
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga2b6efddec2286b358747be5985110b3a';
        func-mem-ref-line = '147';
        func-mem-ref-name = 'CLIC_INTATTR_SHV_Msk';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga49ea87f8a0207a2622f0ce467b7158dc';
        func-mem-ref-line = '146';
        func-mem-ref-name = 'CLIC_INTATTR_SHV_Pos';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gab5a72455ad01a7caea954a82c907256d';
        func-mem-ref-line = '175';
        func-mem-ref-name = 'ECLIC';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1ga2c72ee40cad78719f6d60767b75f6dcd';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_SetCtrlIRQ';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
IRQn_Type
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'IRQn';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'intctrl';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '607';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Modify ECLIC Interrupt Input Control Register for a specific interrupt.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function modify ECLIC Interrupt Input Control(CLICINTCTL[i]) register of the specific interrupt \em IRQn.
@param [in]      IRQn  Interrupt number
@param [in]      intctrl  Set value for CLICINTCTL[i] register
\remarks
- IRQn must not be negative.
\sa
- \ref ECLIC_GetCtrlIRQ
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gab5a72455ad01a7caea954a82c907256d';
        func-mem-ref-line = '175';
        func-mem-ref-name = 'ECLIC';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gae1d0b0d592b55bc57be6704ceeb314b1';
        func-mem-ref-line = '643';
        func-mem-ref-name = '__ECLIC_SetLevelIRQ';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gaafd7870e3de2a0831a5ba0fec6795207';
        func-mem-ref-line = '708';
        func-mem-ref-name = '__ECLIC_SetPriorityIRQ';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1ga0c552df637ed3e5830ae27fc712593da';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint8_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_GetCtrlIRQ';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
IRQn_Type
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'IRQn';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '623';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get ECLIC Interrupt Input Control Register value for a specific interrupt.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function modify ECLIC Interrupt Input Control register of the specific interrupt \em IRQn.
@param [in]      IRQn  Interrupt number
\return       value of ECLIC Interrupt Input Control register
\remarks
- IRQn must not be negative.
\sa
- \ref ECLIC_SetCtrlIRQ
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gab5a72455ad01a7caea954a82c907256d';
        func-mem-ref-line = '175';
        func-mem-ref-name = 'ECLIC';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga1ccefb6dd64211176683848ef52e5b8f';
        func-mem-ref-line = '677';
        func-mem-ref-name = '__ECLIC_GetLevelIRQ';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga5e47fae9a66b286f1d0df6799e5a244c';
        func-mem-ref-line = '738';
        func-mem-ref-name = '__ECLIC_GetPriorityIRQ';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gae1d0b0d592b55bc57be6704ceeb314b1';
        func-mem-ref-line = '643';
        func-mem-ref-name = '__ECLIC_SetLevelIRQ';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gaafd7870e3de2a0831a5ba0fec6795207';
        func-mem-ref-line = '708';
        func-mem-ref-name = '__ECLIC_SetPriorityIRQ';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1gae1d0b0d592b55bc57be6704ceeb314b1';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_SetLevelIRQ';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
IRQn_Type
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'IRQn';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'lvl_abs';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '643';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set ECLIC Interrupt level of a specific interrupt.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function set interrupt level of the specific interrupt \em IRQn.
@param [in]      IRQn  Interrupt number
@param [in]      lvl_abs   Interrupt level
\remarks
- IRQn must not be negative.
- If lvl_abs to be set is larger than the max level allowed, it will be force to be max level.
- When you set level value you need use clciinfo.nlbits to get the width of level.
  Then we could know the maximum of level. CLICINTCTLBITS is how many total bits are
  present in the CLICINTCTL register.
\sa
- \ref ECLIC_GetLevelIRQ
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga1dce18ecc4a504cc128c62596d25f3ab';
        func-mem-ref-line = '331';
        func-mem-ref-name = '__ECLIC_GetCfgNlbits';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga0c552df637ed3e5830ae27fc712593da';
        func-mem-ref-line = '623';
        func-mem-ref-name = '__ECLIC_GetCtrlIRQ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga2c72ee40cad78719f6d60767b75f6dcd';
        func-mem-ref-line = '607';
        func-mem-ref-name = '__ECLIC_SetCtrlIRQ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga34443f8b2b2935d099e6a0119b96c712';
        func-mem-ref-line = '149';
        func-mem-ref-name = 'ECLIC_MAX_NLBITS';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1ga1ccefb6dd64211176683848ef52e5b8f';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint8_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_GetLevelIRQ';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
IRQn_Type
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'IRQn';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '677';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get ECLIC Interrupt level of a specific interrupt.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function get interrupt level of the specific interrupt \em IRQn.
@param [in]      IRQn  Interrupt number
\return         Interrupt level
\remarks
- IRQn must not be negative.
\sa
- \ref ECLIC_SetLevelIRQ
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga1dce18ecc4a504cc128c62596d25f3ab';
        func-mem-ref-line = '331';
        func-mem-ref-name = '__ECLIC_GetCfgNlbits';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga0c552df637ed3e5830ae27fc712593da';
        func-mem-ref-line = '623';
        func-mem-ref-name = '__ECLIC_GetCtrlIRQ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga34443f8b2b2935d099e6a0119b96c712';
        func-mem-ref-line = '149';
        func-mem-ref-name = 'ECLIC_MAX_NLBITS';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1gaafd7870e3de2a0831a5ba0fec6795207';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_SetPriorityIRQ';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
IRQn_Type
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'IRQn';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'pri';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '708';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get ECLIC Interrupt priority of a specific interrupt.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function get interrupt priority of the specific interrupt \em IRQn.
@param [in]      IRQn  Interrupt number
@param [in]      pri   Interrupt priority
\remarks
- IRQn must not be negative.
- If pri to be set is larger than the max priority allowed, it will be force to be max priority.
- Priority width is CLICINTCTLBITS minus clciinfo.nlbits if clciinfo.nlbits
  is less than CLICINTCTLBITS. Otherwise priority width is 0.
\sa
- \ref ECLIC_GetPriorityIRQ
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga1dce18ecc4a504cc128c62596d25f3ab';
        func-mem-ref-line = '331';
        func-mem-ref-name = '__ECLIC_GetCfgNlbits';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga0c552df637ed3e5830ae27fc712593da';
        func-mem-ref-line = '623';
        func-mem-ref-name = '__ECLIC_GetCtrlIRQ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga2c72ee40cad78719f6d60767b75f6dcd';
        func-mem-ref-line = '607';
        func-mem-ref-name = '__ECLIC_SetCtrlIRQ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga34443f8b2b2935d099e6a0119b96c712';
        func-mem-ref-line = '149';
        func-mem-ref-name = 'ECLIC_MAX_NLBITS';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1ga5e47fae9a66b286f1d0df6799e5a244c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint8_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_GetPriorityIRQ';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
IRQn_Type
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'IRQn';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '738';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get ECLIC Interrupt priority of a specific interrupt.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function get interrupt priority of the specific interrupt \em IRQn.
@param [in]      IRQn  Interrupt number
\return   Interrupt priority
\remarks
- IRQn must not be negative.
\sa
- \ref ECLIC_SetPriorityIRQ
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga1dce18ecc4a504cc128c62596d25f3ab';
        func-mem-ref-line = '331';
        func-mem-ref-name = '__ECLIC_GetCfgNlbits';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga0c552df637ed3e5830ae27fc712593da';
        func-mem-ref-line = '623';
        func-mem-ref-name = '__ECLIC_GetCtrlIRQ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga34443f8b2b2935d099e6a0119b96c712';
        func-mem-ref-line = '149';
        func-mem-ref-name = 'ECLIC_MAX_NLBITS';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1ga2e80049df57b285d4dd43454377c0845';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_SetVector';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
IRQn_Type
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'IRQn';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'vector';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '769';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set Interrupt Vector of a specific interrupt.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function set interrupt handler address of the specific interrupt \em IRQn.
@param [in]      IRQn  Interrupt number
@param [in]      vector   Interrupt handler address
\remarks
- IRQn must not be negative.
- You can set the \ref CSR_CSR_MTVT to set interrupt vector table entry address.
- If your vector table is placed in readonly section, the vector for IRQn will not be modified.
  For this case, you need to use the correct irq handler name defined in your vector table as
  your irq handler function name.
- This function will only work correctly when the vector table is placed in an read-write enabled section.
\sa
- \ref ECLIC_GetVector
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga5b4c34e720fb0c9e939540333dd640e6';
        func-mem-ref-line = '2040';
        func-mem-ref-name = '__FENCE_I';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '642';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga5e44edb3f3d95986c92f8efad5db0c2c';
        func-mem-ref-line = '962';
        func-mem-ref-name = 'CSR_MTVT';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga6e607ebf23f9df13ac604418ea9332f4';
        func-mem-ref-line = '974';
        func-mem-ref-name = 'MFlushDCacheLine';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gac9500d4f13d04b2acbfd3538984514c8';
        func-mem-ref-line = '285';
        func-mem-ref-name = 'MInvalICacheLine';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1ga7b8025dd8eac9993066d730cee6475a0';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE rv_csr_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_GetVector';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
IRQn_Type
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'IRQn';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '801';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get Interrupt Vector of a specific interrupt.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function get interrupt handler address of the specific interrupt \em IRQn.
@param [in]      IRQn  Interrupt number
\return        Interrupt handler address
\remarks
- IRQn must not be negative.
- You can read \ref CSR_CSR_MTVT to get interrupt vector table entry address.
\sa
    - \ref ECLIC_SetVector
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '642';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga5e44edb3f3d95986c92f8efad5db0c2c';
        func-mem-ref-line = '962';
        func-mem-ref-name = 'CSR_MTVT';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1ga98ea92157717512bc5e770686b2dbd23';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_SetModeIRQ';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
IRQn_Type
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'IRQn';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'mode';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '827';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set privilege mode of a specific interrupt.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function set in which privilege mode the interrupts \em IRQn should be taken.
@param [in]      IRQn  Interrupt number
@param [in]      mode   Privilege mode
\remarks
- IRQn must not be negative.
- mode must be 1(Supervisor Mode) or 3(Machine Mode), other values are ignored.
- M-mode can R/W this field, but S-mode can only read.And ECLIC with TEE does not
  reply on CSR mideleg to delegate interrupts.
- Mode of S-mode ECLIC region's clicintattr can be omitted to set, which is mirror to M-mode ECLIC region's.
  Only the low 6 bits of clicintattr [i] can be written via the S-mode memory region.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga6482dd03047b73bac1338838b510ca46';
        func-mem-ref-line = '140';
        func-mem-ref-name = 'CLIC_INTATTR_MODE_Msk';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga8f717178dfafde83f26e4fe0d1002b7e';
        func-mem-ref-line = '139';
        func-mem-ref-name = 'CLIC_INTATTR_MODE_Pos';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gab5a72455ad01a7caea954a82c907256d';
        func-mem-ref-line = '175';
        func-mem-ref-name = 'ECLIC';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1ga391864c16300ed16c57374d1dd742c28';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_SetSth';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'sth';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '848';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set supervisor-mode Interrupt Level Threshold in supervisor mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function sets supervisor-mode interrupt level threshold.
@param [in]  sth       Interrupt Level Threshold.
\remarks
- S-mode ECLIC region sintthresh'sth is a mirror to M-mode ECLIC region's mintthresh.sth,
  and will be updated synchronously, here operate on mintthresh.sth.
\sa
- \ref ECLIC_GetSth
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gab5a72455ad01a7caea954a82c907256d';
        func-mem-ref-line = '175';
        func-mem-ref-name = 'ECLIC';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1ga14c4eba1d861854b03cc050a1750376d';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint8_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_GetSth';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '864';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get supervisor-mode Interrupt Level Threshold in supervisor mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function gets supervisor mode interrupt level threshold.
\return       Interrupt Level Threshold.
\remarks
- S-mode ECLIC region sintthresh'sth is a mirror to M-mode ECLIC region's mintthresh.sth,
  and will be updated synchronously, here operate on mintthresh.sth.
\sa
- \ref ECLIC_SetSth
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gab5a72455ad01a7caea954a82c907256d';
        func-mem-ref-line = '175';
        func-mem-ref-name = 'ECLIC';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1ga1425089f0734749375b5c31e8464d9c5';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_SetTrigIRQ_S';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
IRQn_Type
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'IRQn';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'trig';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '885';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set trigger mode and polarity for a specific interrupt in supervisor mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function set trigger mode and polarity of the specific interrupt \em IRQn.
@param [in]      IRQn  Interrupt number
@param [in]      trig
                  - 00  level trigger, \ref ECLIC_LEVEL_TRIGGER
                  - 01  positive edge trigger, \ref ECLIC_POSTIVE_EDGE_TRIGGER
                  - 02  level trigger, \ref ECLIC_LEVEL_TRIGGER
                  - 03  negative edge trigger, \ref ECLIC_NEGTIVE_EDGE_TRIGGER
\remarks
- IRQn must not be negative.

\sa
- \ref ECLIC_GetTrigIRQ_S
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga476263a60ffcbb45417ab2b6864d47b4';
        func-mem-ref-line = '144';
        func-mem-ref-name = 'CLIC_INTATTR_TRIG_Msk';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gac4ec4063ec15f49408130b8a095a2a91';
        func-mem-ref-line = '143';
        func-mem-ref-name = 'CLIC_INTATTR_TRIG_Pos';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gab5a72455ad01a7caea954a82c907256d';
        func-mem-ref-line = '175';
        func-mem-ref-name = 'ECLIC';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1gabcfaa86e0795c9e4f19e664e1976cd25';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint8_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_GetTrigIRQ_S';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
IRQn_Type
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'IRQn';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '908';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get trigger mode and polarity for a specific interrupt in supervisor mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function get trigger mode and polarity of the specific interrupt \em IRQn.
@param [in]      IRQn  Interrupt number
\return
                - 00  level trigger, \ref ECLIC_LEVEL_TRIGGER
                - 01  positive edge trigger, \ref ECLIC_POSTIVE_EDGE_TRIGGER
                - 02  level trigger, \ref ECLIC_LEVEL_TRIGGER
                - 03  negative edge trigger, \ref ECLIC_NEGTIVE_EDGE_TRIGGER
\remarks
    - IRQn must not be negative.
\sa
    - \ref ECLIC_SetTrigIRQ_S
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga476263a60ffcbb45417ab2b6864d47b4';
        func-mem-ref-line = '144';
        func-mem-ref-name = 'CLIC_INTATTR_TRIG_Msk';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gac4ec4063ec15f49408130b8a095a2a91';
        func-mem-ref-line = '143';
        func-mem-ref-name = 'CLIC_INTATTR_TRIG_Pos';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gab5a72455ad01a7caea954a82c907256d';
        func-mem-ref-line = '175';
        func-mem-ref-name = 'ECLIC';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1gaebc8d00dffb20e2ea54e2056af0c39c3';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_SetShvIRQ_S';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
IRQn_Type
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'IRQn';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'shv';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '927';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set interrupt working mode for a specific interrupt in supervisor mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function set selective hardware vector or non-vector working mode of the specific interrupt \em IRQn.
@param [in]      IRQn  Interrupt number
@param [in]      shv
                       - 0  non-vector mode, \ref ECLIC_NON_VECTOR_INTERRUPT
                       - 1  vector mode, \ref ECLIC_VECTOR_INTERRUPT
\remarks
- IRQn must not be negative.
\sa
- \ref ECLIC_GetShvIRQ_S
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga2b6efddec2286b358747be5985110b3a';
        func-mem-ref-line = '147';
        func-mem-ref-name = 'CLIC_INTATTR_SHV_Msk';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga49ea87f8a0207a2622f0ce467b7158dc';
        func-mem-ref-line = '146';
        func-mem-ref-name = 'CLIC_INTATTR_SHV_Pos';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gab5a72455ad01a7caea954a82c907256d';
        func-mem-ref-line = '175';
        func-mem-ref-name = 'ECLIC';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1ga2305459519dc40ad9277a7b8f016fb49';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint8_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_GetShvIRQ_S';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
IRQn_Type
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'IRQn';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '948';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get interrupt working mode for a specific interrupt in supervisor mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function get selective hardware vector or non-vector working mode of the specific interrupt \em IRQn.
@param [in]      IRQn  Interrupt number
\return       shv
                       - 0  non-vector mode, \ref ECLIC_NON_VECTOR_INTERRUPT
                       - 1  vector mode, \ref ECLIC_VECTOR_INTERRUPT
\remarks
- IRQn must not be negative.
\sa
- \ref ECLIC_SMODE_SetShvIRQ
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga2b6efddec2286b358747be5985110b3a';
        func-mem-ref-line = '147';
        func-mem-ref-name = 'CLIC_INTATTR_SHV_Msk';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga49ea87f8a0207a2622f0ce467b7158dc';
        func-mem-ref-line = '146';
        func-mem-ref-name = 'CLIC_INTATTR_SHV_Pos';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gab5a72455ad01a7caea954a82c907256d';
        func-mem-ref-line = '175';
        func-mem-ref-name = 'ECLIC';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1ga22bfd2c51e6feb49b5de4edc7c282569';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_SetCtrlIRQ_S';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
IRQn_Type
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'IRQn';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'intctrl';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '964';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Modify ECLIC Interrupt Input Control Register for a specific interrupt in supervisor mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function modify ECLIC Interrupt Input Control(CLICINTCTL[i]) register of the specific interrupt \em IRQn.
@param [in]      IRQn  Interrupt number
@param [in]      intctrl  Set value for CLICINTCTL[i] register
\remarks
- IRQn must not be negative.
\sa
- \ref ECLIC_GetCtrlIRQ_S
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gab5a72455ad01a7caea954a82c907256d';
        func-mem-ref-line = '175';
        func-mem-ref-name = 'ECLIC';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga7e24b0018a216f1387f219eec862b9e4';
        func-mem-ref-line = '1000';
        func-mem-ref-name = '__ECLIC_SetLevelIRQ_S';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga6f29dc953e258ce9b468406c6cc642e7';
        func-mem-ref-line = '1066';
        func-mem-ref-name = '__ECLIC_SetPriorityIRQ_S';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1gacdafc4adde2db7f2b431c34da32208e8';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint8_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_GetCtrlIRQ_S';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
IRQn_Type
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'IRQn';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '980';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get ECLIC Interrupt Input Control Register value for a specific interrupt in supervisor mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function modify ECLIC Interrupt Input Control register of the specific interrupt \em IRQn.
@param [in]      IRQn  Interrupt number
\return       value of ECLIC Interrupt Input Control register
\remarks
- IRQn must not be negative.
\sa
- \ref ECLIC_SetCtrlIRQ_S
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gab5a72455ad01a7caea954a82c907256d';
        func-mem-ref-line = '175';
        func-mem-ref-name = 'ECLIC';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gadffa543aee3a9a814846c806d6a0db46';
        func-mem-ref-line = '1035';
        func-mem-ref-name = '__ECLIC_GetLevelIRQ_S';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gafeeaef8b6180a99baa28ffd81a5e6d61';
        func-mem-ref-line = '1096';
        func-mem-ref-name = '__ECLIC_GetPriorityIRQ_S';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga7e24b0018a216f1387f219eec862b9e4';
        func-mem-ref-line = '1000';
        func-mem-ref-name = '__ECLIC_SetLevelIRQ_S';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga6f29dc953e258ce9b468406c6cc642e7';
        func-mem-ref-line = '1066';
        func-mem-ref-name = '__ECLIC_SetPriorityIRQ_S';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1ga7e24b0018a216f1387f219eec862b9e4';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_SetLevelIRQ_S';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
IRQn_Type
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'IRQn';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'lvl_abs';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '1000';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set ECLIC Interrupt level of a specific interrupt in supervisor mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function set interrupt level of the specific interrupt \em IRQn.
@param [in]      IRQn  Interrupt number
@param [in]      lvl_abs   Interrupt level
\remarks
- IRQn must not be negative.
- If lvl_abs to be set is larger than the max level allowed, it will be force to be max level.
- When you set level value you need use clciinfo.nlbits to get the width of level.
  Then we could know the maximum of level. CLICINTCTLBITS is how many total bits are
  present in the CLICINTCTL register.
\sa
- \ref ECLIC_GetLevelIRQ_S
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga1dce18ecc4a504cc128c62596d25f3ab';
        func-mem-ref-line = '331';
        func-mem-ref-name = '__ECLIC_GetCfgNlbits';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gacdafc4adde2db7f2b431c34da32208e8';
        func-mem-ref-line = '980';
        func-mem-ref-name = '__ECLIC_GetCtrlIRQ_S';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga22bfd2c51e6feb49b5de4edc7c282569';
        func-mem-ref-line = '964';
        func-mem-ref-name = '__ECLIC_SetCtrlIRQ_S';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga34443f8b2b2935d099e6a0119b96c712';
        func-mem-ref-line = '149';
        func-mem-ref-name = 'ECLIC_MAX_NLBITS';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1gadffa543aee3a9a814846c806d6a0db46';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint8_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_GetLevelIRQ_S';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
IRQn_Type
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'IRQn';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '1035';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get ECLIC Interrupt level of a specific interrupt.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function get interrupt level of the specific interrupt \em IRQn.
@param [in]      IRQn  Interrupt number
\return         Interrupt level
\remarks
- IRQn must not be negative.
\sa
- \ref ECLIC_SetLevelIRQ_S
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga1dce18ecc4a504cc128c62596d25f3ab';
        func-mem-ref-line = '331';
        func-mem-ref-name = '__ECLIC_GetCfgNlbits';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gacdafc4adde2db7f2b431c34da32208e8';
        func-mem-ref-line = '980';
        func-mem-ref-name = '__ECLIC_GetCtrlIRQ_S';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga34443f8b2b2935d099e6a0119b96c712';
        func-mem-ref-line = '149';
        func-mem-ref-name = 'ECLIC_MAX_NLBITS';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1ga6f29dc953e258ce9b468406c6cc642e7';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_SetPriorityIRQ_S';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
IRQn_Type
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'IRQn';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'pri';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '1066';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set ECLIC Interrupt priority of a specific interrupt in supervisor mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function get interrupt priority of the specific interrupt \em IRQn.
@param [in]      IRQn  Interrupt number
@param [in]      pri   Interrupt priority
\remarks
- IRQn must not be negative.
- If pri to be set is larger than the max priority allowed, it will be force to be max priority.
- Priority width is CLICINTCTLBITS minus clciinfo.nlbits if clciinfo.nlbits
  is less than CLICINTCTLBITS. Otherwise priority width is 0.
\sa
- \ref ECLIC_GetPriorityIRQ_S
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga1dce18ecc4a504cc128c62596d25f3ab';
        func-mem-ref-line = '331';
        func-mem-ref-name = '__ECLIC_GetCfgNlbits';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gacdafc4adde2db7f2b431c34da32208e8';
        func-mem-ref-line = '980';
        func-mem-ref-name = '__ECLIC_GetCtrlIRQ_S';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga22bfd2c51e6feb49b5de4edc7c282569';
        func-mem-ref-line = '964';
        func-mem-ref-name = '__ECLIC_SetCtrlIRQ_S';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga34443f8b2b2935d099e6a0119b96c712';
        func-mem-ref-line = '149';
        func-mem-ref-name = 'ECLIC_MAX_NLBITS';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1gafeeaef8b6180a99baa28ffd81a5e6d61';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint8_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_GetPriorityIRQ_S';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
IRQn_Type
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'IRQn';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '1096';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get ECLIC Interrupt priority of a specific interrupt in supervisor mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function get interrupt priority of the specific interrupt \em IRQn.
@param [in]      IRQn  Interrupt number
\return   Interrupt priority
\remarks
- IRQn must not be negative.
\sa
- \ref ECLIC_SetPriorityIRQ_S
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga1dce18ecc4a504cc128c62596d25f3ab';
        func-mem-ref-line = '331';
        func-mem-ref-name = '__ECLIC_GetCfgNlbits';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gacdafc4adde2db7f2b431c34da32208e8';
        func-mem-ref-line = '980';
        func-mem-ref-name = '__ECLIC_GetCtrlIRQ_S';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga34443f8b2b2935d099e6a0119b96c712';
        func-mem-ref-line = '149';
        func-mem-ref-name = 'ECLIC_MAX_NLBITS';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1ga9e1d7917e8cc87b88a76aa8450d4073c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_EnableIRQ_S';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
IRQn_Type
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'IRQn';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '1121';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Enable a specific interrupt in supervisor mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function enables the specific interrupt \em IRQn.
@param [in]  IRQn  Interrupt number
\remarks
- IRQn must not be negative.
\sa
- \ref ECLIC_DisableIRQ
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga70aa615d81bc48ea8ed2b64c09c2d63f';
        func-mem-ref-line = '136';
        func-mem-ref-name = 'CLIC_INTIE_IE_Msk';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gab5a72455ad01a7caea954a82c907256d';
        func-mem-ref-line = '175';
        func-mem-ref-name = 'ECLIC';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1gab189587974417c54a59fb508dd39aaea';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint8_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_GetEnableIRQ_S';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
IRQn_Type
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'IRQn';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '1140';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get a specific interrupt enable status in supervisor mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function returns the interrupt enable status for the specific interrupt \em IRQn in S MODE.
@param [in]  IRQn  Interrupt number
\returns
- 0  Interrupt is not masked
- 1  Interrupt is enabled
\remarks
- IRQn must not be negative.
\sa
- \ref ECLIC_EnableIRQ_S
- \ref ECLIC_DisableIRQ_S
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga70aa615d81bc48ea8ed2b64c09c2d63f';
        func-mem-ref-line = '136';
        func-mem-ref-name = 'CLIC_INTIE_IE_Msk';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gab5a72455ad01a7caea954a82c907256d';
        func-mem-ref-line = '175';
        func-mem-ref-name = 'ECLIC';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1gac8e767488e6f6291c83decfaf6b0804e';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_DisableIRQ_S';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
IRQn_Type
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'IRQn';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '1155';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Disable a specific interrupt in supervisor mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function disables the specific interrupt \em IRQn.
@param [in]  IRQn  Number of the external interrupt to disable
\remarks
- IRQn must not be negative.
\sa
- \ref ECLIC_EnableIRQ
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga70aa615d81bc48ea8ed2b64c09c2d63f';
        func-mem-ref-line = '136';
        func-mem-ref-name = 'CLIC_INTIE_IE_Msk';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gab5a72455ad01a7caea954a82c907256d';
        func-mem-ref-line = '175';
        func-mem-ref-name = 'ECLIC';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1gac0167f1dee592e0950b0ea4e1ea47e46';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_SetVector_S';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
IRQn_Type
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'IRQn';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'vector';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '1176';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set Interrupt Vector of a specific interrupt in supervisor mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function set interrupt handler address of the specific interrupt \em IRQn.
@param [in]      IRQn  Interrupt number
@param [in]      vector   Interrupt handler address
\remarks
- IRQn must not be negative.
- You can set the \ref CSR_CSR_MTVT to set interrupt vector table entry address.
- If your vector table is placed in readonly section, the vector for IRQn will not be modified.
  For this case, you need to use the correct irq handler name defined in your vector table as
  your irq handler function name.
- This function will only work correctly when the vector table is placed in an read-write enabled section.
\sa
- \ref ECLIC_GetVector_S
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga5b4c34e720fb0c9e939540333dd640e6';
        func-mem-ref-line = '2040';
        func-mem-ref-name = '__FENCE_I';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '642';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaf38aa3d532244f4e3a83782ef24218f2';
        func-mem-ref-line = '617';
        func-mem-ref-name = 'CSR_STVT';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga6a5d6a194b8a8248c005fed0f2e3ddba';
        func-mem-ref-line = '1015';
        func-mem-ref-name = 'SFlushDCacheLine';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga9cfe1f7476be3aa984c926287eceecdf';
        func-mem-ref-line = '327';
        func-mem-ref-name = 'SInvalICacheLine';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1gaf65f168dece11261cdcef2a041624ed3';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE rv_csr_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_GetVector_S';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
IRQn_Type
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'IRQn';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '1208';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get Interrupt Vector of a specific interrupt in supervisor mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function get interrupt handler address of the specific interrupt \em IRQn.
@param [in]      IRQn  Interrupt number
\return        Interrupt handler address
\remarks
- IRQn must not be negative.
- You can read \ref CSR_CSR_MTVT to get interrupt vector table entry address.
\sa
    - \ref ECLIC_SMODE_SetVector
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '642';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaf38aa3d532244f4e3a83782ef24218f2';
        func-mem-ref-line = '617';
        func-mem-ref-name = 'CSR_STVT';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1gaec014abd3940e642f652b97b70d7ac8e';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__set_exc_entry';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '1232';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set Exception entry address.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function set exception handler address to 'CSR_MTVEC'.
@param [in]      addr  Exception handler address
\remarks
- This function use to set exception handler address to 'CSR_MTVEC'.
  Address need to be aligned to 64 bytes.
\sa
- \ref __get_exc_entry
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga22f5cd17199a966b4b840dd56d151216';
        func-mem-ref-line = '632';
        func-mem-ref-name = 'CSR_MTVEC';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga2bcc1789c000ec72b06b7d7e736aa1c3';
        func-mem-ref-line = '150';
        func-mem-ref-name = 'ECLIC_MODE_MTVEC_Msk';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1ga05bee6a5e41963ef1845c8a7e5a09c89';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE rv_csr_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__get_exc_entry';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '1250';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get Exception entry address.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function get exception handler address from 'CSR_MTVEC'.
\return       Exception handler address
\remarks
- This function use to get exception handler address from 'CSR_MTVEC'.
  Address need to be aligned to 64 bytes.
\sa
- \ref __set_exc_entry
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '642';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga22f5cd17199a966b4b840dd56d151216';
        func-mem-ref-line = '632';
        func-mem-ref-name = 'CSR_MTVEC';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga2bcc1789c000ec72b06b7d7e736aa1c3';
        func-mem-ref-line = '150';
        func-mem-ref-name = 'ECLIC_MODE_MTVEC_Msk';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1gadbe0f14f32c5989304fd05faf0cff648';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__set_nonvec_entry';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '1267';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set Non-vector interrupt entry address.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function set Non-vector interrupt address.
@param [in]      addr  Non-vector interrupt entry address
\remarks
- This function use to set non-vector interrupt entry address to 'CSR_MTVT2' if
- CSR_MTVT2 bit0 is 1. If 'CSR_MTVT2' bit0 is 0 then set address to 'CSR_MTVEC'
\sa
- \ref __get_nonvec_entry
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '642';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga22f5cd17199a966b4b840dd56d151216';
        func-mem-ref-line = '632';
        func-mem-ref-name = 'CSR_MTVEC';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga7d9dcb2dd7d7c764aab4b68033b383f2';
        func-mem-ref-line = '996';
        func-mem-ref-name = 'CSR_MTVT2';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga2bcc1789c000ec72b06b7d7e736aa1c3';
        func-mem-ref-line = '150';
        func-mem-ref-name = 'ECLIC_MODE_MTVEC_Msk';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1ga2fe20dcdecc453c6709448944b1f5350';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE rv_csr_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__get_nonvec_entry';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '1289';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get Non-vector interrupt entry address.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function get Non-vector interrupt address.
\return      Non-vector interrupt handler address
\remarks
- This function use to get non-vector interrupt entry address from 'CSR_MTVT2' if
- CSR_MTVT2 bit0 is 1. If 'CSR_MTVT2' bit0 is 0 then get address from 'CSR_MTVEC'.
\sa
- \ref __set_nonvec_entry
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '642';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga22f5cd17199a966b4b840dd56d151216';
        func-mem-ref-line = '632';
        func-mem-ref-name = 'CSR_MTVEC';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga7d9dcb2dd7d7c764aab4b68033b383f2';
        func-mem-ref-line = '996';
        func-mem-ref-name = 'CSR_MTVT2';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga2bcc1789c000ec72b06b7d7e736aa1c3';
        func-mem-ref-line = '150';
        func-mem-ref-name = 'ECLIC_MODE_MTVEC_Msk';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1gac5b9521ea1bd5260330714b8032d04d5';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE rv_csr_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__get_nmi_entry';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '1309';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get NMI interrupt entry from 'CSR_MNVEC'.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function get NMI interrupt address from 'CSR_MNVEC'.
\return      NMI interrupt handler address
\remarks
- This function use to get NMI interrupt handler address from 'CSR_MNVEC'. If CSR_MMISC_CTL[9] = 1 'CSR_MNVEC'
- will be equal as mtvec. If CSR_MMISC_CTL[9] = 0 'CSR_MNVEC' will be equal as reset vector.
- NMI entry is defined via \ref CSR_MMISC_CTL, writing to \ref CSR_MNVEC will be ignored.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '642';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga13df3ff8aec804cae346b61b2643c589';
        func-mem-ref-line = '977';
        func-mem-ref-name = 'CSR_MNVEC';
    };
    }; /* func-member */
    };
  file-full-name  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
ECLIC feature API header file for Nuclei N/NX Core.
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_



_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'core__feature__fpu_8h';
  file-name = 'core_feature_fpu.h';
    define = {
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__FPU__Functions_1gafa83f561b446add5c453e0feb255d2e6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RISCV_FLEN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
64
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_fpu.h';
      define-mem-desc-line = '61';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__FPU__Functions_1ga8cc990586c8cd66746a89ea04a952306';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__get_FCSR';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_CSR_READ(CSR_FCSR)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_fpu.h';
      define-mem-desc-line = '67';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get FCSR CSR Register.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__FPU__Functions_1ga2a5b820d47fe120ac23382db72f6cbb8';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__set_FCSR';
      define-mem-param  = {
        define-mem-def-name = 'val';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_CSR_WRITE(CSR_FCSR, (val))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_fpu.h';
      define-mem-desc-line = '69';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set FCSR CSR Register with val.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__FPU__Functions_1gaa6595ca9d101dda1feb9826d0905bd60';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__get_FRM';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_CSR_READ(CSR_FRM)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_fpu.h';
      define-mem-desc-line = '71';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get FRM CSR Register.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__FPU__Functions_1gaae42d30f7a65effccb13210406c69f6a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__set_FRM';
      define-mem-param  = {
        define-mem-def-name = 'val';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_CSR_WRITE(CSR_FRM, (val))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_fpu.h';
      define-mem-desc-line = '73';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set FRM CSR Register with val.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__FPU__Functions_1gaa679e9260657efa33c5340841e8a6aff';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__get_FFLAGS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_CSR_READ(CSR_FFLAGS)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_fpu.h';
      define-mem-desc-line = '75';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get FFLAGS CSR Register.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__FPU__Functions_1ga5c875e72325d398dc16301eec09eec0d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__set_FFLAGS';
      define-mem-param  = {
        define-mem-def-name = 'val';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_CSR_WRITE(CSR_FFLAGS, (val))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_fpu.h';
      define-mem-desc-line = '77';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set FFLAGS CSR Register with val.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__FPU__Functions_1ga56907288398563598c7ed6c203bde07c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__enable_FPU';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
                                  { __RV_CSR_CLEAR(CSR_MSTATUS, MSTATUS_FS); \
                                  __RV_CSR_SET(CSR_MSTATUS, MSTATUS_FS_INITIAL); \
                                }
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_fpu.h';
      define-mem-desc-line = '80';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Enable FPU Unit, and set state to initial.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__FPU__Functions_1ga3cb1d30a444036111b1e83853315e11a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__disable_FPU';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_CSR_CLEAR(CSR_MSTATUS, MSTATUS_FS)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_fpu.h';
      define-mem-desc-line = '90';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Disable FPU Unit.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
* We can save power by disable FPU Unit.
* When FPU Unit is disabled, any access to FPU related CSR registers
and FPU instructions will cause illegal Instuction Exception.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__FPU__Functions_1gada7714c5b13faee62cd17c11b33099bc';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_FLW';
      define-mem-param  = {
        define-mem-def-name = 'freg';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'addr';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'ofs';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    ({                                                         \
        rv_csr_t __addr = (rv_csr_t)(addr);                    \
        __ASM volatile("flw " STRINGIFY(freg) ", %0(%1)  "     \
                     : : "I"(ofs), "r"(__addr)                 \
                     : "memory");                              \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_fpu.h';
      define-mem-desc-line = '107';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Load a single-precision value from memory into float point register freg using flw instruction.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
 The FLW instruction loads a single-precision floating point value from memory
address (addr + ofs) into floating point register freg(f0-f31)
@param [in]    freg   The floating point register, eg. FREG(0), f0
@param [in]    addr   The memory base address, 4 byte aligned required
@param [in]    ofs    a 12-bit immediate signed byte offset value, should be an const value
\remarks
* FLW and FSW operations need to make sure the address is 4 bytes aligned,
  otherwise it will cause exception code 4(Load address misaligned) or 6 (Store/AMO address misaligned)
* FLW and FSW do not modify the bits being transferred; in particular, the payloads of non-canonical
NaNs are preserved
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__FPU__Functions_1ga8589da14b8ba3b8370752efc3e71f060';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_FSW';
      define-mem-param  = {
        define-mem-def-name = 'freg';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'addr';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'ofs';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    ({                                                         \
        rv_csr_t __addr = (rv_csr_t)(addr);                    \
        __ASM volatile("fsw " STRINGIFY(freg) ", %0(%1)  "     \
                     : : "I"(ofs), "r"(__addr)                 \
                     : "memory");                              \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_fpu.h';
      define-mem-desc-line = '128';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Store a single-precision value from float point freg into memory using fsw instruction.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
 The FSW instruction stores a single-precision value from floating point register to memory
@param [in]    freg   The floating point register(f0-f31), eg. FREG(0), f0
@param [in]    addr   The memory base address, 4 byte aligned required
@param [in]    ofs    a 12-bit immediate signed byte offset value, should be an const value
\remarks
* FLW and FSW operations need to make sure the address is 4 bytes aligned,
  otherwise it will cause exception code 4(Load address misaligned) or 6 (Store/AMO address misaligned)
* FLW and FSW do not modify the bits being transferred; in particular, the payloads of non-canonical
NaNs are preserved
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__FPU__Functions_1gad4c739198e28d81dc036a4ceafeaaa14';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_FLD';
      define-mem-param  = {
        define-mem-def-name = 'freg';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'addr';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'ofs';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    ({                                                         \
        rv_csr_t __addr = (rv_csr_t)(addr);                    \
        __ASM volatile("fld " STRINGIFY(freg) ", %0(%1)  "     \
                     : : "I"(ofs), "r"(__addr)                 \
                     : "memory");                              \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_fpu.h';
      define-mem-desc-line = '151';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Load a double-precision value from memory into float point register freg using fld instruction.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
 The FLD instruction loads a double-precision floating point value from memory
address (addr + ofs) into floating point register freg(f0-f31)
@param [in]    freg   The floating point register, eg. FREG(0), f0
@param [in]    addr   The memory base address, 8 byte aligned required
@param [in]    ofs    a 12-bit immediate signed byte offset value, should be an const value
\attention
* Function only available for double precision floating point unit, FLEN = 64
\remarks
* FLD and FSD operations need to make sure the address is 8 bytes aligned,
  otherwise it will cause exception code 4(Load address misaligned) or 6 (Store/AMO address misaligned)
* FLD and FSD do not modify the bits being transferred; in particular, the payloads of non-canonical
NaNs are preserved.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__FPU__Functions_1gacabdf0d10c9c364361d498887d2a31ee';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_FSD';
      define-mem-param  = {
        define-mem-def-name = 'freg';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'addr';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'ofs';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
    ({                                                         \
        rv_csr_t __addr = (rv_csr_t)(addr);                    \
        __ASM volatile("fsd " STRINGIFY(freg) ", %0(%1)  "     \
                     : : "I"(ofs), "r"(__addr)                 \
                     : "memory");                              \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_fpu.h';
      define-mem-desc-line = '174';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Store a double-precision value from float point freg into memory using fsd instruction.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
 The FSD instruction stores double-precision value from floating point register to memory
@param [in]    freg   The floating point register(f0-f31), eg. FREG(0), f0
@param [in]    addr   The memory base address, 8 byte aligned required
@param [in]    ofs    a 12-bit immediate signed byte offset value, should be an const value
\attention
* Function only available for double precision floating point unit, FLEN = 64
\remarks
* FLD and FSD operations need to make sure the address is 8 bytes aligned,
  otherwise it will cause exception code 4(Load address misaligned) or 6 (Store/AMO address misaligned)
* FLD and FSD do not modify the bits being transferred; in particular, the payloads of non-canonical
NaNs are preserved.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__FPU__Functions_1ga7284e0420eb63c1858739f326695c3d7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_FLOAD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_FLD
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_fpu.h';
      define-mem-desc-line = '212';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Load a float point value from memory into float point register freg using flw/fld instruction.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
* For Single-Precison Floating-Point Mode(__FPU_PRESENT == 1, __RISCV_FLEN == 32):
  It will call \ref __RV_FLW to load a single-precision floating point value from memory to floating point register
* For Double-Precison Floating-Point Mode(__FPU_PRESENT == 2, __RISCV_FLEN == 64):
  It will call \ref __RV_FLD to load a double-precision floating point value from memory to floating point register

\attention
Function behaviour is different for __FPU_PRESENT = 1 or 2, please see the real function this macro represent
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__FPU__Functions_1gafeca0b04cdcb27f77b10f2ece682e4a3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_FSTORE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_FSD
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_fpu.h';
      define-mem-desc-line = '213';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Store a float value from float point freg into memory using fsw/fsd instruction.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
* For Single-Precison Floating-Point Mode(__FPU_PRESENT == 1, __RISCV_FLEN == 32):
  It will call \ref __RV_FSW to store floating point register into memory
* For Double-Precison Floating-Point Mode(__FPU_PRESENT == 2, __RISCV_FLEN == 64):
  It will call \ref __RV_FSD to store floating point register into memory

\attention
Function behaviour is different for __FPU_PRESENT = 1 or 2, please see the real function this macro represent
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__FPU__Functions_1ga84c57d7bc6ecc4dcb457283e84636cb0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SAVE_FPU_CONTEXT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
        rv_fpu_t __fpu_context[20];                                         \
        __RV_FSTORE(FREG(0),  __fpu_context, 0  << LOG_FPREGBYTES);         \
        __RV_FSTORE(FREG(1),  __fpu_context, 1  << LOG_FPREGBYTES);         \
        __RV_FSTORE(FREG(2),  __fpu_context, 2  << LOG_FPREGBYTES);         \
        __RV_FSTORE(FREG(3),  __fpu_context, 3  << LOG_FPREGBYTES);         \
        __RV_FSTORE(FREG(4),  __fpu_context, 4  << LOG_FPREGBYTES);         \
        __RV_FSTORE(FREG(5),  __fpu_context, 5  << LOG_FPREGBYTES);         \
        __RV_FSTORE(FREG(6),  __fpu_context, 6  << LOG_FPREGBYTES);         \
        __RV_FSTORE(FREG(7),  __fpu_context, 7  << LOG_FPREGBYTES);         \
        __RV_FSTORE(FREG(10), __fpu_context, 8  << LOG_FPREGBYTES);         \
        __RV_FSTORE(FREG(11), __fpu_context, 9  << LOG_FPREGBYTES);         \
        __RV_FSTORE(FREG(12), __fpu_context, 10 << LOG_FPREGBYTES);         \
        __RV_FSTORE(FREG(13), __fpu_context, 11 << LOG_FPREGBYTES);         \
        __RV_FSTORE(FREG(14), __fpu_context, 12 << LOG_FPREGBYTES);         \
        __RV_FSTORE(FREG(15), __fpu_context, 13 << LOG_FPREGBYTES);         \
        __RV_FSTORE(FREG(16), __fpu_context, 14 << LOG_FPREGBYTES);         \
        __RV_FSTORE(FREG(17), __fpu_context, 15 << LOG_FPREGBYTES);         \
        __RV_FSTORE(FREG(28), __fpu_context, 16 << LOG_FPREGBYTES);         \
        __RV_FSTORE(FREG(29), __fpu_context, 17 << LOG_FPREGBYTES);         \
        __RV_FSTORE(FREG(30), __fpu_context, 18 << LOG_FPREGBYTES);         \
        __RV_FSTORE(FREG(31), __fpu_context, 19 << LOG_FPREGBYTES);
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_fpu.h';
      define-mem-desc-line = '247';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Save FPU context into variables for interrupt nesting.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
This macro is used to declare variables which are used for saving
FPU context, and it will store the nessary fpu registers into
these variables, it need to be used in a interrupt when in this
interrupt fpu registers are used.
\remarks
- It need to be used together with \ref RESTORE_FPU_CONTEXT
- Don't use variable names __fpu_context in your ISR code
- If you isr code will use fpu registers, and this interrupt is nested.
Then you can do it like this:
@code 
void eclic_mtip_handler(void)
{
    // !!!Interrupt is enabled here!!!
    // !!!Higher priority interrupt could nest it!!!

    // Necessary only when you need to use fpu registers
    // in this isr handler functions
    SAVE_FPU_CONTEXT();

    // put you own interrupt handling code here

    // pair of SAVE_FPU_CONTEXT()
    RESTORE_FPU_CONTEXT();
}
\endcode
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__FPU__Functions_1ga9a78b83eedadc42478e23a10aa8ebc07';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'RESTORE_FPU_CONTEXT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
        __RV_FLOAD(FREG(0),  __fpu_context, 0  << LOG_FPREGBYTES);          \
        __RV_FLOAD(FREG(1),  __fpu_context, 1  << LOG_FPREGBYTES);          \
        __RV_FLOAD(FREG(2),  __fpu_context, 2  << LOG_FPREGBYTES);          \
        __RV_FLOAD(FREG(3),  __fpu_context, 3  << LOG_FPREGBYTES);          \
        __RV_FLOAD(FREG(4),  __fpu_context, 4  << LOG_FPREGBYTES);          \
        __RV_FLOAD(FREG(5),  __fpu_context, 5  << LOG_FPREGBYTES);          \
        __RV_FLOAD(FREG(6),  __fpu_context, 6  << LOG_FPREGBYTES);          \
        __RV_FLOAD(FREG(7),  __fpu_context, 7  << LOG_FPREGBYTES);          \
        __RV_FLOAD(FREG(10), __fpu_context, 8  << LOG_FPREGBYTES);          \
        __RV_FLOAD(FREG(11), __fpu_context, 9  << LOG_FPREGBYTES);          \
        __RV_FLOAD(FREG(12), __fpu_context, 10 << LOG_FPREGBYTES);          \
        __RV_FLOAD(FREG(13), __fpu_context, 11 << LOG_FPREGBYTES);          \
        __RV_FLOAD(FREG(14), __fpu_context, 12 << LOG_FPREGBYTES);          \
        __RV_FLOAD(FREG(15), __fpu_context, 13 << LOG_FPREGBYTES);          \
        __RV_FLOAD(FREG(16), __fpu_context, 14 << LOG_FPREGBYTES);          \
        __RV_FLOAD(FREG(17), __fpu_context, 15 << LOG_FPREGBYTES);          \
        __RV_FLOAD(FREG(28), __fpu_context, 16 << LOG_FPREGBYTES);          \
        __RV_FLOAD(FREG(29), __fpu_context, 17 << LOG_FPREGBYTES);          \
        __RV_FLOAD(FREG(30), __fpu_context, 18 << LOG_FPREGBYTES);          \
        __RV_FLOAD(FREG(31), __fpu_context, 19 << LOG_FPREGBYTES);
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_fpu.h';
      define-mem-desc-line = '278';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Restore necessary fpu registers from variables for interrupt nesting.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
This macro is used restore necessary fpu registers from pre-defined variables
in \ref SAVE_FPU_CONTEXT macro.
\remarks
- It need to be used together with \ref SAVE_FPU_CONTEXT
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    };
    typedef = {
    typedef-member = {
      typedef-mem-kind = 'typedef';
      typedef-mem-id   = 'group__NMSIS__Core__FPU__Functions_1ga2e1e58dd537699f8674a335d64c8705a';
      typedef-mem-virt = normal;
      typedef-mem-prot = public;
      typedef-mem-type = <<_EnD_oF_dEf_TeXt_
uint64_t
_EnD_oF_dEf_TeXt_;
      typedef-mem-name = 'rv_fpu_t';
      typedef-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_fpu.h';
      typedef-mem-desc-line = '215';
      typedef-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Type of FPU register, depends on the FLEN defined in RISC-V.
_EnD_oF_dEf_TeXt_;
      typedef-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* typedef-member */
    };
  file-full-name  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_fpu.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
FPU feature API header file for Nuclei N/NX Core.
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_



_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'core__feature__plic_8h';
  file-name = 'core_feature_plic.h';
    define = {
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__PLIC__Registers_1gaaa66a194bee9ffbefb5a122b8b473918';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PLIC_PRIORITY_OFFSET';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
_AC(0x0000,UL)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_plic.h';
      define-mem-desc-line = '49';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
PLIC Priority register offset.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__PLIC__Registers_1gaedd093925e1333aa285019113f844aa5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PLIC_PRIORITY_SHIFT_PER_SOURCE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_plic.h';
      define-mem-desc-line = '50';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
PLIC Priority register offset shift per source.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__PLIC__Registers_1ga39f6fa966d0f867b3c6de52deb27a9b2';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PLIC_PENDING_OFFSET';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
_AC(0x1000,UL)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_plic.h';
      define-mem-desc-line = '52';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
PLIC Pending register offset.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__PLIC__Registers_1gab029f0de8e345e094c9a2bff174a0f3d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PLIC_PENDING_SHIFT_PER_SOURCE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_plic.h';
      define-mem-desc-line = '53';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
PLIC Pending register offset shift per source.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__PLIC__Registers_1ga33f4421e53caafab040ac1aec75802c5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PLIC_ENABLE_OFFSET';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
_AC(0x2000,UL)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_plic.h';
      define-mem-desc-line = '56';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
PLIC Enable register offset.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__PLIC__Registers_1ga1ef4b8baee74fe03ab9fcb9c0c71cc51';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PLIC_ENABLE_SHIFT_PER_CONTEXT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
7
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_plic.h';
      define-mem-desc-line = '57';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
PLIC Enable register offset shift per context.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__PLIC__Registers_1ga57970fba7064e8ddd9172d3917445be9';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PLIC_THRESHOLD_OFFSET';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
_AC(0x200000,UL)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_plic.h';
      define-mem-desc-line = '59';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
PLIC Threshold register offset.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__PLIC__Registers_1ga43f9f1b4801f33cc9352a1a1e5df895a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PLIC_CLAIM_OFFSET';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
_AC(0x200004,UL)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_plic.h';
      define-mem-desc-line = '60';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
PLIC Claim register offset.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__PLIC__Registers_1gadc18ccfc5e82e1c8df886e0556a9cab0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PLIC_THRESHOLD_SHIFT_PER_CONTEXT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
12
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_plic.h';
      define-mem-desc-line = '61';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
PLIC Threshold register offset shift per context.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__PLIC__Registers_1gafd0e4162de4d7d498857af6b23f4650e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PLIC_CLAIM_SHIFT_PER_CONTEXT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
12
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_plic.h';
      define-mem-desc-line = '62';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
PLIC Claim register offset shift per context.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__PLIC__Registers_1gaaf2bf9ecb3d69d1cdd521e44d0ec29e9';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PLIC_BASE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__PLIC_BASEADDR
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_plic.h';
      define-mem-desc-line = '70';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
PLIC Base Address.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__PLIC__Registers_1ga84bdc8fbc069af26676ae9afca0a667b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PLIC_GetHartID';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(__get_hart_index())
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_plic.h';
      define-mem-desc-line = '80';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
PLIC_GetHartID() is used to get plic hartid which might not be the same as cpu hart id,
for example, cpu hartid may be 1, but plic hartid may be 0, then plic hartid offset is 1.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
If defined __PLIC_HARTID, it will use __PLIC_HARTID as plic hartid,
otherwise, it will use __get_hart_index().
The cpu hartid is get by using __get_hart_id function
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__PLIC__Registers_1ga2aa8ece682b3fdda22c82655fc7120a2';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PLIC_GetHartID_S';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(__get_hart_index_s())
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_plic.h';
      define-mem-desc-line = '81';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__PLIC__Registers_1ga147f329dd875c34c87e368626a73597f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PLIC_GetHartMContextID';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(PLIC_GetHartID() << 1)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_plic.h';
      define-mem-desc-line = '87';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__PLIC__Registers_1ga17220f413ad5a816c2f414ce2eae2c52';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PLIC_GetHartSContextID';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
((PLIC_GetHartID_S() << 1) + 1)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_plic.h';
      define-mem-desc-line = '89';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__PLIC__Registers_1ga0dd79742e331267c2effda978f02ac8a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PLIC_PRIORITY_REGADDR';
      define-mem-param  = {
        define-mem-def-name = 'source';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
((PLIC_BASE) + (PLIC_PRIORITY_OFFSET)  + ((source) << PLIC_PRIORITY_SHIFT_PER_SOURCE))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_plic.h';
      define-mem-desc-line = '91';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__PLIC__Registers_1ga0da86d7fb7d09a34eb538afc29f8b528';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PLIC_PENDING_REGADDR';
      define-mem-param  = {
        define-mem-def-name = 'source';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
((PLIC_BASE) + (PLIC_PENDING_OFFSET)   + (((source) >> 5) * 4))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_plic.h';
      define-mem-desc-line = '92';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__PLIC__Registers_1ga5445e184bef7e74c1a396ac20eafd617';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PLIC_ENABLE_REGADDR';
      define-mem-param  = {
        define-mem-def-name = 'ctxid';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'source';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
((PLIC_BASE) + (PLIC_ENABLE_OFFSET)    + ((ctxid) << PLIC_ENABLE_SHIFT_PER_CONTEXT) + ((source) >> 5) * 4)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_plic.h';
      define-mem-desc-line = '93';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__PLIC__Registers_1ga6fc368647f4e2d3dcf0c584fcd16b1db';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PLIC_THRESHOLD_REGADDR';
      define-mem-param  = {
        define-mem-def-name = 'ctxid';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
((PLIC_BASE) + (PLIC_THRESHOLD_OFFSET) + ((ctxid) << PLIC_THRESHOLD_SHIFT_PER_CONTEXT))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_plic.h';
      define-mem-desc-line = '94';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__PLIC__Registers_1gaa811818d4fbcb31e0dd8b36388fe956e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PLIC_CLAIM_REGADDR';
      define-mem-param  = {
        define-mem-def-name = 'ctxid';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
((PLIC_BASE) + (PLIC_CLAIM_OFFSET) + ((ctxid) << PLIC_CLAIM_SHIFT_PER_CONTEXT))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_plic.h';
      define-mem-desc-line = '95';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__PLIC__Registers_1gabb9225a6be2ad0224c85b554b1497b3a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PLIC_COMPLETE_REGADDR';
      define-mem-param  = {
        define-mem-def-name = 'ctxid';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(PLIC_CLAIM_REGADDR(ctxid))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_plic.h';
      define-mem-desc-line = '96';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntPlic_1ga55d68a172607481586020a7d6d83c84c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PLIC_Init';
      define-mem-param  = {
        define-mem-def-name = 'num_sources';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'enable';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'thresh';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
PLIC_Context_Init(PLIC_GetHartMContextID(), (num_sources), (enable), (thresh))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_plic.h';
      define-mem-desc-line = '365';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntPlic_1ga0d5ca0fa6ba4965f4fc9b817ca234431';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PLIC_Init_S';
      define-mem-param  = {
        define-mem-def-name = 'num_sources';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'enable';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'thresh';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
PLIC_Context_Init(PLIC_GetHartSContextID(), (num_sources), (enable), (thresh))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_plic.h';
      define-mem-desc-line = '366';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntPlic_1gac66856f13aad699a1286e92df3154ef2';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PLIC_ClaimInterrupt';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
PLIC_ClaimContextInterrupt(PLIC_GetHartMContextID())
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_plic.h';
      define-mem-desc-line = '368';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntPlic_1gad2916e76fe181f9e8c0fd6f60e30e700';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PLIC_ClaimInterrupt_S';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
PLIC_ClaimContextInterrupt(PLIC_GetHartSContextID())
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_plic.h';
      define-mem-desc-line = '369';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntPlic_1ga766feec803d4853c7c4e73e49c53c5c8';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PLIC_CompleteInterrupt';
      define-mem-param  = {
        define-mem-def-name = 'source';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
PLIC_CompleteContextInterrupt(PLIC_GetHartMContextID(), (source))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_plic.h';
      define-mem-desc-line = '371';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntPlic_1ga7f158068c28431ecfd46a42f431949be';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PLIC_CompleteInterrupt_S';
      define-mem-param  = {
        define-mem-def-name = 'source';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
PLIC_CompleteContextInterrupt(PLIC_GetHartSContextID(), (source))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_plic.h';
      define-mem-desc-line = '372';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntPlic_1gaef4fcd24e23acf805fa2054635485ba0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PLIC_GetInterruptEnable';
      define-mem-param  = {
        define-mem-def-name = 'source';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
PLIC_GetContextInterruptEnable(PLIC_GetHartMContextID(), (source))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_plic.h';
      define-mem-desc-line = '374';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntPlic_1ga04ccf93ad5407ce04caa7e7403397d3b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PLIC_GetInterruptEnable_S';
      define-mem-param  = {
        define-mem-def-name = 'source';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
PLIC_GetContextInterruptEnable(PLIC_GetHartSContextID(), (source))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_plic.h';
      define-mem-desc-line = '375';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntPlic_1ga13e823cd160a6105fa71fa78f31e520b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PLIC_EnableInterrupt';
      define-mem-param  = {
        define-mem-def-name = 'source';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
PLIC_EnableContextInterrupt(PLIC_GetHartMContextID(), (source))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_plic.h';
      define-mem-desc-line = '377';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntPlic_1gaef90631814f83a8aa35e0f0407a15ad9';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PLIC_EnableInterrupt_S';
      define-mem-param  = {
        define-mem-def-name = 'source';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
PLIC_EnableContextInterrupt(PLIC_GetHartSContextID(), (source))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_plic.h';
      define-mem-desc-line = '378';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntPlic_1gaf97c3bcca99324428301b189fa96df65';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PLIC_DisableInterrupt';
      define-mem-param  = {
        define-mem-def-name = 'source';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
PLIC_DisableContextInterrupt(PLIC_GetHartMContextID(), (source))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_plic.h';
      define-mem-desc-line = '380';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntPlic_1gacb6d64cd242862849986d8412646f7bc';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PLIC_DisableInterrupt_S';
      define-mem-param  = {
        define-mem-def-name = 'source';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
PLIC_DisableContextInterrupt(PLIC_GetHartSContextID(), (source))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_plic.h';
      define-mem-desc-line = '381';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntPlic_1gaed62d0d5eb4c621eeb4bcbe3d26d3f63';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PLIC_SetThreshold';
      define-mem-param  = {
        define-mem-def-name = 'source';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'thresh';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
PLIC_SetContextThreshold(PLIC_GetHartMContextID(), (source), (thresh))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_plic.h';
      define-mem-desc-line = '383';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntPlic_1ga7e876b770206a48a813b3e0ae792cb0d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PLIC_SetThreshold_S';
      define-mem-param  = {
        define-mem-def-name = 'source';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'thresh';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
PLIC_SetContextThreshold(PLIC_GetHartSContextID(), (source), (thresh))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_plic.h';
      define-mem-desc-line = '384';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntPlic_1ga93dcd0f9db8a5dcfe922761d00211ada';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PLIC_GetThreshold';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
PLIC_GetContextThreshold(PLIC_GetHartMContextID())
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_plic.h';
      define-mem-desc-line = '386';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntPlic_1ga7148bc84ec4c1c158048c9a963b11ec9';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PLIC_GetThreshold_S';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
PLIC_GetContextThreshold(PLIC_GetHartSContextID())
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_plic.h';
      define-mem-desc-line = '387';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    };
    func = {
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntPlic_1ga2fa0259ac020509ee618844bbc2debb7';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'PLIC_SetContextThreshold';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'ctxid';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'thresh';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_plic.h';
      func-mem-desc-line = '119';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set priority threshold value of plic for selected context.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function set priority threshold value of plic for selected context.
@param [in]    ctxid     selected context id
@param [in]    thresh    threshold value
\remarks
\sa
- \ref PLIC_GetContextThreshold
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__plic_8h_1ga6fc368647f4e2d3dcf0c584fcd16b1db';
        func-mem-ref-line = '94';
        func-mem-ref-name = 'PLIC_THRESHOLD_REGADDR';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__plic_8h_1ga60391a5086379925c1adb35ca2bca29b';
        func-mem-ref-line = '351';
        func-mem-ref-name = 'PLIC_Context_Init';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntPlic_1gaf75e8316cb3ea7a3800287be812e25d1';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'PLIC_GetContextThreshold';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'ctxid';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_plic.h';
      func-mem-desc-line = '136';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get priority threshold value of plic for selected context.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function get priority threshold value of plic for selected context.
@param [in]    ctxid     selected context id
\return priority threshold value for selected context
\remarks
\sa
- \ref PLIC_SetContextThreshold
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__plic_8h_1ga6fc368647f4e2d3dcf0c584fcd16b1db';
        func-mem-ref-line = '94';
        func-mem-ref-name = 'PLIC_THRESHOLD_REGADDR';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntPlic_1ga3d66186cbcff8deaa23ab35575b75d3b';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'PLIC_EnableContextInterrupt';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'ctxid';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'source';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_plic.h';
      func-mem-desc-line = '153';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Enable interrupt of selected source plic for selected context.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function enable interrupt of selected source plic for selected context.
@param [in]    ctxid     selected context id
@param [in]    source    interrupt source
\remarks
\sa
- \ref PLIC_DisableContextInterrupt
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__plic_8h_1ga5445e184bef7e74c1a396ac20eafd617';
        func-mem-ref-line = '93';
        func-mem-ref-name = 'PLIC_ENABLE_REGADDR';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__plic_8h_1ga60391a5086379925c1adb35ca2bca29b';
        func-mem-ref-line = '351';
        func-mem-ref-name = 'PLIC_Context_Init';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntPlic_1gac3a325ccb93ad9cf220834092ad44552';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'PLIC_DisableContextInterrupt';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'ctxid';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'source';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_plic.h';
      func-mem-desc-line = '172';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Disable interrupt of selected source plic for selected context.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function disable interrupt of selected source plic for selected context
@param [in]    ctxid     selected context id
@param [in]    source    interrupt source
\remarks
\sa
- \ref PLIC_EnableContextInterrupt
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__plic_8h_1ga5445e184bef7e74c1a396ac20eafd617';
        func-mem-ref-line = '93';
        func-mem-ref-name = 'PLIC_ENABLE_REGADDR';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__plic_8h_1ga60391a5086379925c1adb35ca2bca29b';
        func-mem-ref-line = '351';
        func-mem-ref-name = 'PLIC_Context_Init';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntPlic_1ga39781d4ffd169005972e5191b1793b7a';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'PLIC_GetContextInterruptEnable';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'ctxid';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'source';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_plic.h';
      func-mem-desc-line = '193';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get interrupt enable status of selected source plic for selected context.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function get interrupt enable of selected source plic for selected context.
@param [in]    ctxid     selected context id
@param [in]    source    interrupt source
\return enable status for selected interrupt source for selected context
\remarks
\sa
- \ref PLIC_EnableContextInterrupt
- \ref PLIC_DisableContextInterrupt
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__plic_8h_1ga5445e184bef7e74c1a396ac20eafd617';
        func-mem-ref-line = '93';
        func-mem-ref-name = 'PLIC_ENABLE_REGADDR';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntPlic_1ga0f7b1cd369025295d57363912395dd6d';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'PLIC_SetInterruptPending';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'source';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_plic.h';
      func-mem-desc-line = '212';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set interrupt pending of selected source plic.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function set interrupt pending of selected source plic.
@param [in]    source    interrupt source
\remarks
\sa
- \ref PLIC_GetInterruptPending
- \ref PLIC_CLearInterruptPending
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__plic_8h_1ga0da86d7fb7d09a34eb538afc29f8b528';
        func-mem-ref-line = '92';
        func-mem-ref-name = 'PLIC_PENDING_REGADDR';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntPlic_1ga7d45b25ef6c70c0ad699b1097623ddd4';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'PLIC_ClearInterruptPending';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'source';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_plic.h';
      func-mem-desc-line = '231';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Clear interrupt pending of selected source plic.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function clear interrupt pending of selected source plic
@param [in]    source    interrupt source
\remarks
\sa
- \ref PLIC_SetInterruptPending
- \ref PLIC_GetInterruptPending
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__plic_8h_1ga0da86d7fb7d09a34eb538afc29f8b528';
        func-mem-ref-line = '92';
        func-mem-ref-name = 'PLIC_PENDING_REGADDR';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntPlic_1ga1f27b6b28f2821cf69a3b2a7a77fa383';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'PLIC_GetInterruptPending';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'source';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_plic.h';
      func-mem-desc-line = '251';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get interrupt pending status of selected source plic.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function get interrupt pending of selected source plic
@param [in]    source    interrupt source
\return interrupt pending status for selected interrupt source
\remarks
\sa
- \ref PLIC_SetInterruptPending
- \ref PLIC_ClearInterruptPending
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__plic_8h_1ga0da86d7fb7d09a34eb538afc29f8b528';
        func-mem-ref-line = '92';
        func-mem-ref-name = 'PLIC_PENDING_REGADDR';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntPlic_1ga6947b9d2e1ef61d54f5a09f8537a4c27';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'PLIC_SetPriority';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'source';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'priority';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_plic.h';
      func-mem-desc-line = '270';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set interrupt priority for selected source plic.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function set interrupt priority for selected source plic.
@param [in]    source    interrupt source
@param [in]    priority  interrupt priority
\remarks
\sa
- \ref PLIC_GetPriority
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__plic_8h_1ga0dd79742e331267c2effda978f02ac8a';
        func-mem-ref-line = '91';
        func-mem-ref-name = 'PLIC_PRIORITY_REGADDR';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'system__Device_8c_1gaa6d9a05c4ea29dce5179b6d4e26bb9a5';
        func-mem-ref-line = '1143';
        func-mem-ref-name = 'PLIC_Register_IRQ';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'system__Device_8c_1gadec79146bddf812bc9c38bebdbf9dd6d';
        func-mem-ref-line = '1174';
        func-mem-ref-name = 'PLIC_Register_IRQ_S';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntPlic_1ga682a9a65be768cd73e8488fd0d212103';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'PLIC_GetPriority';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'source';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_plic.h';
      func-mem-desc-line = '287';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get interrupt priority for selected source plic.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function get interrupt priority for selected source plic.
@param [in]    source    interrupt source
@param [in]    priority  interrupt priority
\remarks
\sa
- \ref PLIC_SetPriority
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__plic_8h_1ga0dd79742e331267c2effda978f02ac8a';
        func-mem-ref-line = '91';
        func-mem-ref-name = 'PLIC_PRIORITY_REGADDR';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntPlic_1ga07a69b428d145c7cf521f7480349e0c5';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'PLIC_ClaimContextInterrupt';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'ctxid';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_plic.h';
      func-mem-desc-line = '308';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Claim interrupt for plic for selected context.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function claim interrupt for plic for selected context.
@param [in]    ctxid     selected context id
\return  the ID of the highest priority pending interrupt or
     zero if there is no pending interrupt
\remarks
A successful claim will also atomically clear the corresponding pending bit
on the interrupt source. The PLIC can perform a claim at any time and the
claim operation is not affected by the setting of the priority threshold register.
\sa
- \ref PLIC_CompleteContextInterrupt
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__plic_8h_1gaa811818d4fbcb31e0dd8b36388fe956e';
        func-mem-ref-line = '95';
        func-mem-ref-name = 'PLIC_CLAIM_REGADDR';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntPlic_1ga3335f0fd89a1cb7e2b21da1dd1354646';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'PLIC_CompleteContextInterrupt';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'ctxid';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'source';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_plic.h';
      func-mem-desc-line = '332';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Complete interrupt for plic for selected context.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function complete interrupt for plic for selected context.
@param [in]    ctxid     selected context id
\return  the ID of the highest priority pending interrupt or
     zero if there is no pending interrupt
\remarks
The PLIC signals it has completed executing an interrupt handler by writing
the interrupt ID it received from the claim to the claim/complete register.
The PLIC does not check whether the completion ID is the same as the last
claim ID for that context.
If the completion ID does not match an interrupt source that is currently
enabled for the context, the completion is silently ignored.
\sa
- \ref PLIC_ClaimContextInterrupt
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__plic_8h_1gabb9225a6be2ad0224c85b554b1497b3a';
        func-mem-ref-line = '96';
        func-mem-ref-name = 'PLIC_COMPLETE_REGADDR';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntPlic_1ga60391a5086379925c1adb35ca2bca29b';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'PLIC_Context_Init';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'ctxid';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'num_sources';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'enable';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'thresh';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_plic.h';
      func-mem-desc-line = '351';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Perform init for plic for selected context.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function perform initialization steps for plic for selected context.
@param [in]    ctxid           selected context id
@param [in]    num_sources     plic interrupt source count number
@param [in]    enable          plic interrupt enable or not
@param [in]    thresh          plic interrupt threshold
\remarks
* Disable all interrupts
* Set priority threshold to value specified by thresh
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__plic_8h_1gac3a325ccb93ad9cf220834092ad44552';
        func-mem-ref-line = '172';
        func-mem-ref-name = 'PLIC_DisableContextInterrupt';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__plic_8h_1ga3d66186cbcff8deaa23ab35575b75d3b';
        func-mem-ref-line = '153';
        func-mem-ref-name = 'PLIC_EnableContextInterrupt';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__plic_8h_1ga2fa0259ac020509ee618844bbc2debb7';
        func-mem-ref-line = '119';
        func-mem-ref-name = 'PLIC_SetContextThreshold';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntPlic_1ga3354fc3abe055bb23b19a4eddcd443de';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__set_trap_entry';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_plic.h';
      func-mem-desc-line = '399';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set Trap entry address.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function set trap entry address to 'CSR_MTVEC'.
@param [in]      addr  trap entry address
\remarks
- This function use to set trap entry address to 'CSR_MTVEC'.
\sa
- \ref __get_trap_entry
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga22f5cd17199a966b4b840dd56d151216';
        func-mem-ref-line = '632';
        func-mem-ref-name = 'CSR_MTVEC';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntPlic_1ga3e00f620035d7da1775d8086ba5dafd2';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE rv_csr_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__get_trap_entry';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_plic.h';
      func-mem-desc-line = '415';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get trap entry address.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function get trap entry address from 'CSR_MTVEC'.
\return       trap entry address
\remarks
- This function use to get trap entry address from 'CSR_MTVEC'.
\sa
- \ref __set_trap_entry
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '642';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga22f5cd17199a966b4b840dd56d151216';
        func-mem-ref-line = '632';
        func-mem-ref-name = 'CSR_MTVEC';
    };
    }; /* func-member */
    };
  file-full-name  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_plic.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
PLIC feature API header file for RISC-V Core.
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_



_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'core__feature__pma_8h';
  file-name = 'core_feature_pma.h';
    define = {
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__PMA__Functions_1ga6c41df5568ab2390243a88f4e0ff1a92';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PMA_REGION_TYPE_SECSHARE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1UL << 3)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_pma.h';
      define-mem-desc-line = '53';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set this region shareable between secure world and non-secure world, or else default is invalid.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__PMA__Functions_1gab913aea8d1a48c7ec9cdb32d498b2c10';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PMA_REGION_TYPE_NC';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1UL << 2)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_pma.h';
      define-mem-desc-line = '54';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set this region Non-Cacheable, or else default is invalid.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__PMA__Functions_1gacaea3faf75fa5f049ab03977c17ff085';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PMA_REGION_TYPE_DEV';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1UL << 1)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_pma.h';
      define-mem-desc-line = '55';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set this region Device, or else default is invalid.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__PMA__Functions_1gab6097089421dfae829252cc6367aeecd';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PMA_REGION_TYPE_CA';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_pma.h';
      define-mem-desc-line = '56';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set this region Cacheable, which is default.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__PMA__Functions_1ga449349afbf38ad771ba301cb26406caf';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PMA_REGION_ENA';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1UL << 0)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_pma.h';
      define-mem-desc-line = '57';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Enable this region, then the region type will take effect.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__PMA__Functions_1gafbca9888a4414a8515bed96091926ffa';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PMA_REGION_DIS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_pma.h';
      define-mem-desc-line = '58';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Disable this region.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    };
    func = {
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__PMA__Functions_1ga9abb7b023f70b051c8fbe2ac78b0f7fa';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'PMA_SetRegion';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'entry_idx';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
pma_config *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'pma_cfg';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_pma.h';
      func-mem-desc-line = '99';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Configure one region in machine mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Set the region(0-n) info of base address/region type/region size/enable status
@param [in]    entry_idx    Index(0-n) of paired mattri(n)_mask and mattri(n)_base
@param [in]    pma_cfg      Region info to configure
\return  -1 failure, else 0 success
\remarks
- The entry_idx(0-n) depends on number of paired mattri(n)_mask and mattri(n)_base, refer to
  Nuclei ISA specifications
- Not all the entry_idx(0-n) could set to all the types freely, refer to Nuclei ISA specifications
- The mattri(n)_mask must be written first, before mattri(n)_base, which the api takes care of.
- The higher bits of mattri(n)_mask should be continuously 1, the remaining lower bits should be all 0
  and the number (N) of 0 means the size of this region(2^N bytes)
- Region granularity is 4KB, so the low 12-bits of mattri(n)_mask must be 0, which the api takes care of
- The regions can be overlapped as the prority: Non-Cacheable > Cacheable > Device, but especially be careful not to
  overlap software's instruction/data sections by Device, or overlap Device(like uart) memory by Cacheable
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaaa28d62120f9a975757bd2a762fce1ba';
        func-mem-ref-line = '1011';
        func-mem-ref-name = 'CSR_MATTRI0_BASE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga9382655ddfcbdb5320a1e4e8500b1745';
        func-mem-ref-line = '1012';
        func-mem-ref-name = 'CSR_MATTRI0_MASK';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gad42c2145f20ae8968857e8095e3239c9';
        func-mem-ref-line = '1013';
        func-mem-ref-name = 'CSR_MATTRI1_BASE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gadb5f4efa74d941ead38b471551ec012e';
        func-mem-ref-line = '1014';
        func-mem-ref-name = 'CSR_MATTRI1_MASK';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga55009dada9deee5754aea2a1511345b9';
        func-mem-ref-line = '1015';
        func-mem-ref-name = 'CSR_MATTRI2_BASE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga7615555a070a20572e6104383fafd499';
        func-mem-ref-line = '1016';
        func-mem-ref-name = 'CSR_MATTRI2_MASK';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga5fb56d520418e835c8718b023bf04d48';
        func-mem-ref-line = '1017';
        func-mem-ref-name = 'CSR_MATTRI3_BASE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga43d810a75f84e220d839a4a08a188dff';
        func-mem-ref-line = '1018';
        func-mem-ref-name = 'CSR_MATTRI3_MASK';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga8bfe9adbc144f9ab35a706d66597f987';
        func-mem-ref-line = '1019';
        func-mem-ref-name = 'CSR_MATTRI4_BASE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga22cdf04247386bb3c566d11e487e70e6';
        func-mem-ref-line = '1020';
        func-mem-ref-name = 'CSR_MATTRI4_MASK';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga4817c790b13c2c75cf739ca4d886d322';
        func-mem-ref-line = '1021';
        func-mem-ref-name = 'CSR_MATTRI5_BASE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga8cea5688d9efaaecada7edc5e9d643a8';
        func-mem-ref-line = '1022';
        func-mem-ref-name = 'CSR_MATTRI5_MASK';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga0c99e102b848a75f1b7b1b7776ecd1e9';
        func-mem-ref-line = '1023';
        func-mem-ref-name = 'CSR_MATTRI6_BASE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga659bcd2a14fd0d88821e909a634f2668';
        func-mem-ref-line = '1024';
        func-mem-ref-name = 'CSR_MATTRI6_MASK';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga1b27494475e2d6b7cf60b79e0e236b5d';
        func-mem-ref-line = '1025';
        func-mem-ref-name = 'CSR_MATTRI7_BASE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gab8278cb2def6dceaeca759bdbd7e4ef3';
        func-mem-ref-line = '1026';
        func-mem-ref-name = 'CSR_MATTRI7_MASK';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__pma_8h_1a4088b4572e7b416bef628c75fd392f1e';
        func-mem-ref-line = '64';
        func-mem-ref-name = 'pma_config::region_base';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__pma_8h_1a563ebc36c226f9639695464dc70cf7c9';
        func-mem-ref-line = '79';
        func-mem-ref-name = 'pma_config::region_enable';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__pma_8h_1ad25354f7c4fbcdd1f144726b732f23fd';
        func-mem-ref-line = '68';
        func-mem-ref-name = 'pma_config::region_size';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__pma_8h_1a4b6762ec3aa81bd46fe46b02a10b0d6c';
        func-mem-ref-line = '75';
        func-mem-ref-name = 'pma_config::region_type';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__PMA__Functions_1gab5a3a608cd726a10cab2afede8692db8';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'PMA_GetRegion';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'entry_idx';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
pma_config *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'pma_cfg';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_pma.h';
      func-mem-desc-line = '139';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get the region info in machine mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Read the region(0-n) info of base address/region type/region size/enable status
@param [in]    entry_idx    Index(0-n) of paired mattri(n)_mask and mattri(n)_base
@param [out]   pma_cfg      Region info read
\return  0 if success, else -1
\remarks
- entry_idx(0-n) depends on number of paired mattri(n)_mask and mattri(n)_base, refer to
  Nuclei ISA specifications
- Not all the entry_idx(0-n) could set to all the types freely, refer to Nuclei ISA specifications
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__compatiable_8h_1ga211738702768401adf8308c35e854ef3';
        func-mem-ref-line = '257';
        func-mem-ref-name = '__CTZ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '642';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaaa28d62120f9a975757bd2a762fce1ba';
        func-mem-ref-line = '1011';
        func-mem-ref-name = 'CSR_MATTRI0_BASE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga9382655ddfcbdb5320a1e4e8500b1745';
        func-mem-ref-line = '1012';
        func-mem-ref-name = 'CSR_MATTRI0_MASK';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gad42c2145f20ae8968857e8095e3239c9';
        func-mem-ref-line = '1013';
        func-mem-ref-name = 'CSR_MATTRI1_BASE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gadb5f4efa74d941ead38b471551ec012e';
        func-mem-ref-line = '1014';
        func-mem-ref-name = 'CSR_MATTRI1_MASK';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga55009dada9deee5754aea2a1511345b9';
        func-mem-ref-line = '1015';
        func-mem-ref-name = 'CSR_MATTRI2_BASE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga7615555a070a20572e6104383fafd499';
        func-mem-ref-line = '1016';
        func-mem-ref-name = 'CSR_MATTRI2_MASK';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga5fb56d520418e835c8718b023bf04d48';
        func-mem-ref-line = '1017';
        func-mem-ref-name = 'CSR_MATTRI3_BASE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga43d810a75f84e220d839a4a08a188dff';
        func-mem-ref-line = '1018';
        func-mem-ref-name = 'CSR_MATTRI3_MASK';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga8bfe9adbc144f9ab35a706d66597f987';
        func-mem-ref-line = '1019';
        func-mem-ref-name = 'CSR_MATTRI4_BASE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga22cdf04247386bb3c566d11e487e70e6';
        func-mem-ref-line = '1020';
        func-mem-ref-name = 'CSR_MATTRI4_MASK';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga4817c790b13c2c75cf739ca4d886d322';
        func-mem-ref-line = '1021';
        func-mem-ref-name = 'CSR_MATTRI5_BASE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga8cea5688d9efaaecada7edc5e9d643a8';
        func-mem-ref-line = '1022';
        func-mem-ref-name = 'CSR_MATTRI5_MASK';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga0c99e102b848a75f1b7b1b7776ecd1e9';
        func-mem-ref-line = '1023';
        func-mem-ref-name = 'CSR_MATTRI6_BASE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga659bcd2a14fd0d88821e909a634f2668';
        func-mem-ref-line = '1024';
        func-mem-ref-name = 'CSR_MATTRI6_MASK';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga1b27494475e2d6b7cf60b79e0e236b5d';
        func-mem-ref-line = '1025';
        func-mem-ref-name = 'CSR_MATTRI7_BASE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gab8278cb2def6dceaeca759bdbd7e4ef3';
        func-mem-ref-line = '1026';
        func-mem-ref-name = 'CSR_MATTRI7_MASK';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__pma_8h_1a4088b4572e7b416bef628c75fd392f1e';
        func-mem-ref-line = '64';
        func-mem-ref-name = 'pma_config::region_base';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__pma_8h_1a563ebc36c226f9639695464dc70cf7c9';
        func-mem-ref-line = '79';
        func-mem-ref-name = 'pma_config::region_enable';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__pma_8h_1ad25354f7c4fbcdd1f144726b732f23fd';
        func-mem-ref-line = '68';
        func-mem-ref-name = 'pma_config::region_size';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__pma_8h_1a4b6762ec3aa81bd46fe46b02a10b0d6c';
        func-mem-ref-line = '75';
        func-mem-ref-name = 'pma_config::region_type';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__PMA__Functions_1gaeec2d0e18906c33d8fef4dc5a609bb96';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'PMA_SetRegion_S';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'entry_idx';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
pma_config *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'pma_cfg';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_pma.h';
      func-mem-desc-line = '181';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Configure one region for Secure S-Mode world to share with Non-Secure S-Mode world.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Set the region(0-7) info of base address/region size/enable status
@param [in]    entry_idx    Index(0-7) of paired sattri(n)_mask and sattri(n)_base
@param [in]    pma_cfg      Region info to configure
\return  0 if success, else -1
\remarks
- sattri(n)_mask must be written first, before sattri(n)_base, which the api takes care of
- The higher bits of sattri(n)_mask should be continuously 1, the remaining lower bits should be all 0
  and the number (N) of 0 means the size of this region(2^N bytes)
- Region granularity is 4KB, so the low 12-bits of sattri(n)_mask must be 0, which the api takes care of
- Unlike mattri(n)_base, there's no DEV Region/NC Region/CA Region type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga9558c70b91bde6cfb0f3185a84c6d197';
        func-mem-ref-line = '1027';
        func-mem-ref-name = 'CSR_SATTRI0_BASE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga34cc0848d3c784acb4041c775079b2db';
        func-mem-ref-line = '1028';
        func-mem-ref-name = 'CSR_SATTRI0_MASK';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga1190f7f25e3ea11fff678c8c6f4a6d60';
        func-mem-ref-line = '1029';
        func-mem-ref-name = 'CSR_SATTRI1_BASE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga0ba3514dafcba3f0ecae2eec87f70aba';
        func-mem-ref-line = '1030';
        func-mem-ref-name = 'CSR_SATTRI1_MASK';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gadced76c9c649187ee84b6efe25c9e141';
        func-mem-ref-line = '1031';
        func-mem-ref-name = 'CSR_SATTRI2_BASE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gabeb67302bc57561d8a331fb3f6cf56ef';
        func-mem-ref-line = '1032';
        func-mem-ref-name = 'CSR_SATTRI2_MASK';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga3dfb9c7d04428e1a98877da57f5b9ec1';
        func-mem-ref-line = '1033';
        func-mem-ref-name = 'CSR_SATTRI3_BASE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga1dc69ba784813e545e4533847003dd06';
        func-mem-ref-line = '1034';
        func-mem-ref-name = 'CSR_SATTRI3_MASK';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga7a641639e1603a43bbd537ef467ce343';
        func-mem-ref-line = '1035';
        func-mem-ref-name = 'CSR_SATTRI4_BASE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaf2835f15193280f7b6ea3e03cf471a85';
        func-mem-ref-line = '1036';
        func-mem-ref-name = 'CSR_SATTRI4_MASK';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga4b790f491ae6e18fa6cab10dd24d88ff';
        func-mem-ref-line = '1037';
        func-mem-ref-name = 'CSR_SATTRI5_BASE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaa30fe8bd2002e989b2c471861a16410a';
        func-mem-ref-line = '1038';
        func-mem-ref-name = 'CSR_SATTRI5_MASK';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaa385706fc547166be18f7bdf62027f51';
        func-mem-ref-line = '1039';
        func-mem-ref-name = 'CSR_SATTRI6_BASE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaf5aaf643ed0c9aefcbb16d90ed17a584';
        func-mem-ref-line = '1040';
        func-mem-ref-name = 'CSR_SATTRI6_MASK';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gac31b3d4ee730381ded07f8ede621d9c9';
        func-mem-ref-line = '1041';
        func-mem-ref-name = 'CSR_SATTRI7_BASE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga6ee9957dfb3d2ca375060f1ee3003bf3';
        func-mem-ref-line = '1042';
        func-mem-ref-name = 'CSR_SATTRI7_MASK';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__pma_8h_1a4088b4572e7b416bef628c75fd392f1e';
        func-mem-ref-line = '64';
        func-mem-ref-name = 'pma_config::region_base';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__pma_8h_1a563ebc36c226f9639695464dc70cf7c9';
        func-mem-ref-line = '79';
        func-mem-ref-name = 'pma_config::region_enable';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__pma_8h_1ad25354f7c4fbcdd1f144726b732f23fd';
        func-mem-ref-line = '68';
        func-mem-ref-name = 'pma_config::region_size';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__PMA__Functions_1ga49870460aa6f6e52002b87cc40623c3a';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'PMA_GetRegion_S';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'entry_idx';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
pma_config *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'pma_cfg';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_pma.h';
      func-mem-desc-line = '219';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get the region info of Secure S-Mode world sharing with Non-Secure S-Mode world.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Read the region(0-7) info of base address/region size/enable status
@param [in]    entry_idx    Index(0-7) of paired sattri(n)_mask and sattri(n)_base
@param [out]   pma_cfg      Region info read
\return  0 if success, else -1
\remark
- Unlike mattri(n)_base, there's no DEV Region/NC Region/CA Region type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__compatiable_8h_1ga211738702768401adf8308c35e854ef3';
        func-mem-ref-line = '257';
        func-mem-ref-name = '__CTZ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '642';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga9558c70b91bde6cfb0f3185a84c6d197';
        func-mem-ref-line = '1027';
        func-mem-ref-name = 'CSR_SATTRI0_BASE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga34cc0848d3c784acb4041c775079b2db';
        func-mem-ref-line = '1028';
        func-mem-ref-name = 'CSR_SATTRI0_MASK';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga1190f7f25e3ea11fff678c8c6f4a6d60';
        func-mem-ref-line = '1029';
        func-mem-ref-name = 'CSR_SATTRI1_BASE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga0ba3514dafcba3f0ecae2eec87f70aba';
        func-mem-ref-line = '1030';
        func-mem-ref-name = 'CSR_SATTRI1_MASK';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gadced76c9c649187ee84b6efe25c9e141';
        func-mem-ref-line = '1031';
        func-mem-ref-name = 'CSR_SATTRI2_BASE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gabeb67302bc57561d8a331fb3f6cf56ef';
        func-mem-ref-line = '1032';
        func-mem-ref-name = 'CSR_SATTRI2_MASK';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga3dfb9c7d04428e1a98877da57f5b9ec1';
        func-mem-ref-line = '1033';
        func-mem-ref-name = 'CSR_SATTRI3_BASE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga1dc69ba784813e545e4533847003dd06';
        func-mem-ref-line = '1034';
        func-mem-ref-name = 'CSR_SATTRI3_MASK';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga7a641639e1603a43bbd537ef467ce343';
        func-mem-ref-line = '1035';
        func-mem-ref-name = 'CSR_SATTRI4_BASE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaf2835f15193280f7b6ea3e03cf471a85';
        func-mem-ref-line = '1036';
        func-mem-ref-name = 'CSR_SATTRI4_MASK';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga4b790f491ae6e18fa6cab10dd24d88ff';
        func-mem-ref-line = '1037';
        func-mem-ref-name = 'CSR_SATTRI5_BASE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaa30fe8bd2002e989b2c471861a16410a';
        func-mem-ref-line = '1038';
        func-mem-ref-name = 'CSR_SATTRI5_MASK';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaa385706fc547166be18f7bdf62027f51';
        func-mem-ref-line = '1039';
        func-mem-ref-name = 'CSR_SATTRI6_BASE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaf5aaf643ed0c9aefcbb16d90ed17a584';
        func-mem-ref-line = '1040';
        func-mem-ref-name = 'CSR_SATTRI6_MASK';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gac31b3d4ee730381ded07f8ede621d9c9';
        func-mem-ref-line = '1041';
        func-mem-ref-name = 'CSR_SATTRI7_BASE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga6ee9957dfb3d2ca375060f1ee3003bf3';
        func-mem-ref-line = '1042';
        func-mem-ref-name = 'CSR_SATTRI7_MASK';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__pma_8h_1a4088b4572e7b416bef628c75fd392f1e';
        func-mem-ref-line = '64';
        func-mem-ref-name = 'pma_config::region_base';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__pma_8h_1a563ebc36c226f9639695464dc70cf7c9';
        func-mem-ref-line = '79';
        func-mem-ref-name = 'pma_config::region_enable';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__pma_8h_1ad25354f7c4fbcdd1f144726b732f23fd';
        func-mem-ref-line = '68';
        func-mem-ref-name = 'pma_config::region_size';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__PMA__Functions_1ga7d41390fe44a9efe561beeaf4112b793';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'PMA_EnableHwDevRegion';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'entry_idx';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_pma.h';
      func-mem-desc-line = '261';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Enable hardware defined Device regions.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Enable Device region by corresponding index
@param [in]    entry_idx    Index(0-7)
\remarks
- This function can be called in M-Mode only.
- When there is no entry_idx, this field is tied to 0
- For each region entry's address/size/attribute detail refers to RTL Configuration Stage
- The regions can be overlapped as the prority: Non-Cacheable > Cacheable > Device, but especially be careful not to
  overlap software's instruction/data sections by Device, or overlap Device(like uart) memory by Cacheable
\sa
- \ref PMA_DisableHwDevRegion
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gafdbd9b5a14b44913675d0fa73ca6716f';
        func-mem-ref-line = '697';
        func-mem-ref-name = '__RV_CSR_SET';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga43b2cc308290b5b25eba8ef078543db5';
        func-mem-ref-line = '1008';
        func-mem-ref-name = 'CSR_MMACRO_DEV_EN';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__PMA__Functions_1gacaf7156814f60f41ba38d78fedf972ce';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'PMA_DisableHwDevRegion';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'entry_idx';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_pma.h';
      func-mem-desc-line = '279';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Disable hardware defined Device regions.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Disable Device region by corresponding index
@param [in]    entry_idx    Index(0-7)
\remarks
- This function can be called in M-Mode only.
- When there is no entry_idx, this field is tied to 0
- For each region entry's address/size/attribute detail refers to RTL Configuration Stage
- The regions can be overlapped as the prority: Non-Cacheable > Cacheable > Device, but especially be careful not to
  overlap software's instruction/data sections by Device, or overlap Device(like uart) memory by Cacheable
\sa
- \ref PMA_EnableHwDevRegion
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga14cf0513f6b576fcd1ff700b08f65543';
        func-mem-ref-line = '734';
        func-mem-ref-name = '__RV_CSR_CLEAR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga43b2cc308290b5b25eba8ef078543db5';
        func-mem-ref-line = '1008';
        func-mem-ref-name = 'CSR_MMACRO_DEV_EN';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__PMA__Functions_1ga0acb75c0112331cfde30b70f2103ece4';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'PMA_EnableHwNCRegion';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'entry_idx';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_pma.h';
      func-mem-desc-line = '297';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Enable hardware defined Non-Cacheable regions.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Enable Non-Cacheable region by corresponding index
@param [in]    entry_idx    Index(0-7)
\remarks
- This function can be called in M-Mode only.
- When there is no entry_idx, this field is tied to 0
- For each region entry's address/size/attribute detail refers to RTL Configuration Stage
- The regions can be overlapped as the prority: Non-Cacheable > Cacheable > Device, but especially be careful not to
  overlap software's instruction/data sections by Device, or overlap Device(like uart) memory by Cacheable
\sa
- \ref PMA_DisableHwNCRegion
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gafdbd9b5a14b44913675d0fa73ca6716f';
        func-mem-ref-line = '697';
        func-mem-ref-name = '__RV_CSR_SET';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaeb51f122ed21702b7a228115bab8b2d7';
        func-mem-ref-line = '1009';
        func-mem-ref-name = 'CSR_MMACRO_NOC_EN';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__PMA__Functions_1ga3683f98e540ff36fe49c098023cd5e14';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'PMA_DisableHwNCRegion';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'entry_idx';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_pma.h';
      func-mem-desc-line = '315';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Disable hardware defined Non-Cacheable regions.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Disable Non-Cacheable region by corresponding index
@param [in]    entry_idx    Index(0-7)
\remarks
- This function can be called in M-Mode only.
- When there is no entry_idx, this field is tied to 0
- For each region entry's address/size/attribute detail refers to RTL Configuration Stage
- The regions can be overlapped as the prority: Non-Cacheable > Cacheable > Device, but especially be careful not to
  overlap software's instruction/data sections by Device, or overlap Device(like uart) memory by Cacheable
\sa
- \ref PMA_EnableHwNCRegion
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga14cf0513f6b576fcd1ff700b08f65543';
        func-mem-ref-line = '734';
        func-mem-ref-name = '__RV_CSR_CLEAR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaeb51f122ed21702b7a228115bab8b2d7';
        func-mem-ref-line = '1009';
        func-mem-ref-name = 'CSR_MMACRO_NOC_EN';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__PMA__Functions_1gaa0e1df51c3be2c23ce053c0bb078aa0c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'PMA_EnableHwCARegion';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'entry_idx';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_pma.h';
      func-mem-desc-line = '333';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Enable hardware defined Cacheable regions.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Enable Cacheable region by corresponding index
@param [in]    entry_idx    Index(0-7)
\remarks
- This function can be called in M-Mode only.
- When there is no entry_idx, this field is tied to 0
- For each region entry's address/size/attribute detail refers to RTL Configuration Stage
- The regions can be overlapped as the prority: Non-Cacheable > Cacheable > Device, but especially be careful not to
  overlap software's instruction/data sections by Device, or overlap Device(like uart) memory by Cacheable
\sa
- \ref PMA_DisableHwCARegion
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gafdbd9b5a14b44913675d0fa73ca6716f';
        func-mem-ref-line = '697';
        func-mem-ref-name = '__RV_CSR_SET';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga00f7f762dded721197b7af91d843307c';
        func-mem-ref-line = '1010';
        func-mem-ref-name = 'CSR_MMACRO_CA_EN';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__PMA__Functions_1ga3b19144355a74edf7b263b1022d6ece3';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'PMA_DisableHwCARegion';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'entry_idx';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_pma.h';
      func-mem-desc-line = '351';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Disable hardware defined Cacheable regions.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Disable Cacheable region by corresponding index
@param [in]    entry_idx    Index(0-7)
\remarks
- This function can be called in M-Mode only.
- When there is no entry_idx, this field is tied to 0
- For each region entry's address/size/attribute detail refers to RTL Configuration Stage
- The regions can be overlapped as the prority: Non-Cacheable > Cacheable > Device, but especially be careful not to
  overlap software's instruction/data sections by Device, or overlap Device(like uart) memory by Cacheable
\sa
- \ref PMA_EnableHwCARegion
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga14cf0513f6b576fcd1ff700b08f65543';
        func-mem-ref-line = '734';
        func-mem-ref-name = '__RV_CSR_CLEAR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga00f7f762dded721197b7af91d843307c';
        func-mem-ref-line = '1010';
        func-mem-ref-name = 'CSR_MMACRO_CA_EN';
    };
    }; /* func-member */
    };
  file-full-name  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_pma.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
Physical memory attribute feature API header file.
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_



_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'core__feature__pmp_8h';
  file-name = 'core_feature_pmp.h';
    func = {
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__PMP__Functions_1ga5c23da25329322f793d38fc759e82c1b';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_INLINE rv_csr_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__get_PMPCFGx';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'csr_idx';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_pmp.h';
      func-mem-desc-line = '89';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get PMPCFGx Register by csr index.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Return the content of the PMPCFGx Register.
@param [in]    csr_idx    PMPCFG CSR index(0-3)
\return                   PMPCFGx Register value
\remark
- For RV64, only csr_idx = 0 and csr_idx = 2 is allowed.
  pmpcfg0 and pmpcfg2 hold the configurations
  for the 16 PMP entries, pmpcfg1 and pmpcfg3 are illegal
- For RV32, pmpcfg0–pmpcfg3, hold the configurations
  pmp0cfg–pmp15cfg for the 16 PMP entries
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '642';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga83987d4e9998a1cca46cd97cf8d809ed';
        func-mem-ref-line = '649';
        func-mem-ref-name = 'CSR_PMPCFG0';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga1a53dfb8b663fc41e8fd7c7b84471eec';
        func-mem-ref-line = '650';
        func-mem-ref-name = 'CSR_PMPCFG1';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga3103e79fb7dc1bc929b55b7daed624cb';
        func-mem-ref-line = '651';
        func-mem-ref-name = 'CSR_PMPCFG2';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga42e3b880f10fb42eb718446a2f3dfa5a';
        func-mem-ref-line = '652';
        func-mem-ref-name = 'CSR_PMPCFG3';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__pmp_8h_1gabf18aa5a4518fc791dfaad084cab69e1';
        func-mem-ref-line = '330';
        func-mem-ref-name = '__get_PMPENTRYx';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__pmp_8h_1gac0530d981d27f1f0a8749e055d32b4dd';
        func-mem-ref-line = '129';
        func-mem-ref-name = '__get_PMPxCFG';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__pmp_8h_1gae7ea6ac8551665dec5e8df52a3a2b51f';
        func-mem-ref-line = '269';
        func-mem-ref-name = '__set_PMPENTRYx';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__pmp_8h_1ga1ac954d27d6ecd10f959d891877a4f93';
        func-mem-ref-line = '169';
        func-mem-ref-name = '__set_PMPxCFG';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__PMP__Functions_1ga097fc81f868e8f2be80ebd68a7c60770';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_INLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__set_PMPCFGx';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'csr_idx';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'pmpcfg';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_pmp.h';
      func-mem-desc-line = '112';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set PMPCFGx by csr index.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Write the given value to the PMPCFGx Register.
@param [in]    csr_idx      PMPCFG CSR index(0-3)
@param [in]    pmpcfg       PMPCFGx Register value to set
\remark
- For RV64, only csr_idx = 0 and csr_idx = 2 is allowed.
  pmpcfg0 and pmpcfg2 hold the configurations
  for the 16 PMP entries, pmpcfg1 and pmpcfg3 are illegal
- For RV32, pmpcfg0–pmpcfg3, hold the configurations
  pmp0cfg–pmp15cfg for the 16 PMP entries
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga83987d4e9998a1cca46cd97cf8d809ed';
        func-mem-ref-line = '649';
        func-mem-ref-name = 'CSR_PMPCFG0';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga1a53dfb8b663fc41e8fd7c7b84471eec';
        func-mem-ref-line = '650';
        func-mem-ref-name = 'CSR_PMPCFG1';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga3103e79fb7dc1bc929b55b7daed624cb';
        func-mem-ref-line = '651';
        func-mem-ref-name = 'CSR_PMPCFG2';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga42e3b880f10fb42eb718446a2f3dfa5a';
        func-mem-ref-line = '652';
        func-mem-ref-name = 'CSR_PMPCFG3';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__pmp_8h_1gae7ea6ac8551665dec5e8df52a3a2b51f';
        func-mem-ref-line = '269';
        func-mem-ref-name = '__set_PMPENTRYx';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__pmp_8h_1ga1ac954d27d6ecd10f959d891877a4f93';
        func-mem-ref-line = '169';
        func-mem-ref-name = '__set_PMPxCFG';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__PMP__Functions_1gac0530d981d27f1f0a8749e055d32b4dd';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_INLINE uint8_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__get_PMPxCFG';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'entry_idx';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_pmp.h';
      func-mem-desc-line = '129';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get 8bit PMPxCFG Register by PMP entry index.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Return the content of the PMPxCFG Register.
@param [in]    entry_idx    PMP region index(0-15)
\return               PMPxCFG Register value
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__pmp_8h_1ga5c23da25329322f793d38fc759e82c1b';
        func-mem-ref-line = '89';
        func-mem-ref-name = '__get_PMPCFGx';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__PMP__Functions_1ga1ac954d27d6ecd10f959d891877a4f93';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_INLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__set_PMPxCFG';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'entry_idx';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'pmpxcfg';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_pmp.h';
      func-mem-desc-line = '169';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set 8bit PMPxCFG by pmp entry index.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Set the given pmpxcfg value to the PMPxCFG Register.
@param [in]    entry_idx      PMPx region index(0-15)
@param [in]    pmpxcfg  PMPxCFG register value to set
\remark
- For RV32, 4 pmpxcfgs are densely packed into one CSR in order
  For RV64, 8 pmpxcfgs are densely packed into one CSR in order
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__pmp_8h_1ga5c23da25329322f793d38fc759e82c1b';
        func-mem-ref-line = '89';
        func-mem-ref-name = '__get_PMPCFGx';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__pmp_8h_1ga097fc81f868e8f2be80ebd68a7c60770';
        func-mem-ref-line = '112';
        func-mem-ref-name = '__set_PMPCFGx';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__PMP__Functions_1ga7002c57562d04a56357b1817e06fdb9a';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_INLINE rv_csr_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__get_PMPADDRx';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'csr_idx';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_pmp.h';
      func-mem-desc-line = '206';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get PMPADDRx Register by CSR index.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Return the content of the PMPADDRx Register.
@param [in]    csr_idx    PMP region CSR index(0-15)
\return        PMPADDRx Register value
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '642';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gacecf7350c29d4d7b3eff9334a79eb151';
        func-mem-ref-line = '665';
        func-mem-ref-name = 'CSR_PMPADDR0';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga4b66ab86131f3f9abb77653d946fa801';
        func-mem-ref-line = '666';
        func-mem-ref-name = 'CSR_PMPADDR1';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gae23ceb6fb8cb498198b5dd89301527d6';
        func-mem-ref-line = '675';
        func-mem-ref-name = 'CSR_PMPADDR10';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga05cef37120eb5d71e1bb4a2eab968c1f';
        func-mem-ref-line = '676';
        func-mem-ref-name = 'CSR_PMPADDR11';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga4f95495aea52214e593217b25a2683c9';
        func-mem-ref-line = '677';
        func-mem-ref-name = 'CSR_PMPADDR12';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga782c2fb9aba26298db7123758c5932f4';
        func-mem-ref-line = '678';
        func-mem-ref-name = 'CSR_PMPADDR13';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga803fecb49fa82ceabd227df080f692c7';
        func-mem-ref-line = '679';
        func-mem-ref-name = 'CSR_PMPADDR14';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga27b523f4961b4e24098ba0b24aa079bb';
        func-mem-ref-line = '680';
        func-mem-ref-name = 'CSR_PMPADDR15';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga793ce1bc309da27c6f3406e63c990ca3';
        func-mem-ref-line = '667';
        func-mem-ref-name = 'CSR_PMPADDR2';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga429c14fe78dcfb064f8a2b40bcd0c6d5';
        func-mem-ref-line = '668';
        func-mem-ref-name = 'CSR_PMPADDR3';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga296a8dd56db1dbc9ce8d23e04a125f1b';
        func-mem-ref-line = '669';
        func-mem-ref-name = 'CSR_PMPADDR4';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga0fdee71fe744c3a76a4fe4566b6d30f7';
        func-mem-ref-line = '670';
        func-mem-ref-name = 'CSR_PMPADDR5';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga380f61e6b334d2f76d3f995c932032ff';
        func-mem-ref-line = '671';
        func-mem-ref-name = 'CSR_PMPADDR6';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga3c32a0bfe8f5558cf3680e865853bd7d';
        func-mem-ref-line = '672';
        func-mem-ref-name = 'CSR_PMPADDR7';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gad5ca2904320156ece2d409a6203833dd';
        func-mem-ref-line = '673';
        func-mem-ref-name = 'CSR_PMPADDR8';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga37480409a10aee34f38f372686d25c63';
        func-mem-ref-line = '674';
        func-mem-ref-name = 'CSR_PMPADDR9';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__pmp_8h_1gabf18aa5a4518fc791dfaad084cab69e1';
        func-mem-ref-line = '330';
        func-mem-ref-name = '__get_PMPENTRYx';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__PMP__Functions_1ga827fb6b86f36c53067376472b9ba6037';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_INLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__set_PMPADDRx';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'csr_idx';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'pmpaddr';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_pmp.h';
      func-mem-desc-line = '235';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set PMPADDRx by CSR index.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Write the given value to the PMPADDRx Register.
@param [in]    csr_idx  PMP region CSR index(0-15)
@param [in]    pmpaddr  PMPADDRx Register value to set
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gacecf7350c29d4d7b3eff9334a79eb151';
        func-mem-ref-line = '665';
        func-mem-ref-name = 'CSR_PMPADDR0';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga4b66ab86131f3f9abb77653d946fa801';
        func-mem-ref-line = '666';
        func-mem-ref-name = 'CSR_PMPADDR1';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gae23ceb6fb8cb498198b5dd89301527d6';
        func-mem-ref-line = '675';
        func-mem-ref-name = 'CSR_PMPADDR10';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga05cef37120eb5d71e1bb4a2eab968c1f';
        func-mem-ref-line = '676';
        func-mem-ref-name = 'CSR_PMPADDR11';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga4f95495aea52214e593217b25a2683c9';
        func-mem-ref-line = '677';
        func-mem-ref-name = 'CSR_PMPADDR12';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga782c2fb9aba26298db7123758c5932f4';
        func-mem-ref-line = '678';
        func-mem-ref-name = 'CSR_PMPADDR13';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga803fecb49fa82ceabd227df080f692c7';
        func-mem-ref-line = '679';
        func-mem-ref-name = 'CSR_PMPADDR14';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga27b523f4961b4e24098ba0b24aa079bb';
        func-mem-ref-line = '680';
        func-mem-ref-name = 'CSR_PMPADDR15';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga793ce1bc309da27c6f3406e63c990ca3';
        func-mem-ref-line = '667';
        func-mem-ref-name = 'CSR_PMPADDR2';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga429c14fe78dcfb064f8a2b40bcd0c6d5';
        func-mem-ref-line = '668';
        func-mem-ref-name = 'CSR_PMPADDR3';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga296a8dd56db1dbc9ce8d23e04a125f1b';
        func-mem-ref-line = '669';
        func-mem-ref-name = 'CSR_PMPADDR4';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga0fdee71fe744c3a76a4fe4566b6d30f7';
        func-mem-ref-line = '670';
        func-mem-ref-name = 'CSR_PMPADDR5';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga380f61e6b334d2f76d3f995c932032ff';
        func-mem-ref-line = '671';
        func-mem-ref-name = 'CSR_PMPADDR6';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga3c32a0bfe8f5558cf3680e865853bd7d';
        func-mem-ref-line = '672';
        func-mem-ref-name = 'CSR_PMPADDR7';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gad5ca2904320156ece2d409a6203833dd';
        func-mem-ref-line = '673';
        func-mem-ref-name = 'CSR_PMPADDR8';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga37480409a10aee34f38f372686d25c63';
        func-mem-ref-line = '674';
        func-mem-ref-name = 'CSR_PMPADDR9';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__pmp_8h_1gae7ea6ac8551665dec5e8df52a3a2b51f';
        func-mem-ref-line = '269';
        func-mem-ref-name = '__set_PMPENTRYx';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__PMP__Functions_1gae7ea6ac8551665dec5e8df52a3a2b51f';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_INLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__set_PMPENTRYx';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'entry_idx';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
const pmp_config *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'pmp_cfg';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_pmp.h';
      func-mem-desc-line = '269';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set PMP entry by entry idx.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Write the given value to the PMPxCFG Register and PMPADDRx.
@param [in]    entry_idx    PMP entry index(0-15)
@param [in]    pmp_cfg      structure of L, X, W, R field of PMP configuration register, memory region base address
               and size of memory region as power of 2
\remark
- If the size of memory region is 2^12(4KB) range, pmp_cfg->order makes 12, and the like.
- Suppose the size of memory region is 2^X bytes range, if X >=3, the NA4 mode is not selectable, NAPOT is selected.
- TOR of A field in PMP configuration register is not considered here.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__pmp_8h_1ga5c23da25329322f793d38fc759e82c1b';
        func-mem-ref-line = '89';
        func-mem-ref-name = '__get_PMPCFGx';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga768dc3bf3c5e4e75e117c4a053b6d0f7';
        func-mem-ref-line = '48';
        func-mem-ref-name = '__RISCV_XLEN';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__pmp_8h_1ga827fb6b86f36c53067376472b9ba6037';
        func-mem-ref-line = '235';
        func-mem-ref-name = '__set_PMPADDRx';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__pmp_8h_1ga097fc81f868e8f2be80ebd68a7c60770';
        func-mem-ref-line = '112';
        func-mem-ref-name = '__set_PMPCFGx';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__pmp_8h_1a5bf81f40c43ab0f1010561c60ae0458c';
        func-mem-ref-line = '74';
        func-mem-ref-name = 'pmp_config::base_addr';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__pmp_8h_1a45cc066917b2cada129373b05dec9707';
        func-mem-ref-line = '69';
        func-mem-ref-name = 'pmp_config::order';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaa039949a5b36847e3d96be8730d41b97';
        func-mem-ref-line = '440';
        func-mem-ref-name = 'PMP_A_NA4';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga7941f68c06a33245450a89cd3153c856';
        func-mem-ref-line = '441';
        func-mem-ref-name = 'PMP_A_NAPOT';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaf5a33910ca1e7603b2c483a2966e2d53';
        func-mem-ref-line = '444';
        func-mem-ref-name = 'PMP_SHIFT';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__pmp_8h_1ab8409f7cb22187657b0ef0fe24059be1';
        func-mem-ref-line = '63';
        func-mem-ref-name = 'pmp_config::protection';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__PMP__Functions_1gabf18aa5a4518fc791dfaad084cab69e1';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_INLINE int
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__get_PMPENTRYx';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'entry_idx';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
pmp_config *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'pmp_cfg';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_pmp.h';
      func-mem-desc-line = '330';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get PMP entry by entry idx.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Write the given value to the PMPxCFG Register and PMPADDRx.
@param [in]     entry_idx     PMP entry index(0-15)
@param [out]    pmp_cfg       structure of L, X, W, R, A field of PMP configuration register, memory region base
                address and size of memory region as power of 2
\return  -1 failure, else 0 success
\remark
- If the size of memory region is 2^12(4KB) range, pmp_cfg->order makes 12, and the like.
- TOR of A field in PMP configuration register is not considered here.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__compatiable_8h_1ga211738702768401adf8308c35e854ef3';
        func-mem-ref-line = '257';
        func-mem-ref-name = '__CTZ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__pmp_8h_1ga7002c57562d04a56357b1817e06fdb9a';
        func-mem-ref-line = '206';
        func-mem-ref-name = '__get_PMPADDRx';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__pmp_8h_1ga5c23da25329322f793d38fc759e82c1b';
        func-mem-ref-line = '89';
        func-mem-ref-name = '__get_PMPCFGx';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__pmp_8h_1a5bf81f40c43ab0f1010561c60ae0458c';
        func-mem-ref-line = '74';
        func-mem-ref-name = 'pmp_config::base_addr';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__pmp_8h_1a45cc066917b2cada129373b05dec9707';
        func-mem-ref-line = '69';
        func-mem-ref-name = 'pmp_config::order';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga47df3f6548f6106ad54d3def500db71f';
        func-mem-ref-line = '438';
        func-mem-ref-name = 'PMP_A';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga7941f68c06a33245450a89cd3153c856';
        func-mem-ref-line = '441';
        func-mem-ref-name = 'PMP_A_NAPOT';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaf5a33910ca1e7603b2c483a2966e2d53';
        func-mem-ref-line = '444';
        func-mem-ref-name = 'PMP_SHIFT';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__pmp_8h_1ab8409f7cb22187657b0ef0fe24059be1';
        func-mem-ref-line = '63';
        func-mem-ref-name = 'pmp_config::protection';
    };
    }; /* func-member */
    };
  file-full-name  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_pmp.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
PMP feature API header file for Nuclei N/NX Core.
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_



_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'core__feature__spmp_8h';
  file-name = 'core_feature_spmp.h';
    define = {
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__SPMP_1gaa2b708cfc8ef56de49fcca3a65e0be28';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__get_SMPUCFGx';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__get_sPMPCFGx
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_spmp.h';
      define-mem-desc-line = '389';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__SPMP_1ga4bfa6f36bcdd66b9b1c0e7445c49dae3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__set_SMPUCFGx';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__set_sPMPCFGx
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_spmp.h';
      define-mem-desc-line = '390';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__SPMP_1ga982290313547bbc369cb934a5985f38a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__get_SMPUxCFG';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__get_sPMPxCFG
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_spmp.h';
      define-mem-desc-line = '391';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__SPMP_1ga265ba39a8408835c6bc2c71e3a0a8b8e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__set_SMPUxCFG';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__set_sPMPxCFG
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_spmp.h';
      define-mem-desc-line = '392';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__SPMP_1gab5ff3fe35571a7e72890024dfa5900ee';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__get_SMPUADDRx';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__get_sPMPADDRx
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_spmp.h';
      define-mem-desc-line = '393';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__SPMP_1ga900381dd340815a444c31629e8121b9f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__set_SMPUADDRx';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__set_sPMPADDRx
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_spmp.h';
      define-mem-desc-line = '394';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__SPMP_1ga3e322f37134868e7646870e25e29e33f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__set_SMPUENTRYx';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__set_sPMPENTRYx
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_spmp.h';
      define-mem-desc-line = '395';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__SPMP_1gafaa7e414886dd538f4c98542d9ed8cf7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__get_SMPUENTRYx';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__get_sPMPENTRYx
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_spmp.h';
      define-mem-desc-line = '396';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    };
    typedef = {
    typedef-member = {
      typedef-mem-kind = 'typedef';
      typedef-mem-id   = 'group__NMSIS__Core__SPMP_1gabe0bc3636692e7c7fed537429972e27b';
      typedef-mem-virt = normal;
      typedef-mem-prot = public;
      typedef-mem-type = <<_EnD_oF_dEf_TeXt_
spmp_config
_EnD_oF_dEf_TeXt_;
      typedef-mem-name = 'smpu_config';
      typedef-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_spmp.h';
      typedef-mem-desc-line = '388';
      typedef-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
sPMP has upgraded to S-mode Memory Protection Unit, renamed as SMPU, but still share the apis with sPMP's
_EnD_oF_dEf_TeXt_;
      typedef-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* typedef-member */
    };
    func = {
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SPMP_1gade76db4cf711cd1c5ccf17d23fd69c38';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_INLINE rv_csr_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__get_sPMPCFGx';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'csr_idx';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_spmp.h';
      func-mem-desc-line = '95';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get sPMPCFGx Register by csr index.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Return the content of the sPMPCFGx Register.
@param [in]    csr_idx    sPMPCFG CSR index(0-3)
\return                   sPMPCFGx Register value
\remark
- For RV64, only csr_idx = 0 and csr_idx = 2 is allowed.
  spmpcfg0 and spmpcfg2 hold the configurations
  for the 16 sPMP entries, spmpcfg1 and spmpcfg3 are illegal
- For RV32, spmpcfg0–spmpcfg3, hold the configurations
  spmp0cfg–spmp15cfg for the 16 sPMP entries
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '642';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga9ba401387323d3fdfbe93c901c080954';
        func-mem-ref-line = '916';
        func-mem-ref-name = 'CSR_SPMPCFG0';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaec59cd1e18d5fd43934e746643fd5d69';
        func-mem-ref-line = '917';
        func-mem-ref-name = 'CSR_SPMPCFG1';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gade3ff3f3d224893b183e254563c8c679';
        func-mem-ref-line = '918';
        func-mem-ref-name = 'CSR_SPMPCFG2';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga39ab50479a50302d271fb6b8f770d63c';
        func-mem-ref-line = '919';
        func-mem-ref-name = 'CSR_SPMPCFG3';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__spmp_8h_1ga34656997d11753ea521266fb6f34f0be';
        func-mem-ref-line = '336';
        func-mem-ref-name = '__get_sPMPENTRYx';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__spmp_8h_1gafc8623c3fb7b13298751b9610290dbaf';
        func-mem-ref-line = '135';
        func-mem-ref-name = '__get_sPMPxCFG';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__spmp_8h_1gac5d192a1d325f624cb65ca501fab6b3a';
        func-mem-ref-line = '275';
        func-mem-ref-name = '__set_sPMPENTRYx';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__spmp_8h_1gadd816bfd31a9d31b373c41f95e720539';
        func-mem-ref-line = '175';
        func-mem-ref-name = '__set_sPMPxCFG';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SPMP_1ga559a9ce5488cd9e5eb04c3635ab30875';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_INLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__set_sPMPCFGx';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'csr_idx';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'spmpcfg';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_spmp.h';
      func-mem-desc-line = '118';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set sPMPCFGx by csr index.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Write the given value to the sPMPCFGx Register.
@param [in]    csr_idx      sPMPCFG CSR index(0-3)
@param [in]    spmpcfg      sPMPCFGx Register value to set
\remark
- For RV64, only csr_idx = 0 and csr_idx = 2 is allowed.
  spmpcfg0 and spmpcfg2 hold the configurations
  for the 16 sPMP entries, spmpcfg1 and spmpcfg3 are illegal
- For RV32, spmpcfg0–spmpcfg3, hold the configurations
  spmp0cfg–spmp15cfg for the 16 sPMP entries
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga9ba401387323d3fdfbe93c901c080954';
        func-mem-ref-line = '916';
        func-mem-ref-name = 'CSR_SPMPCFG0';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaec59cd1e18d5fd43934e746643fd5d69';
        func-mem-ref-line = '917';
        func-mem-ref-name = 'CSR_SPMPCFG1';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gade3ff3f3d224893b183e254563c8c679';
        func-mem-ref-line = '918';
        func-mem-ref-name = 'CSR_SPMPCFG2';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga39ab50479a50302d271fb6b8f770d63c';
        func-mem-ref-line = '919';
        func-mem-ref-name = 'CSR_SPMPCFG3';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__spmp_8h_1gac5d192a1d325f624cb65ca501fab6b3a';
        func-mem-ref-line = '275';
        func-mem-ref-name = '__set_sPMPENTRYx';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__spmp_8h_1gadd816bfd31a9d31b373c41f95e720539';
        func-mem-ref-line = '175';
        func-mem-ref-name = '__set_sPMPxCFG';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SPMP_1gafc8623c3fb7b13298751b9610290dbaf';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_INLINE uint8_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__get_sPMPxCFG';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'entry_idx';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_spmp.h';
      func-mem-desc-line = '135';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get 8bit sPMPxCFG Register by sPMP entry index.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Return the content of the sPMPxCFG Register.
@param [in]    entry_idx    sPMP region index(0-15)
\return               sPMPxCFG Register value
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__spmp_8h_1gade76db4cf711cd1c5ccf17d23fd69c38';
        func-mem-ref-line = '95';
        func-mem-ref-name = '__get_sPMPCFGx';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SPMP_1gadd816bfd31a9d31b373c41f95e720539';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_INLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__set_sPMPxCFG';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'entry_idx';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'spmpxcfg';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_spmp.h';
      func-mem-desc-line = '175';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set 8bit sPMPxCFG by spmp entry index.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Set the given spmpxcfg value to the sPMPxCFG Register.
@param [in]    entry_idx       sPMPx region index(0-15)
@param [in]    spmpxcfg  sPMPxCFG register value to set
\remark
- For RV32, 4 spmpxcfgs are densely packed into one CSR in order
  For RV64, 8 spmpxcfgs are densely packed into one CSR in order
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__spmp_8h_1gade76db4cf711cd1c5ccf17d23fd69c38';
        func-mem-ref-line = '95';
        func-mem-ref-name = '__get_sPMPCFGx';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__spmp_8h_1ga559a9ce5488cd9e5eb04c3635ab30875';
        func-mem-ref-line = '118';
        func-mem-ref-name = '__set_sPMPCFGx';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SPMP_1ga8569b0e5dc76c434bb0022dacde1f2d7';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_INLINE rv_csr_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__get_sPMPADDRx';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'csr_idx';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_spmp.h';
      func-mem-desc-line = '212';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get sPMPADDRx Register by CSR index.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Return the content of the sPMPADDRx Register.
@param [in]    csr_idx    sPMP region CSR index(0-15)
\return        sPMPADDRx Register value
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '642';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga444f463df25b264807a9a21586d3642f';
        func-mem-ref-line = '920';
        func-mem-ref-name = 'CSR_SPMPADDR0';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga95916391349650863a75672f5ba09eff';
        func-mem-ref-line = '921';
        func-mem-ref-name = 'CSR_SPMPADDR1';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga3e214be18ea7b9ec4811884972e40b02';
        func-mem-ref-line = '930';
        func-mem-ref-name = 'CSR_SPMPADDR10';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga61d4943ae12afe4758d8ec688378e677';
        func-mem-ref-line = '931';
        func-mem-ref-name = 'CSR_SPMPADDR11';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga8de51987aed0c374e533e6e03701b98d';
        func-mem-ref-line = '932';
        func-mem-ref-name = 'CSR_SPMPADDR12';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gadccdc1394f893014a3016dd63da11746';
        func-mem-ref-line = '933';
        func-mem-ref-name = 'CSR_SPMPADDR13';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga70ce11868eae64e10395760ee9ba45cf';
        func-mem-ref-line = '934';
        func-mem-ref-name = 'CSR_SPMPADDR14';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gafae126e7cad1ec9bf4cbcd7d98728f7d';
        func-mem-ref-line = '935';
        func-mem-ref-name = 'CSR_SPMPADDR15';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gac4a49927351f9bd03afafd1280c6c7e5';
        func-mem-ref-line = '922';
        func-mem-ref-name = 'CSR_SPMPADDR2';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gae768d2adffb36a40d02f3a637db7c5be';
        func-mem-ref-line = '923';
        func-mem-ref-name = 'CSR_SPMPADDR3';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaffecb65da22b2a02c085423187bf19da';
        func-mem-ref-line = '924';
        func-mem-ref-name = 'CSR_SPMPADDR4';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gafd6dc07656b6d6e3f72e6d0bb1a69f45';
        func-mem-ref-line = '925';
        func-mem-ref-name = 'CSR_SPMPADDR5';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gad460161f33c9d9781b8164f0c66f4a54';
        func-mem-ref-line = '926';
        func-mem-ref-name = 'CSR_SPMPADDR6';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gac9c1812274f86f3e3fc9716c4bb24bf2';
        func-mem-ref-line = '927';
        func-mem-ref-name = 'CSR_SPMPADDR7';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gac4916c1385a8999ca73ef115b97ee330';
        func-mem-ref-line = '928';
        func-mem-ref-name = 'CSR_SPMPADDR8';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga3f6df6ed01d22da0b3ac69d668b04953';
        func-mem-ref-line = '929';
        func-mem-ref-name = 'CSR_SPMPADDR9';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__spmp_8h_1ga34656997d11753ea521266fb6f34f0be';
        func-mem-ref-line = '336';
        func-mem-ref-name = '__get_sPMPENTRYx';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SPMP_1ga3c2a928ba078b1f6a734a7520c98daac';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_INLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__set_sPMPADDRx';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'csr_idx';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'spmpaddr';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_spmp.h';
      func-mem-desc-line = '241';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set sPMPADDRx by CSR index.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Write the given value to the sPMPADDRx Register.
@param [in]    csr_idx    sPMP region CSR index(0-15)
@param [in]    spmpaddr   sPMPADDRx Register value to set
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga444f463df25b264807a9a21586d3642f';
        func-mem-ref-line = '920';
        func-mem-ref-name = 'CSR_SPMPADDR0';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga95916391349650863a75672f5ba09eff';
        func-mem-ref-line = '921';
        func-mem-ref-name = 'CSR_SPMPADDR1';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga3e214be18ea7b9ec4811884972e40b02';
        func-mem-ref-line = '930';
        func-mem-ref-name = 'CSR_SPMPADDR10';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga61d4943ae12afe4758d8ec688378e677';
        func-mem-ref-line = '931';
        func-mem-ref-name = 'CSR_SPMPADDR11';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga8de51987aed0c374e533e6e03701b98d';
        func-mem-ref-line = '932';
        func-mem-ref-name = 'CSR_SPMPADDR12';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gadccdc1394f893014a3016dd63da11746';
        func-mem-ref-line = '933';
        func-mem-ref-name = 'CSR_SPMPADDR13';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga70ce11868eae64e10395760ee9ba45cf';
        func-mem-ref-line = '934';
        func-mem-ref-name = 'CSR_SPMPADDR14';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gafae126e7cad1ec9bf4cbcd7d98728f7d';
        func-mem-ref-line = '935';
        func-mem-ref-name = 'CSR_SPMPADDR15';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gac4a49927351f9bd03afafd1280c6c7e5';
        func-mem-ref-line = '922';
        func-mem-ref-name = 'CSR_SPMPADDR2';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gae768d2adffb36a40d02f3a637db7c5be';
        func-mem-ref-line = '923';
        func-mem-ref-name = 'CSR_SPMPADDR3';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaffecb65da22b2a02c085423187bf19da';
        func-mem-ref-line = '924';
        func-mem-ref-name = 'CSR_SPMPADDR4';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gafd6dc07656b6d6e3f72e6d0bb1a69f45';
        func-mem-ref-line = '925';
        func-mem-ref-name = 'CSR_SPMPADDR5';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gad460161f33c9d9781b8164f0c66f4a54';
        func-mem-ref-line = '926';
        func-mem-ref-name = 'CSR_SPMPADDR6';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gac9c1812274f86f3e3fc9716c4bb24bf2';
        func-mem-ref-line = '927';
        func-mem-ref-name = 'CSR_SPMPADDR7';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gac4916c1385a8999ca73ef115b97ee330';
        func-mem-ref-line = '928';
        func-mem-ref-name = 'CSR_SPMPADDR8';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga3f6df6ed01d22da0b3ac69d668b04953';
        func-mem-ref-line = '929';
        func-mem-ref-name = 'CSR_SPMPADDR9';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__spmp_8h_1gac5d192a1d325f624cb65ca501fab6b3a';
        func-mem-ref-line = '275';
        func-mem-ref-name = '__set_sPMPENTRYx';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SPMP_1gac5d192a1d325f624cb65ca501fab6b3a';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_INLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__set_sPMPENTRYx';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'entry_idx';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
const spmp_config *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'spmp_cfg';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_spmp.h';
      func-mem-desc-line = '275';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set sPMP entry by entry idx.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Write the given value to the sPMPxCFG Register and sPMPADDRx.
@param [in]    entry_idx    sPMP entry index(0-15)
@param [in]    spmp_cfg   structure of L,U,X,W,R field of sPMP configuration register, memory region base address
               and size of memory region as power of 2
\remark
- If the size of memory region is 2^12(4KB) range, spmp_cfg->order makes 12, and the like.
- Suppose the size of memory region is 2^X bytes range, if X >=3, the NA4 mode is not selectable, NAPOT is selected.
- TOR of A field in sPMP configuration register is not considered here.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__spmp_8h_1gade76db4cf711cd1c5ccf17d23fd69c38';
        func-mem-ref-line = '95';
        func-mem-ref-name = '__get_sPMPCFGx';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga768dc3bf3c5e4e75e117c4a053b6d0f7';
        func-mem-ref-line = '48';
        func-mem-ref-name = '__RISCV_XLEN';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__spmp_8h_1ga3c2a928ba078b1f6a734a7520c98daac';
        func-mem-ref-line = '241';
        func-mem-ref-name = '__set_sPMPADDRx';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__spmp_8h_1ga559a9ce5488cd9e5eb04c3635ab30875';
        func-mem-ref-line = '118';
        func-mem-ref-name = '__set_sPMPCFGx';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__spmp_8h_1a38f0cac1ade030c9b1e4763a1610b07b';
        func-mem-ref-line = '80';
        func-mem-ref-name = 'spmp_config::base_addr';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__spmp_8h_1ac00650f4922ce3aba873d2f75137e3e3';
        func-mem-ref-line = '75';
        func-mem-ref-name = 'spmp_config::order';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__spmp_8h_1aae2dfe2799f910ed4bb08eb98aa46fa4';
        func-mem-ref-line = '69';
        func-mem-ref-name = 'spmp_config::protection';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga4d387769e4a7659ee0673a732385ec42';
        func-mem-ref-line = '453';
        func-mem-ref-name = 'SPMP_A_NA4';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaa8d90c293d07bc28c23c6557cb331897';
        func-mem-ref-line = '454';
        func-mem-ref-name = 'SPMP_A_NAPOT';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gafe8821387ea7516af62e716901a75557';
        func-mem-ref-line = '458';
        func-mem-ref-name = 'SPMP_SHIFT';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SPMP_1ga34656997d11753ea521266fb6f34f0be';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_INLINE int
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__get_sPMPENTRYx';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'entry_idx';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
spmp_config *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'spmp_cfg';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_spmp.h';
      func-mem-desc-line = '336';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get sPMP entry by entry idx.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Write the given value to the sPMPxCFG Register and sPMPADDRx.
@param [in]     entry_idx     sPMP entry index(0-15)
@param [out]    spmp_cfg   structure of L, U, X, W, R, A field of sPMP configuration register, memory region base
                address and size of memory region as power of 2
\return  -1 failure, else 0 success
\remark
- If the size of memory region is 2^12(4KB) range, spmp_cfg->order makes 12, and the like.
- TOR of A field in PMP configuration register is not considered here.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__compatiable_8h_1ga211738702768401adf8308c35e854ef3';
        func-mem-ref-line = '257';
        func-mem-ref-name = '__CTZ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__spmp_8h_1ga8569b0e5dc76c434bb0022dacde1f2d7';
        func-mem-ref-line = '212';
        func-mem-ref-name = '__get_sPMPADDRx';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__spmp_8h_1gade76db4cf711cd1c5ccf17d23fd69c38';
        func-mem-ref-line = '95';
        func-mem-ref-name = '__get_sPMPCFGx';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__spmp_8h_1a38f0cac1ade030c9b1e4763a1610b07b';
        func-mem-ref-line = '80';
        func-mem-ref-name = 'spmp_config::base_addr';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__spmp_8h_1ac00650f4922ce3aba873d2f75137e3e3';
        func-mem-ref-line = '75';
        func-mem-ref-name = 'spmp_config::order';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__spmp_8h_1aae2dfe2799f910ed4bb08eb98aa46fa4';
        func-mem-ref-line = '69';
        func-mem-ref-name = 'spmp_config::protection';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga03bd5c174b49577ff8fdff75b1b5716b';
        func-mem-ref-line = '451';
        func-mem-ref-name = 'SPMP_A';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaa8d90c293d07bc28c23c6557cb331897';
        func-mem-ref-line = '454';
        func-mem-ref-name = 'SPMP_A_NAPOT';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gafe8821387ea7516af62e716901a75557';
        func-mem-ref-line = '458';
        func-mem-ref-name = 'SPMP_SHIFT';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SPMP_1ga76a09caf6ee9783b3f935332c9dc4bad';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_INLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__set_SMPUSWITCHx';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint64_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'val';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_spmp.h';
      func-mem-desc-line = '407';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set SMPU each entry's on/off status.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Write the given value to the SMPUSWITCHx Register.
@param [in]     val     activate each entry(max to 64) or not
\remark
- Each bit of this register holds on/off status of the corresponding SMPU entry respectively.
- An SMPU entry is activated only when both corresponding bits in smpuswitch and
  A field of smpuicfg are set. (i.e., smpuswitch[i] & smpu[i]cfg.A).
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gae6e276efb39fb59d96376b13966e47fe';
        func-mem-ref-line = '958';
        func-mem-ref-name = 'CSR_SMPUSWITCH0';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga7bf461ae9fbed0b17b732e0d7b1edee3';
        func-mem-ref-line = '959';
        func-mem-ref-name = 'CSR_SMPUSWITCH1';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SPMP_1ga2ed193105193b8ad120257a5d1acda0a';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_INLINE uint64_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__get_SMPUSWITCHx';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_spmp.h';
      func-mem-desc-line = '427';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get SMPU each entry's on/off status.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Get the value of the SMPUSWITCHx Register.
\remark
- Each bit of this register holds on/off status of the corresponding SMPU entry respectively.
- An SMPU entry is activated only when both corresponding bits in smpuswitch and
  A field of smpuicfg are set. (i.e., smpuswitch[i] & smpu[i]cfg.A).
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '642';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gae6e276efb39fb59d96376b13966e47fe';
        func-mem-ref-line = '958';
        func-mem-ref-name = 'CSR_SMPUSWITCH0';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga7bf461ae9fbed0b17b732e0d7b1edee3';
        func-mem-ref-line = '959';
        func-mem-ref-name = 'CSR_SMPUSWITCH1';
    };
    }; /* func-member */
    };
  file-full-name  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_spmp.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
sPMP(has upgraded to S-mode Memory Protection Unit, renamed as SMPU) feature API header file for Nuclei N/NX Core
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_



_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'core__feature__timer_8h';
  file-name = 'core_feature_timer.h';
    define = {
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__SysTimer__Registers_1ga54ecde494dc735799ed978b91bf709d8';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SysTimer_MTIMECTL_TIMESTOP_Pos';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0U
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      define-mem-desc-line = '67';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SysTick Timer MTIMECTL: TIMESTOP bit Position.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__SysTimer__Registers_1gaab93093166696848e52d055a2e139e9f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SysTimer_MTIMECTL_TIMESTOP_Msk';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1UL << SysTimer_MTIMECTL_TIMESTOP_Pos)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      define-mem-desc-line = '68';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SysTick Timer MTIMECTL: TIMESTOP Mask.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__SysTimer__Registers_1gac0cd51358c944397328146b6f4a4a8a5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SysTimer_MTIMECTL_CMPCLREN_Pos';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
1U
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      define-mem-desc-line = '69';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SysTick Timer MTIMECTL: CMPCLREN bit Position.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__SysTimer__Registers_1ga5d372de2d560f90d8ed8306277068cf1';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SysTimer_MTIMECTL_CMPCLREN_Msk';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1UL << SysTimer_MTIMECTL_CMPCLREN_Pos)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      define-mem-desc-line = '70';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SysTick Timer MTIMECTL: CMPCLREN Mask.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__SysTimer__Registers_1ga4ee15edaeadcd48a5aaab1aa9ec20496';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SysTimer_MTIMECTL_CLKSRC_Pos';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
2U
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      define-mem-desc-line = '71';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SysTick Timer MTIMECTL: CLKSRC bit Position.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__SysTimer__Registers_1ga2513c82f2ce2811952b83f6d1c8e4172';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SysTimer_MTIMECTL_CLKSRC_Msk';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1UL << SysTimer_MTIMECTL_CLKSRC_Pos)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      define-mem-desc-line = '72';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SysTick Timer MTIMECTL: CLKSRC Mask.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__SysTimer__Registers_1ga0279bef4cc478d36b8dcd9098ff801ab';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SysTimer_MTIMECTL_HDBG_Pos';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
4U
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      define-mem-desc-line = '73';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SysTick Timer MTIMECTL: HDBG bit Position.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__SysTimer__Registers_1gae0397606af2e9eeee59c284ddcc336b7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SysTimer_MTIMECTL_HDBG_Msk';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1UL << SysTimer_MTIMECTL_HDBG_Pos)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      define-mem-desc-line = '74';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SysTick Timer MTIMECTL: HDBG Mask.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__SysTimer__Registers_1gad756a0be76154b3f64f6790663581c52';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SysTimer_MSIP_MSIP_Pos';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0U
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      define-mem-desc-line = '77';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SysTick Timer MSIP: MSIP bit Position.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__SysTimer__Registers_1ga62b819dc444c74f1424c50cf13fcb2a0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SysTimer_MSIP_MSIP_Msk';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1UL << SysTimer_MSIP_MSIP_Pos)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      define-mem-desc-line = '78';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SysTick Timer MSIP: MSIP Mask.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__SysTimer__Registers_1gad72e88d28acd951a0d91b94530d2bc23';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SysTimer_SSIP_SSIP_Pos';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0U
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      define-mem-desc-line = '80';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SysTick Timer SSIP: SSIP bit Position.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__SysTimer__Registers_1gadce57091bd4a72ff6fdadefcfe6fa5f5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SysTimer_SSIP_SSIP_Msk';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1UL << SysTimer_SSIP_SSIP_Pos)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      define-mem-desc-line = '81';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SysTick Timer SSIP: SSIP Mask.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__SysTimer__Registers_1gacffb8ad26cdd32cef2ee67bde9ddb122';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SysTimer_MTIMER_Msk';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0xFFFFFFFFFFFFFFFFULL)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      define-mem-desc-line = '83';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SysTick Timer MTIMER value Mask.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__SysTimer__Registers_1ga0fb8a9811b2d773529fb0f7db866e5e5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SysTimer_MTIMERCMP_Msk';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0xFFFFFFFFFFFFFFFFULL)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      define-mem-desc-line = '84';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SysTick Timer MTIMERCMP value Mask.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__SysTimer__Registers_1ga9b50cbd77c10af62deca85e3d2509c72';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SysTimer_MTIMECTL_Msk';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0xFFFFFFFFUL)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      define-mem-desc-line = '85';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SysTick Timer MTIMECTL/MSTOP value Mask.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__SysTimer__Registers_1ga40ba61e02d93e37ffbb6452b54806af6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SysTimer_MSIP_Msk';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0xFFFFFFFFUL)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      define-mem-desc-line = '86';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SysTick Timer MSIP   value Mask.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__SysTimer__Registers_1ga1028d9f654728860327c082a44b9f34f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SysTimer_MSFTRST_Msk';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0xFFFFFFFFUL)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      define-mem-desc-line = '87';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SysTick Timer MSFTRST value Mask.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__SysTimer__Registers_1ga181dffb1870282631f8858ea23d9b8fa';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SysTimer_MSFRST_KEY';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x80000A5FUL)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      define-mem-desc-line = '89';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SysTick Timer Software Reset Request Key.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__SysTimer__Registers_1ga817932d6e04ff8eaac1433ff3e2ffdd5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SysTimer_CLINT_MSIP_OFS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x1000UL)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      define-mem-desc-line = '91';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Machine Mode Software interrupt register offset of clint mode in SysTick Timer.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__SysTimer__Registers_1gacd3c11b93de9b31480479b69955f9252';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SysTimer_CLINT_MTIMECMP_OFS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x5000UL)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      define-mem-desc-line = '92';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
MTIMECMP register offset of clint mode in SysTick Timer.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__SysTimer__Registers_1ga0a0f230930113b939560d5712da4929f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SysTimer_CLINT_MTIME_OFS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0xCFF8UL)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      define-mem-desc-line = '93';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
MTIME register offset of clint mode in SysTick Timer.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__SysTimer__Registers_1gaa371b68f7ff52ddd9b06c2f6b9fcb85a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SysTimer_CLINT_SSIP_OFS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0xD000UL)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      define-mem-desc-line = '94';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Supervisor Mode Software interrupt register offset of clint mode in SysTick Timer.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__SysTimer__Registers_1ga2107a0ae6d9deefff31edf506a6e1e91';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SysTimer_BASE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__SYSTIMER_BASEADDR
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      define-mem-desc-line = '101';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SysTick Base Address.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__SysTimer__Registers_1ga55d0982631fe5ecbcfbb808913f6ad99';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SysTimer';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
((SysTimer_Type *) SysTimer_BASE)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      define-mem-desc-line = '102';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SysTick configuration struct.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__SysTimer__Registers_1ga9af174e29dc41968fffd97bd849ae2f9';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SysTimer_CLINT_MSIP_BASE';
      define-mem-param  = {
        define-mem-def-name = 'hartid';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(unsigned long)((SysTimer_BASE) + (SysTimer_CLINT_MSIP_OFS) + ((hartid) << 2))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      define-mem-desc-line = '105';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__SysTimer__Registers_1ga4c13654a03170936aed2200ddefb239d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SysTimer_CLINT_MTIMECMP_BASE';
      define-mem-param  = {
        define-mem-def-name = 'hartid';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(unsigned long)((SysTimer_BASE) + (SysTimer_CLINT_MTIMECMP_OFS) + ((hartid) << 3))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      define-mem-desc-line = '106';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__SysTimer__Registers_1gad17f6dfe29eb659e5b7e0ec920ab325f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SysTimer_CLINT_MTIME_BASE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(unsigned long)((SysTimer_BASE) + (SysTimer_CLINT_MTIME_OFS))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      define-mem-desc-line = '107';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__SysTimer__Registers_1ga9dcce0d5d51c0238db3cf4dab2f71979';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SysTimer_CLINT_SSIP_BASE';
      define-mem-param  = {
        define-mem-def-name = 'hartid';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(unsigned long)((SysTimer_BASE) + (SysTimer_CLINT_SSIP_OFS) + ((hartid) << 2))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      define-mem-desc-line = '108';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__SysTimer_1ga17e2d6476f35a0e8f9552b06e9f6d05c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SysTimer_GetHartID';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(__get_hart_index())
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      define-mem-desc-line = '127';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SysTimer_GetHartID() is used to get timer hartid which might not be the same as cpu hart id,
for example, cpu hartid may be 1, but timer hartid may be 0, then timer hartid offset is 1.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
If defined __SYSTIMER_HARTID, it will use __SYSTIMER_HARTID as timer hartid,
otherwise, it will use __get_hart_index().
The cpu hartid is get by using __get_hart_id function
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__SysTimer_1ga28d4cdee4a58996d850095961cd1c3df';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SysTimer_GetHartID_S';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(__get_hart_index_s())
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      define-mem-desc-line = '134';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    };
    func = {
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SysTimer_1ga08c74ffae27d46218ae11321ff5e1673';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SysTimer_SetLoadValue';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint64_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'value';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      func-mem-desc-line = '149';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set system timer load value.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function set the system timer load value in MTIMER register.
@param [in]  value   value to set system timer MTIMER register.
\remarks
- Load value is 64bits wide.
- \ref SysTimer_GetLoadValue
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga9df58a7326fee34b546cae7d7d6e6de3';
        func-mem-ref-line = '2154';
        func-mem-ref-name = '__SW';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga55d0982631fe5ecbcfbb808913f6ad99';
        func-mem-ref-line = '102';
        func-mem-ref-name = 'SysTimer';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SysTimer_1ga5b454e48769abd7a88c2cc65fe53ac7a';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint64_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SysTimer_GetLoadValue';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      func-mem-desc-line = '171';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get system timer load value.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function get the system timer current value in MTIMER register.
\return  current value(64bit) of system timer MTIMER register.
\remarks
- Load value is 64bits wide.
- \ref SysTimer_SetLoadValue
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaf898279e3db81302391a698214744865';
        func-mem-ref-line = '2102';
        func-mem-ref-name = '__LW';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga55d0982631fe5ecbcfbb808913f6ad99';
        func-mem-ref-line = '102';
        func-mem-ref-name = 'SysTimer';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga349805c25d9aa753c6fd69b3c0151126';
        func-mem-ref-line = '834';
        func-mem-ref-name = 'SysTick_Config';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga9a14de583e6e65f155a73f7ff181f042';
        func-mem-ref-line = '874';
        func-mem-ref-name = 'SysTick_HartConfig';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__timer_8h_1gac9919fbe0f9eb484f3ff95b7e415296e';
        func-mem-ref-line = '946';
        func-mem-ref-name = 'SysTick_HartReload';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga9906dae1937eac222354df5a9069945a';
        func-mem-ref-line = '910';
        func-mem-ref-name = 'SysTick_Reload';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SysTimer_1gab9fb66405cec7ea36873619c67d7840f';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SysTimer_SetHartCompareValue';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint64_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'value';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'hartid';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      func-mem-desc-line = '206';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set system timer compare value by hartid.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function set the system Timer compare value in MTIMERCMP register.
@param [in]  value   compare value to set system timer MTIMERCMP register.
@param [in]  hartid  hart ID, one hart is required to have a known hart ID of 0, other harts ID can be in 1~1023.
\remarks
- Compare value is 64bits wide.
- If compare value is larger than current value timer interrupt generate.
- Modify the load value or compare value less to clear the interrupt.
- In S-mode, hartid can't be get by using __get_hart_id function, so this api suits S-mode particularly.
- \ref SysTimer_GetHartCompareValue
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga9df58a7326fee34b546cae7d7d6e6de3';
        func-mem-ref-line = '2154';
        func-mem-ref-name = '__SW';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga55d0982631fe5ecbcfbb808913f6ad99';
        func-mem-ref-line = '102';
        func-mem-ref-name = 'SysTimer';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga4c13654a03170936aed2200ddefb239d';
        func-mem-ref-line = '106';
        func-mem-ref-name = 'SysTimer_CLINT_MTIMECMP_BASE';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga9a14de583e6e65f155a73f7ff181f042';
        func-mem-ref-line = '874';
        func-mem-ref-name = 'SysTick_HartConfig';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__timer_8h_1gac9919fbe0f9eb484f3ff95b7e415296e';
        func-mem-ref-line = '946';
        func-mem-ref-name = 'SysTick_HartReload';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga52e85918789aa95fc4cd0d7238ca9b6c';
        func-mem-ref-line = '242';
        func-mem-ref-name = 'SysTimer_SetCompareValue';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SysTimer_1ga52e85918789aa95fc4cd0d7238ca9b6c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SysTimer_SetCompareValue';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint64_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'value';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      func-mem-desc-line = '242';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set system timer compare value in machine mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function set the system Timer compare value in MTIMERCMP register.
@param [in]  value   compare value to set system timer MTIMERCMP register.
\remarks
- Compare value is 64bits wide.
- If compare value is larger than current value timer interrupt generate.
- Modify the load value or compare value less to clear the interrupt.
- __get_hart_id function can only be accessed in machine mode, or else exception will occur.
- \ref SysTimer_GetCompareValue
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga17e2d6476f35a0e8f9552b06e9f6d05c';
        func-mem-ref-line = '127';
        func-mem-ref-name = 'SysTimer_GetHartID';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1gab9fb66405cec7ea36873619c67d7840f';
        func-mem-ref-line = '206';
        func-mem-ref-name = 'SysTimer_SetHartCompareValue';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga349805c25d9aa753c6fd69b3c0151126';
        func-mem-ref-line = '834';
        func-mem-ref-name = 'SysTick_Config';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga9906dae1937eac222354df5a9069945a';
        func-mem-ref-line = '910';
        func-mem-ref-name = 'SysTick_Reload';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SysTimer_1ga8eefb2f5a30b75be91ff43b4be5bd7a8';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint64_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SysTimer_GetHartCompareValue';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'hartid';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      func-mem-desc-line = '259';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get system timer compare value by hartid.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function get the system timer compare value in MTIMERCMP register.
@param [in]  hartid  hart ID, one hart is required to have a known hart ID of 0, other harts ID can be in 1~1023.
\return  compare value of system timer MTIMERCMP register.
\remarks
- Compare value is 64bits wide.
- In S-mode, hartid can't be get by using __get_hart_id function, so this api suits S-mode particularly.
- \ref SysTimer_SetHartCompareValue
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaf898279e3db81302391a698214744865';
        func-mem-ref-line = '2102';
        func-mem-ref-name = '__LW';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga55d0982631fe5ecbcfbb808913f6ad99';
        func-mem-ref-line = '102';
        func-mem-ref-name = 'SysTimer';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga4c13654a03170936aed2200ddefb239d';
        func-mem-ref-line = '106';
        func-mem-ref-name = 'SysTimer_CLINT_MTIMECMP_BASE';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga515d63f4e4581430fb0bf6e864e5bca9';
        func-mem-ref-line = '289';
        func-mem-ref-name = 'SysTimer_GetCompareValue';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SysTimer_1ga515d63f4e4581430fb0bf6e864e5bca9';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint64_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SysTimer_GetCompareValue';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      func-mem-desc-line = '289';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get system timer compare value in machine mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function get the system timer compare value in MTIMERCMP register.
\return  compare value of system timer MTIMERCMP register.
\remarks
- Compare value is 64bits wide.
- \ref SysTimer_SetCompareValue
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga8eefb2f5a30b75be91ff43b4be5bd7a8';
        func-mem-ref-line = '259';
        func-mem-ref-name = 'SysTimer_GetHartCompareValue';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga17e2d6476f35a0e8f9552b06e9f6d05c';
        func-mem-ref-line = '127';
        func-mem-ref-name = 'SysTimer_GetHartID';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SysTimer_1ga95360ac7f66badad67c57d540a1ae4e1';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SysTimer_Start';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      func-mem-desc-line = '301';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Enable system timer counter running.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Enable system timer counter running by clear
TIMESTOP bit in MTIMECTL register.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga55d0982631fe5ecbcfbb808913f6ad99';
        func-mem-ref-line = '102';
        func-mem-ref-name = 'SysTimer';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1gaab93093166696848e52d055a2e139e9f';
        func-mem-ref-line = '68';
        func-mem-ref-name = 'SysTimer_MTIMECTL_TIMESTOP_Msk';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SysTimer_1gaf74222f6d8c603f61571884732726e91';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SysTimer_Stop';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      func-mem-desc-line = '312';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Stop system timer counter running.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Stop system timer counter running by set
TIMESTOP bit in MTIMECTL register.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga55d0982631fe5ecbcfbb808913f6ad99';
        func-mem-ref-line = '102';
        func-mem-ref-name = 'SysTimer';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1gaab93093166696848e52d055a2e139e9f';
        func-mem-ref-line = '68';
        func-mem-ref-name = 'SysTimer_MTIMECTL_TIMESTOP_Msk';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SysTimer_1gaf0e25c3ad2965ce6cd523cd101cee16f';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SysTimer_SetControlValue';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'mctl';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      func-mem-desc-line = '331';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set system timer control value.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function set the system timer MTIMECTL register value.
@param [in]  mctl    value to set MTIMECTL register
\remarks
- Bit TIMESTOP is used to start and stop timer.
  Clear TIMESTOP bit to 0 to start timer, otherwise to stop timer.
- Bit CMPCLREN is used to enable auto MTIMER clear to zero when MTIMER >= MTIMERCMP.
  Clear CMPCLREN bit to 0 to stop auto clear MTIMER feature, otherwise to enable it.
- Bit CLKSRC is used to select timer clock source.
  Clear CLKSRC bit to 0 to use <em>mtime_toggle_a</em>, otherwise use <em>core_clk_aon</em>
- \ref SysTimer_GetControlValue
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga55d0982631fe5ecbcfbb808913f6ad99';
        func-mem-ref-line = '102';
        func-mem-ref-name = 'SysTimer';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga9b50cbd77c10af62deca85e3d2509c72';
        func-mem-ref-line = '85';
        func-mem-ref-name = 'SysTimer_MTIMECTL_Msk';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SysTimer_1gafc922423699826bc5d833ab5d08219d2';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SysTimer_GetControlValue';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      func-mem-desc-line = '344';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get system timer control value.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function get the system timer MTIMECTL register value.
\return  MTIMECTL register value
\remarks
- \ref SysTimer_SetControlValue
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga55d0982631fe5ecbcfbb808913f6ad99';
        func-mem-ref-line = '102';
        func-mem-ref-name = 'SysTimer';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga9b50cbd77c10af62deca85e3d2509c72';
        func-mem-ref-line = '85';
        func-mem-ref-name = 'SysTimer_MTIMECTL_Msk';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SysTimer_1ga0886abb528d78a26909e2d087a668a85';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SysTimer_SetHartSWIRQ';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'hartid';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      func-mem-desc-line = '360';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Trigger or set software interrupt via system timer by hartid.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function set the system timer MSIP bit in MSIP register.
@param [in]  hartid  hart ID, one hart is required to have a known hart ID of 0, other harts ID can be in 1~1023.
\remarks
- Set system timer MSIP bit and generate a machine mode software interrupt.
- In S-mode, hartid can't be get by using __get_hart_id function, so this api suite S-mode particularly when MTIME_SRW_CTRL.SRW equal 0.
- \ref SysTimer_ClearHartSWIRQ
- \ref SysTimer_GetHartMsipValue
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga9df58a7326fee34b546cae7d7d6e6de3';
        func-mem-ref-line = '2154';
        func-mem-ref-name = '__SW';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga55d0982631fe5ecbcfbb808913f6ad99';
        func-mem-ref-line = '102';
        func-mem-ref-name = 'SysTimer';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga9af174e29dc41968fffd97bd849ae2f9';
        func-mem-ref-line = '105';
        func-mem-ref-name = 'SysTimer_CLINT_MSIP_BASE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga62b819dc444c74f1424c50cf13fcb2a0';
        func-mem-ref-line = '78';
        func-mem-ref-name = 'SysTimer_MSIP_MSIP_Msk';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__timer_8h_1gaa4d13cddf35ef77fd3b3b59e82eb1d47';
        func-mem-ref-line = '379';
        func-mem-ref-name = 'SysTimer_SetSWIRQ';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SysTimer_1gaa4d13cddf35ef77fd3b3b59e82eb1d47';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SysTimer_SetSWIRQ';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      func-mem-desc-line = '379';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Trigger or set software interrupt via system timer in machine mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function set the system timer MSIP bit in MSIP register.
\remarks
- Set system timer MSIP bit and generate a SW interrupt.
- \ref SysTimer_ClearSWIRQ
- \ref SysTimer_GetMsipValue
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga17e2d6476f35a0e8f9552b06e9f6d05c';
        func-mem-ref-line = '127';
        func-mem-ref-name = 'SysTimer_GetHartID';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga0886abb528d78a26909e2d087a668a85';
        func-mem-ref-line = '360';
        func-mem-ref-name = 'SysTimer_SetHartSWIRQ';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SysTimer_1ga83ec6487e80a3cb739b8ca3a8fe5cc65';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SysTimer_ClearHartSWIRQ';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'hartid';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      func-mem-desc-line = '396';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Clear system timer software interrupt pending request by hartid.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function clear the system timer MSIP bit in MSIP register.
@param [in]  hartid  hart ID, one hart is required to have a known hart ID of 0, other harts ID can be in 1~1023.
\remarks
- Clear system timer MSIP bit in MSIP register to clear the software interrupt pending.
- In S-mode, hartid can't be get by using __get_hart_id function, so this api suits S-mode particularly.
- \ref SysTimer_SetHartSWIRQ
- \ref SysTimer_GetHartMsipValue
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga9df58a7326fee34b546cae7d7d6e6de3';
        func-mem-ref-line = '2154';
        func-mem-ref-name = '__SW';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga55d0982631fe5ecbcfbb808913f6ad99';
        func-mem-ref-line = '102';
        func-mem-ref-name = 'SysTimer';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga9af174e29dc41968fffd97bd849ae2f9';
        func-mem-ref-line = '105';
        func-mem-ref-name = 'SysTimer_CLINT_MSIP_BASE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga62b819dc444c74f1424c50cf13fcb2a0';
        func-mem-ref-line = '78';
        func-mem-ref-name = 'SysTimer_MSIP_MSIP_Msk';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga57b4f64ed87262daf831573e704b12c8';
        func-mem-ref-line = '415';
        func-mem-ref-name = 'SysTimer_ClearSWIRQ';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SysTimer_1ga57b4f64ed87262daf831573e704b12c8';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SysTimer_ClearSWIRQ';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      func-mem-desc-line = '415';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Clear system timer software interrupt pending request in machine mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function clear the system timer MSIP bit in MSIP register.
\remarks
- Clear system timer MSIP bit in MSIP register to clear the software interrupt pending.
- \ref SysTimer_SetSWIRQ
- \ref SysTimer_GetMsipValue
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga83ec6487e80a3cb739b8ca3a8fe5cc65';
        func-mem-ref-line = '396';
        func-mem-ref-name = 'SysTimer_ClearHartSWIRQ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga17e2d6476f35a0e8f9552b06e9f6d05c';
        func-mem-ref-line = '127';
        func-mem-ref-name = 'SysTimer_GetHartID';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SysTimer_1ga6786ed8d4caa04737daff206de804252';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SysTimer_GetHartMsipValue';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'hartid';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      func-mem-desc-line = '435';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get system timer MSIP register value by hartid.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function get the system timer MSIP register value.
@param [in]  hartid  hart ID, one hart is required to have a known hart ID of 0, other harts ID can be in 1~1023.
\return    Value of Timer MSIP register.
\remarks
- Bit0 is SW interrupt flag.
  Bit0 is 1 then SW interrupt set. Bit0 is 0 then SW interrupt clear.
- In S-mode, hartid can't be get by using __get_hart_id function, so this api suits S-mode particularly.
- \ref SysTimer_SetHartSWIRQ
- \ref SysTimer_ClearHartSWIRQ
- \ref SysTimer_SetHartMsipValue
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaf898279e3db81302391a698214744865';
        func-mem-ref-line = '2102';
        func-mem-ref-name = '__LW';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga55d0982631fe5ecbcfbb808913f6ad99';
        func-mem-ref-line = '102';
        func-mem-ref-name = 'SysTimer';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga9af174e29dc41968fffd97bd849ae2f9';
        func-mem-ref-line = '105';
        func-mem-ref-name = 'SysTimer_CLINT_MSIP_BASE';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga0431e3f4a44ca2265884c19096912729';
        func-mem-ref-line = '457';
        func-mem-ref-name = 'SysTimer_GetMsipValue';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SysTimer_1ga0431e3f4a44ca2265884c19096912729';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SysTimer_GetMsipValue';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      func-mem-desc-line = '457';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get system timer MSIP register value in machine mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function get the system timer MSIP register value.
\return    Value of Timer MSIP register.
\remarks
- Bit0 is SW interrupt flag.
  Bit0 is 1 then SW interrupt set. Bit0 is 0 then SW interrupt clear.
- \ref SysTimer_SetSWIRQ
- \ref SysTimer_ClearSWIRQ
- \ref SysTimer_SetMsipValue
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga17e2d6476f35a0e8f9552b06e9f6d05c';
        func-mem-ref-line = '127';
        func-mem-ref-name = 'SysTimer_GetHartID';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga6786ed8d4caa04737daff206de804252';
        func-mem-ref-line = '435';
        func-mem-ref-name = 'SysTimer_GetHartMsipValue';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SysTimer_1ga9364dd3f609f276e4e1d9e8ca99dcc4e';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SysTimer_SetHartMsipValue';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'msip';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'hartid';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      func-mem-desc-line = '473';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set system timer MSIP register value by hartid.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function set the system timer MSIP register value.
@param [in]  msip   value to set MSIP register
@param [in]  hartid  hart ID, one hart is required to have a known hart ID of 0, other harts ID can be in 1~1023.
\remarks
- In S-mode, hartid can't be get using __get_hart_id function, so this api suits S-mode particularly.
- \ref SysTimer_GetHartMsipValue
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga9df58a7326fee34b546cae7d7d6e6de3';
        func-mem-ref-line = '2154';
        func-mem-ref-name = '__SW';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga55d0982631fe5ecbcfbb808913f6ad99';
        func-mem-ref-line = '102';
        func-mem-ref-name = 'SysTimer';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga9af174e29dc41968fffd97bd849ae2f9';
        func-mem-ref-line = '105';
        func-mem-ref-name = 'SysTimer_CLINT_MSIP_BASE';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__timer_8h_1gaa7f8e6c1423f582f958e151ce692395c';
        func-mem-ref-line = '490';
        func-mem-ref-name = 'SysTimer_SetMsipValue';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SysTimer_1gaa7f8e6c1423f582f958e151ce692395c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SysTimer_SetMsipValue';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'msip';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      func-mem-desc-line = '490';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set system timer MSIP register value in machine mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function set the system timer MSIP register value.
@param [in]  msip   value to set MSIP register
- \ref SysTimer_GetMsipValue
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga17e2d6476f35a0e8f9552b06e9f6d05c';
        func-mem-ref-line = '127';
        func-mem-ref-name = 'SysTimer_GetHartID';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga9364dd3f609f276e4e1d9e8ca99dcc4e';
        func-mem-ref-line = '473';
        func-mem-ref-name = 'SysTimer_SetHartMsipValue';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SysTimer_1gafde21d158c8443c6991e2f2ba5dc7519';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SysTimer_SetCompareValue_S';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint64_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'value';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      func-mem-desc-line = '509';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set system timer smode compare value.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function set the system timer smode compare value in STIMECMP and STIMECMPH CSR register.
@param [in]  value   compare value to set system timer smode compare register.
\remarks
- smode timer compare regiser required the SSTC extension
- smode timer compare value located in stimecmp/stimecmph for rv32 and stimecmp for rv64.
- If compare value is larger than current value smode timer interrupt generate.
- Modify the load value or compare value less to clear the interrupt.
- \ref SysTimer_GetCompareValue_S
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga7be2b2d3f8bc8fad22057ea5282f6c68';
        func-mem-ref-line = '578';
        func-mem-ref-name = 'CSR_STIMECMP';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga3a9f600798fa252afdb427fd91e4be64';
        func-mem-ref-line = '807';
        func-mem-ref-name = 'CSR_STIMECMPH';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__timer_8h_1gaab738f70ca127c297831dae43d6fd9ed';
        func-mem-ref-line = '967';
        func-mem-ref-name = 'SysTick_Config_S';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga32b43080c94026bf4d5f4309bb1167fd';
        func-mem-ref-line = '990';
        func-mem-ref-name = 'SysTick_Reload_S';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SysTimer_1ga76bb1c6ce866afe8c8aeead3653479e7';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint64_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SysTimer_GetCompareValue_S';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      func-mem-desc-line = '529';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get system timer smode compare value.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function get the system timer smode compare value in STIMERCMP and STIMECMPH CSR register.
\return  compare value of system timer smode compare csr register in 64bit.
\remarks
- Compare value is 64bits wide.
- \ref SysTimer_SetCompareValue_S
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '642';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga7be2b2d3f8bc8fad22057ea5282f6c68';
        func-mem-ref-line = '578';
        func-mem-ref-name = 'CSR_STIMECMP';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga3a9f600798fa252afdb427fd91e4be64';
        func-mem-ref-line = '807';
        func-mem-ref-name = 'CSR_STIMECMPH';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SysTimer_1ga73ecb0abd4458c5fbe2d5b9bcb2d347b';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SysTimer_SetHartSWIRQ_S';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'hartid';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      func-mem-desc-line = '554';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Trigger or set supervisor mode software interrupt via system timer by hartid.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function set the system timer SSIP bit in SSIP register.
@param [in]  hartid  hart ID, one hart is required to have a known hart ID of 0, other harts ID can be in 1~1023.
\remarks
- Set system timer SSIP bit and generate a supervisor mode software interrupt.
- \ref SysTimer_ClearHartSWIRQ_S
- \ref SysTimer_GetHartSsipValue
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga9df58a7326fee34b546cae7d7d6e6de3';
        func-mem-ref-line = '2154';
        func-mem-ref-name = '__SW';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga55d0982631fe5ecbcfbb808913f6ad99';
        func-mem-ref-line = '102';
        func-mem-ref-name = 'SysTimer';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga9dcce0d5d51c0238db3cf4dab2f71979';
        func-mem-ref-line = '108';
        func-mem-ref-name = 'SysTimer_CLINT_SSIP_BASE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1gadce57091bd4a72ff6fdadefcfe6fa5f5';
        func-mem-ref-line = '81';
        func-mem-ref-name = 'SysTimer_SSIP_SSIP_Msk';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__timer_8h_1gab330bf2be90afb5c180a2190384ce316';
        func-mem-ref-line = '573';
        func-mem-ref-name = 'SysTimer_SetSWIRQ_S';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SysTimer_1gab330bf2be90afb5c180a2190384ce316';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SysTimer_SetSWIRQ_S';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      func-mem-desc-line = '573';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Trigger or set supervisor software interrupt via system timer.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function set the system timer SSIP bit in SSIP register.
\remarks
- Set system timer SSIP bit and generate a supervisor mode SW interrupt.
- \ref SysTimer_ClearSWIRQ_S
- \ref SysTimer_GetSsipValue
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga28d4cdee4a58996d850095961cd1c3df';
        func-mem-ref-line = '134';
        func-mem-ref-name = 'SysTimer_GetHartID_S';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga73ecb0abd4458c5fbe2d5b9bcb2d347b';
        func-mem-ref-line = '554';
        func-mem-ref-name = 'SysTimer_SetHartSWIRQ_S';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SysTimer_1ga55fb26c34a274cd093195814d7098299';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SysTimer_ClearHartSWIRQ_S';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'hartid';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      func-mem-desc-line = '589';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Clear system timer supervisor mode software interrupt pending request by hartid.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function clear the system timer SSIP bit in SSIP register.
@param [in]  hartid  hart ID, one hart is required to have a known hart ID of 0, other harts ID can be in 1~1023.
\remarks
- Clear system timer SSIP bit in SSIP register to clear the supervisor mode software interrupt pending.
- \ref SysTimer_SetHartSWIRQ_S
- \ref SysTimer_GetHartSsipValue
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga9df58a7326fee34b546cae7d7d6e6de3';
        func-mem-ref-line = '2154';
        func-mem-ref-name = '__SW';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga55d0982631fe5ecbcfbb808913f6ad99';
        func-mem-ref-line = '102';
        func-mem-ref-name = 'SysTimer';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga9dcce0d5d51c0238db3cf4dab2f71979';
        func-mem-ref-line = '108';
        func-mem-ref-name = 'SysTimer_CLINT_SSIP_BASE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1gadce57091bd4a72ff6fdadefcfe6fa5f5';
        func-mem-ref-line = '81';
        func-mem-ref-name = 'SysTimer_SSIP_SSIP_Msk';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__timer_8h_1gac5810128025bf5578279e8db5a41d137';
        func-mem-ref-line = '608';
        func-mem-ref-name = 'SysTimer_ClearSWIRQ_S';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SysTimer_1gac5810128025bf5578279e8db5a41d137';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SysTimer_ClearSWIRQ_S';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      func-mem-desc-line = '608';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Clear system timer supervisor mode software interrupt pending request.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function clear the system timer SSIP bit in SSIP register.
\remarks
- Clear system timer SSIP bit in SSIP register to clear the supervisor mode software interrupt pending.
- \ref SysTimer_SetSWIRQ_S
- \ref SysTimer_GetSsipValue
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga55fb26c34a274cd093195814d7098299';
        func-mem-ref-line = '589';
        func-mem-ref-name = 'SysTimer_ClearHartSWIRQ_S';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga28d4cdee4a58996d850095961cd1c3df';
        func-mem-ref-line = '134';
        func-mem-ref-name = 'SysTimer_GetHartID_S';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SysTimer_1ga39e1bb261100d0867e0706b9623170c5';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SysTimer_GetHartSsipValue';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'hartid';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      func-mem-desc-line = '627';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get system timer SSIP register value by hartid.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function get the system timer SSIP register value.
@param [in]  hartid  hart ID, one hart is required to have a known hart ID of 0, other harts ID can be in 1~1023.
\return    Value of Timer SSIP register.
\remarks
- Bit0 is SW interrupt flag.
  Bit0 is 1 then SW interrupt set. Bit0 is 0 then SW interrupt clear.
- \ref SysTimer_SetHartSWIRQ_S
- \ref SysTimer_ClearHartSWIRQ_S
- \ref SysTimer_SetHartSsipValue
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaf898279e3db81302391a698214744865';
        func-mem-ref-line = '2102';
        func-mem-ref-name = '__LW';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga55d0982631fe5ecbcfbb808913f6ad99';
        func-mem-ref-line = '102';
        func-mem-ref-name = 'SysTimer';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga9dcce0d5d51c0238db3cf4dab2f71979';
        func-mem-ref-line = '108';
        func-mem-ref-name = 'SysTimer_CLINT_SSIP_BASE';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga001025051472e5c014ec2431cb161649';
        func-mem-ref-line = '649';
        func-mem-ref-name = 'SysTimer_GetSsipValue';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SysTimer_1ga001025051472e5c014ec2431cb161649';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SysTimer_GetSsipValue';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      func-mem-desc-line = '649';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get system timer SSIP register value.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function get the system timer MSIP register value.
\return    Value of Timer MSIP register.
\remarks
- Bit0 is SW interrupt flag.
  Bit0 is 1 then SW interrupt set. Bit0 is 0 then SW interrupt clear.
- \ref SysTimer_SetSWIRQ_S
- \ref SysTimer_ClearSWIRQ_S
- \ref SysTimer_SetSsipValue
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga28d4cdee4a58996d850095961cd1c3df';
        func-mem-ref-line = '134';
        func-mem-ref-name = 'SysTimer_GetHartID_S';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga39e1bb261100d0867e0706b9623170c5';
        func-mem-ref-line = '627';
        func-mem-ref-name = 'SysTimer_GetHartSsipValue';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SysTimer_1ga851e2cafb99a02f2f25349d16626b52b';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SysTimer_SetHartSsipValue';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'ssip';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'hartid';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      func-mem-desc-line = '664';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set system timer SSIP register value by hartid.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function set the system timer SSIP register value.
@param [in]  msip   value to set SSIP register
@param [in]  hartid  hart ID, one hart is required to have a known hart ID of 0, other harts ID can be in 1~1023.
\remarks
- \ref SysTimer_GetHartSsipValue
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga9df58a7326fee34b546cae7d7d6e6de3';
        func-mem-ref-line = '2154';
        func-mem-ref-name = '__SW';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga55d0982631fe5ecbcfbb808913f6ad99';
        func-mem-ref-line = '102';
        func-mem-ref-name = 'SysTimer';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga9dcce0d5d51c0238db3cf4dab2f71979';
        func-mem-ref-line = '108';
        func-mem-ref-name = 'SysTimer_CLINT_SSIP_BASE';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'core__feature__timer_8h_1gadbad22248a2b40b986128fac19b2bf07';
        func-mem-ref-line = '681';
        func-mem-ref-name = 'SysTimer_SetSsipValue';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SysTimer_1gadbad22248a2b40b986128fac19b2bf07';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SysTimer_SetSsipValue';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'ssip';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      func-mem-desc-line = '681';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set system timer SSIP register value.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function set the system timer SSIP register value.
@param [in]  msip   value to set SSIP register
- \ref SysTimer_GetSsipValue
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga17e2d6476f35a0e8f9552b06e9f6d05c';
        func-mem-ref-line = '127';
        func-mem-ref-name = 'SysTimer_GetHartID';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga851e2cafb99a02f2f25349d16626b52b';
        func-mem-ref-line = '664';
        func-mem-ref-name = 'SysTimer_SetHartSsipValue';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SysTimer_1gada2ed50ccf3544deb4acd62e4637f6d1';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SysTimer_SendIPI_S';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'hartid';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      func-mem-desc-line = '693';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
send ipi to target hart using Systimer Clint SSIP
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function send ipi using clint timer's sSIP register.
@param [in]  hart  target hart
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga9df58a7326fee34b546cae7d7d6e6de3';
        func-mem-ref-line = '2154';
        func-mem-ref-name = '__SW';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga9dcce0d5d51c0238db3cf4dab2f71979';
        func-mem-ref-line = '108';
        func-mem-ref-name = 'SysTimer_CLINT_SSIP_BASE';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SysTimer_1ga2f5720e1c3c1700f438f7b8640c6fe7e';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SysTimer_ClearIPI_S';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'hartid';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      func-mem-desc-line = '705';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
clear ipi to target hart using Systimer Clint SSIP
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function clear ipi using clint timer's SSIP register.
@param [in]  hart  target hart
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga9df58a7326fee34b546cae7d7d6e6de3';
        func-mem-ref-line = '2154';
        func-mem-ref-name = '__SW';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga9dcce0d5d51c0238db3cf4dab2f71979';
        func-mem-ref-line = '108';
        func-mem-ref-name = 'SysTimer_CLINT_SSIP_BASE';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SysTimer_1ga6bb365f1a8baee315b974a2fe1a7cf4a';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SysTimer_EnableSSTC';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      func-mem-desc-line = '718';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Enable SSTC access right for supervisor mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This will enable SSTC stimecmp(h) csr register read/write access right in supervisor mode
and make time(h) csr can be read
\attention  This can be only executed in machine mode
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gafdbd9b5a14b44913675d0fa73ca6716f';
        func-mem-ref-line = '697';
        func-mem-ref-name = '__RV_CSR_SET';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga0c406c25c8c80d7198f7bf457f38e21d';
        func-mem-ref-line = '633';
        func-mem-ref-name = 'CSR_MCOUNTEREN';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gabd461f8e56584d08ddeff0bd6c9373cc';
        func-mem-ref-line = '634';
        func-mem-ref-name = 'CSR_MENVCFG';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gad65278e687be5c621f45e8592066e3df';
        func-mem-ref-line = '848';
        func-mem-ref-name = 'CSR_MENVCFGH';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga4ae98e79b3386cd814dc3ce9f04e4b48';
        func-mem-ref-line = '233';
        func-mem-ref-name = 'MCOUNTEREN_TIME';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaa37e5a271c4af6d26791ff1a09a52024';
        func-mem-ref-line = '201';
        func-mem-ref-name = 'MENVCFG_STCE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga7fa44490334be63bbf3adb3f4b35479a';
        func-mem-ref-line = '206';
        func-mem-ref-name = 'MENVCFGH_STCE';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SysTimer_1ga18b0f1f5bd6bdabc14509cd507020988';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SysTimer_DisableSSTC';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      func-mem-desc-line = '734';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Disable SSTC stimecmp csr access right for supervisor mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This will disable SSTC stimecmp(h) csr register read/write access right in supervisor mode
and make time(h) csr can not be read
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga14cf0513f6b576fcd1ff700b08f65543';
        func-mem-ref-line = '734';
        func-mem-ref-name = '__RV_CSR_CLEAR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga0c406c25c8c80d7198f7bf457f38e21d';
        func-mem-ref-line = '633';
        func-mem-ref-name = 'CSR_MCOUNTEREN';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gabd461f8e56584d08ddeff0bd6c9373cc';
        func-mem-ref-line = '634';
        func-mem-ref-name = 'CSR_MENVCFG';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gad65278e687be5c621f45e8592066e3df';
        func-mem-ref-line = '848';
        func-mem-ref-name = 'CSR_MENVCFGH';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga4ae98e79b3386cd814dc3ce9f04e4b48';
        func-mem-ref-line = '233';
        func-mem-ref-name = 'MCOUNTEREN_TIME';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaa37e5a271c4af6d26791ff1a09a52024';
        func-mem-ref-line = '201';
        func-mem-ref-name = 'MENVCFG_STCE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga7fa44490334be63bbf3adb3f4b35479a';
        func-mem-ref-line = '206';
        func-mem-ref-name = 'MENVCFGH_STCE';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SysTimer_1gac41101f6eb4776148a05d1b02b643f8e';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SysTimer_SoftwareReset';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      func-mem-desc-line = '755';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Do software reset request.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function will do software reset request through MTIMER
- Software need to write \ref SysTimer_MSFRST_KEY to generate software reset request
- The software request flag can be cleared by reset operation to clear
\remarks
- The software reset is sent to SoC, SoC need to generate reset signal and send back to Core
- This function will not return, it will do while(1) to wait the Core reset happened
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga55d0982631fe5ecbcfbb808913f6ad99';
        func-mem-ref-line = '102';
        func-mem-ref-name = 'SysTimer';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga181dffb1870282631f8858ea23d9b8fa';
        func-mem-ref-line = '89';
        func-mem-ref-name = 'SysTimer_MSFRST_KEY';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SysTimer_1ga43dd8978cd97fc86bbf4c32a39c51899';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SysTimer_SendIPI';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'hartid';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      func-mem-desc-line = '768';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
send ipi to target hart using Systimer Clint MSIP
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function send ipi using clint timer's MSIP register.
@param [in]  hart  target hart
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga9df58a7326fee34b546cae7d7d6e6de3';
        func-mem-ref-line = '2154';
        func-mem-ref-name = '__SW';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga9af174e29dc41968fffd97bd849ae2f9';
        func-mem-ref-line = '105';
        func-mem-ref-name = 'SysTimer_CLINT_MSIP_BASE';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SysTimer_1ga58daddd80dd220f8d98286d0f9c13163';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SysTimer_ClearIPI';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'hartid';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      func-mem-desc-line = '780';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
clear ipi to target hart using Systimer Clint MSIP
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function clear ipi using clint timer's MSIP register.
@param [in]  hart  target hart
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga9df58a7326fee34b546cae7d7d6e6de3';
        func-mem-ref-line = '2154';
        func-mem-ref-name = '__SW';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga9af174e29dc41968fffd97bd849ae2f9';
        func-mem-ref-line = '105';
        func-mem-ref-name = 'SysTimer_CLINT_MSIP_BASE';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SysTimer_1ga17ce511a016535e3f6d7cb09997399d5';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SysTimer_EnableSAccess';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      func-mem-desc-line = '792';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Enable supervisor mode systimer register read/write access right.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This will make some systimer registers can be accessed in supervisor mode, which is reset state.
\attention  This can be only executed in machine mode
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga55d0982631fe5ecbcfbb808913f6ad99';
        func-mem-ref-line = '102';
        func-mem-ref-name = 'SysTimer';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SysTimer_1ga262be22f82717edf501d41865244d75a';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SysTimer_DisableSAccess';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      func-mem-desc-line = '803';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Disable supervisor mode systimer register read/write access right.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This will make some systimer registers can not be accessed in supervisor mode.
\attention  This can be only executed in machine mode
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga55d0982631fe5ecbcfbb808913f6ad99';
        func-mem-ref-line = '102';
        func-mem-ref-name = 'SysTimer';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SysTimer_1ga349805c25d9aa753c6fd69b3c0151126';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_INLINE uint32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SysTick_Config';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint64_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'ticks';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      func-mem-desc-line = '834';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
System Tick Configuration.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Initializes the System Timer and its non-vector interrupt, and starts the System Tick Timer.

 In our default implementation, the timer counter will be set to zero, and it will start a timer compare non-vector interrupt
 when it matchs the ticks user set, during the timer interrupt user should reload the system tick using \ref SysTick_Reload function
 or similar function written by user, so it can produce period timer interrupt.
@param [in]  ticks  Number of ticks between two interrupts.
\return          0  Function succeeded.
\return          1  Function failed.
\remarks
- For \ref __NUCLEI_N_REV >= 0x0104, the CMPCLREN bit in MTIMECTL is introduced,
  but we assume that the CMPCLREN bit is set to 0, so MTIMER register will not be
  auto cleared to 0 when MTIMER >= MTIMERCMP.
- When the variable \ref __Vendor_SysTickConfig is set to 1, then the
  function \ref SysTick_Config is not included.
- In this case, the file <b><Device>.h</b> must contain a vendor-specific implementation
  of this function.
- If user need this function to start a period timer interrupt, then in timer interrupt handler
  routine code, user should call \ref SysTick_Reload with ticks to reload the timer.
- This function only available when __SYSTIMER_PRESENT == 1 and __ECLIC_PRESENT == 1 and __Vendor_SysTickConfig == 0
\sa
- \ref SysTimer_SetCompareValue; SysTimer_SetLoadValue
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gaef478ada8e8906c9fe8d4dc2311a39e1';
        func-mem-ref-line = '249';
        func-mem-ref-name = 'ECLIC_EnableIRQ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga6a01697e0ba89c691f98fee801f4a25c';
        func-mem-ref-line = '152';
        func-mem-ref-name = 'ECLIC_NON_VECTOR_INTERRUPT';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gad6f35a2f69908b97b083c5e31c1c5aad';
        func-mem-ref-line = '261';
        func-mem-ref-name = 'ECLIC_SetLevelIRQ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga0bd2875fbd02a00bec78735940704c13';
        func-mem-ref-line = '257';
        func-mem-ref-name = 'ECLIC_SetShvIRQ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga5b454e48769abd7a88c2cc65fe53ac7a';
        func-mem-ref-line = '171';
        func-mem-ref-name = 'SysTimer_GetLoadValue';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gga7e1129cd8a196f4284d41db3e82ad5c8a1c65f7884cf42cfc70b0016245780dc9';
        func-mem-ref-line = '212';
        func-mem-ref-name = 'SysTimer_IRQn';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga52e85918789aa95fc4cd0d7238ca9b6c';
        func-mem-ref-line = '242';
        func-mem-ref-name = 'SysTimer_SetCompareValue';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SysTimer_1ga9a14de583e6e65f155a73f7ff181f042';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_INLINE uint32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SysTick_HartConfig';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint64_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'ticks';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'hartid';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      func-mem-desc-line = '874';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
System Tick Configuration By hartid.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Initializes the System Timer and its non-vector interrupt, and starts the System Tick Timer.

 In our default implementation, the timer counter will be set to zero, and it will start a timer compare non-vector interrupt
 when it matchs the ticks user set, during the timer interrupt user should reload the system tick using \ref SysTick_Reload function
 or similar function written by user, so it can produce period timer interrupt.
@param [in]  ticks  Number of ticks between two interrupts.
@param [in]  hartid  hart ID, one hart is required to have a known hart ID of 0, other harts ID can be in 1~1023.
\return          0  Function succeeded.
\return          1  Function failed.
\remarks
- For \ref __NUCLEI_N_REV >= 0x0104, the CMPCLREN bit in MTIMECTL is introduced,
  but we assume that the CMPCLREN bit is set to 0, so MTIMER register will not be
  auto cleared to 0 when MTIMER >= MTIMERCMP.
- When the variable \ref __Vendor_SysTickConfig is set to 1, then the
  function \ref SysTick_Config is not included.
- In this case, the file <b><Device>.h</b> must contain a vendor-specific implementation
  of this function.
- If user need this function to start a period timer interrupt, then in timer interrupt handler
  routine code, user should call \ref SysTick_Reload with ticks to reload the timer.
- This function only available __Vendor_SysTickConfig == 0
- When ECLIC present, it will set eclic timer interrupt as non-vector mode, and level configured to 0, and enable it
- In S-mode, hartid can't be get by using __get_hart_id function, so this api suits S-mode particularly.
\sa
- \ref SysTimer_SetCompareValue; SysTimer_SetLoadValue
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gaef478ada8e8906c9fe8d4dc2311a39e1';
        func-mem-ref-line = '249';
        func-mem-ref-name = 'ECLIC_EnableIRQ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga6a01697e0ba89c691f98fee801f4a25c';
        func-mem-ref-line = '152';
        func-mem-ref-name = 'ECLIC_NON_VECTOR_INTERRUPT';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gad6f35a2f69908b97b083c5e31c1c5aad';
        func-mem-ref-line = '261';
        func-mem-ref-name = 'ECLIC_SetLevelIRQ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga0bd2875fbd02a00bec78735940704c13';
        func-mem-ref-line = '257';
        func-mem-ref-name = 'ECLIC_SetShvIRQ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga5b454e48769abd7a88c2cc65fe53ac7a';
        func-mem-ref-line = '171';
        func-mem-ref-name = 'SysTimer_GetLoadValue';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gga7e1129cd8a196f4284d41db3e82ad5c8a1c65f7884cf42cfc70b0016245780dc9';
        func-mem-ref-line = '212';
        func-mem-ref-name = 'SysTimer_IRQn';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1gab9fb66405cec7ea36873619c67d7840f';
        func-mem-ref-line = '206';
        func-mem-ref-name = 'SysTimer_SetHartCompareValue';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SysTimer_1ga9906dae1937eac222354df5a9069945a';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SysTick_Reload';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint64_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'ticks';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      func-mem-desc-line = '910';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
System Tick Reload.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Reload the System Timer Tick when the MTIMECMP reached TIME value

@param [in]  ticks  Number of ticks between two interrupts.
\return          0  Function succeeded.
\return          1  Function failed.
\remarks
- For \ref __NUCLEI_N_REV >= 0x0104, the CMPCLREN bit in MTIMECTL is introduced,
  but for this \ref SysTick_Config function, we assume this CMPCLREN bit is set to 0,
  so in interrupt handler function, user still need to set the MTIMERCMP or MTIMER to reload
  the system tick, if vendor want to use this timer's auto clear feature, they can define
  \ref __Vendor_SysTickConfig to 1, and implement \ref SysTick_Config and \ref SysTick_Reload functions.
- When the variable \ref __Vendor_SysTickConfig is set to 1, then the
  function \ref SysTick_Reload is not included.
- In this case, the file <b><Device>.h</b> must contain a vendor-specific implementation
  of this function.
- This function only available when __SYSTIMER_PRESENT == 1
- Since the MTIMERCMP value might overflow, if overflowed, MTIMER will be set to 0, and MTIMERCMP set to ticks
\sa
- \ref SysTimer_SetCompareValue
- \ref SysTimer_SetLoadValue
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga5b454e48769abd7a88c2cc65fe53ac7a';
        func-mem-ref-line = '171';
        func-mem-ref-name = 'SysTimer_GetLoadValue';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga52e85918789aa95fc4cd0d7238ca9b6c';
        func-mem-ref-line = '242';
        func-mem-ref-name = 'SysTimer_SetCompareValue';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SysTimer_1gac9919fbe0f9eb484f3ff95b7e415296e';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SysTick_HartReload';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint64_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'ticks';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'hartid';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      func-mem-desc-line = '946';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
System Tick Reload By hartid.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Reload the System Timer Tick when the MTIMECMP reached TIME value

@param [in]  ticks  Number of ticks between two interrupts.
@param [in]  hartid  hart ID, one hart is required to have a known hart ID of 0, other harts ID can be in 1~1023.
\return          0  Function succeeded.
\return          1  Function failed.
\remarks
- For \ref __NUCLEI_N_REV >= 0x0104, the CMPCLREN bit in MTIMECTL is introduced,
  but for this \ref SysTick_Config function, we assume this CMPCLREN bit is set to 0,
  so in interrupt handler function, user still need to set the MTIMERCMP or MTIMER to reload
  the system tick, if vendor want to use this timer's auto clear feature, they can define
  \ref __Vendor_SysTickConfig to 1, and implement \ref SysTick_Config and \ref SysTick_Reload functions.
- When the variable \ref __Vendor_SysTickConfig is set to 1, then the
  function \ref SysTick_Reload is not included.
- In this case, the file <b><Device>.h</b> must contain a vendor-specific implementation
  of this function.
- This function only available when __SYSTIMER_PRESENT == 1 and __ECLIC_PRESENT == 1 and __Vendor_SysTickConfig == 0
- Since the MTIMERCMP value might overflow, if overflowed, MTIMER will be set to 0, and MTIMERCMP set to ticks
- In S-mode, hartid can't be get by using __get_hart_id function, so this api suits S-mode particularly.
\sa
- \ref SysTimer_SetCompareValue
- \ref SysTimer_SetLoadValue
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga5b454e48769abd7a88c2cc65fe53ac7a';
        func-mem-ref-line = '171';
        func-mem-ref-name = 'SysTimer_GetLoadValue';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1gab9fb66405cec7ea36873619c67d7840f';
        func-mem-ref-line = '206';
        func-mem-ref-name = 'SysTimer_SetHartCompareValue';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SysTimer_1gaab738f70ca127c297831dae43d6fd9ed';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_INLINE uint32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SysTick_Config_S';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint64_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'ticks';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      func-mem-desc-line = '967';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
System Tick Configuration in supervisor mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Initializes the system timer supervisor mode interrupt and registered as non-vector interrupt

 The smode timecmp csr register will be set to proper value according to the ticks passed
 when it matchs the ticks user set, during the smode timer interrupt user should reload the system tick using \ref SysTick_Reload_S function
 or similar function written by user, so it can produce period smode timer interrupt.
@param [in]  ticks  Number of ticks between two interrupts.
\return          0  Function succeeded.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga5f54b26adf57d254f6a589dab36bd28a';
        func-mem-ref-line = '1147';
        func-mem-ref-name = '__get_rv_time';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gae3748a626384ad0458f91de251108d9f';
        func-mem-ref-line = '281';
        func-mem-ref-name = 'ECLIC_EnableIRQ_S';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga6a01697e0ba89c691f98fee801f4a25c';
        func-mem-ref-line = '152';
        func-mem-ref-name = 'ECLIC_NON_VECTOR_INTERRUPT';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gafc63cc5748a7a6c69348496a11715560';
        func-mem-ref-line = '277';
        func-mem-ref-name = 'ECLIC_SetLevelIRQ_S';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gab09f39dabde0e2823234ae145cf4264f';
        func-mem-ref-line = '273';
        func-mem-ref-name = 'ECLIC_SetShvIRQ_S';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1gafde21d158c8443c6991e2f2ba5dc7519';
        func-mem-ref-line = '509';
        func-mem-ref-name = 'SysTimer_SetCompareValue_S';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SysTimer_1ga32b43080c94026bf4d5f4309bb1167fd';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SysTick_Reload_S';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint64_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'ticks';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      func-mem-desc-line = '990';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
System Tick Reload in supervisor mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
 Reload the System Timer Tick when the STIMECMP CSR reached TIME value

@param [in]  ticks  Number of ticks between two interrupts.
\return          0  Function succeeded.
\return          1  Function failed.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga5f54b26adf57d254f6a589dab36bd28a';
        func-mem-ref-line = '1147';
        func-mem-ref-name = '__get_rv_time';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1gafde21d158c8443c6991e2f2ba5dc7519';
        func-mem-ref-line = '509';
        func-mem-ref-name = 'SysTimer_SetCompareValue_S';
    };
    }; /* func-member */
    };
  file-full-name  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
System Timer feature API header file for Nuclei N/NX Core.
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_



_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'core__feature__vector_8h';
  file-name = 'core_feature_vector.h';
    func = {
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__Vector__Intrinsic_1gaa57afbbe1c10fb643dcdf645feb4fd02';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__enable_vector';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_vector.h';
      func-mem-desc-line = '72';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Enable Vector Unit.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Set vector context status bits to enable vector unit,
and set state to initial
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga14cf0513f6b576fcd1ff700b08f65543';
        func-mem-ref-line = '734';
        func-mem-ref-name = '__RV_CSR_CLEAR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gafdbd9b5a14b44913675d0fa73ca6716f';
        func-mem-ref-line = '697';
        func-mem-ref-name = '__RV_CSR_SET';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga7086e667c65affe87d2c32115193d736';
        func-mem-ref-line = '627';
        func-mem-ref-name = 'CSR_MSTATUS';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga111f52d63d2182177fbb81943f663498';
        func-mem-ref-line = '46';
        func-mem-ref-name = 'MSTATUS_VS';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gadb30e0a3216b66b223217c1a0bb3d125';
        func-mem-ref-line = '69';
        func-mem-ref-name = 'MSTATUS_VS_INITIAL';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__Vector__Intrinsic_1gacdf19bed75c4eddafb68d96863e24d6b';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__disable_vector';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_vector.h';
      func-mem-desc-line = '83';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Disable Vector Unit.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Clear vector context status bits to disable vector unit
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga14cf0513f6b576fcd1ff700b08f65543';
        func-mem-ref-line = '734';
        func-mem-ref-name = '__RV_CSR_CLEAR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga7086e667c65affe87d2c32115193d736';
        func-mem-ref-line = '627';
        func-mem-ref-name = 'CSR_MSTATUS';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga111f52d63d2182177fbb81943f663498';
        func-mem-ref-line = '46';
        func-mem-ref-name = 'MSTATUS_VS';
    };
    }; /* func-member */
    };
  file-full-name  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_vector.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
Vector feature API header file for Nuclei N/NX Core.
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_



_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'nmsis__bench_8h';
  file-name = 'nmsis_bench.h';
    define = {
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga508a1b2d2b74addee819f994fe18172a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'READ_CYCLE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__get_rv_cycle
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '95';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
When XLEN=32, reading the full 64-bit CYCLE register incurs additional overhead.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
<tt>BENCH_XLEN_MODE</tt> skips reading the upper 32 bits, reducing the extra cycle cost
and allowing for more accurate measurements of small cycle counts.

NOTE: It is only applicable when the total cycle count does not exceed 2^32.
Read the whole 64 bits value of MCYCLE register 
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga13369af8754a1e0122635670943dd7c5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'BENCH_DECLARE_VAR';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
                                static volatile Bench_Type _bc_sttcyc, _bc_endcyc, _bc_usecyc, _bc_sumcyc; \
                                static volatile unsigned long _bc_lpcnt, _bc_ercd;
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '102';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Declare benchmark required variables, need to be placed above all BENCH_xxx macros in each c source code if BENCH_xxx used.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga7c03d0b9ba16f226adb01b8e7d84dcb2';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'BENCH_INIT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
                                printf("Benchmark initialized\n"); \
                                __prepare_bench_env(); \
                                _bc_ercd = 0; _bc_sumcyc = 0;
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '106';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Initialize benchmark environment, need to called in before other BENCH_xxx macros are called.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga32e87f8d43d5f9009b34a37b2cc45de1';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'BENCH_RESET';
      define-mem-param  = {
        define-mem-def-name = 'proc';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
_bc_sumcyc = 0; _bc_usecyc = 0; _bc_lpcnt = 0; _bc_ercd = 0;
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '111';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Reset benchmark sum cycle and use cycle for proc.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1gaf3bd934f09e8e920dcdde80974df47a0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'BENCH_START';
      define-mem-param  = {
        define-mem-def-name = 'proc';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
                                _bc_ercd = 0; \
                                _bc_sttcyc = READ_CYCLE();
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '114';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Start to do benchmark for proc, and record start cycle, and reset error code.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga4360fc5883dee0bc2fe5a8c4aff61443';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'BENCH_SAMPLE';
      define-mem-param  = {
        define-mem-def-name = 'proc';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
                                _bc_endcyc = READ_CYCLE(); \
                                _bc_usecyc = _bc_endcyc - _bc_sttcyc; \
                                _bc_sumcyc += _bc_usecyc; _bc_lpcnt += 1;
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '118';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sample a benchmark for proc, and record this start -> sample cost cycle, and accumulate it to sum cycle.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1gad73147f81fe560bb303fc914876da581';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'BENCH_END';
      define-mem-param  = {
        define-mem-def-name = 'proc';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
                                BENCH_SAMPLE(proc); \
                                printf("CSV, %s, %lu\n", #proc, (unsigned long)_bc_usecyc);
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '123';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Mark end of benchmark for proc, and calc used cycle, and print it.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga1a62c051ca6141ca397543df3ac36f4a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'BENCH_STOP';
      define-mem-param  = {
        define-mem-def-name = 'proc';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
printf("CSV, %s, %lu\n", #proc, (unsigned long)_bc_sumcyc);
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '127';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Mark stop of benchmark, start -> sample -> sample -> stop, and print the sum cycle of a proc.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga539fcaa5dfb5ca81019de8aa9633e0a3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'BENCH_STAT';
      define-mem-param  = {
        define-mem-def-name = 'proc';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
printf("STAT, %s, %lu, %lu\n", #proc, (unsigned long)_bc_lpcnt, (unsigned long)_bc_sumcyc);
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '130';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Show statistics of benchmark, format: STAT, proc, loopcnt, sumcyc.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga7ead0b72fbe2de8d24a32d5e7046df4d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'BENCH_GET_USECYC';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(_bc_usecyc)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '133';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get benchmark use cycle.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga0c2bc7010d7f02dca1dd2bf08a6bb4c4';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'BENCH_GET_SUMCYC';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(_bc_sumcyc)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '136';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get benchmark sum cycle.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1gabeada6e2c04ea0cdbab6c4d8e88e62c1';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'BENCH_GET_LPCNT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(_bc_lpcnt)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '139';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get benchmark loop count.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga307dd43fc84f328f071e9a9282356f3f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'BENCH_ERROR';
      define-mem-param  = {
        define-mem-def-name = 'proc';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
_bc_ercd = 1;
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '142';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Mark benchmark for proc is errored.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga823febdf779e65014c99fc1894278f30';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'BENCH_STATUS';
      define-mem-param  = {
        define-mem-def-name = 'proc';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
                                    if (_bc_ercd) { \
                                    printf("ERROR, %s\n", #proc); \
                                } else { \
                                    printf("SUCCESS, %s\n", #proc); \
                                }
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '144';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Show the status of the benchmark.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1gafd5d06104e48752ddf06a41465d5b19a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_SEL_INSTRUCTION_COMMIT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '174';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1gae62d3ed9454fca65eb3617a35cb93462';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_SEL_MEMORY_ACCESS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '175';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga06c6c14fb2178e3265a02bb1fa30be9f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_SEL_TYPE_0';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '176';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1gaa6ecca06be42ee90c6e335a52b9fc659';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_SEL_TYPE_1';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '177';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1gaa03c631460831d3857800fdb8284a1ed';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_SEL_TYPE_2';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '179';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga57e85203ca6f56344189517b3ae7738f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_SEL_TYPE_3';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
3
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '180';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga14ce9015e7af19aebbc7d1e0cdf1e6a3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_INSTRUCTION_COMMIT_CYCLE_COUNT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '183';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga9e11aefa07e40ba14503e63d4579cd07';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_INSTRUCTION_COMMIT_RETIRED_COUNT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '184';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga1274dbedaa1777f503e95dcc60af82e0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_INSTRUCTION_COMMIT_INTEGER_LOAD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
3
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '186';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1gab5779058e2d83a217a8b71c5ec2425b3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_INSTRUCTION_COMMIT_INTEGER_STORE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
4
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '188';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga72879e38749632cd216759e0f0060185';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_INSTRUCTION_COMMIT_ATOMIC_MEMORY_OPERATION';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
5
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '190';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1gaa8c411eb7869da3ed7c255949d2212b8';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_INSTRUCTION_COMMIT_SYSTEM';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
6
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '192';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga71787007ef542bfdf89b7a64adf1b875';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_INSTRUCTION_COMMIT_INTEGER_COMPUTATIONAL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
7
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '194';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga496adef83f62224628f9cf6df7d59b2d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_INSTRUCTION_COMMIT_CONDITIONAL_BRANCH';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
8
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '195';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga3d59f11477acfe2948264d17dd57473a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_INSTRUCTION_COMMIT_TAKEN_CONDITIONAL_BRANCH';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
9
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '196';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga4825feae4a9ba693081d77cec98c98c9';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_INSTRUCTION_COMMIT_JAL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
10
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '197';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga9a5acf0a0389fd674f99e21b398a0e69';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_INSTRUCTION_COMMIT_JALR';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
11
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '198';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1gac12effdb38419c4abc12b689688aae28';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_INSTRUCTION_COMMIT_RETURN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
12
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '199';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1gaffff4004caa714c732d514804809ed9f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_INSTRUCTION_COMMIT_CONTROL_TRANSFER';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
13
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '201';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1gaa6fe48be99f76afdc7238fdba41a6ad4';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_INSTRUCTION_COMMIT_FENCE_INSTRUCTION';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
14
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '203';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga76c7d0a06febb03a8c72da8a98e10360';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_INSTRUCTION_COMMIT_INTEGER_MULTIPLICATION';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
15
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '204';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga7627baf6a8dd2f2b4d1806b19dc334bd';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_INSTRUCTION_COMMIT_INTEGER_DIVISION_REMAINDER';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
16
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '206';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga3a6bc0462de9d915f2b2e4d0933cbcd5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_INSTRUCTION_COMMIT_FLOATING_POINT_LOAD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
17
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '207';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga329b0be97aff2a0773b72e137943f35c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_INSTRUCTION_COMMIT_FLOATING_POINT_STORE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
18
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '208';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1gac9a1c03d2e04f29a04d296dc6c9b8cdd';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_INSTRUCTION_COMMIT_FLOATING_POINT_ADDITION_SUBTRACTION';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
19
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '210';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga1c3603ff0e8edc70bf4d06f09b84740b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_INSTRUCTION_COMMIT_FLOATING_POINT_MULTIPLICATION';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
20
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '211';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga128d7da4b12f8a9ca9da86f1537e2191';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_INSTRUCTION_COMMIT_FLOATING_POINT_FUSED_MULTIPLY_ADD_SUB';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
21
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '213';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1gabb689b88bf92dcc604e45e6c30b4c18c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_INSTRUCTION_COMMIT_FLOATING_POINT_DIVISION_OR_SQUARE_ROOT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
22
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '214';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1gae7804d1c60e2578d2148f7551b72a1f6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_INSTRUCTION_COMMIT_OTHER_FLOATING_POINT_INSTRUCTION';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
23
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '215';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1gac2f0cb75fd97896f3989ae8ad9f359bd';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_INSTRUCTION_COMMIT_CONDITIONAL_BRANCH_PREDICTION_FAIL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
24
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '216';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1gabea3993ad52a92ea294d92c9794a2e2e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_INSTRUCTION_COMMIT_JALR_PREDICTION_FAIL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
25
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '218';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga33084e569f6972397228243a051905d5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_INSTRUCTION_COMMIT_POP_PREDICTION_FAIL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
26
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '219';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga14a4de03dc41f867e47e2cc104a04711';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_INSTRUCTION_COMMIT_FENCEI_INSTRUCTION';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
27
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '220';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1gaf38e1b13c190f426658ad5adcaeaedc0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_INSTRUCTION_COMMIT_SFENCE_INSTRUCTION';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
28
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '221';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga29bdb42654e96d3138495b5003e303ad';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_INSTRUCTION_COMMIT_ECALL_INSTRUCTION';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
29
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '222';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga3337f03c69f314ad535a31801bb1fb8a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_INSTRUCTION_COMMIT_EXCEPTION_INSTRUCTION';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
30
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '223';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1gaefe149e899369f9e3c9b5cfcf9c840d1';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_INSTRUCTION_COMMIT_INTERRUPT_INSTRUCTION';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
31
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '224';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga04717c9cc17cd7ded159fa70e188f90c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_MEMORY_ACCESS_ICACHE_MISS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '227';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1gab43806aa4824e711a2a01c679d37700b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_MEMORY_ACCESS_DCACHE_MISS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '228';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga90465dd442db612f0ef91805e639968c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_MEMORY_ACCESS_ITLB_MISS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
3
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '229';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1gab62130ba44e2c74befaa0a8745facd5f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_MEMORY_ACCESS_DTLB_MISS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
4
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '230';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga094f6edc9bacde7f2d6688d074103693';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_MEMORY_ACCESS_MAIN_DTLB_MISS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
5
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '231';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1gab9aeded1b2db50070bbd67a73ca79545';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_MEMORY_ACCESS_MAIN_TLB_MISS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
5
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '232';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga0631ce45521be18ce84b90dc32e4ece9';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_MEMORY_ACCESS_L2_CACHE_ACCESS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
8
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '234';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga7184d6a857eaffd8d14ac886c91e319a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_MEMORY_ACCESS_L2_CACHE_MISS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
9
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '235';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga0530eefab36020727fe78c9d583e417f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_MEMORY_ACCESS_MEMORY_BUS_REQUEST';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
10
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '239';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga1fd20e601c7b0345e648f9c9f289133a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_MEMORY_ACCESS_IFU_STALL_CYCLE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
11
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '240';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1gaf7455116285ef05e9a972f0bdfef2b74';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_MEMORY_ACCESS_EXU_STALL_CYCLE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
12
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '241';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1gab8c81beadfae0abe6c0bf7230572a066';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_MEMORY_ACCESS_TIMER';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
13
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '242';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga33a99c26e9ecd1757ebf2e1348783d8f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_0_CYCLE_COUNT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '250';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1gaa5e029c557638805cecd983240432596';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_0_RETIRED_COUNT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '251';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga8d050d054a93c14db7e5e9879804fa0b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_0_INTEGER_LOAD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
3
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '252';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga2d7d30696bf79bf35d45b69b98d43099';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_0_INTEGER_STORE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
4
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '253';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1gaad0a8015e406b2d84a12376bd63d1a19';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_0_ATOMIC_MEMORY_OPERATION';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
5
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '254';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga51027cb418cd4e45f8f221167ccc6567';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_0_SYSTEM';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
6
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '255';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga60b5cb49df7a59ab0f06c0cc96012d72';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_0_INTEGER_COMPUTATIONAL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
7
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '256';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga2ed9b53777954f749c2f6f0b1524c575';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_0_CONDITIONAL_BRANCH';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
8
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '257';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga2373b899cb21d732fe99552b2b6d2f7b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_0_TAKEN_CONDITIONAL_BRANCH';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
9
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '258';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga34c5fbb0087a017b921412a595ac0284';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_0_JAL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
10
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '259';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga063872f8263893cd16f57343b621b184';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_0_JALR';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
11
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '260';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1gaa972479ee59bca3643e85f76503e1f46';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_0_RETURN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
12
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '261';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga4e4c25d2b158bd255ed60a85d778eb69';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_0_CONTROL_TRANSFER';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
13
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '262';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1gaafdf4bfb69ab2939c584a5769fec16d2';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_0_FENCE_INSTRUCTION';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
14
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '263';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga2c2859db5d4578d8cfd918c204ea9ca1';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_0_INTEGER_MULTIPLICATION';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
15
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '264';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1gadad6a77d4988e01429a7144ca5b6db9d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_0_INTEGER_DIVISION_REMAINDER';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
16
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '265';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga54fbd25583c8c51d868792e366371a97';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_0_FLOATING_POINT_LOAD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
17
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '266';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga72742776ed837072aace961d753294c9';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_0_FLOATING_POINT_STORE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
18
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '267';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga61b628d32fae35d107b11a550c35a5de';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_0_FLOATING_POINT_ADDITION_SUBTRACTION';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
19
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '268';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga282f013a50bd386ebac9a74cadfaa66b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_0_FLOATING_POINT_MULTIPLICATION';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
20
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '269';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga0ca7c33910ee8425fb0fd1275ddeee00';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_0_FLOATING_POINT_FUSED_MULTIPLY_ADD_SUB';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
21
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '270';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1gaee9c3c10eebf31e8b3a4b076d436eeeb';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_0_FLOATING_POINT_DIVISION_OR_SQUARE_ROOT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
22
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '271';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga4962b63e04e2f27c49b24ed59d377c66';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_0_OTHER_FLOATING_POINT_INSTRUCTION';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
23
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '272';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1gae437cfba0db04d403bc2b6f80b89be49';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_0_CONDITIONAL_BRANCH_PREDICTION_FAIL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
24
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '273';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga5f96c628be14919ea13b7a5a56600c6a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_0_JALR_PREDICTION_FAIL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
25
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '274';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga9d98b5cdbfa9c2d5321de2addd7eea35';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_0_POP_PREDICTION_FAIL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
26
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '275';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga5cb72ee15f25942fed0c987bbcbd0a63';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_0_FENCEI_INSTRUCTION';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
27
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '276';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1gae449b01453b081401cacdd6e4a58f8a9';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_0_SFENCE_INSTRUCTION';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
28
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '277';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1gab8588d0a8f275aa0b6438b89a0d451b7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_0_ECALL_INSTRUCTION';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
29
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '278';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1gaa3a14539d934819268ebd95381024fa0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_0_EXCEPTION_INSTRUCTION';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
30
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '279';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga01e54d7a94ecd07e08575a25bf56aefa';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_0_INTERRUPT_INSTRUCTION';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
31
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '280';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga2d06c0533175ff152d584049ea932685';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_1_ICACHE_READ_MISS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '283';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga7f770c8682fecd24ec8e1d6b18cf9557';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_1_DCACHE_RW_MISS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '284';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga83cb29d09fa121ffacbbf0a0e8c38e85';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_1_ITLB_READ_MISS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
3
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '285';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga3a2833f69ffe61006439c6df04177b54';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_1_DTLB_RW_MISS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
4
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '286';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga8b5b38e7a58c7d2bc09e5d8236a99275';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_1_MAIN_TLB_MISS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
5
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '287';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1gacf83dfcd02a9bc391665466b851f9d41';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_1_L2_CACHE_ACCESS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
8
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '288';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga82bf948661a3d731728513b4b8c3432a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_1_L2_CACHE_MISS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
9
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '289';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga64400836629bb17da698da2873988d73';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_1_MEMORY_BUS_REQUEST';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
10
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '290';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1gaba3e985564b2c01be3ddccd509702f1f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_1_IFU_STALL_CYCLE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
11
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '291';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1gaed4025838d11174a9474c48fdb09764f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_1_EXU_STALL_CYCLE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
12
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '292';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga0b7fb005580e1dfa00a77624040167b0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_1_TIMER';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
13
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '293';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga6a29d73553ff4029075b9d78d040fd88';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_2_BRANCH_INSTRUCTION_COMMIT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '296';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga3c97b4030ec471428cd0fe01562cf769';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_2_BRANCH_PREDICT_FAIL_COMMIT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
3
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '297';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga17f4bfee91013e9eada3abcd6fb6a3ea';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_3_DCACHE_READ';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '300';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1gaa7d559075f9ece9e22ec7b7cfec374da';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_3_DCACHE_READ_MISS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '301';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1gafeb953d2440f272de3684bc82754d495';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_3_DCACHE_WRITE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '302';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga4fdf82bdc3912f55517bd715a699769c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_3_DCACHE_WRITE_MISS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
3
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '303';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga4ffa5aefa3450f04229b921dd09746d9';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_3_DCACHE_PREFETCH';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
4
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '304';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1gaa3bb61583502974dbdc0a7008b8d73ad';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_3_DCACHE_PREFETCH_MISS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
5
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '305';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga1f5f1972ba2a37eb3c956af6cffda53d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_3_ICACHE_READ';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
6
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '306';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga6d354852732bb67becd8b6ea025a4cf7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_3_ICACHE_PREFETCH';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
8
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '307';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1gadfb7bfbb345de9374542a872a7d825b5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_3_ICACHE_PREFETCH_MISS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
9
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '308';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1gaef715b51075c2e6d43d62bbe898bf4a4';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_3_L2_CACHE_READ_HIT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
10
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '309';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga57845579b751c795bedc9ebea288dfba';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_3_L2_CACHE_READ_MISS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
11
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '310';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1gaa983cc1d1ee127cac15c91e5bf347aef';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_3_L2_CACHE_WRITE_HIT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
12
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '311';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1gaa48376068795118d9bc68fb5581c3595';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_3_L2_CACHE_WRITE_MISS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
13
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '312';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga1be54fa3d3a0cd3771e77353400da449';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_3_L2_CACHE_PREFETCH_HIT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
14
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '313';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga05268c7bc69d8b6a5700ba089d613d61';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_3_L2_CACHE_PREFETCH_MISS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
15
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '314';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga28d43fc4af459ab799697ab3b7e56f1f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_3_DTLB_READ';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
16
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '315';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga183461cd0d39457702163e7e6d57f8e6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_3_DTLB_READ_MISS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
17
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '316';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga84510c8c52ae29e51fcae025217458a5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_3_DTLB_WRITE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
18
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '317';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1gaa408ccd6e150d3e7bc862006aa7724b0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_3_DTLB_WRITE_MISS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
19
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '318';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1gaccaabbf8f3f53f0d1f4b668b90b3cb53';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_3_ITLB_READ';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
20
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '319';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1gab2449f64fb6a6cea1f55a2a9c47c6c41';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_3_BTB_READ';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
22
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '320';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga09694e476ca92e75bc42c51bbc834150';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_3_BTB_READ_MISS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
23
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '321';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1gaa10057ead5811caf0b45b58868759666';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_3_BTB_WRITE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
24
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '322';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1gafacee30e0fbcf2c825b5030b86c1238d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'EVENT_TYPE_3_BTB_WRITE_MISS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
25
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '323';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga37d01dfd7c664ad7ad8a9c5980bcd60d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MSU_EVENT_ENABLE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x0F
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '326';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga6523d4d08aaf907170492089528c68bd';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MEVENT_EN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x08
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '327';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga97cd6944dbc97c2534c1915d17001b2d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SEVENT_EN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x02
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '328';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1gad5f1b25905f8ceb7df50880ac5b4ba2b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'UEVENT_EN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x01
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '329';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga442940d9de30e4b977aec67ff9ac2140';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'READ_HPM_COUNTER';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__get_hpm_counter
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '337';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga12bfc137b99f27083464b063866d8186';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'HPM_DECLARE_VAR';
      define-mem-param  = {
        define-mem-def-name = 'idx';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
                                static volatile Bench_Type __hpm_sttcyc##idx, __hpm_endcyc##idx, __hpm_usecyc##idx, __hpm_sumcyc##idx; \
                                static volatile unsigned long __hpm_lpcnt##idx, __hpm_val##idx;
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '341';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Declare high performance monitor counter idx benchmark required variables, need to be placed above all HPM_xxx macros in each c source code if HPM_xxx used.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1gac257ab8a03024c1523d09f747156793f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'HPM_SEL_ENABLE';
      define-mem-param  = {
        define-mem-def-name = 'ena';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(ena << 28)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '344';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga01a5bbaa1a6471796eea9b2ad0da2aa2';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'HPM_SEL_EVENT';
      define-mem-param  = {
        define-mem-def-name = 'sel';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'idx';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
((sel) | (idx << 4))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '345';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga2ad69669c5993ba72191d055398f2a11';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'HPM_EVENT';
      define-mem-param  = {
        define-mem-def-name = 'sel';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'idx';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'ena';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(HPM_SEL_ENABLE(ena) | HPM_SEL_EVENT(sel, idx))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '348';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Construct a event variable to be set(sel -> event_sel, idx -> event_idx, ena -> m/s/u_enable)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga9344225f8017eff21087ae9f9f59606e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'HPM_INIT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
                                printf("High performance monitor initialized\n"); \
                                __prepare_bench_env();
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '351';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Initialize high performance monitor environment, need to called in before other HPM_xxx macros are called.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga048c872fa70e7e768c736aae7af56262';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'HPM_RESET';
      define-mem-param  = {
        define-mem-def-name = 'idx';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'proc';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'event';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__hpm_sumcyc##idx = 0; __hpm_lpcnt##idx = 0;
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '355';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Reset high performance benchmark for proc using counter which index is idx.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga18736db02ec3feec8d88840f55ac9a21';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'HPM_START';
      define-mem-param  = {
        define-mem-def-name = 'idx';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'proc';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'event';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
                                __hpm_val##idx = (event);                                   \
                                __set_hpm_event(idx, __hpm_val##idx);                       \
                                __set_hpm_counter(idx, 0);                                  \
                                __hpm_sttcyc##idx = READ_HPM_COUNTER(idx);
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '358';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Start to do high performance benchmark for proc, and record start hpm counter.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1gab00294d189e87d14af54594972aff18c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'HPM_SAMPLE';
      define-mem-param  = {
        define-mem-def-name = 'idx';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'proc';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'event';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
                                __hpm_endcyc##idx = READ_HPM_COUNTER(idx);                 \
                                __hpm_usecyc##idx = __hpm_endcyc##idx - __hpm_sttcyc##idx;  \
                                __hpm_sumcyc##idx += __hpm_usecyc##idx;                     \
                                __hpm_lpcnt##idx += 1;
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '365';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Do high performance benchmark sample for proc, and sum it into sum counter.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga788ad19391c1b4c73099430187174a4a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'HPM_END';
      define-mem-param  = {
        define-mem-def-name = 'idx';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'proc';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'event';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
                                HPM_SAMPLE(idx, proc, event);                               \
                                printf("HPM%d:0x%x, %s, %lu\n", idx, event, #proc, (unsigned long)__hpm_usecyc##idx);
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '372';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Mark end of high performance benchmark for proc, and calc used hpm counter value.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga696b8776e5433b16509e58497163babf';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'HPM_STOP';
      define-mem-param  = {
        define-mem-def-name = 'idx';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'proc';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'event';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
                                printf("HPM%d:0x%x, %s, %lu\n", idx, event, #proc, (unsigned long)__hpm_sumcyc##idx);
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '377';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Mark stop of hpm benchmark, start -> sample -> sample -> stop, and print the sum cycle of a proc.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga541e4ac966c27c95140b19f304b45999';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'HPM_STAT';
      define-mem-param  = {
        define-mem-def-name = 'idx';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'proc';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'event';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
                                printf("STATHPM%d:0x%x, %s, %lu, %lu\n", idx, event, #proc, (unsigned long)__hpm_lpcnt##idx, (unsigned long)__hpm_sumcyc##idx);
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '381';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Show statistics of hpm benchmark, format: STATHPM#idx:event, proc, loopcnt, sumcyc.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1gaa1f822204ac13f6e442a0d33bc37b20b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'HPM_GET_USECYC';
      define-mem-param  = {
        define-mem-def-name = 'idx';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(__hpm_usecyc##idx)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '385';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get hpm benchmark use cycle for counter idx.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga60579b776f9682f7bb049a84704696df';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'HPM_GET_SUMCYC';
      define-mem-param  = {
        define-mem-def-name = 'idx';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(__hpm_sumcyc##idx)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '388';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get hpm benchmark sum cycle for counter idx.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga701b4b6870d47ddcbfa27c64ebdde398';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'HPM_GET_LPCNT';
      define-mem-param  = {
        define-mem-def-name = 'idx';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(__hpm_lpcnt##idx)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '391';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get hpm benchmark loop count for counter idx.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga9f63c9ae79c371d609fb39aff09134c9';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'NMSIS_TEST_PASS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
printf("\nNMSIS_TEST_PASS\n");
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '411';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Mark test or application passed.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga7cdb3615b3ef8615e5687d0187a8681b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'NMSIS_TEST_FAIL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
printf("\nNMSIS_TEST_FAIL\n");
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      define-mem-desc-line = '413';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Mark test or application failed.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    };
    typedef = {
    typedef-member = {
      typedef-mem-kind = 'typedef';
      typedef-mem-id   = 'nmsis__bench_8h_1a9d5bd1e99bab98fbca42984de3b539ee';
      typedef-mem-virt = normal;
      typedef-mem-prot = public;
      typedef-mem-type = <<_EnD_oF_dEf_TeXt_
uint64_t
_EnD_oF_dEf_TeXt_;
      typedef-mem-name = 'Bench_Type';
      typedef-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      typedef-mem-desc-line = '37';
      typedef-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      typedef-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* typedef-member */
    };
    func = {
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__Bench__Helpers_1ga22c7627db75a45ce728e0cb0fc1fe758';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__prepare_bench_env';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
      func-mem-desc-line = '73';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Prepare benchmark environment.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Prepare benchmark required environment, such as turn on necessary units
like vpu, cycle, instret counters, hpm counters
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga1b25cc01665431cd509fd3c1be93a811';
        func-mem-ref-line = '1510';
        func-mem-ref-name = '__enable_all_counter';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gafdbd9b5a14b44913675d0fa73ca6716f';
        func-mem-ref-line = '697';
        func-mem-ref-name = '__RV_CSR_SET';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga7086e667c65affe87d2c32115193d736';
        func-mem-ref-line = '627';
        func-mem-ref-name = 'CSR_MSTATUS';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga111f52d63d2182177fbb81943f663498';
        func-mem-ref-line = '46';
        func-mem-ref-name = 'MSTATUS_VS';
    };
    }; /* func-member */
    };
  file-full-name  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_bench.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
benchmark and helper related API for Nuclei N/NX Core
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_



_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'nmsis__compiler_8h';
  file-name = 'nmsis_compiler.h';
    define = {
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__PeriphAccess_1gaf63697ed9952cc71e1225efe205f6cd3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__I';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
volatile const
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_compiler.h';
      define-mem-desc-line = '56';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Defines 'read only' permissions.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__PeriphAccess_1ga7e25d9380f9ef903923964322e71f2f6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__O';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
volatile
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_compiler.h';
      define-mem-desc-line = '59';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Defines 'write only' permissions.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__PeriphAccess_1gaec43007d9998a0a0e01faede4133d6be';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__IO';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
volatile
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_compiler.h';
      define-mem-desc-line = '61';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Defines 'read / write' permissions.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__PeriphAccess_1ga4cc1649793116d7c2d8afce7a4ffce43';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__IM';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
volatile const
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_compiler.h';
      define-mem-desc-line = '65';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Defines 'read only' structure member permissions.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__PeriphAccess_1ga0ea2009ed8fd9ef35b48708280fdb758';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__OM';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
volatile
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_compiler.h';
      define-mem-desc-line = '67';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Defines 'write only' structure member permissions.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__PeriphAccess_1gab6caba5853a60a17e8e04499b52bf691';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__IOM';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
volatile
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_compiler.h';
      define-mem-desc-line = '69';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Defines 'read/write' structure member permissions.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__PeriphAccess_1ga286e3b913dbd236c7f48ea70c8821f4e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '_VAL2FLD';
      define-mem-param  = {
        define-mem-def-name = 'field';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'value';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(((uint32_t)(value) << field ## _Pos) & field ## _Msk)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_compiler.h';
      define-mem-desc-line = '84';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Mask and shift a bit field value for use in a register bit range.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
 The macro \ref _VAL2FLD uses the #define's _Pos and _Msk of the related bit
field to shift bit-field values for assigning to a register.

<strong>Example</strong>:
@code 
ECLIC->CFG = _VAL2FLD(CLIC_CLICCFG_NLBIT, 3);
\endcode
@param [in] field  Name of the register bit field.
@param [in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
\return           Masked and shifted value.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__PeriphAccess_1ga139b6e261c981f014f386927ca4a8444';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '_FLD2VAL';
      define-mem-param  = {
        define-mem-def-name = 'field';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'value';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_compiler.h';
      define-mem-desc-line = '99';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Mask and shift a register value to extract a bit filed value.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
 The macro \ref _FLD2VAL uses the #define's _Pos and _Msk of the related bit
field to extract the value of a bit field from a register.

<strong>Example</strong>:
@code 
nlbits = _FLD2VAL(CLIC_CLICCFG_NLBIT, ECLIC->CFG);
\endcode
@param [in] field  Name of the register bit field.
@param [in] value  Value of register. This parameter is interpreted as an uint32_t type.
\return           Masked and shifted bit field value.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    };
  file-full-name  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_compiler.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
NMSIS compiler generic header file.
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_



_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'nmsis__core_8h';
  file-name = 'nmsis_core.h';
  file-full-name  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_core.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'nmsis__core_8txt';
  file-name = 'nmsis_core.txt';
  file-full-name  = '/home/runner/work/NMSIS/NMSIS/NMSIS/doc/source/doxygen/nmsis_core.txt';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'nmsis__gcc_8h';
  file-name = 'nmsis_gcc.h';
    define = {
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CompilerControl_1ga447121dcab4275b7839a56082b7a1ab8';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__has_builtin';
      define-mem-param  = {
        define-mem-def-name = 'x';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_gcc.h';
      define-mem-desc-line = '49';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__ASM';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__asm
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_gcc.h';
      define-mem-desc-line = '55';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Pass information from the compiler to the assembler.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CompilerControl_1gade2d8d7118f8ff49547f60aa0c3382bb';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__INLINE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
inline
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_gcc.h';
      define-mem-desc-line = '60';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Recommend that function should be inlined by the compiler.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CompilerControl_1gaba87361bfad2ae52cfe2f40c1a1dbf9c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__STATIC_INLINE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
static inline
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_gcc.h';
      define-mem-desc-line = '65';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Define a static function that may be inlined by the compiler.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__STATIC_FORCEINLINE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__attribute__((always_inline)) static inline
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_gcc.h';
      define-mem-desc-line = '70';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Define a static function that should be always inlined by the compiler.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CompilerControl_1ga153a4a31b276a9758959580538720a51';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__NO_RETURN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__attribute__((__noreturn__))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_gcc.h';
      define-mem-desc-line = '75';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Inform the compiler that a function does not return.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CompilerControl_1ga3e40e4c553fc11588f7a4c2a19e789e0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__USED';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__attribute__((used))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_gcc.h';
      define-mem-desc-line = '80';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Inform that a variable shall be retained in executable image.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CompilerControl_1gac607bf387b29162be6a9b77fc7999539';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__WEAK';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__attribute__((weak))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_gcc.h';
      define-mem-desc-line = '85';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
restrict pointer qualifier to enable additional optimizations.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CompilerControl_1gabc2f44e663e21720d6ef1be3693c85d9';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__VECTOR_SIZE';
      define-mem-param  = {
        define-mem-def-name = 'x';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__attribute__((vector_size(x)))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_gcc.h';
      define-mem-desc-line = '90';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
specified the vector size of the variable, measured in bytes
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CompilerControl_1gabe8996d3d985ee1529475443cc635bf1';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__PACKED';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__attribute__((packed, aligned(1)))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_gcc.h';
      define-mem-desc-line = '95';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Request smallest possible alignment.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CompilerControl_1ga4dbb70fab85207c27b581ecb6532b314';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__PACKED_STRUCT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
struct __attribute__((packed, aligned(1)))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_gcc.h';
      define-mem-desc-line = '100';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Request smallest possible alignment for a structure.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CompilerControl_1ga6fba34d08b0a526830b4231d2ea0b89a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__PACKED_UNION';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
union __attribute__((packed, aligned(1)))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_gcc.h';
      define-mem-desc-line = '105';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Request smallest possible alignment for a union.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CompilerControl_1ga5103fb373cae9837cc4a384be55dc87f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__UNALIGNED_UINT16_WRITE';
      define-mem-param  = {
        define-mem-def-name = 'addr';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'val';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(void)((((struct T_UINT16_WRITE *)(void *)(addr))->v) = (val))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_gcc.h';
      define-mem-desc-line = '118';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Pointer for unaligned write of a uint16_t variable.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CompilerControl_1gab71b66e5ce403158d3dee62a59f9175f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__UNALIGNED_UINT16_READ';
      define-mem-param  = {
        define-mem-def-name = 'addr';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(((const struct T_UINT16_READ *)(const void *)(addr))->v)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_gcc.h';
      define-mem-desc-line = '131';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Pointer for unaligned read of a uint16_t variable.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CompilerControl_1ga203f593d140ed88b81bc189edc861110';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__UNALIGNED_UINT32_WRITE';
      define-mem-param  = {
        define-mem-def-name = 'addr';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'val';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(void)((((struct T_UINT32_WRITE *)(void *)(addr))->v) = (val))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_gcc.h';
      define-mem-desc-line = '144';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Pointer for unaligned write of a uint32_t variable.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CompilerControl_1ga3b931f0b051b8c1a6377a3dcc7559b5e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__UNALIGNED_UINT32_READ';
      define-mem-param  = {
        define-mem-def-name = 'addr';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(((const struct T_UINT32_READ *)(const void *)(addr))->v)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_gcc.h';
      define-mem-desc-line = '157';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Pointer for unaligned read of a uint32_t variable.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CompilerControl_1gaa65ef8f7a5e8b7a6ea6c1d48b4c78e55';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__ALIGNED';
      define-mem-param  = {
        define-mem-def-name = 'x';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__attribute__((aligned(x)))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_gcc.h';
      define-mem-desc-line = '162';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Minimum <tt>x</tt> bytes alignment for a variable.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CompilerControl_1ga378ac21329d33f561f90265eef89f564';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RESTRICT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__restrict
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_gcc.h';
      define-mem-desc-line = '167';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
restrict pointer qualifier to enable additional optimizations.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CompilerControl_1ga6516fb12ab0dd45c734f8cef7d921af6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__COMPILER_BARRIER';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ASM volatile("":::"memory")
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_gcc.h';
      define-mem-desc-line = '172';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Barrier to prevent compiler from reordering instructions.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CompilerControl_1ga399dde24635692b7740781dc9cc067e0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__USUALLY';
      define-mem-param  = {
        define-mem-def-name = 'exp';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__builtin_expect((exp), 1)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_gcc.h';
      define-mem-desc-line = '177';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
provide the compiler with branch prediction information, the branch is usually true
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CompilerControl_1ga028e3d25bf1120ae0c644b4d7fbe0d25';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RARELY';
      define-mem-param  = {
        define-mem-def-name = 'exp';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__builtin_expect((exp), 0)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_gcc.h';
      define-mem-desc-line = '182';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
provide the compiler with branch prediction information, the branch is rarely true
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CompilerControl_1gad20602e0e7adfc925c1205d0d38d91f6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__INTERRUPT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__attribute__((interrupt))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_gcc.h';
      define-mem-desc-line = '187';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Use this attribute to indicate that the specified function is an interrupt handler run in Machine Mode.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CompilerControl_1ga677eface3652ce969f8b8d32a12ef844';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__MACHINE_INTERRUPT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__attribute__ ((interrupt ("machine")))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_gcc.h';
      define-mem-desc-line = '192';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Use this attribute to indicate that the specified function is an interrupt handler run in Machine Mode.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CompilerControl_1ga6dbec968cfe0967d3e48226c006b43d3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__SUPERVISOR_INTERRUPT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__attribute__ ((interrupt ("supervisor")))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_gcc.h';
      define-mem-desc-line = '197';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Use this attribute to indicate that the specified function is an interrupt handler run in Supervisor Mode.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CompilerControl_1gab2e482b83a6d5934c2491a44052fd9fc';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__USER_INTERRUPT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__attribute__ ((interrupt ("user")))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_gcc.h';
      define-mem-desc-line = '202';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Use this attribute to indicate that the specified function is an interrupt handler run in User Mode.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    };
    var = {
    var-member = {
      var-mem-kind = 'variable';
      var-mem-id   = 'group__NMSIS__Core__CompilerControl_1gac962a9aa89cef6e5cde0fe6b067f7de3';
      var-mem-virt = normal;
      var-mem-prot = public;
      var-mem-type = <<_EnD_oF_dEf_TeXt_
__PACKED_STRUCT
_EnD_oF_dEf_TeXt_;
      var-mem-name = 'T_UINT16_WRITE';
      var-mem-initializer = <<_EnD_oF_dEf_TeXt_
{
      uint16_t v
_EnD_oF_dEf_TeXt_;
      var-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_gcc.h';
      var-mem-desc-line = '113';
      var-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Packed struct for unaligned uint16_t write access.
_EnD_oF_dEf_TeXt_;
      var-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* var-member */
    var-member = {
      var-mem-kind = 'variable';
      var-mem-id   = 'group__NMSIS__Core__CompilerControl_1ga86899dc41c5b3b9ce6b8014ee0e852b9';
      var-mem-virt = normal;
      var-mem-prot = public;
      var-mem-type = <<_EnD_oF_dEf_TeXt_
__PACKED_STRUCT
_EnD_oF_dEf_TeXt_;
      var-mem-name = 'T_UINT16_READ';
      var-mem-initializer = <<_EnD_oF_dEf_TeXt_
{
      uint16_t v
_EnD_oF_dEf_TeXt_;
      var-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_gcc.h';
      var-mem-desc-line = '126';
      var-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Packed struct for unaligned uint16_t read access.
_EnD_oF_dEf_TeXt_;
      var-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* var-member */
    var-member = {
      var-mem-kind = 'variable';
      var-mem-id   = 'group__NMSIS__Core__CompilerControl_1gabbd193dec7cb45f1fbd05ff7e366ffe2';
      var-mem-virt = normal;
      var-mem-prot = public;
      var-mem-type = <<_EnD_oF_dEf_TeXt_
__PACKED_STRUCT
_EnD_oF_dEf_TeXt_;
      var-mem-name = 'T_UINT32_WRITE';
      var-mem-initializer = <<_EnD_oF_dEf_TeXt_
{
      uint32_t v
_EnD_oF_dEf_TeXt_;
      var-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_gcc.h';
      var-mem-desc-line = '139';
      var-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Packed struct for unaligned uint32_t write access.
_EnD_oF_dEf_TeXt_;
      var-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* var-member */
    var-member = {
      var-mem-kind = 'variable';
      var-mem-id   = 'group__NMSIS__Core__CompilerControl_1ga9653a1cbf01ec418e8e940ee3996b8ca';
      var-mem-virt = normal;
      var-mem-prot = public;
      var-mem-type = <<_EnD_oF_dEf_TeXt_
__PACKED_STRUCT
_EnD_oF_dEf_TeXt_;
      var-mem-name = 'T_UINT32_READ';
      var-mem-initializer = <<_EnD_oF_dEf_TeXt_
{
      uint32_t v
_EnD_oF_dEf_TeXt_;
      var-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_gcc.h';
      var-mem-desc-line = '152';
      var-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Packed struct for unaligned uint32_t read access.
_EnD_oF_dEf_TeXt_;
      var-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* var-member */
    };
  file-full-name  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_gcc.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
NMSIS compiler GCC header file.
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_



_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'nmsis__version_8h';
  file-name = 'nmsis_version.h';
    define = {
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__VersionControl_1gab04e403f865e54d51a172e7b930e9450';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__NMSIS_VERSION_MAJOR';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1U)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_version.h';
      define-mem-desc-line = '58';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Represent the NMSIS major version.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
The NMSIS major version can be used to
differentiate between NMSIS major releases.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__VersionControl_1ga9162e103fa01a5f011fe168c6effcf21';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__NMSIS_VERSION_MINOR';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(4U)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_version.h';
      define-mem-desc-line = '67';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Represent the NMSIS minor version.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
The NMSIS minor version can be used to
query a NMSIS release update including new features.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__VersionControl_1ga1993e491d2b47ffdbef86e1aeea73533';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__NMSIS_VERSION_PATCH';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0U)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_version.h';
      define-mem-desc-line = '75';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Represent the NMSIS patch version.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
The NMSIS patch version can be used to
show bug fixes in this package.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__VersionControl_1gab5a0b348cd079c5b07a64ea593e67b29';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__NMSIS_VERSION';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
((__NMSIS_VERSION_MAJOR << 16U) | (__NMSIS_VERSION_MINOR << 8) | __NMSIS_VERSION_PATCH)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_version.h';
      define-mem-desc-line = '84';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Represent the NMSIS Version.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
NMSIS Version format: <strong>MAJOR.MINOR.PATCH</strong>
* MAJOR: \ref __NMSIS_VERSION_MAJOR, stored in <tt>bits [31:16]</tt> of \ref __NMSIS_VERSION
* MINOR: \ref __NMSIS_VERSION_MINOR, stored in <tt>bits [15:8]</tt> of \ref __NMSIS_VERSION
* PATCH: \ref __NMSIS_VERSION_PATCH, stored in <tt>bits [7:0]</tt> of \ref __NMSIS_VERSION
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    };
  file-full-name  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_version.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
NMSIS Version definitions.
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_



_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'riscv__bits_8h';
  file-name = 'riscv_bits.h';
    define = {
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'riscv__bits_8h_1a556725b82918b8d147c4f8682470ce52';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SLL32';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
sll
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_bits.h';
      define-mem-desc-line = '32';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'riscv__bits_8h_1ac677e3bf428ab129e0cc9153ad7f23c7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'STORE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
sw
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_bits.h';
      define-mem-desc-line = '33';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'riscv__bits_8h_1a0b674752cca6d434a1a69f40877eb2be';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'LOAD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
lw
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_bits.h';
      define-mem-desc-line = '34';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'riscv__bits_8h_1aefc8153bedbd7d3f60cdbddad43756fe';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'LWU';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
lw
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_bits.h';
      define-mem-desc-line = '35';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'riscv__bits_8h_1aa62dd562816b5fc787f69696032b8818';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'LOG_REGBYTES';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_bits.h';
      define-mem-desc-line = '36';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'riscv__bits_8h_1a4cbedf4d32de8a7fbc7474c72274d966';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'REGBYTES';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1 << LOG_REGBYTES)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_bits.h';
      define-mem-desc-line = '39';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'riscv__bits_8h_1aa4b11f8b6be96c931051dd96a272c127';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FPSTORE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
fsd
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_bits.h';
      define-mem-desc-line = '43';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'riscv__bits_8h_1abf00e9b8141cb68bf082f87c1218d39b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FPLOAD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
fld
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_bits.h';
      define-mem-desc-line = '44';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'riscv__bits_8h_1ab76a6628a511d413326668ce41103f1a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'LOG_FPREGBYTES';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
3
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_bits.h';
      define-mem-desc-line = '45';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'riscv__bits_8h_1a5b043d99a88f9c1799196765974334d0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FPREGBYTES';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1 << LOG_FPREGBYTES)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_bits.h';
      define-mem-desc-line = '51';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'riscv__bits_8h_1addeb2f7c41b462f7d844cc845174c85c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__rv_likely';
      define-mem-param  = {
        define-mem-def-name = 'x';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(x)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_bits.h';
      define-mem-desc-line = '58';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'riscv__bits_8h_1a3e1ff9b072d2ca20a786c0940edad053';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__rv_unlikely';
      define-mem-param  = {
        define-mem-def-name = 'x';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(x)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_bits.h';
      define-mem-desc-line = '59';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'riscv__bits_8h_1aac19123f807da404e30bc39ff10a8fa7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_ROUNDUP';
      define-mem-param  = {
        define-mem-def-name = 'a';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'b';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
((((a)-1)/(b)+1)*(b))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_bits.h';
      define-mem-desc-line = '62';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'riscv__bits_8h_1a9c086014b11aa4064e5713b6e39fa71c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_ROUNDDOWN';
      define-mem-param  = {
        define-mem-def-name = 'a';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'b';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
((a)/(b)*(b))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_bits.h';
      define-mem-desc-line = '63';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'riscv__bits_8h_1a82309e468f2d8acd459ab04e84010559';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_MAX';
      define-mem-param  = {
        define-mem-def-name = 'a';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'b';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
((a) > (b) ? (a) : (b))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_bits.h';
      define-mem-desc-line = '65';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'riscv__bits_8h_1a1cdb6990ccddec341d1ae8269dbd6733';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_MIN';
      define-mem-param  = {
        define-mem-def-name = 'a';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'b';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
((a) < (b) ? (a) : (b))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_bits.h';
      define-mem-desc-line = '66';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'riscv__bits_8h_1a5417fbfe0f7e0d636f056bf33d2057eb';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_CLAMP';
      define-mem-param  = {
        define-mem-def-name = 'a';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'lo';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'hi';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_MIN(__RV_MAX(a, lo), hi)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_bits.h';
      define-mem-desc-line = '67';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'riscv__bits_8h_1af26c1704cc9d8ef65e4e6e8e535f10b9';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_EXTRACT_FIELD';
      define-mem-param  = {
        define-mem-def-name = 'val';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'which';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(((val) & (which)) / ((which) & ~((which)-1)))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_bits.h';
      define-mem-desc-line = '69';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'riscv__bits_8h_1a3a9d4dadbe1405b7f69044794e8837f6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_INSERT_FIELD';
      define-mem-param  = {
        define-mem-def-name = 'val';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'which';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'fieldval';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(((val) & ~(which)) | ((fieldval) * ((which) & ~((which)-1))))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_bits.h';
      define-mem-desc-line = '70';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'riscv__bits_8h_1a929bd70ece66ba40d21354301fa5eb9d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__AC';
      define-mem-param  = {
        define-mem-def-name = 'X';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'Y';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(X##Y)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_bits.h';
      define-mem-desc-line = '76';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'riscv__bits_8h_1a807728c093518f6db61f62160774fb49';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '_AC';
      define-mem-param  = {
        define-mem-def-name = 'X';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'Y';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__AC(X,Y)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_bits.h';
      define-mem-desc-line = '77';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'riscv__bits_8h_1aea2262e4ba1c217633c1fae2d76213ad';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '_AT';
      define-mem-param  = {
        define-mem-def-name = 'T';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'X';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
((T)(X))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_bits.h';
      define-mem-desc-line = '78';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'riscv__bits_8h_1ac343685d452c94120a3653c845bee3c1';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '_UL';
      define-mem-param  = {
        define-mem-def-name = 'x';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(_AC(x, UL))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_bits.h';
      define-mem-desc-line = '81';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'riscv__bits_8h_1af10cae5f1474ee29ae0a7d8d00caa5f3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '_ULL';
      define-mem-param  = {
        define-mem-def-name = 'x';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(_AC(x, ULL))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_bits.h';
      define-mem-desc-line = '82';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'riscv__bits_8h_1aa81f86fca982061e1b93130846e26b85';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '_BITUL';
      define-mem-param  = {
        define-mem-def-name = 'x';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(_UL(1) << (x))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_bits.h';
      define-mem-desc-line = '84';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'riscv__bits_8h_1abd44204775984542b66b5e1cdd25340e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '_BITULL';
      define-mem-param  = {
        define-mem-def-name = 'x';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(_ULL(1) << (x))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_bits.h';
      define-mem-desc-line = '85';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'riscv__bits_8h_1a2d1ace2be4b6d58d3260b1b5fd1d63e0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'UL';
      define-mem-param  = {
        define-mem-def-name = 'x';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(_UL(x))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_bits.h';
      define-mem-desc-line = '87';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'riscv__bits_8h_1ae7289206560e57188eb393096c91e575';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ULL';
      define-mem-param  = {
        define-mem-def-name = 'x';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(_ULL(x))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_bits.h';
      define-mem-desc-line = '88';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'riscv__bits_8h_1a18d295a837ac71add5578860b55e5502';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'STR';
      define-mem-param  = {
        define-mem-def-name = 'x';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
XSTR(x)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_bits.h';
      define-mem-desc-line = '90';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'riscv__bits_8h_1abe87b341f562fd1cf40b7672e4d759da';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'XSTR';
      define-mem-param  = {
        define-mem-def-name = 'x';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
#x
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_bits.h';
      define-mem-desc-line = '91';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'riscv__bits_8h_1ac43f8b52ae96a4e813d8df9022d7e2c3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__STR';
      define-mem-param  = {
        define-mem-def-name = 's';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
#s
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_bits.h';
      define-mem-desc-line = '92';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'riscv__bits_8h_1a4689212d5a549893cabb9d7782eecfb6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'STRINGIFY';
      define-mem-param  = {
        define-mem-def-name = 's';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__STR(s)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_bits.h';
      define-mem-desc-line = '93';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    };
  file-full-name  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_bits.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'riscv__encoding_8h';
  file-name = 'riscv_encoding.h';
    define = {
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga3f4df6dc4219593cb6e8bd13d636e844';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MSTATUS_UIE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00000001
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '37';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga29a63dca3cfcf13877a0c354dc081505';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MSTATUS_SIE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00000002
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '38';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gab549408c2d03c2e09fbfab2898683097';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MSTATUS_HIE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00000004
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '39';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga225cb34e3b991318fa87f090cfc3fc5f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MSTATUS_MIE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00000008
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '40';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga17711b78183c43687036c60962c278cb';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MSTATUS_UPIE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00000010
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '41';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gac7fef7988d408f1f4ebe9e3849d68bb2';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MSTATUS_SPIE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00000020
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '42';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gae9f0e8010e025e3bf89eb3880566ce1d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MSTATUS_UBE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00000040
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '43';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga05fc511bb3d22b5e1abe8b9ccb30e7b3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MSTATUS_MPIE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00000080
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '44';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gad4b09023ff5bcbb14192e845c0532944';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MSTATUS_SPP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00000100
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '45';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga111f52d63d2182177fbb81943f663498';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MSTATUS_VS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00000600
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '46';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga2acf460f4ceda869c88c00878cb44314';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MSTATUS_MPP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00001800
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '47';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gab7b9c10a700f7570d44c49f369b6fcce';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MSTATUS_FS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00006000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '48';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga768db67b06c8341a4da264abcb7f3cfe';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MSTATUS_XS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00018000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '49';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gafa733f6d7aadab5b3c0318d005745a98';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MSTATUS_MPRV';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00020000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '50';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga656346a0a53639f2d60ca8e56506d60a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MSTATUS_SUM';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00040000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '51';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga8f4b37cdd71162f5b7adb583010443cb';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MSTATUS_MXR';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00080000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '52';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga9d5bb2ea5f82f54c8b9b5363e3d9a9e2';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MSTATUS_TVM';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00100000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '53';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga8e19c878576b1c77490cdfa10796acb0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MSTATUS_TW';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00200000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '54';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga2507709e2a407afba032f882939b9502';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MSTATUS_TSR';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00400000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '55';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gacca6e5c4f8af666a9b299af295f43348';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MSTATUS32_SD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x80000000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '56';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gad2f3eafd02e6788c7a1310db259bd136';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MSTATUS_UXL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x0000000300000000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '57';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaac0dae4a6c4f6decfb2e2845cd1b3c00';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MSTATUS_SXL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x0000000C00000000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '58';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gad5be31d8b3b1fe47eaa54fce1539e05e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MSTATUS_SBE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x0000001000000000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '59';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gab65f60955abe239ae90b13533731234f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MSTATUS_MBE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x0000002000000000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '60';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaed392faeb35011bf58ab938960d2b6e1';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MSTATUS_GVA';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x0000004000000000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '61';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaa6c1db10f02bf442f66af32c2e53f720';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MSTATUS_MPV';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x0000008000000000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '62';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga9d7df82e40e8cf00821e97a0bb8db04e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MSTATUS64_SD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x8000000000000000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '63';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga95a34cc78abc173fe829cf5b0daba397';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MSTATUS_FS_INITIAL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00002000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '65';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaef9ff6d95030e46ca86237a320898ca3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MSTATUS_FS_CLEAN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00004000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '66';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaa704a5aece9149a30cefae0a0f77f034';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MSTATUS_FS_DIRTY';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00006000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '67';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gadb30e0a3216b66b223217c1a0bb3d125';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MSTATUS_VS_INITIAL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00000200
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '69';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaf8303602b345392e401446ad7847555a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MSTATUS_VS_CLEAN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00000400
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '70';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gab4f88016ddf6800ff0ec728ecffc60af';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MSTATUS_VS_DIRTY';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00000600
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '71';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga32985eda0eab9a86d842a84adcff9ec7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MSTATUSH_SBE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00000010
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '73';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga58796f1c79d9786f4117af5ae0464725';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MSTATUSH_MBE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00000020
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '74';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga51e3d67fbcc10d3232506d5b6abe220b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MSTATUSH_GVA';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00000040
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '75';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gae8f6896ae6b250b1f4245db496ac0a6f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MSTATUSH_MPV';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00000080
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '76';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga431c67f7f0e4b5dbdf2048310ad814e0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSTATUS_UIE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00000001
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '78';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga1c1f1da0ecfca5bc4fc4db3acadf1bc8';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSTATUS_SIE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00000002
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '79';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga796ad1a8b2314776082e72e13f4a30cf';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSTATUS_UPIE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00000010
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '80';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga3f9373ba6db2ce5e5c7ea28c2a5b3df9';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSTATUS_SPIE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00000020
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '81';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga2c79e8876a7491c4b3976a88e515cf10';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSTATUS_UBE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00000040
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '82';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga4d0820d6a8b0c5b0fef6875a985d3370';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSTATUS_SPP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00000100
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '83';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga0d3104d4d82ca2797c87dae496bff304';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSTATUS_VS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00000600
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '84';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaff201911cccf15e446c43ba67b0f1aa7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSTATUS_FS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00006000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '85';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga2abef254823774927e3bf6b029fbad9d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSTATUS_XS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00018000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '86';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gac8726a0a74700feb038f6b74dbb3dc0f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSTATUS_SUM';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00040000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '87';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga3387d409543279220628618c0909fe55';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSTATUS_MXR';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00080000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '88';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga5f2248b3f4a648ce63c0468a92132971';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSTATUS32_SD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x80000000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '89';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga66d79e7ab75a06dbbd7d7f36d0c1c52a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSTATUS_UXL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x0000000300000000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '90';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga517c9ab9421f99b99f5da4d549177f38';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSTATUS64_SD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x8000000000000000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '91';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gadbc54e223924a0665163aff7f027c683';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'USTATUS_UIE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00000001
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '93';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga153948548240a6133259afde4348b043';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'USTATUS_UPIE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00000010
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '94';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga966a5f66e8f82245a23754d953272e26';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'DCSR_XDEBUGVER';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(3U<<30)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '96';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga70f0772b052aba7d37433a6abc524a05';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'DCSR_NDRESET';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<29)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '97';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gae0060c3218daba2cfe6b3a74eaa8004e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'DCSR_FULLRESET';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<28)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '98';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaee469b64e88766dd85645de42b9f2a5c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'DCSR_EBREAKM';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<15)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '99';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga113e941ee7b34c40b794e5b39638f79c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'DCSR_EBREAKH';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<14)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '100';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaa06fd020c5e6a4bc5e97715763eb85ff';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'DCSR_EBREAKS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<13)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '101';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gac6c4bbab3051160066b73951e0c58e84';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'DCSR_EBREAKU';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<12)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '102';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga7367ccfe98195ecdf126ea1f26f85b37';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'DCSR_STOPCYCLE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<10)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '103';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga8e011fbc15f29c25a9197e306eefc4bc';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'DCSR_STOPTIME';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<9)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '104';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga81c7d48193a62ce9c189bb0d2d104230';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'DCSR_CAUSE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(7<<6)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '105';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gabf604fa800bf4ef6aa8e58e662c34317';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'DCSR_DEBUGINT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<5)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '106';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga1a6de95ef85a1337a6c9bbfb8588d137';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'DCSR_HALT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<3)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '107';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga5136c4da715d2aa79f23dab172db4fea';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'DCSR_STEP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<2)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '108';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga110f30f7c9d25c057e2dfe1477e5b742';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'DCSR_PRV';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(3<<0)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '109';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga4cf6a474d1cc251a206f9ab512794581';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'DCSR_CAUSE_NONE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '111';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga0ca8d97eb41a31351ea471e87a6cb383';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'DCSR_CAUSE_SWBP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '112';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga73fbd946de0ee961a37aef9cf0113c10';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'DCSR_CAUSE_HWBP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '113';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga28fc94b1080dd0151ad942fd38ecf04d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'DCSR_CAUSE_DEBUGINT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
3
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '114';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga47955acab2f0d71bde8d2dbacebc1ce1';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'DCSR_CAUSE_STEP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
4
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '115';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gabbe672c98c7614d6346e83e80ee0df18';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'DCSR_CAUSE_HALT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
5
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '116';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga4be6cc72618e21a3011b626aff83eae8';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCONTROL_TYPE';
      define-mem-param  = {
        define-mem-def-name = 'xlen';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0xfULL<<((xlen)-4))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '118';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gab0c4b6681fe0b3fba6d512a084e318b2';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCONTROL_DMODE';
      define-mem-param  = {
        define-mem-def-name = 'xlen';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1ULL<<((xlen)-5))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '119';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga9d2d58a19b42feb156d060c4860773e3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCONTROL_MASKMAX';
      define-mem-param  = {
        define-mem-def-name = 'xlen';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x3fULL<<((xlen)-11))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '120';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gae3271344364caa6fdeedf62cad06ec32';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCONTROL_SELECT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<19)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '122';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga05f32197da7d4f4da6cd9ffd706f0181';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCONTROL_TIMING';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<18)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '123';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaa00ebcbad8ef4fd0b082ae955c70159a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCONTROL_ACTION';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x3f<<12)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '124';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga1ab44c2e81a1a31e766ec682cad96ea9';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCONTROL_CHAIN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<11)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '125';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga29db79af22f38eb123f1bf1c11c4c92a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCONTROL_MATCH';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0xf<<7)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '126';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga0b9146969080ec187962cbe3ee3f5aba';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCONTROL_M';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<6)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '127';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga02a3db7fdab9947d0c8239c011d1274e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCONTROL_H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<5)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '128';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gac9c0ad84304e51a07e42a9a70c210c95';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCONTROL_S';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<4)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '129';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga13c4a265729f4de2d9e7319e5aa29d8d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCONTROL_U';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<3)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '130';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga16ef1fd919fc1d8cce3e064aaf606a06';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCONTROL_EXECUTE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<2)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '131';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaeddbbc18f165aa8764e3b201e57958f7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCONTROL_STORE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<1)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '132';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga77472c8d179d5bf165e420aec140d1ad';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCONTROL_LOAD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<0)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '133';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga90057d3240f345a4c152667f336bb50f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCONTROL_TYPE_NONE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '135';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga510525cf4b02311be0f97070a0867e8e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCONTROL_TYPE_MATCH';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '136';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga48f74b38a5f172d576549d6ed3c2e9b0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCONTROL_ACTION_DEBUG_EXCEPTION';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '138';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga283b3199ea4bb5f6c27ccbe880d426df';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCONTROL_ACTION_DEBUG_MODE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '139';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga40674423a8d52e03f26a535f6833ebed';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCONTROL_ACTION_TRACE_START';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '140';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gad3f67c74ef8b33dbfcca678a3c381e62';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCONTROL_ACTION_TRACE_STOP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
3
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '141';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga227b2447936cd8f134d9ca084a233fe2';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCONTROL_ACTION_TRACE_EMIT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
4
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '142';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga9b67fcfd9cce0df82d2862dbf4e6e1e6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCONTROL_MATCH_EQUAL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '144';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga529552f378149e8b6a1d940f1279367b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCONTROL_MATCH_NAPOT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '145';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga161f7167c606c9e867af1bcba0cb8eab';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCONTROL_MATCH_GE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '146';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gafd67f3e374a7f912ec48d02a40730a1d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCONTROL_MATCH_LT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
3
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '147';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga9a5c571a197a84c425a54bfeeab76503';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCONTROL_MATCH_MASK_LOW';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
4
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '148';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gad53872401bc83df4c67017323ff47c29';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCONTROL_MATCH_MASK_HIGH';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
5
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '149';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga0bda37d26a2a610c14486b0cd367becc';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MIP_SSIP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1 << IRQ_S_SOFT)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '151';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gab8226593c790568a432eeb8ca7bb4270';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MIP_HSIP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1 << IRQ_H_SOFT)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '152';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga09c2dda94121d966560ac22fe6becdb3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MIP_MSIP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1 << IRQ_M_SOFT)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '153';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga40a54377f1fdb317c3f7397043874cae';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MIP_STIP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1 << IRQ_S_TIMER)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '154';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga15a22cfcd6f41aea04b9943a71d0a2ff';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MIP_HTIP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1 << IRQ_H_TIMER)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '155';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga51c044e20264a9e2a875b17482e8ff11';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MIP_MTIP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1 << IRQ_M_TIMER)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '156';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga3fdf03c28e7d1baba8fa6bb11eae8561';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MIP_SEIP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1 << IRQ_S_EXT)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '157';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga1c1ae7b718753753a5c99292450df837';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MIP_HEIP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1 << IRQ_H_EXT)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '158';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaa0b390526aa02e969ae64235b983069a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MIP_MEIP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1 << IRQ_M_EXT)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '159';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga581a15bf4b80b485ca87f80d3bcfe110';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MIE_SSIE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
MIP_SSIP
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '161';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga1663572390edca9da42c5cb7bfb48162';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MIE_HSIE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
MIP_HSIP
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '162';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gacdb82cffb46911d1a236dcf651b24b05';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MIE_MSIE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
MIP_MSIP
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '163';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gac5a9c8dcdb454fa5593b61b192b06c1d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MIE_STIE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
MIP_STIP
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '164';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaf09da2388826027bf56d8b0bd4729651';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MIE_HTIE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
MIP_HTIP
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '165';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga88f0c7a5a13f0570ecbaa43b912b0fe4';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MIE_MTIE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
MIP_MTIP
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '166';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga25eb65aea38f4aa1feeef2bf854cea74';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MIE_SEIE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
MIP_SEIP
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '167';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga92ca7b4341e5a046f312f5f0db077f44';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MIE_HEIE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
MIP_HEIP
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '168';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gab4e2e4b72ec1e13b315dcdc910f5595b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MIE_MEIE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
MIP_MEIP
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '169';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gacdfe2a4376d4c9873b865b878c6d5d2e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SIP_SSIP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
MIP_SSIP
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '171';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaa32b89e7176c6d37caa3ad78a600f4a1';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SIP_STIP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
MIP_STIP
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '172';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga4f22749780f682fec6f72be28ca6b2a6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SIP_SEIP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
MIP_SEIP
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '173';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga02551379f9acab8fcea973ecbc8fcf20';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SIE_SSIE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
MIP_SSIP
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '175';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga819d8ea9e98335b93d6120c89dd9458b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SIE_STIE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
MIP_STIP
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '176';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga7ca797adbc936cc2e7d7b66a40325e63';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SIE_SEIE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
MIP_SEIP
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '177';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga47cb8f2bba4218f518c624bf37b30aec';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCAUSE_INTR';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1ULL << (__riscv_xlen - 1))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '179';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gac36753607d01e463c6bc40cc7e82e805';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCAUSE_CAUSE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00000FFFUL
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '180';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga22ec836a2050b8837cf1687f74a9fd64';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SCAUSE_INTR';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
MCAUSE_INTR
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '181';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga0a8e2a80db77f69b3eb0f20503842f1d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SCAUSE_CAUSE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x000003FFUL
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '182';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gac86d2c91c61f0e22c3c5126fd9b30e9a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MENVCFG_CBIE_EN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x11 << 4)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '184';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaf3f3b9ca302a019f76d140de37280cc8';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MENVCFG_CBIE_FLUSH';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x01 << 4)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '185';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaf6a54093fdfc94a9ff9a2a474b509216';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MENVCFG_CBIE_INVAL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x11 << 4)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '186';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gad8d90368c44509c54e2dee5c81c3cb30';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SENVCFG_CBIE_EN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x11 << 4)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '187';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga314bf0985e43524748973319d7598813';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SENVCFG_CBIE_FLUSH';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x01 << 4)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '188';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaa0bd6cfd668f46806904fdce56743670';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SENVCFG_CBIE_INVAL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x11 << 4)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '189';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga42c34d698f939cff7e65c847325476d1';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MENVCFG_FIOM';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00000001
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '191';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga1f2e86e0acc237b9398d8854ba9467e1';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MENVCFG_LPE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00000004
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '192';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga37f02318e3238daf81d3cf615653d3bc';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MENVCFG_SSE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00000008
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '193';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga69e516c1fd17ac791cd8ad566fa81ac9';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MENVCFG_CBIE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00000030
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '194';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga2a1f02b67011d46fce0591e5034c8775';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MENVCFG_CBCFE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00000040
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '195';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga850025d8b47caebe9c05bb1b28a4e383';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MENVCFG_CBZE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00000080
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '196';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gafa9ca86ae64b0ccb08bc9236cb333448';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MENVCFG_PMM';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x0000000300000000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '197';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga9211cbcdee90ac78f62f5f9513adf5e8';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MENVCFG_DTE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x0800000000000000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '198';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga6273ef3d65a6e73db12492d03f715c9c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MENVCFG_ADUE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x2000000000000000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '199';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga4d2eaa6b9797ea2449eb4c4c94f41032';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MENVCFG_PBMTE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x4000000000000000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '200';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaa37e5a271c4af6d26791ff1a09a52024';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MENVCFG_STCE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x8000000000000000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '201';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga7a644b4e8fc114ee78e84a99ebcbbef9';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MENVCFGH_DTE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x08000000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '203';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gad4eca9eddc9ce917f70e448e3b7ea2e5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MENVCFGH_ADUE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x20000000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '204';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gac193d46682e7252f4ceff0e40b92f7e2';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MENVCFGH_PBMTE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x40000000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '205';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga7fa44490334be63bbf3adb3f4b35479a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MENVCFGH_STCE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x80000000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '206';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga402e79f4aaa8d38079457c418fc4babc';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SENVCFG_FIOM';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00000001
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '208';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga95fddc022be43d1dc939ef0400b2f7cf';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SENVCFG_LPE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00000004
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '209';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga089f90d2d7d12d05f0470c12ede77a17';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SENVCFG_SSE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00000008
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '210';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga6be23895cb6e88985aefa72c43bd5dc4';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SENVCFG_CBIE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00000030
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '211';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gad113387685298df0c8371177a12d92e1';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SENVCFG_CBCFE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00000040
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '212';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gad116a4a03169eceb41e5cb60a173aed7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SENVCFG_CBZE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00000080
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '213';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga6d898de278cfd0176e888d84a022964c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SENVCFG_PMM';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x0000000300000000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '214';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaf130720fd14133d4708424b7b858215e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'UCODE_OV';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x1)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '218';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga838be4fb6cc0796dfdab1d492c992e91';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MCACHE_CTL_IE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00000001
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '221';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaabaff1feb67c2351eb71e1b1c97565bf';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MCACHE_CTL_DE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00010000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '222';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga20aa60b214851659e139accdc108f131';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'WFE_WFE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x1)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '224';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gade924168088e3928b41d450f8e3458f3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'TXEVT_TXEVT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x1)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '225';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga1248cd9846d593036d74cfd55a582632';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SLEEPVALUE_SLEEPVALUE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x1)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '226';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gabcaf14057f3f33498271f4c21be8b681';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCOUNTEREN_CY_SHIFT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '228';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga3a7b03a5e9de92ecbde85823d73c921e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCOUNTEREN_TIME_SHIFT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '229';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gacc06fbbf2b425a162810dffd0e531dbc';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCOUNTEREN_IR_SHIFT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '230';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga786e15e17b5d8907d9cce688d6f24291';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCOUNTEREN_CY';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1U << MCOUNTEREN_CY_SHIFT)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '232';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga4ae98e79b3386cd814dc3ce9f04e4b48';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCOUNTEREN_TIME';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1U << MCOUNTEREN_TIME_SHIFT)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '233';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gadf4fe2f07a1aedcdad295951f9589344';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCOUNTEREN_IR';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1U << MCOUNTEREN_IR_SHIFT)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '234';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga675e4d52a85bafc0a1663cf2f431583a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCOUNTINHIBIT_CY';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
MCOUNTEREN_CY
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '236';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gae8693a1f795a0f752391c609ce011cbf';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCOUNTINHIBIT_IR';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
MCOUNTEREN_IR
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '237';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga58fdda659daafb923a409a1bbe0c6655';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MILM_CTL_ILM_BPA';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(((1ULL<<((__riscv_xlen)-10))-1)<<10)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '239';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga41dac82da614aab446c52c6e86cbc822';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MILM_CTL_ILM_ECC_CHK_EN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<4)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '240';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga2abda317bca9ac8bf35368865830cd68';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MILM_CTL_ILM_RWECC';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<3)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '241';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gae40dec36c65614de6c357be830e4f450';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MILM_CTL_ILM_ECC_INJ_EN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<3)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '242';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga27d7dbd69da032a1abe3471fbb0345c3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MILM_CTL_ILM_ECC_EXCP_EN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<2)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '243';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga00f2ec5471765545572aef07793a676c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MILM_CTL_ILM_ECC_EN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<1)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '244';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga5c75afd05ea4349e7dc851589a2b4c60';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MILM_CTL_ILM_EN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<0)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '245';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga66efca6fe008b17b3e58f55cfc3454ba';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MDLM_CTL_DLM_BPA';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(((1ULL<<((__riscv_xlen)-10))-1)<<10)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '247';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga04c47cb7e8dd28baa9489f1af9cdd8ea';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MDLM_CTL_DLM_ECC_CHK_EN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<4)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '248';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gafcceffc59d674aedf08abbe9140f2f96';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MDLM_CTL_DLM_RWECC';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<3)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '249';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gab7f8816d8219474fcb5dc31054849e55';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MDLM_CTL_DLM_ECC_INJ_EN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<3)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '250';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gade0e18fa462c3271b27acb36eae59d80';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MDLM_CTL_DLM_ECC_EXCP_EN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<2)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '251';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaef060f008524963c4e5556b378ab77f4';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MDLM_CTL_DLM_ECC_EN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<1)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '252';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga6cb4731642366eac4dfbba732abdf45c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MDLM_CTL_DLM_EN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<0)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '253';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gab1ea496c56aa682d757ee18f207898b2';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MSUBM_PTYP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x3<<8)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '255';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaeaa1f8b914ede4c086b0444b3a66c82d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MSUBM_TYP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x3<<6)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '256';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaa453deb1f8a1f3f3a5838ad4965ca766';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MDCAUSE_MDCAUSE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x7)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '258';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga46c28cbcf77e7038da65179d0c47ccf6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MMISC_CTL_LDSPEC_ENABLE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<12)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '260';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaa5390998d109cf832d0d1daa56debcda';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MMISC_CTL_SIJUMP_ENABLE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<11)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '261';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga92ce4bad08197c67c7b7302594931674';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MMISC_CTL_IMRETURN_ENABLE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<10)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '262';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga247a92f76022992a457ec81a67eaed57';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MMISC_CTL_NMI_CAUSE_FFF';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<9)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '263';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga6ba1ff759257e5b427bdc4fb89eef024';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MMISC_CTL_CODE_BUS_ERR';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<8)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '264';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaa6533a61bdf28dab6d97eaf8ac47e15a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MMISC_CTL_MISALIGN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<6)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '265';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga73db8b03a11f446dc04e90adec17e317';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MMISC_CTL_ZC';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<7)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '266';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gac62547380ae39bae590e77751554f8cd';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MMISC_CTL_BPU';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<3)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '267';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga1915bfad24b1100506412bd0f3c705e2';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCACHE_CTL_IC_EN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<0)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '269';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga1f23cac132dc4d543a0d33a336a7d858';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCACHE_CTL_IC_SCPD_MOD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<1)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '270';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gac212acd84f08a26197bc439bc58d5e58';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCACHE_CTL_IC_ECC_EN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<2)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '271';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga791603ffdcc47fbb787ac4c6ecd55f30';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCACHE_CTL_IC_ECC_EXCP_EN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<3)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '272';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaf18888bc02c166819bb66683b628f1f5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCACHE_CTL_IC_TRAM_ECC_INJ_EN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<4)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '273';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga2752ea69ebad6ee1f8c806955efc3129';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCACHE_CTL_IC_RWTECC';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<4)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '274';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga9a6cc1c06bc9eae80ac1f5a0fd0e7584';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCACHE_CTL_IC_RWDECC';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<5)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '275';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga3475e74b3a9ed63816f386e2cb2048a1';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCACHE_CTL_IC_DRAM_ECC_INJ_EN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<5)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '276';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaece10ed96b5c11873ed6c2835f5b36c1';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCACHE_CTL_IC_PF_EN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<6)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '277';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga944dcdbd51452876c52ad9e2473609f5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCACHE_CTL_IC_CANCEL_EN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<7)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '278';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga7b4e994c56ce6affb4c795feee2d0543';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCACHE_CTL_IC_ECC_CHK_EN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<8)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '279';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gae82cbfc628bf4087720024122a9c9115';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCACHE_CTL_DC_EN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<16)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '280';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga24f8fec1fe980ff09a748634ded5f3ec';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCACHE_CTL_DC_ECC_EN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<17)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '281';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaa812767233bc30aa4f5e215a00e10a1a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCACHE_CTL_DC_ECC_EXCP_EN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<18)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '282';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga7f3da75fbed45f8594a04445001dd568';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCACHE_CTL_DC_TRAM_ECC_INJ_EN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<19)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '283';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gae416277ff67aa4f57eab23e249fe626a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCACHE_CTL_DC_RWTECC';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<19)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '284';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga5232185f012cc6338fbfe0a77dd39a34';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCACHE_CTL_DC_RWDECC';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<20)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '285';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gac02f2b325b16eaa80b1688cd3c60bf4d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCACHE_CTL_DC_DRAM_ECC_INJ_EN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<20)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '286';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga04485a1a38f8fe5e86a0db810da4a88d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCACHE_CTL_DC_ECC_CHK_EN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<21)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '287';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga6065953ce222f53cb94ee8d6c336e26d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MTVT2_MTVT2EN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<0)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '289';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga2d61c1c8247bc82e209a8bbbaba1e44c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MTVT2_COMMON_CODE_ENTRY';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(((1ULL<<((__riscv_xlen)-2))-1)<<2)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '290';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga8b189b0faab8100190d9c0cb9457ab6b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCFG_INFO_TEE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<0)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '292';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga378777b74ffd0f62087c10d7cc83dba9';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCFG_INFO_ECC';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<1)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '293';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga8e6bfafb27d2142ee0035f76b887acca';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCFG_INFO_CLIC';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<2)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '294';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga29b6c2971cce93a78e9605e7e5276599';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCFG_INFO_PLIC';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<3)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '295';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga7987e805f4afa13b0d4f62a250cb2f34';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCFG_INFO_FIO';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<4)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '296';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga486d29134dd516cf80273bc1fff243c9';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCFG_INFO_PPI';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<5)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '297';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaf640e24726866e9b7f06360b93bf5800';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCFG_INFO_NICE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<6)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '298';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gabcbe04e4da52ab5fbbbbb10c6629cf32';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCFG_INFO_ILM';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<7)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '299';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga60e344b3401de3421dde506783b0f5e8';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCFG_INFO_DLM';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<8)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '300';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gade204165b105fd3fdcc50965cb23b83d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCFG_INFO_ICACHE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<9)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '301';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga95afd8455685713863d0be88485f5b40';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCFG_INFO_DCACHE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<10)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '302';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga1c689627894bb7fd8db6705b0f0273da';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCFG_INFO_SMP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<11)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '303';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga76ecad40871dba94c8ea585ccd6071c7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCFG_INFO_DSP_N1';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<12)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '304';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gab47f6a8b77cd134ff41267847ba4edcc';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCFG_INFO_DSP_N2';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<13)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '305';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gab5cc81cd802d96513e9dfa48e5e4b3dd';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCFG_INFO_DSP_N3';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<14)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '306';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga38db90b73d8081a90fc4e9a98beca9a0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCFG_INFO_IREGION_EXIST';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<16)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '307';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gac05f3e1cb57c4a7cf9f593205b48d30b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCFG_INFO_VP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x3<<17)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '308';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga02f016ef1dd10d24c36ae0c691d89448';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MICFG_IC_SET';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0xF<<0)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '310';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga0d6540f439ca5b5c5961f987bfbe07c5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MICFG_IC_WAY';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x7<<4)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '311';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaea8b0d29e2f6bf87803471e8621b032f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MICFG_IC_LSIZE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x7<<7)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '312';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga434dea16ed0b3a6e0048c7aaa6946c58';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MICFG_IC_ECC';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x1<<10)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '313';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga2cb78b6241c78dc469250e707df3a572';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MICFG_ILM_SIZE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x1F<<16)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '314';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaaf286fc1a227c919d21f1d6e0e8cb3b9';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MICFG_ILM_XONLY';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x1<<21)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '315';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga0f19be02a99073685c5026a2fc5e907a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MICFG_ILM_ECC';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x1<<22)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '316';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gabbd7c817405f28c6e06e22e4fbda509b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MDCFG_DC_SET';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0xF<<0)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '318';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga6218dafc338a7ed0ad8bce7db11cbe69';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MDCFG_DC_WAY';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x7<<4)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '319';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gae0e3d905405aa26daa960ab7c9037093';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MDCFG_DC_LSIZE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x7<<7)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '320';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga716b71a4271e56713d384a5e4655244d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MDCFG_DC_ECC';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x1<<10)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '321';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gab515cedfce6a4e42b1419141f392e93f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MDCFG_DLM_SIZE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x1F<<16)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '322';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga5977c9cfabcbe276dc7b124f909e138e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MDCFG_DLM_ECC';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x1<<21)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '323';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga943b451af3170a9e5950543185773a4c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MIRGB_INFO_IRG_BASE_ADDR_BOFS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(10)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '325';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga979fbb4bc3357b11f7c1dddfb504e08b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MIRGB_INFO_IREGION_SIZE_BOFS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '326';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga8e5e133ea59b83012cf28984321332f8';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MPPICFG_INFO_PPI_SIZE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x1F<<1)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '328';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaf10b969b50980388e673c8a398b74386';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MPPICFG_INFO_PPI_BPA';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(((1ULL<<((__riscv_xlen)-10))-1)<<10)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '329';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gab04aa3cb0d2fa864efe454ecffed5a93';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MFIOCFG_INFO_FIO_SIZE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x1F<<1)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '331';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaa5cb4135c597cdea3578ee7cd10953b2';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MFIOCFG_INFO_FIO_BPA';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(((1ULL<<((__riscv_xlen)-10))-1)<<10)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '332';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaa19b113c0348a4971044734f19db61bf';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MECC_LOCK_ECC_LOCK';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x1)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '334';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gab602b226ad42a3c2f180866eea000dc5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MECC_CODE_CODE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x1FF)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '336';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga758a640d86f2ca5fca2ef65ab9458305';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MECC_CODE_RAMID';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x1F<<16)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '337';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gab5ef9c56bb6ea7dfec131200d80f682a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MECC_CODE_SRAMID';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x1F<<24)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '338';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaf601ce7378adc2d28a3c1eece31c4948';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CCM_SUEN_SUEN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x1<<0)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '340';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gae3c1b6e3fb157b511fab5ffa16ada4fe';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CCM_DATA_DATA';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x7<<0)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '341';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaa5833eecca8b1a06a1fc89247919c6f7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CCM_COMMAND_COMMAND';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x1F<<0)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '342';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaab8bb8448c82870b9d532cd833af60d3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'IREGION_IINFO_OFS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x0)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '345';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga11b4118a43c840252b295adc566b1d5d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'IREGION_DEBUG_OFS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x10000)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '346';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga9e05a9f38c120d244522ef4d60f3694c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'IREGION_ECLIC_OFS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x20000)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '347';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga8aa2875712d93990e73772c0416667c4';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'IREGION_TIMER_OFS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x30000)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '348';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gacd5e7c1f67cab628cf77bb1ec552c220';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'IREGION_SMP_OFS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x40000)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '349';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaeda5f71bf6344229ab74e0cb90c2f6bc';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'IREGION_IDU_OFS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x50000)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '350';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaed1dbd889af1aef5f434bbc148db091c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'IREGION_PL2_OFS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x60000)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '351';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga3abce8c2b550fdcc5e417a711c3ba605';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'IREGION_DPREFETCH_OFS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x70000)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '352';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga02d5e7c37f46bc59ee66a2a8ff7c66a8';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'IREGION_PLIC_OFS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x4000000)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '353';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga7bd0c4d4df18e656e6883c75518cdf12';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MSTACK_CTRL_MODE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x1<<2)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '356';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga0b8a412598763c34c09d226499a36bfd';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MSTACK_CTRL_UDF_EN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x1<<1)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '357';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga64c9bf1abdbf6997fa712924c027c1e7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MSTACK_CTRL_OVF_TRACK_EN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x1)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '358';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gacdfe2a4376d4c9873b865b878c6d5d2e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SIP_SSIP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
MIP_SSIP
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '360';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaa32b89e7176c6d37caa3ad78a600f4a1';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SIP_STIP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
MIP_STIP
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '361';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga0584431e22db30065abffb94459477c4';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PRV_U';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '363';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga3131c9addf7b5ecc1da9f7b0eff9815d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PRV_S';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '364';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaf11d40d5f172d3095bf39a23ba714552';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PRV_H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '365';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gafee966c8a48cb4075680eb0cc08ab32e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PRV_M';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
3
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '366';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga136d72c1560058c881e418d809313c4d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'VM_MBARE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '368';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaa14ac20603beff5cf88970ba9df3336d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'VM_MBB';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '369';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga393d622a8cfcc7d8ea5343fdfcd32d07';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'VM_MBBID';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '370';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga7ea29e1df0e38548df1183ec9ea9da44';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'VM_SV32';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
8
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '371';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gad246f74e1796b45a7f1675ed9aeb9ab1';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'VM_SV39';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
9
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '372';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga0b6c1ec7c117e3a245e09c635af9994b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'VM_SV48';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
10
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '373';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gab288573db6fbd0bc09681f033971c892';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SATP32_MODE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x80000000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '375';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga0cb3acb8d313b5fffdf4a562dc19ae15';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SATP32_ASID';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7FC00000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '376';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga1feca7bca79664d5d53c284b8a078f5a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SATP32_PPN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x003FFFFF
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '377';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga7fceced1f54fd0e3b2ae6bace3ae30cf';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SATP64_MODE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xF000000000000000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '378';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gae887d5205d95a9de7f7c33381105ecb0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SATP64_ASID';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x0FFFF00000000000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '379';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gade3d29abc4e227334b8c47725131ba0e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SATP64_PPN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00000FFFFFFFFFFF
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '380';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gacda96055d5d29a3cb3900b41e1b4410f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SATP_MODE_OFF';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '382';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga889f093e7004e76a1edbd106bfe10986';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SATP_MODE_SV32';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '383';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga8b39454e1fcc5204db5a6772f73bc6a1';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SATP_MODE_SV39';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
8
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '384';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaaf4e2614414d57a362260f5647dcd6ad';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SATP_MODE_SV48';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
9
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '385';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gad7db356d5f561db9cff03caa6bc9f249';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SATP_MODE_SV57';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
10
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '386';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga6b96c8df00f46270747521c710fd70be';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SATP_MODE_SV64';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
11
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '387';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga1f426d6231a15fe1801b3206c712cf76';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'IRQ_S_SOFT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '389';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gac3fe3deef5576f320abc55464c9fb980';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'IRQ_H_SOFT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '390';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga02e2db32b33eb8cf23622150ac372200';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'IRQ_M_SOFT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
3
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '391';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gac7acfa6b0f632b9cd762a0e0abd1df08';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'IRQ_S_TIMER';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
5
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '392';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga9ea3c09e4c1dde4b1c9d1be6d7d82528';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'IRQ_H_TIMER';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
6
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '393';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaa5b87ef0a6024ad69009faff8fd6a9d5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'IRQ_M_TIMER';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
7
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '394';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaedc582eeff2cc10dcb000c5f08dda3c3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'IRQ_S_EXT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
9
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '395';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaa09fee2ca390c169c63b0c52475e38f7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'IRQ_H_EXT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
10
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '396';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga43fba639eb8d7ee37648cc0af12cf59b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'IRQ_M_EXT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
11
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '397';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga26e341b99075274d38face5be46579a6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'IRQ_COP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
12
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '398';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gab12a3e27140376a52c9f9999404a73f6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'IRQ_HOST';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
13
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '399';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga9c07e76cdec94f3adfc6acb1ac8a6e13';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FRM_RNDMODE_RNE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '404';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
FPU Round to Nearest, ties to Even.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaf8f4ab4175c2a4a8904a974c6ff64c8b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FRM_RNDMODE_RTZ';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '406';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
FPU Round Towards Zero.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga39034ebb32dd8119c8eba506caf5de5e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FRM_RNDMODE_RDN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '408';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
FPU Round Down (towards -inf)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaaa602e93ffb06696ae854de4ee239a51';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FRM_RNDMODE_RUP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '410';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
FPU Round Up (towards +inf)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gad7e45e9570cf32e228c3268574925998';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FRM_RNDMODE_RMM';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x4
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '412';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
FPU Round to nearest, ties to Max Magnitude.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga4078cf4c03a56889c27f715fc0e61261';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FRM_RNDMODE_DYN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '416';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
In instruction's rm, selects dynamic rounding mode.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
In Rounding Mode register, Invalid 
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaca388fb5e681aec3e4dc0c3a22faa120';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FFLAGS_AE_NX';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<0)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '420';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
FPU Inexact.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga226c5ea510d1ccbef712b8cb5413d99c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FFLAGS_AE_UF';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<1)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '422';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
FPU Underflow.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaaf36cdc10ddced9c2316bd1f96a9b0c5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FFLAGS_AE_OF';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<2)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '424';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
FPU Overflow.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga3ee932ee487ef0a56d1a52c3941dd154';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FFLAGS_AE_DZ';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<3)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '426';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
FPU Divide by Zero.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga5aeba9c92e496d2705492d5bc6024873';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FFLAGS_AE_NV';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<4)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '428';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
FPU Invalid Operation.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gab630278e8a24dd620cb6a512b51bc45f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FREG';
      define-mem-param  = {
        define-mem-def-name = 'idx';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
f##idx
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '431';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Floating Point Register f0-f31, eg.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
 f0 -> FREG(0) 
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga383d3ee4d5727ef3fb4437d954be3b21';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PMP_R';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x01
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '435';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga5f34c98b252436e69ad95e766abf8482';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PMP_W';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x02
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '436';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaabfce7f7dde3e93eb596074b4d107bec';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PMP_X';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x04
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '437';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga47df3f6548f6106ad54d3def500db71f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PMP_A';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x18
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '438';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga7a8a129eac9815d251e7cc63e7358161';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PMP_A_TOR';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x08
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '439';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaa039949a5b36847e3d96be8730d41b97';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PMP_A_NA4';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x10
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '440';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga7941f68c06a33245450a89cd3153c856';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PMP_A_NAPOT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x18
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '441';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga68f26499e9a07ee23940bcd1ff49e51d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PMP_L';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x80
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '442';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaf5a33910ca1e7603b2c483a2966e2d53';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PMP_SHIFT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '444';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gafa6069fc693f6fa6353611c8211c155a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PMP_COUNT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
16
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '445';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gab50709254c240cc260cee2da3c5197ac';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SPMP_R';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
PMP_R
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '448';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaf3801aa017e213aa53fe7b9d7a91ba73';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SPMP_W';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
PMP_W
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '449';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga8e9bb3031a1ab2cfdabfafc9bf952d72';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SPMP_X';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
PMP_X
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '450';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga03bd5c174b49577ff8fdff75b1b5716b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SPMP_A';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
PMP_A
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '451';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gadd0d42fe11f34eb386fbf46cba2287d9';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SPMP_A_TOR';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
PMP_A_TOR
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '452';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga4d387769e4a7659ee0673a732385ec42';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SPMP_A_NA4';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
PMP_A_NA4
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '453';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaa8d90c293d07bc28c23c6557cb331897';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SPMP_A_NAPOT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
PMP_A_NAPOT
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '454';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga1b13e825900893518118240290a1923f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SPMP_U';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x40
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '455';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga1caa4a2d70df9ddf3dceb84af8f50e42';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SPMP_L';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
PMP_L
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '456';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gafe8821387ea7516af62e716901a75557';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SPMP_SHIFT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
PMP_SHIFT
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '458';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga2acd2a7540961a543f9ca1c7b44656ff';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SPMP_COUNT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
16
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '459';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga46d503ffde758bfa7fd30c77cbf78bcf';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SMPU_R';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
SPMP_R
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '462';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gac95f0529cb0209d61cc3428fa05c76e7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SMPU_W';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
SPMP_W
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '463';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga423116c9f1b450531d59c1336ec5ddab';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SMPU_X';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
SPMP_X
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '464';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga062e0fec0815f97a41a39b4b233e2188';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SMPU_A';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
SPMP_A
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '465';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga457019da45eae37fae04d8e67acc878e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SMPU_A_TOR';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
SPMP_A_TOR
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '466';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gad712d23970863d0bf30615ecdde05d19';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SMPU_A_NA4';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
SPMP_A_NA4
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '467';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaf7f3e5ed28bbbf02a2068ccc343ee2ae';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SMPU_A_NAPOT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
SPMP_A_NAPOT
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '468';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga38429a00e96f72fbcc7aaeba6b761097';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SMPU_S';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x80
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '469';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga2238e93c27f62059db3f94b155fa903a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SMPU_SHIFT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
PMP_SHIFT
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '471';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga9a3c738182007bee471e44aae04c386f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PTE_V';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x001
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '474';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga3a188134a2cbd69e161521fb169ecd08';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PTE_R';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x002
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '475';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga058fcbcc3e1eab2c09c68b3e5221c545';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PTE_W';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x004
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '476';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gae20c834a93867eedc88007621c74ad55';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PTE_X';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x008
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '477';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gadced9836a1dc98d72849361e6ab03cda';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PTE_U';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x010
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '478';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga50cfccabb1927e67c7a0e3b90e8b0635';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PTE_G';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x020
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '479';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaf2d908a8af1d94a6aaf803ab40fe0951';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PTE_A';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x040
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '480';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gae80b38f12787d02087c4575c48c36d88';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PTE_D';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x080
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '481';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga8e71d0b15291edc78a3240cc667f9ad8';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PTE_SOFT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x300
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '482';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga5b5b713a1ec901153c786686d5962574';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PTE_PPN_SHIFT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
10
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '484';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaa0a707cf44e82dc9efa94304582586a6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PTE_TABLE';
      define-mem-param  = {
        define-mem-def-name = 'PTE';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(((PTE) & (PTE_V | PTE_R | PTE_W | PTE_X)) == PTE_V)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '486';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gac4b67373a4569a927b19779a30c619ba';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_USTATUS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '515';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaf25caf1486cedbc47afdd5afd81be307';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_FFLAGS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '516';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaab22a5666b6fd37cde09583f0ca66133';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_FRM';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '517';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gabba4da62b155cd22e3bd1a8ec402cf78';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_FCSR';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '518';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaf7e0818ebf1c2fecaa9f734da3ea376e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_VSTART';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x8
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '519';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gae570700bc67a10cc0f6a008beb9649b0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_VXSAT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x9
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '520';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gad1ad3ca21e5e560f4ef4cd5895ad253e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_VXRM';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xa
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '521';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga1decb3d560a03ecf740cfa8a7e4eaddd';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_VCSR';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xf
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '522';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga01c81bfd7dd2944c22c4ceb615cfd941';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SEED';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x15
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '523';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaacfe875b5079d642acf58f32f96e10b8';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_JVT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x17
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '524';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga9e9434c8a5b1f157f1a7b800c26321bb';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_CYCLE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc00
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '525';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga4bbdf33e8b20f4cb020869e7394e388a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_TIME';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc01
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '526';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga053f87dc2e911eb74a904232a0db20f5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_INSTRET';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc02
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '527';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gabc9ec186541e531bfb831892b656c48c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER3';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc03
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '528';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga0507aee7c7c34cc39be1dc2941537b8c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER4';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc04
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '529';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga74b3354177b841b8d40deab938f48cea';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER5';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc05
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '530';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga63284922fe78d5eb60d66785d6013ee0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER6';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc06
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '531';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gad9388484f19dc49696c304fb854f67e1';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER7';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc07
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '532';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaef2ced79d58eb46eb505bf1ebb45e78e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER8';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc08
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '533';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaaf606f32118480e5800c326dae3d072d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER9';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc09
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '534';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga45c1a1c5872f41cf6b769cac61c594e8';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER10';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc0a
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '535';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gac9c87c7b00208fd2cb1accb2bb06576b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER11';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc0b
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '536';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga1e4d4f948ba23d5e846ef9e33f548dc6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER12';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc0c
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '537';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gad60ed530218b142c78f9392ed3b5a4b3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER13';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc0d
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '538';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga461b98ee6107021836e54d298f73a61a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER14';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc0e
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '539';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga2ab1318ae5514940d4bc8e7bee1e5ce8';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER15';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc0f
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '540';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gacd75f71e43371488dcb86272ad86ccd9';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER16';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc10
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '541';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gabc1c35f08df6a93f999405649e8c8430';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER17';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc11
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '542';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gab9a663a327d52d10f6290b942490d4e9';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER18';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc12
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '543';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gafee1bc538c2d2f77151d9f44c842246a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER19';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc13
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '544';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga7cb9f35b141814b49a59211ef7277172';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER20';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc14
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '545';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga76e6ef2939cc2d66d7d2a6069a2910b1';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER21';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc15
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '546';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga9c2c0516473c50269bf9f8a5e0ba95a4';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER22';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc16
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '547';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gad3178937990f64a8da188ce408d96504';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER23';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc17
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '548';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga07ec0874b81903bed3a04ceaa90864bd';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER24';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc18
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '549';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaef51e7ffef082a9a4324ec8324af024f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER25';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc19
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '550';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gada87ee7cd70d82c940209049f88c9875';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER26';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc1a
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '551';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gad1c6f8cf4d163939eb9483d8ce10c88e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER27';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc1b
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '552';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga54b1bbdd4e89e1f5d2a6761dee9448fc';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER28';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc1c
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '553';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga07000fde1ab777a36de658ff34b5545e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER29';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc1d
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '554';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga170df914640e20d349898a6bfe4adaf6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER30';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc1e
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '555';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaac7b39ccaabe77e3f185aeb31424a13f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER31';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc1f
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '556';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gab34443f3b28c3ff9105211292719e4d9';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_VL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc20
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '557';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga99d58897c64936abd97469dd64cbd2d6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_VTYPE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc21
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '558';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga881bb6f36a77048712c464cf9a62d707';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_VLENB';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc22
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '559';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga2e2ce9bac3d1ad2128a4eb9438a1022d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_TIMEH';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc81
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '560';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga651e65251cc54d4a553702e4cf061ca7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SSTATUS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x100
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '561';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga5f0da06bb6820a57f9764b67253b0aa7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SEDELEG';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x102
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '562';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gac3ad977321a752c25096b03b1af127c3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SIDELEG';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x103
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '563';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gafe9299d8a7d0f21e963ab621a6a5a5cf';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SIE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x104
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '564';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gab1718f56f1c135bcd02a707b7172301b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_STVEC';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x105
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '565';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaf38aa3d532244f4e3a83782ef24218f2';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_STVT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x107
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '566';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gad07e81e0a35ac378254f2054e538a2b0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SCOUNTEREN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x106
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '567';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga2b5ea86fbdfa4f91ddf992ae2e7f5b65';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SENVCFG';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x10a
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '568';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga9abc54afce76a7a78a0d0c6243110545';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SSTATEEN0';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x10c
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '569';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga658dc6f413ad921679efdfea1931c070';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SSTATEEN1';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x10d
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '570';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga1f82d834cd9f1349394ab4fb06e0783e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SSTATEEN2';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x10e
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '571';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga109d30f825a7d97726689ee8dbbdcc0e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SSTATEEN3';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x10f
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '572';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga545aa444d12109ef8e961ba29eb3ea54';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SSCRATCH';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x140
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '573';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga3981cba40ee737a2f7cf4228b2bdbb67';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SEPC';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x141
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '574';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga49e424a4449b3192d35ca1133e8f5dc2';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SCAUSE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x142
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '575';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga705b54eb646ded8aba97f8e39acb9c77';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_STVAL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x143
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '576';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gac79e54d601a25a8eed4e0c985fd30315';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SIP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x144
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '577';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga7be2b2d3f8bc8fad22057ea5282f6c68';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_STIMECMP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x14d
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '578';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga3a9f600798fa252afdb427fd91e4be64';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_STIMECMPH';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x15d
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '579';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga93c6593dc41bd45407e263acd870dd6e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SATP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x180
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '580';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaeb4790f145987782286ac7a11c389fdd';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SCONTEXT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x5a8
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '581';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga2d332dc4a5c4f049da87b5c5945f4448';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_VSSTATUS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x200
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '582';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga787bcc9c8e101101eb05caa90467cb40';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_VSIE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x204
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '583';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga61b559968cd779bc181f5cadfa0dd6ac';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_VSTVEC';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x205
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '584';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga7270b1aab418750177d76109ffa6bd5a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_VSSCRATCH';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x240
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '585';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga6019899d174a46985ad25e26899640fb';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_VSEPC';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x241
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '586';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga8c80eed03bd878bb699f9f43d7310817';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_VSCAUSE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x242
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '587';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga493a38c0c484a740c3b683064425225a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_VSTVAL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x243
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '588';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaec23beec108906a188eb59d5aec454d8';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_VSIP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x244
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '589';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga9008be117a791215de6928ca2b197eb7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_VSTIMECMP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x24d
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '590';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gafcd17134ce14aa0f2195c292db79acf0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_VSATP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x280
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '591';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaa070db004ed09a3383267ed4c33eccdc';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HSTATUS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x600
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '592';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gadd9e0222e86818538760c68982d6b529';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HEDELEG';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x602
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '593';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga5992a23c035c23d2b63aa886c40a5e24';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HIDELEG';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x603
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '594';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaa70cfb747e242b020bf16fa846543b8e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HIE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x604
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '595';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga6820e82a6aea9d6a84311d03e77baf02';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HTIMEDELTA';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x605
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '596';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga2e790021d2c13a1cb436b82ba9b65fd3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HCOUNTEREN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x606
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '597';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga3ae7f543819280c870210dc3d52340b6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HGEIE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x607
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '598';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga56f09367f517d589e34cd0417dd25136';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HENVCFG';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x60a
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '599';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga306773abc0bbf72957f2692270b2b1de';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HSTATEEN0';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x60c
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '600';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga9b128ae621483394b656e7a3b79d6111';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HSTATEEN1';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x60d
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '601';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gace7adcebd904647997da05f364ff2cbb';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HSTATEEN2';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x60e
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '602';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gad1c410224543b5e1a46a7b1100e29f76';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HSTATEEN3';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x60f
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '603';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga2483f518dc506f73fbafd20d6d93cadb';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HTVAL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x643
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '604';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gac266dac7280cd4069999d1ed4cdcdb45';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HIP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x644
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '605';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gab97bd027140b5565f6bd12ec59b414eb';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HVIP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x645
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '606';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga2eea6cd57332d81eab0ca0c311c47856';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HTINST';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x64a
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '607';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga5088ef5997573a9736dfeec21efd31fe';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HGATP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x680
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '608';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga2b5cab93f067b908c01df1da16d01207';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HCONTEXT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x6a8
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '609';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gac55c51f0c5022638b4bffdce03e26b34';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HGEIP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xe12
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '610';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaa2a82dcba9134a767da9d3376a75a1a7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SCOUNTOVF';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xda0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '611';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gac648e7ed5175ea2c897a98075e489a18';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_UTVT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '612';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga5a0365497f1c07ed30de970b2bb518f8';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_UNXTI';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x45
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '613';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga7dca55ed29662339993e4b08568db15d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_UINTSTATUS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x46
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '614';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga6b4a6fc53762ba289946704e69d7e5aa';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_USCRATCHCSW';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x48
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '615';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gac308bacae3f6ac5cfe3c599161364a6f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_USCRATCHCSWL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x49
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '616';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaf38aa3d532244f4e3a83782ef24218f2';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_STVT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x107
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '617';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gad6d3291734cef0c01327ba2e2894a5fb';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SNXTI';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x145
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '618';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga6dfcf2ba3a3642cdfdf079447ad5dbc0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SINTSTATUS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x146
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '619';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaaab69ad1911e6292df32aeb7ade917f2';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SSCRATCHCSW';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x148
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '620';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gac00d48e3da2731e8dc8f65bd00b48e46';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SSCRATCHCSWL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x149
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '621';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga5e44edb3f3d95986c92f8efad5db0c2c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MTVT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x307
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '622';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gacc09c434f52be7b1d5f715b9e7c87a81';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MNXTI';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x345
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '623';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga45bf722f7c1099ed2861045c00003379';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MINTSTATUS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x346
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '624';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga0e69a0c75e594c7801fce720de10fdbe';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MSCRATCHCSW';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x348
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '625';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gae205d4db7d1975b8a8accf904cb6feda';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MSCRATCHCSWL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x349
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '626';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga7086e667c65affe87d2c32115193d736';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MSTATUS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x300
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '627';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaaa62902f21282250fd975372f9e5e24e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MISA';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x301
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '628';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gab3139a6af26d85bf8d30330397d4a8c0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MEDELEG';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x302
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '629';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gae447b7b078204874a2606d32097e017a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MIDELEG';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x303
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '630';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gae75a38ea833c5507d942fad1c98132e1';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MIE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x304
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '631';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga22f5cd17199a966b4b840dd56d151216';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MTVEC';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x305
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '632';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga0c406c25c8c80d7198f7bf457f38e21d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MCOUNTEREN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x306
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '633';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gabd461f8e56584d08ddeff0bd6c9373cc';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MENVCFG';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x30a
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '634';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gad65278e687be5c621f45e8592066e3df';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MENVCFGH';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x31a
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '635';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga95d890daef261ab0329ea5aac88b895e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MSTATEEN0';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x30c
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '636';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaf3113cf256290e19c24df6880cd508cc';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MSTATEEN1';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x30d
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '637';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga0cf43566bafb6dd07357c095bb22b3a1';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MSTATEEN2';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x30e
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '638';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gacaff04f2c158bf8624a7e1ee3895bee1';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MSTATEEN3';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x30f
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '639';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga9643607a23d4bc6a50a562d0a1f5a8f3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MCOUNTINHIBIT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x320
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '640';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga26cdef6612f10a48ccfc34739ce70237';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MSCRATCH';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x340
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '641';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga53d62065ed74fd3583cca895e6157c5f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MEPC';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x341
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '642';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga2f9201d1d05c9fa66480065eda0b9e7f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MCAUSE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x342
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '643';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga7e69e2d5c3618dc9274a39e57d54de8d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MTVAL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x343
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '644';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga0f1cc929954a8482a3e878943731a5c1';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MBADADDR';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x343
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '645';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga38c553936313dfc3d00ff68083f7c7fa';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MIP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x344
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '646';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gacff6628e3519b30bd30455c07a6a433c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MTINST';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x34a
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '647';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga2e1cb9e2fddc63d5a33d305644be7dfc';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MTVAL2';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x34b
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '648';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga83987d4e9998a1cca46cd97cf8d809ed';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPCFG0';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3a0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '649';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga1a53dfb8b663fc41e8fd7c7b84471eec';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPCFG1';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3a1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '650';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga3103e79fb7dc1bc929b55b7daed624cb';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPCFG2';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3a2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '651';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga42e3b880f10fb42eb718446a2f3dfa5a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPCFG3';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3a3
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '652';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga7076fa55a9541980120a722e9d80d983';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPCFG4';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3a4
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '653';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga661d929f5d30dabf4949eb38aedd52d7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPCFG5';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3a5
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '654';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga99fb12d0e1a9a85bd2ec022235771c9c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPCFG6';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3a6
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '655';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga4d5dcca4ef99094bb4acd78eeab9f264';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPCFG7';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3a7
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '656';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga487b1413105e4da3fc3f91c15b382cf7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPCFG8';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3a8
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '657';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaf8da32cd70cb4cd297ab9860d78368f9';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPCFG9';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3a9
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '658';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga5f6b226df92708b25939298f87e48f11';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPCFG10';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3aa
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '659';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaf7b7de9641c59af64f7886b839aab55a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPCFG11';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3ab
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '660';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gadd701409bf5fe44d65e5507f4d399ee8';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPCFG12';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3ac
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '661';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gad713707e88655f21b1ff68caadfe143b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPCFG13';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3ad
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '662';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga97289770f36551b020e64914799d47a1';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPCFG14';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3ae
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '663';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaaa2c45ffd7bd248c0d004d9f5ef88810';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPCFG15';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3af
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '664';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gacecf7350c29d4d7b3eff9334a79eb151';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR0';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3b0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '665';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga4b66ab86131f3f9abb77653d946fa801';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR1';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3b1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '666';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga793ce1bc309da27c6f3406e63c990ca3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR2';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3b2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '667';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga429c14fe78dcfb064f8a2b40bcd0c6d5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR3';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3b3
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '668';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga296a8dd56db1dbc9ce8d23e04a125f1b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR4';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3b4
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '669';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga0fdee71fe744c3a76a4fe4566b6d30f7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR5';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3b5
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '670';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga380f61e6b334d2f76d3f995c932032ff';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR6';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3b6
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '671';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga3c32a0bfe8f5558cf3680e865853bd7d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR7';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3b7
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '672';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gad5ca2904320156ece2d409a6203833dd';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR8';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3b8
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '673';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga37480409a10aee34f38f372686d25c63';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR9';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3b9
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '674';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gae23ceb6fb8cb498198b5dd89301527d6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR10';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3ba
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '675';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga05cef37120eb5d71e1bb4a2eab968c1f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR11';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3bb
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '676';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga4f95495aea52214e593217b25a2683c9';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR12';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3bc
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '677';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga782c2fb9aba26298db7123758c5932f4';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR13';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3bd
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '678';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga803fecb49fa82ceabd227df080f692c7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR14';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3be
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '679';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga27b523f4961b4e24098ba0b24aa079bb';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR15';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3bf
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '680';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga8282d1bf752d6a8696ad856419a77843';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR16';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3c0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '681';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga20f89c8b2636e5cd927e395d465dcad4';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR17';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3c1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '682';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga4fea1fa6470b430d51e25b183c86efe6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR18';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3c2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '683';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga6ed9fc40b0512984d5ce2b1b675c807a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR19';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3c3
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '684';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gad49eaa7086c5e5b185ad453c3b14010b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR20';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3c4
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '685';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gab469d66088b299c32ec07bd2bab11be0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR21';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3c5
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '686';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gafcd0fc655dfebf9e0c60de9459957157';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR22';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3c6
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '687';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga49fa6bd9c815c58abeb4e258b97f76ec';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR23';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3c7
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '688';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga3d4ed1a1ef7354a5fe6a342b9f6ecb1b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR24';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3c8
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '689';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga2e45318bf6635453d5d43353a72efd04';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR25';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3c9
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '690';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaf1ce9e798506de6e7792d1612afae3d5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR26';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3ca
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '691';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga480b994bb6965471e085761f8e2d4920';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR27';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3cb
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '692';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga7ff76ea5d82ea066af1a3ce954aa53b0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR28';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3cc
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '693';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga001da824cfa13f566a2947b436d3244a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR29';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3cd
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '694';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga201d767579c6e8f7140eef63fbea39a2';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR30';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3ce
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '695';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga41e766acfb378a3e80ae3186984fee6f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR31';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3cf
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '696';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga9497ce39c346db938db8dccae4b134f8';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR32';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3d0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '697';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga519f5dc1edeb491a14ee4b9203c7cea2';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR33';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3d1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '698';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga72183d8e2639ae1a64bf0eef935a2c87';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR34';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3d2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '699';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga33a9d92b6be7200837120573f112260f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR35';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3d3
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '700';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gad5c09f50d2a8dabd6df27f26054a0c5d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR36';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3d4
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '701';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga9020cbf6b4fa5c6348d510b6f42e8086';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR37';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3d5
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '702';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga242ee52a6eeaa6b7635bdc122e57cf94';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR38';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3d6
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '703';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaffb712c8eb068605c919a94077327e11';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR39';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3d7
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '704';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga6a65376788f65e8f4771c7bee2cf8148';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR40';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3d8
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '705';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gad2f9e4305b7ce6f60ea0457e87efeeb9';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR41';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3d9
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '706';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga4008d66e8cf4908390842424150dbe72';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR42';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3da
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '707';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga498bbfb6828aed5a865dc4788fa483dd';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR43';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3db
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '708';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga58a00c1398215dcbb2df6707c3625d30';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR44';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3dc
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '709';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga99368b760b443c6054114fed676c891f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR45';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3dd
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '710';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga41968dc93aee27fb4f5eb16a78caeb95';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR46';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3de
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '711';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga5cd309bd3bb9a53c2251bb97a83a9b0f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR47';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3df
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '712';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gab958aaa551e7be350112bc236b7ef17e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR48';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3e0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '713';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gab9b6b620bf235e047eae239c35ea2448';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR49';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3e1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '714';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaafce5974392fef7d2a3795a102980904';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR50';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3e2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '715';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gacba89bec834589bfa7fcc806ab4d9ab7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR51';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3e3
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '716';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga663395e422732fc6f0120b1c305f5488';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR52';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3e4
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '717';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaf2eb4e926346e0c18793c4e4ae200ecb';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR53';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3e5
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '718';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga14c2837a2601b6eff8a1697c936aadcf';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR54';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3e6
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '719';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga1dfb673a7f158799fdbc09e3f608184c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR55';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3e7
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '720';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga136be8635656a2021d8831dee6e550bd';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR56';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3e8
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '721';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaa5630a790add9fa5f62923ce965c6d4a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR57';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3e9
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '722';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaf52488ae84380f14abae41e937e7852d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR58';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3ea
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '723';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga0dcba0e1f248a38500e316387f3a3ec8';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR59';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3eb
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '724';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaa890544a5b8bc8f945c1a1b24f6fcd7a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR60';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3ec
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '725';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga2b8a08214e35f786999ffae7bab2b8d6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR61';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3ed
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '726';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gab56d06cfd87ee2a9c66f48c8c90d8bc5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR62';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3ee
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '727';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaacbbb27c92417c6e102e147cb16e0843';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR63';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3ef
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '728';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gafe79488b3bdf26aa77934409738f6f8c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MSECCFG';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x747
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '729';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga6568db85f99917ea87c730935c11bbec';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_TSELECT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7a0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '730';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaa19ec30b626fd32227442ef0391856a6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_TDATA1';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7a1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '731';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gabbf8e2faac7cd1dbe41efea8847dd5d9';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_TDATA2';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7a2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '732';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga35efdf3af946e5a33573d57075a5bc08';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_TDATA3';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7a3
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '733';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga82ff16141ee4547c5155723271b39854';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_TINFO';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7a4
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '734';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gacedc99e8f4c75a5d4f2dae53516317d9';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_TCONTROL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7a5
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '735';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga409814434caf22745092143a383f1995';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MCONTEXT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7a8
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '736';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gace1a28107df2889bf2b4e1426aa86876';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MSCONTEXT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7aa
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '737';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaa7948071dc3cc9b5b5be073037bafad3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_DCSR';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7b0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '738';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga8266449db67493cfa5d1d247a2258239';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_DPC';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7b1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '739';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gad95c67f53b8a01a3e125db864065065a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_DSCRATCH0';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7b2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '740';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gad71293d0ad16a2e80ad06ef306c384e5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_DSCRATCH1';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7b3
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '741';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga5a7abfd3679706088142a50995c1bdb8';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MCYCLE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb00
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '742';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga204b84adcbccada25ecd7aff3c5a31f5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MINSTRET';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb02
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '743';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gab4ecf0c0a94e6890a7f66b24a3d90570';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER3';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb03
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '744';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaba211e449cb5c1f19d356d6aae77fed6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER4';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb04
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '745';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga49744f82c2fd9ba5952bee02fee31d4c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER5';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb05
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '746';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga44bebd12dfb75d1230904599bacfd084';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER6';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb06
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '747';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga33e5707deb3a7dc9e1de6b3f272ba482';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER7';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb07
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '748';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga947ebb26a8cedc08182e1dd1b12a5f52';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER8';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb08
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '749';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga96af9e0956e30a5c177526d32dec3da2';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER9';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb09
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '750';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gab595d3f65afc6cc114e9441a79a72eb5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER10';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb0a
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '751';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaa6c748eba850b6d58630a718f9e01b82';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER11';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb0b
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '752';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga76832c0780249855bcc916fe79e420b0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER12';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb0c
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '753';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gae389f784655a09fba7f6ec2899b70215';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER13';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb0d
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '754';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga3e2db0c2ff1141b64d8a56c1a31b77da';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER14';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb0e
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '755';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gadfd273016afeb9771172c9cbeb9887cb';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER15';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb0f
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '756';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga0b418296b63cdfe99dd9507cc778d14d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER16';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb10
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '757';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaa67f519b1e39b1868822afe663f497fb';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER17';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb11
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '758';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gacb72065967f51ecdd5a22122d572bb43';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER18';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb12
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '759';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gafd2f303ac1c97e4b17b4bdb6dae67a9d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER19';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb13
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '760';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga161acddb79ddb855b1656fe1df53a2c5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER20';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb14
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '761';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga31a807d6ee1b32481ca97966c92e65ef';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER21';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb15
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '762';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gae1cb810c77b3327c2b1e779fb7124ca1';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER22';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb16
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '763';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gad4027543fbea60925a8176cf89d3c7cb';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER23';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb17
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '764';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gad7959c95f4f7ecf46f5cb51fe107f472';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER24';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb18
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '765';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga15fe826bd77b6a1629dbae680a88ae48';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER25';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb19
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '766';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga3dfea6cfc090a5e550891fdab8c0528b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER26';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb1a
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '767';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaca3e84b0ed73b0953076df2f499ccb11';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER27';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb1b
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '768';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga18303fb4cc48e05ab7e437e44eafe039';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER28';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb1c
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '769';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaba156c344a498a4297a0cda3c0eba8e0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER29';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb1d
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '770';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gae87e12f28b2b84e3356cf2edb4995ddd';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER30';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb1e
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '771';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga19cf5f645d0ecfdaddabd24f3d24fad0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER31';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb1f
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '772';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga5c0638be852bb8fe266552e903e5d086';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT3';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x323
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '773';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga938f602cf4785d7063da6c853c051c78';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT4';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x324
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '774';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga15162dd8d541a809e6fbeef1ed01d09a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT5';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x325
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '775';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga0185093eb5946c8137708e21916dc65e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT6';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x326
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '776';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaacfba0d92c494d8e83a7e13f183ebf2f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT7';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x327
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '777';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaa64bbdd12c51cc1bba742dac6dc4fd59';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT8';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x328
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '778';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga177a9b634120f0f0eb54e0469970d9c4';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT9';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x329
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '779';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaf45e26868117973a085e36d7eff5450e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT10';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x32a
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '780';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga92f0189e5bd365e0841d4e940873bb0e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT11';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x32b
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '781';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gac3be9181730b41f7569d3a02c0678476';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT12';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x32c
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '782';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga1bdcead9d6986e83ca841b77f1415221';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT13';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x32d
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '783';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga6402b2179f54e39374218708378ecb18';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT14';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x32e
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '784';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga88a2a649e6aa85e22c858ebfd4a66c90';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT15';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x32f
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '785';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga249efb1593f74ed9766c736e61355339';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT16';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x330
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '786';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga09f2b4ed516486729cb6db6086dd6ba6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT17';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x331
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '787';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga04248ecdb3aac0efecfbc223b2825234';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT18';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x332
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '788';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga7e9fd10959094ccdb2b39849d4f212ae';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT19';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x333
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '789';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga13974efd9157cf121ae2120665581f85';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT20';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x334
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '790';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga4eb02f09ac37938aa2d02d45055dbd6d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT21';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x335
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '791';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaef9531dd9a69b3954f4f190416e3ff3a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT22';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x336
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '792';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gafd99ce5c3b4ced37a6b5033ad6d122dc';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT23';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x337
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '793';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga28b1616c2743a2f9e3aa758ddeb40ad9';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT24';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x338
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '794';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gacd3ce65244335f6031e43511889ebb24';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT25';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x339
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '795';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga49d6c659bd31caa0940d6bccfe6cf690';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT26';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x33a
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '796';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga68721e96a48b16f479ed3b3d3f49f503';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT27';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x33b
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '797';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaffa9684a64c5f062c3021c3cdbabfd51';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT28';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x33c
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '798';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga03c74342e3b565bab5d4e9a2d24bc4c2';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT29';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x33d
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '799';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaf2942b3e343ffa1e98ef0c4e66a5c2cb';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT30';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x33e
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '800';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga05fceefba02c81fb7a391a39335b22b0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT31';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x33f
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '801';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gac3c7d7cddfa7dda613e4af9c2884fd1d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MVENDORID';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xf11
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '802';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga51da92996bc910f5ac5b654c8c376945';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MARCHID';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xf12
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '803';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga509d84168ac957db68248983ecfcc7ee';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MIMPID';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xf13
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '804';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga50cb52c60a3472620a819765e593f67e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHARTID';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xf14
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '805';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gae5c971cb2f3e07dfa8f496fc6491a30a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MCONFIGPTR';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xf15
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '806';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga3a9f600798fa252afdb427fd91e4be64';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_STIMECMPH';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x15d
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '807';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaaab66489e63d413c9154740d0467f38c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_VSTIMECMPH';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x25d
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '808';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga8c3e4571cc6bbdfebc68453fbd71f271';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HTIMEDELTAH';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x615
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '809';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga5fafd5aa10d08a8e4ae1a448c972bdf6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HENVCFGH';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x61a
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '810';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga8100437e90565d935dfdbb2863e2b834';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HSTATEEN0H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x61c
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '811';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gae485123fc2e00e472a7eaa00450cf741';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HSTATEEN1H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x61d
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '812';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga943fe75fa5c3cb150769dee8e072942e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HSTATEEN2H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x61e
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '813';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga8630e21848c461b651894c03bcd125ca';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HSTATEEN3H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x61f
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '814';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaf68e1fabef0868e0d41d8e69ba55cce9';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_CYCLEH';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc80
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '815';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga2e2ce9bac3d1ad2128a4eb9438a1022d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_TIMEH';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc81
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '816';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaf1e2e4353b163d307d974806a0031407';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_INSTRETH';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc82
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '817';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga315ee54d99aa0fbed5532e5bcf6e2d94';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER3H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc83
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '818';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga426e2ddee52a86c29a9829c66b5c0eb5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER4H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc84
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '819';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gac1e9d2a6cf60d54c39002292a21af314';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER5H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc85
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '820';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga5c7c0dc282f4787f6d7070331a3b9784';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER6H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc86
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '821';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gacac7fd3e7f29c8a8ed9c76647f4e1622';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER7H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc87
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '822';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gae2af5d7df5e784a4686d3cc941220cbe';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER8H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc88
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '823';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga4bd36c6e299b2a4460240f1076d23e29';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER9H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc89
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '824';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaf5581f64a316e30e7c3cbbb5922b1c11';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER10H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc8a
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '825';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaea60788a08d7b4ca7b53f420f603a379';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER11H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc8b
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '826';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga2c0f3bb461cf96900abe0cb838ecdd98';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER12H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc8c
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '827';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gac3a0bbad16bd85e6c94ae660c3385bf3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER13H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc8d
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '828';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga7652fab822b65fe3a34c6d9276e79be5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER14H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc8e
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '829';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga24960fa447bc0b97490e89affaf12175';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER15H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc8f
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '830';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga9f41e6d2a9a3ef8658ffb75ba556850d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER16H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc90
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '831';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga6085cb84939839a52d2d39a9fc3eda31';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER17H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc91
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '832';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga6b5ff85ac4148e421faf6ddf54ac4a9c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER18H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc92
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '833';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga2d88e7749d8af48f14354828ef7d035b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER19H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc93
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '834';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaa650b0fc0f2bb0961c67fbf7b4c36600';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER20H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc94
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '835';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga61086491d346e234d98ab1da45212282';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER21H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc95
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '836';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga1a8800b5b3d07b8c70077cbad166f34a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER22H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc96
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '837';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gab328b79481e61ccfdd857bc32bb20506';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER23H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc97
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '838';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaee69e1ac9c703f0240d254c278a1a272';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER24H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc98
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '839';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga0d672ac0d2799f037a31d2046a06b10b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER25H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc99
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '840';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gace878eb3ea306cca02cfafb6bab9ecc5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER26H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc9a
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '841';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga5e3ecbfe883c475f932c60c31d2dd1b3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER27H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc9b
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '842';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga91cecca4be8b810af5f12b65e211517a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER28H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc9c
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '843';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaf4a8369e4bbdb699385d39809a3a48b7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER29H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc9d
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '844';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gab57d8fe9cde11b9b07afa537a035ae38';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER30H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc9e
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '845';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga5308b7cbb7e2f51f193468164cbf2204';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER31H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc9f
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '846';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga0e7112dbb93ee382a823f37862ac3a45';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MSTATUSH';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x310
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '847';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gad65278e687be5c621f45e8592066e3df';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MENVCFGH';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x31a
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '848';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga6e0ea14aac1e19c9cecb9a650e889108';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MSTATEEN0H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x31c
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '849';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga4a5abb63cad1b7dba74bfff6e1bc7e6c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MSTATEEN1H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x31d
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '850';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga51c3a89a7c0871d521864a99b4dfadd5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MSTATEEN2H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x31e
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '851';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gacccbdde1c3fd730d6b3190531dbcb149';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MSTATEEN3H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x31f
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '852';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaf88dfbdab14d3b38c930911721e5427a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT3H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x723
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '853';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga946770644d6fdc764d7ade1390850102';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT4H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x724
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '854';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga8acfb2ea8985cebb0e245813eaa28885';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT5H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x725
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '855';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga8f13d64eab7b082c33b1096869d343cb';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT6H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x726
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '856';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga96d4e2a8c07620b90691c6ce3d7a66e2';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT7H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x727
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '857';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaa4fc0552eccc96e358c3043adf962f55';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT8H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x728
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '858';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga59a976d27b4309b92ecb41083d948a36';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT9H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x729
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '859';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gafbad18ab99c481e72b42a18d36af3c33';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT10H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x72a
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '860';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga06c5518321d3919242a32a6f90e55eea';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT11H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x72b
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '861';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaa822efa0e357247bd3e1f7bc10270ce7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT12H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x72c
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '862';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaad696e09a1dac307fb4c97e050524400';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT13H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x72d
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '863';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaebcb4c6030d85426135328c9f10f2e28';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT14H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x72e
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '864';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga637b10659f09f1ab16fab1bf63ac910b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT15H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x72f
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '865';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga92ff9f9e019d523e7ce9ac7da8683718';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT16H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x730
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '866';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gae03294680debacb1705075f0c9eb55ba';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT17H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x731
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '867';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga8ea473a76b216369453714b6f4079e78';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT18H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x732
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '868';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga49ae7ecb496d8ed86f2a3c365be848ce';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT19H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x733
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '869';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga1769d8f49bb3e3d04f0b17cba7141cb3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT20H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x734
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '870';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga9b0f48e11d2b989a3a68438fb13e5974';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT21H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x735
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '871';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaab99ce773a2b9745db2bf588663bf7a8';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT22H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x736
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '872';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaa09cfb2e20aaffa4aee187b0e12360cf';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT23H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x737
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '873';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gab9fc32ab3af511b0afd7024bce6c79a6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT24H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x738
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '874';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga72af87e73b3b961b29681a8c5121ce5c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT25H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x739
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '875';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga88a94c57fa2ba4ffd8260b159bfbc68b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT26H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x73a
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '876';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gadf9569cf19977b427a5e7897464c1506';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT27H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x73b
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '877';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga63507d7d76d3f6b77b8fcb55bba5dd54';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT28H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x73c
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '878';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga2c22441c86791d98b44564789c044e77';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT29H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x73d
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '879';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga7dbee9519f39ae065d92b16453a57480';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT30H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x73e
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '880';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga8b846cb1e803147bb566973b52fd2760';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT31H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x73f
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '881';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga42589a5ffc77dc154d7ae91635c84218';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MSECCFGH';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x757
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '882';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gae3368bea588a2fcdf2e7d24707ef4dda';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MCYCLEH';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb80
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '883';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaa59d1f570770dc3be6cd493cbb5a12e4';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MINSTRETH';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb82
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '884';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga723ef168d1e7ffe66875303075956376';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER3H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb83
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '885';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gad31a1402ff7146c42b2018c35f91fff8';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER4H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb84
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '886';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga60c30dce15b7a2be53a146006b555e89';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER5H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb85
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '887';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga9e13742a1cdd2859c114d53e957d1479';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER6H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb86
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '888';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga12c3fe1c5311dfddb62fc22f974979a5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER7H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb87
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '889';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga70fcf0b335621e50d6f717658c502ab7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER8H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb88
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '890';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga33e415199dbfe9bceb11b02fd05f05e2';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER9H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb89
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '891';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga3f9e5f23fba4ba95afe9062e6d0223a7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER10H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb8a
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '892';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga4996bb6dff4a8a8fba71fbbb32b24265';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER11H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb8b
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '893';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga4d7f86d7ae204e3b66e0613c62a9fc31';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER12H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb8c
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '894';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gacd5ef2cf1d55e5c3fcbb52775c7cd477';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER13H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb8d
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '895';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gab67d71859f9a6e6f8a5e451202c56cb2';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER14H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb8e
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '896';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gab017401b380bbcdada167739e3919fcd';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER15H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb8f
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '897';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaf6ea9d5fb6d713634806841349668001';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER16H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb90
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '898';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga05f60a41153dd6f018f5d04d3b3b63cd';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER17H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb91
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '899';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga1c58c573e08d2a34dfe351f176d06453';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER18H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb92
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '900';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaf5cfdbc7dae21c267f94defc1e3a1555';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER19H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb93
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '901';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga76e93d1d9471f643e3143697c6b707f1';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER20H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb94
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '902';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga1e0e9a36456b7da7b88093c83dd5a034';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER21H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb95
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '903';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaf39358f2113b1786aafa46fa377efe02';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER22H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb96
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '904';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaa4611c3b746127c7d163c77c795a1284';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER23H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb97
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '905';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga693b26559f45e12a02b4e0c3c30895f7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER24H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb98
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '906';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga553f8532cccee7b82a78ec77abc99291';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER25H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb99
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '907';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga5d702fc0207d53d7b5a04c83831a1f93';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER26H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb9a
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '908';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga13b74054c104d2cb7ee55257d1a812cf';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER27H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb9b
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '909';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga2fab81807863c7cd55737ab7a1b525f6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER28H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb9c
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '910';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga3b046d583c1f3e2f2f55c3b4d176598a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER29H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb9d
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '911';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaf9fdd0098699ae5c0b46405a7824795a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER30H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb9e
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '912';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga943048489f909d6abba06c7fd38075bd';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER31H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb9f
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '913';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga9ba401387323d3fdfbe93c901c080954';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SPMPCFG0';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1A0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '916';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaec59cd1e18d5fd43934e746643fd5d69';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SPMPCFG1';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1A1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '917';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gade3ff3f3d224893b183e254563c8c679';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SPMPCFG2';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1A2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '918';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga39ab50479a50302d271fb6b8f770d63c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SPMPCFG3';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1A3
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '919';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga444f463df25b264807a9a21586d3642f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SPMPADDR0';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1B0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '920';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga95916391349650863a75672f5ba09eff';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SPMPADDR1';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1B1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '921';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gac4a49927351f9bd03afafd1280c6c7e5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SPMPADDR2';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1B2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '922';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gae768d2adffb36a40d02f3a637db7c5be';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SPMPADDR3';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1B3
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '923';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaffecb65da22b2a02c085423187bf19da';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SPMPADDR4';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1B4
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '924';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gafd6dc07656b6d6e3f72e6d0bb1a69f45';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SPMPADDR5';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1B5
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '925';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gad460161f33c9d9781b8164f0c66f4a54';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SPMPADDR6';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1B6
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '926';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gac9c1812274f86f3e3fc9716c4bb24bf2';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SPMPADDR7';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1B7
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '927';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gac4916c1385a8999ca73ef115b97ee330';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SPMPADDR8';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1B8
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '928';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga3f6df6ed01d22da0b3ac69d668b04953';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SPMPADDR9';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1B9
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '929';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga3e214be18ea7b9ec4811884972e40b02';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SPMPADDR10';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1BA
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '930';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga61d4943ae12afe4758d8ec688378e677';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SPMPADDR11';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1BB
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '931';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga8de51987aed0c374e533e6e03701b98d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SPMPADDR12';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1BC
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '932';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gadccdc1394f893014a3016dd63da11746';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SPMPADDR13';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1BD
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '933';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga70ce11868eae64e10395760ee9ba45cf';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SPMPADDR14';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1BE
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '934';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gafae126e7cad1ec9bf4cbcd7d98728f7d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SPMPADDR15';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1BF
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '935';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga90438e7e545f35305be13c926014ea79';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SMPUCFG0';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1A0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '937';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gad23d9dc10a80b2fcfe8c320e25d5b694';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SMPUCFG1';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1A1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '938';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gadc9d4cd842f25fd14e693759099701f6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SMPUCFG2';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1A2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '939';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga8cdeb5ac6227a471a8f7aefcf60d6524';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SMPUCFG3';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1A3
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '940';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaed205766e9ef051e74d55168cfac58a3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SMPUADDR0';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1B0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '941';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga5fb44a7f9088c4ea7fc6eea3b6f1cda1';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SMPUADDR1';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1B1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '942';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga530712a488707d51f51cd1b8e1ebeb10';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SMPUADDR2';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1B2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '943';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga6f0f41458053133baec6d6b82c2d4fb7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SMPUADDR3';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1B3
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '944';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga6938b6dcfa24aea51dba4e4db40ac877';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SMPUADDR4';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1B4
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '945';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gab0274356caf3ed1b60e4701e9e2cc41e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SMPUADDR5';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1B5
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '946';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga8b6deaacf956350df5eeee0ee3bed93c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SMPUADDR6';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1B6
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '947';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga5dd8c6675bd0667dbe910ba895d3e6a0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SMPUADDR7';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1B7
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '948';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga2a0c73dc54d45bf8cf09314285892934';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SMPUADDR8';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1B8
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '949';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga546d78e6b2b65dd9d709603f7f81269e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SMPUADDR9';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1B9
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '950';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaee4b782e43fea3f591b55db79c83317d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SMPUADDR10';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1BA
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '951';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga2ece606133eb46219f6f0d1e74de2f0f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SMPUADDR11';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1BB
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '952';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gad5461a0a66d8e11e519483822260d5b3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SMPUADDR12';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1BC
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '953';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gab307495bb7bedc8e0d777cc85168c012';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SMPUADDR13';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1BD
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '954';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga67dbf699a65dddde12d4aff21b0451db';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SMPUADDR14';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1BE
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '955';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga1d2ff59e26c74cdd28623da01f8d7352';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SMPUADDR15';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1BF
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '956';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gae6e276efb39fb59d96376b13966e47fe';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SMPUSWITCH0';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x170
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '958';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga7bf461ae9fbed0b17b732e0d7b1edee3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SMPUSWITCH1';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x171
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '959';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga5e44edb3f3d95986c92f8efad5db0c2c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MTVT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x307
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '962';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gacc09c434f52be7b1d5f715b9e7c87a81';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MNXTI';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x345
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '963';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga45bf722f7c1099ed2861045c00003379';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MINTSTATUS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x346
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '964';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga0e69a0c75e594c7801fce720de10fdbe';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MSCRATCHCSW';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x348
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '965';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gae205d4db7d1975b8a8accf904cb6feda';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MSCRATCHCSWL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x349
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '966';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gafa653e51ce2be6aa201caa8d36337e0f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MCLICBASE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x350
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '967';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gae76e6d643aed4d6ea0b986dc7e0c7171';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_UCODE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x801
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '970';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga76a5574122af1a8da6e2bd68c39da922';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MILM_CTL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7C0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '974';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga4958637ace7ceaea76e4fa4467fd6cd6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MDLM_CTL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7C1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '975';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga96f8a7b9feee05fcd5c69fbdcbec85cd';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MECC_CODE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7C2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '976';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga13df3ff8aec804cae346b61b2643c589';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MNVEC';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7C3
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '977';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga14e293d39955a4a033d7393c3a3ab1ef';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MSUBM';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7C4
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '978';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gab4dafad459e3db3ae835b0de8053f481';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MDCAUSE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7C9
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '979';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga6e79ed96b3346ea75923126b7c4d9d67';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MCACHE_CTL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7CA
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '980';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gabec3fb75f542861f5dcd5a1cda1df932';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MMISC_CTL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7D0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '981';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaf14ed5e74ef3587e1f4fb0ce13920a89';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MSAVESTATUS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7D6
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '982';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga32cb2c1b8fd77e4b9adea487b471f208';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MSAVEEPC1';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7D7
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '983';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga7b5df9537bc15eabe8f3d6ef39be8b36';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MSAVECAUSE1';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7D8
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '984';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gacff440cb8477cb8b00f27754ad821483';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MSAVEEPC2';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7D9
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '985';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga3606225699568343f04cd121aa971ede';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MSAVECAUSE2';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7DA
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '986';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga1e4d5a334aed1b5875b26ec0f3e3d276';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MSAVEDCAUSE1';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7DB
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '987';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga1f6ce77bc9e71911b53ae6e01f72436a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MSAVEDCAUSE2';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7DC
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '988';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga46a43f3b5904ab91dfbb714e819985f6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MTLB_CTL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7DD
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '989';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga1c4771760dc892e5a41c3dd57450b9f8';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MECC_LOCK';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7DE
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '990';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga32468267a54a3a2f0c173c0906897d86';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MFP16MODE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7E2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '991';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaaa44ab96b79454f11cdcf23ad369b6ce';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MMISC_CTL1';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7E2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '993';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaf247842cff2eec5771c1ec6dd573b693';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_LSTEPFORC';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7E9
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '994';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaff94c16a48ec14f09e8b5ccd4a644c1e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PUSHMSUBM';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7EB
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '995';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga7d9dcb2dd7d7c764aab4b68033b383f2';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MTVT2';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7EC
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '996';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gafdc52ae6a2e10e010475ace51f98ccd6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_JALMNXTI';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7ED
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '997';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga0f754877b0b80651f35cb6916d0bcb2f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PUSHMCAUSE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7EE
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '998';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga255f0d4104534561a35308c7b6fcd2cd';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PUSHMEPC';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7EF
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '999';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga0982460f88e5af9a34c17c86c1db564a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MPPICFG_INFO';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7F0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1000';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga48dbc3afead74482181fcbc2fad7c19c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MFIOCFG_INFO';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7F1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1001';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga607b2a489cfb1b1faf0b3b76ce39cb84';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MDEVB';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7F3
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1004';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gac9ce6e10f1ec073de69ee82b2831f890';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MDEVM';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7F4
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1005';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga198af23be4801bfb74a2358fbc1bb799';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MNOCB';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7F5
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1006';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaea387b72a8faf293ec7def1b8e4aeb1a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MNOCM';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7F6
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1007';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga43b2cc308290b5b25eba8ef078543db5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MMACRO_DEV_EN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xBC8
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1008';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaeb51f122ed21702b7a228115bab8b2d7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MMACRO_NOC_EN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xBC9
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1009';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga00f7f762dded721197b7af91d843307c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MMACRO_CA_EN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xBCA
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1010';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaaa28d62120f9a975757bd2a762fce1ba';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MATTRI0_BASE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7F3
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1011';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga9382655ddfcbdb5320a1e4e8500b1745';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MATTRI0_MASK';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7F4
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1012';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gad42c2145f20ae8968857e8095e3239c9';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MATTRI1_BASE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7F5
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1013';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gadb5f4efa74d941ead38b471551ec012e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MATTRI1_MASK';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7F6
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1014';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga55009dada9deee5754aea2a1511345b9';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MATTRI2_BASE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7F9
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1015';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga7615555a070a20572e6104383fafd499';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MATTRI2_MASK';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7FA
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1016';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga5fb56d520418e835c8718b023bf04d48';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MATTRI3_BASE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7FB
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1017';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga43d810a75f84e220d839a4a08a188dff';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MATTRI3_MASK';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7FC
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1018';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga8bfe9adbc144f9ab35a706d66597f987';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MATTRI4_BASE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7FD
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1019';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga22cdf04247386bb3c566d11e487e70e6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MATTRI4_MASK';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7FE
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1020';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga4817c790b13c2c75cf739ca4d886d322';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MATTRI5_BASE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xBE0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1021';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga8cea5688d9efaaecada7edc5e9d643a8';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MATTRI5_MASK';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xBE1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1022';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga0c99e102b848a75f1b7b1b7776ecd1e9';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MATTRI6_BASE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xBE2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1023';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga659bcd2a14fd0d88821e909a634f2668';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MATTRI6_MASK';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xBE3
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1024';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga1b27494475e2d6b7cf60b79e0e236b5d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MATTRI7_BASE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xBE4
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1025';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gab8278cb2def6dceaeca759bdbd7e4ef3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MATTRI7_MASK';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xBE5
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1026';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga9558c70b91bde6cfb0f3185a84c6d197';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SATTRI0_BASE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x5F0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1027';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga34cc0848d3c784acb4041c775079b2db';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SATTRI0_MASK';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x5F1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1028';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga1190f7f25e3ea11fff678c8c6f4a6d60';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SATTRI1_BASE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x5F2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1029';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga0ba3514dafcba3f0ecae2eec87f70aba';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SATTRI1_MASK';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x5F3
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1030';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gadced76c9c649187ee84b6efe25c9e141';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SATTRI2_BASE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x5F4
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1031';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gabeb67302bc57561d8a331fb3f6cf56ef';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SATTRI2_MASK';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x5F5
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1032';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga3dfb9c7d04428e1a98877da57f5b9ec1';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SATTRI3_BASE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x5F6
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1033';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga1dc69ba784813e545e4533847003dd06';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SATTRI3_MASK';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x5F7
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1034';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga7a641639e1603a43bbd537ef467ce343';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SATTRI4_BASE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x5F8
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1035';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaf2835f15193280f7b6ea3e03cf471a85';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SATTRI4_MASK';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x5F9
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1036';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga4b790f491ae6e18fa6cab10dd24d88ff';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SATTRI5_BASE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x5FA
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1037';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaa30fe8bd2002e989b2c471861a16410a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SATTRI5_MASK';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x5FB
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1038';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaa385706fc547166be18f7bdf62027f51';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SATTRI6_BASE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x5FC
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1039';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaf5aaf643ed0c9aefcbb16d90ed17a584';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SATTRI6_MASK';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x5FD
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1040';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gac31b3d4ee730381ded07f8ede621d9c9';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SATTRI7_BASE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x5FE
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1041';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga6ee9957dfb3d2ca375060f1ee3003bf3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SATTRI7_MASK';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x5FF
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1042';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga5b68282dddd32e9b64a994a59b939acd';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MSMPCFG_INFO';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7F7
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1045';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaa4527441fd9a67ca24bc8357ea3c165d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MIRGB_INFO';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7F7
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1046';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga7ee7f2cce602b8b3e2943bc2d0ca65cb';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SLEEPVALUE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x811
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1048';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga730f164e5d79c6b27d2187a1e7a17e25';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_TXEVT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x812
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1049';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga9852d0d6221b272f8f5290c3445ee1ba';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_WFE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x810
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1050';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaf155881e9097545a4a31041c4d51d05c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_JALSNXTI';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x947
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1051';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaa66cb3b9c23d77dc064e8bd7d40be93b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_STVT2';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x948
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1052';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga3d425d8171680f0e4f65fd1db1cba669';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PUSHSCAUSE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x949
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1053';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga4c6a337995365a2a0a626b61f75f12e0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PUSHSEPC';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x94A
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1054';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaaf31400609977385346bcecf18911174';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SDCAUSE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x9C0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1055';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga3401036463f597de22658714115bed5b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MICFG_INFO';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xFC0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1056';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gacb31b31285f7ea1d527a19f4388b01bd';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MDCFG_INFO';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xFC1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1057';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga7fd083b254f2438fe5cbf9d667468324';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MCFG_INFO';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xFC2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1058';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga2cbdbf90ba3dff2b8c187d3154969aff';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MTLBCFG_INFO';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xFC3
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1059';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga9b51f8522241a4cca8985c54bd13c07f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MECC_CTL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xBC0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1062';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga5e34c44dbc113e5b9658499e6a186cee';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MECC_STATUS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xBC4
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1063';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga272433218a2850b0d00c1d0f51ada877';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SAFETY_CRC_CTL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x813
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1066';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gadfa22b924aeecb999b4a8afb54e0b118';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SAFETY_STL_STATUS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x814
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1067';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga1eafc0ae472d58766c1a42520c25d3ed';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MSTACK_CTRL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7C6
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1070';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga0f9838401a9769be77c249e91b626dbc';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MSTACK_CTL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7C6
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1071';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga9c7c6a0ac90ddaf0f29c66919f828295';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MSTACK_BOUND';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7C7
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1072';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaa0f2bb4552232a285522f7795efbc363';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MSTACK_BASE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7C8
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1073';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga4faa0c15728837765ec9aaf28f14c09b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_CCM_MBEGINADDR';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7CB
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1076';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga09b6c06fdc71424566c30bad5470c0c1';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_CCM_MCOMMAND';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7CC
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1077';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga68f7537cd8e79434b1a191053d09d5f7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_CCM_MDATA';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7CD
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1078';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga59e75e3573eb567358b1037a7076de37';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_CCM_SUEN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7CE
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1079';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gab508f4dfbd649a25f7eaa8ac5b88a8c0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_CCM_SBEGINADDR';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x5CB
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1080';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga19b9cf123424b131c5ba30946c54c2fd';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_CCM_SCOMMAND';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x5CC
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1081';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga58c7d8ca64fe96544d85e57f4b6a3bca';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_CCM_SDATA';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x5CD
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1082';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaca251c4a3f81dd257831ac6407088e52';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_CCM_UBEGINADDR';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x4CB
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1083';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga53c64245d173eed1d1622cfac509ff60';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_CCM_UCOMMAND';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x4CC
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1084';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gad18936febc391b50b6ba078eb605758e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_CCM_UDATA';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x4CD
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1085';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga7f214054147ffd229cc1aba320cf8405';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_CCM_FPIPE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x4CF
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1086';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga573c8e8d248d3c9a25837ed3473e8973';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SHARTID';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xDC0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1088';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga9da729f347f41183db0d4dfc08153a29';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MLWID';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x390
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1090';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga7c73d8a081f987e68ed4399627466199';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MWIDDELEG';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x738
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1091';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga3c3d50dc4144090a416dd5bb04042cb6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SLWID';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x190
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1092';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaa0f507b2b11ba1d8f9e1675775646919';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CAUSE_MISALIGNED_FETCH';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1097';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
End of Doxygen Group NMSIS_Core_CSR_Registers.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaba5d094c7796286978fe05ceedb89863';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CAUSE_FAULT_FETCH';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1098';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga0b365435966c2ba620824668ecd09006';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CAUSE_ILLEGAL_INSTRUCTION';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1099';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaabd6ef7192e2092f6914447d808f838d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CAUSE_BREAKPOINT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1100';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga12723f26b86c321bdde190c119aee4be';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CAUSE_MISALIGNED_LOAD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x4
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1101';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga1ec6d35d2f96397da81e293b82a3f06f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CAUSE_FAULT_LOAD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x5
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1102';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gad9517090b55edb5b56751c969280f17d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CAUSE_MISALIGNED_STORE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x6
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1103';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga78208819b398959ba50a913f8bbb44f4';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CAUSE_FAULT_STORE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1104';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gad313934ea20c1ab3491e2d52d4ad558b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CAUSE_USER_ECALL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x8
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1105';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gac3c506d6261a143953d856b85a47b707';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CAUSE_SUPERVISOR_ECALL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x9
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1106';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga9127266f95abeacd50926e1ac29c0885';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CAUSE_HYPERVISOR_ECALL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xa
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1107';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga19461c8df4bce8af932c6bcbcdc302ea';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CAUSE_MACHINE_ECALL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1108';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gacacff8f595ef16b915e266c1caf7becc';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CAUSE_FETCH_PAGE_FAULT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1109';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaea484b7219fc38547f7b20c8bf264efe';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CAUSE_LOAD_PAGE_FAULT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xd
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1110';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gac105f6c51ffa8660f7f4ba7b07acd29c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CAUSE_STORE_PAGE_FAULT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xf
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1111';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga61baedb2ef982440c0ada56ed9e3a4a7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MISALIGNED_FETCH';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1 << CAUSE_MISALIGNED_FETCH)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1114';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga9c7e958944e2489793720a6444e00665';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FAULT_FETCH';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1 << CAUSE_FAULT_FETCH)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1115';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gafb51dad2d217072ef28b0cd2f795209e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ILLEGAL_INSTRUCTION';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1 << CAUSE_ILLEGAL_INSTRUCTION)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1116';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga0409e98ff9aade482fcfc9e67e762a86';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'BREAKPOINT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1 << CAUSE_BREAKPOINT)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1117';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga628f3d387b0b03328ee70ce0965cf851';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MISALIGNED_LOAD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1 << CAUSE_MISALIGNED_LOAD)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1118';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga5b66e28c9aa6fa1e5c55c8fb0faabccc';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FAULT_LOAD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1 << CAUSE_FAULT_LOAD)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1119';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gadfe8c054c34aa6646e6045908ab40c60';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MISALIGNED_STORE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1 << CAUSE_MISALIGNED_STORE)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1120';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga514ae06ebd226381f1da8ef5871a1434';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FAULT_STORE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1 << CAUSE_FAULT_STORE)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1121';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaac4588d8c5e04cfaa2a7e80dd079bb3b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'USER_ECALL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1 << CAUSE_USER_ECALL)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1122';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga238166973018135d4b234d94e1714383';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FETCH_PAGE_FAULT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1 << CAUSE_FETCH_PAGE_FAULT)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1123';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga9666dc91113011f9eedf6a3627a4bc17';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'LOAD_PAGE_FAULT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1 << CAUSE_LOAD_PAGE_FAULT)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1124';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga6ac3bb38c7a700d1059382d75c68e6a3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'STORE_PAGE_FAULT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1 << CAUSE_STORE_PAGE_FAULT)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1125';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gad891aa30fc0af385a8ccd22d5bb9ed49';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'DCAUSE_FAULT_FETCH_PMP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1128';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga5564fb5c006efb9f6e670303f3887b1b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'DCAUSE_FAULT_FETCH_INST';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1129';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gad5c25083d866714730e56ea5322765fc';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'DCAUSE_FAULT_LOAD_PMP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1131';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gae80781100324a8152d5a9f895873fcde';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'DCAUSE_FAULT_LOAD_INST';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1132';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga1d9ccec8b3c313f10bab146c5d71e061';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'DCAUSE_FAULT_LOAD_NICE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1133';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaebd23612a7b2e1c261bbdc8004fdd5d5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'DCAUSE_FAULT_STORE_PMP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1135';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga8e47cb5b31685d6ceef0051a8bee7708';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'DCAUSE_FAULT_STORE_INST';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1136';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gae7134582c12ade54062cd23d884234c0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_XSTATUS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
CSR_MSTATUS
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1166';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga1787b72d70444832dc2010d76ffe5459';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_XTVEC';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
CSR_MTVEC
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1167';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga98ee0df46a310ccc5c235f85748748b6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_XCOUNTEREN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
CSR_MCOUNTEREN
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1168';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gae91e795aaffca747bb6fadcdc51baa34';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_XIE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
CSR_MIE
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1169';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga7b38101003ab6e622f0d924634b0bdcf';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_XIP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
CSR_MIP
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1170';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga8b49bffad7ae6d7cfe56a93cce5a4f75';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_XSCRATCH';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
CSR_MSCRATCH
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1171';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gac9d063e4492a8a922e8107c472ed21a6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_XEPC';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
CSR_MEPC
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1172';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga84b62290d56453f92f54554a19a07b0d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_XCAUSE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
CSR_MCAUSE
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1173';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gadf365be2eb5bd96d8db0864df5b8a0fd';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_XSUBM';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
CSR_MSUBM
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1174';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga6cbeed45af8a5ee745bc9989d82585d5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_XTVAL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
CSR_MTVAL
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1175';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga7a08e555f288608bf06113edbdc62449';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_XENVCFG';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
CSR_MENVCFG
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1176';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga588d49f54ef6b2254605b5f21cac545a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_XTVT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
CSR_MTVT
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1177';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga051d11077abd0ecdddbd51ab80d64703';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_XTVT2';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
CSR_MTVT2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1178';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gad6765e4163b01050e0e50be775cb2bd2';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_XSCRATCHCSWL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
CSR_MSCRATCHCSWL
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1179';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gad19ef8befa0e6b4f4a9cb8737fbca963';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_XSCRATCHCSW';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
CSR_MSCRATCHCSW
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1180';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga01fb82504b73e754db231c2eb5cc4e82';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_XDCAUSE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
CSR_MDCAUSE
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1181';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga48690ff1e212b98f4e7564fac462d67b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_JALXNXTI';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
CSR_JALMNXTI
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1182';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga2e979dc6c747600ec8de2e2f97a94a83';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_XINTSTATUS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
CSR_MINTSTATUS
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1183';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gad79bd1a1eaf459f45dc09aebe507c56c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_XNXTI';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
CSR_MNXTI
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1184';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gad9264fe650a5580cec1e692271082de1';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PUSHXEPC';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
CSR_PUSHMEPC
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1185';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga05068a0d6faa696b8cd8331ba793ff75';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PUSHXCAUSE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
CSR_PUSHMCAUSE
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1186';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga22625d4df6d8e2aee9814031463133a6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'XRET';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
mret
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1187';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gae9cfc46f1a8cb3739b17d01aa00c24f1';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'eclic_xsip_handler';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
eclic_msip_handler
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1188';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga6c01756582cbb3b309a28d714bbfe0fa';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'eclic_xtip_handler';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
eclic_mtip_handler
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1189';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga0b535cf5d9c29d77a5004378e582e5f5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'XSTATUS_XIE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
MSTATUS_MIE
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1190';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga92a7eb7b7b5a5a271f9994a405ebdcfe';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'x_exc_entry';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
exc_entry
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1191';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga487283cf22152f5d21178d41e88aa3e7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'x_irq_entry';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
irq_entry
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '1192';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    };
  file-full-name  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'system__Device_8c';
  file-name = 'system_Device.c';
    define = {
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'system__Device_8c_1a95982eccb57c2ae35f8ba3d8f0b05653';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SYSTEM_CLOCK';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(16000000UL)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      define-mem-desc-line = '39';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'system__Device_8c_1ae197ac10af7e0f266fe315db7254c555';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__SMODE_VECTOR_ATTR';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__attribute__((section (".text.vtable_s"), aligned(512)))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      define-mem-desc-line = '106';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExcNMI__Handling_1ga10f1bcf88d4be44d559c79485f16dd24';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MAX_SYSTEM_EXCEPTION_NUM';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
20
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      define-mem-desc-line = '243';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Max exception handler number, don't include the NMI(0xFFF) one.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExcNMI__Handling_1ga25c27534bcb8848ca477335ef0a4011b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SYSTEM_CORE_INTNUM';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
16
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      define-mem-desc-line = '258';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__SystemConfig_1ga1deba62f872739ce8bb0421ba46ad45a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CLINT_MSIP';
      define-mem-param  = {
        define-mem-def-name = 'base';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'hartid';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(*(volatile uint32_t *)((uintptr_t)((base) + ((hartid) * 4))))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      define-mem-desc-line = '1244';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__SystemConfig_1gaa26abf3a071baa0fc828f476a2e5b208';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SMP_CTRLREG';
      define-mem-param  = {
        define-mem-def-name = 'base';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'ofs';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(*(volatile uint32_t *)((uintptr_t)((base) + (ofs))))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      define-mem-desc-line = '1245';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    };
    typedef = {
    typedef-member = {
      typedef-mem-kind = 'typedef';
      typedef-mem-id   = 'group__NMSIS__Core__IntExcNMI__Handling_1gaf7e370216a9e922c9b8149c3d3423758';
      typedef-mem-virt = normal;
      typedef-mem-prot = public;
      typedef-mem-type = <<_EnD_oF_dEf_TeXt_
void(*
_EnD_oF_dEf_TeXt_;
      typedef-mem-name = 'EXC_HANDLER';
      typedef-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      typedef-mem-desc-line = '239';
      typedef-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Exception Handler Function Typedef.
_EnD_oF_dEf_TeXt_;
      typedef-mem-documentation = <<_EnD_oF_dEf_TeXt_
\note
This typedef is only used internal in this system_<Device>.c file.
It is used to do type conversion for registered exception handler before calling it.
_EnD_oF_dEf_TeXt_;
    }; /* typedef-member */
    typedef-member = {
      typedef-mem-kind = 'typedef';
      typedef-mem-id   = 'group__NMSIS__Core__IntExcNMI__Handling_1gaa803be8dcfa8de01f557200a10ac472a';
      typedef-mem-virt = normal;
      typedef-mem-prot = public;
      typedef-mem-type = <<_EnD_oF_dEf_TeXt_
void(*
_EnD_oF_dEf_TeXt_;
      typedef-mem-name = 'INT_HANDLER';
      typedef-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      typedef-mem-desc-line = '240';
      typedef-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      typedef-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* typedef-member */
    };
    func = {
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SystemConfig_1ga333c13ff9e53ba253ed6d3b06072344c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'exc_entry_s';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      func-mem-desc-line = '76';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-referencedby = {
        func-mem-ref-id = 'system__Device_8c_1ga4de3e443b9a700e84bb1d1dcf3888ad3';
        func-mem-ref-line = '935';
        func-mem-ref-name = 'CLINT_Interrupt_Init';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'system__Device_8c_1ga70fba7831dd570ce491537271b675f15';
        func-mem-ref-line = '879';
        func-mem-ref-name = 'ECLIC_Interrupt_Init';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExcNMI__Handling_1ga4faf84a59d71ad195d0a114212813f99';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
static void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'system_default_exception_handler_s';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'scause';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'sp';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      func-mem-desc-line = '609';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Supervisor mode system Default Exception Handler.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function provided a default supervisor mode exception and NMI handling code for all exception ids.
By default, It will just print some information for debug, Vendor can customize it according to its requirements.
@param [in]  scause    code indicating the reason that caused the trap in supervisor mode
@param [in]  sp        stack pointer
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '642';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaaf31400609977385346bcecf18911174';
        func-mem-ref-line = '1055';
        func-mem-ref-name = 'CSR_SDCAUSE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga3981cba40ee737a2f7cf4228b2bdbb67';
        func-mem-ref-line = '574';
        func-mem-ref-name = 'CSR_SEPC';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga705b54eb646ded8aba97f8e39acb9c77';
        func-mem-ref-line = '576';
        func-mem-ref-name = 'CSR_STVAL';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1ga96e9e920f6bb0d8e73c817e4523607c4';
        func-mem-ref-line = '294';
        func-mem-ref-name = 'Exception_DumpFrame';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga3131c9addf7b5ecc1da9f7b0eff9815d';
        func-mem-ref-line = '364';
        func-mem-ref-name = 'PRV_S';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'system__Device_8c_1ga8b5b8fb823a0e048e7c74d19c2af5639';
        func-mem-ref-line = '704';
        func-mem-ref-name = 'core_exception_handler_s';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'system__Device_8c_1gab6afbaed495af51eeeb4eb7d1c5da420';
        func-mem-ref-line = '582';
        func-mem-ref-name = 'Exception_Init';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExcNMI__Handling_1ga97971400b10d2cdd33f0d1fb59f9d0c8';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
static void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'system_default_exception_handler';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'mcause';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'sp';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      func-mem-desc-line = '331';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
M-Mode System Default Exception Handler.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function provides a default exception and NMI handler for all exception ids.
By default, It will just print some information for debug, Vendor can customize it according to its requirements.
@param [in]  mcause    code indicating the reason that caused the trap in machine mode
@param [in]  sp        stack pointer
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga578d4ba2532485995190134b2beb03ff';
        func-mem-ref-line = '1250';
        func-mem-ref-name = '__get_hart_id';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '642';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gab4dafad459e3db3ae835b0de8053f481';
        func-mem-ref-line = '979';
        func-mem-ref-name = 'CSR_MDCAUSE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga53d62065ed74fd3583cca895e6157c5f';
        func-mem-ref-line = '642';
        func-mem-ref-name = 'CSR_MEPC';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga7e69e2d5c3618dc9274a39e57d54de8d';
        func-mem-ref-line = '644';
        func-mem-ref-name = 'CSR_MTVAL';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1ga96e9e920f6bb0d8e73c817e4523607c4';
        func-mem-ref-line = '294';
        func-mem-ref-name = 'Exception_DumpFrame';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gafee966c8a48cb4075680eb0cc08ab32e';
        func-mem-ref-line = '366';
        func-mem-ref-name = 'PRV_M';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'system__Device_8c_1gac7f5b810aee623f65822bac1efe2006d';
        func-mem-ref-line = '406';
        func-mem-ref-name = 'core_exception_handler';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'system__Device_8c_1gab6afbaed495af51eeeb4eb7d1c5da420';
        func-mem-ref-line = '582';
        func-mem-ref-name = 'Exception_Init';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SystemConfig_1ga2cf42fa93bc1fb47efbbbf361e395b6e';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'irq_entry_s';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      func-mem-desc-line = '86';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
default entry for s-mode non-vector irq entry
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-referencedby = {
        func-mem-ref-id = 'system__Device_8c_1ga70fba7831dd570ce491537271b675f15';
        func-mem-ref-line = '879';
        func-mem-ref-name = 'ECLIC_Interrupt_Init';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SystemConfig_1ga85a0a6e97bb1e5b8d21e0d87426a437d';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'default_intexc_handler';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      func-mem-desc-line = '89';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
default entry for s-mode exception entry
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
default eclic interrupt or exception interrupt handler 
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SystemConfig_1gae0c36a9591fe6e9c45ecb21a794f0f0f';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SystemCoreClockUpdate';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      func-mem-desc-line = '197';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Function to update the variable \ref SystemCoreClock.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Updates the variable \ref SystemCoreClock and must be called whenever the core clock is changed
during program execution. The function evaluates the clock register settings and calculates
the current core clock.
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SystemConfig_1ga93f514700ccf00d08dbdcff7f1224eb2';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SystemInit';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      func-mem-desc-line = '214';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Function to Initialize the system.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Initializes the microcontroller system. Typically, this function configures the
oscillator (PLL) that is part of the microcontroller device. For systems
with a variable clock speed, it updates the variable \ref SystemCoreClock.
SystemInit is called from the file <b>startup<i>_device</i></b>.
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExcNMI__Handling_1ga98c21b177b9d5e41203eec2e1dfaa7b9';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
static void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'system_mmode_extirq_handler';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'exccode';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'sp';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      func-mem-desc-line = '446';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
M-Mode external interrupt handler common entry for plic interrupt mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function provide common entry for m-mode external interrupt for plic interrupt mode.
@param [in]  exccode   exception code indicating the reason that caused the trap in machine mode
@param [in]  sp        stack pointer
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__plic_8h_1gac66856f13aad699a1286e92df3154ef2';
        func-mem-ref-line = '368';
        func-mem-ref-name = 'PLIC_ClaimInterrupt';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__plic_8h_1ga766feec803d4853c7c4e73e49c53c5c8';
        func-mem-ref-line = '371';
        func-mem-ref-name = 'PLIC_CompleteInterrupt';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1gad58cbb48427a6c0f09898275423fd879';
        func-mem-ref-line = '255';
        func-mem-ref-name = 'SystemMExtInterruptHandlers';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'system__Device_8c_1ga9bf05b8b9ade59d86f9c58eea665ca9c';
        func-mem-ref-line = '963';
        func-mem-ref-name = 'PLIC_Interrupt_Init';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExcNMI__Handling_1gad91007127865ca21ee8296292deaa562';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
static void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'core_interrupt_handler';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'exccode';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'sp';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      func-mem-desc-line = '381';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
M-Mode Common Interrupt handler entry when in clint/plic mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function provided a command entry for interrupt in clint/plic mode
@param [in]  exccode   Exception Code
@param [in]  sp        stack pointer
\remarks
- This is not used for clic interrupt mode, which is only used for clint/plic interrupt mode,
  you should call \ref CLINT_Interrupt_Init or \ref PLIC_Interrupt_Init first to make sure this handler entry registered
- If you are not in eclic interrupt mode, please use please use \ref Interrupt_Register_CoreIRQ to register internal interrupt
  and use \ref Interrupt_Register_ExtIRQ to register external interrupt
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1ga2e19ce23836fd8027da0995ff69d41ca';
        func-mem-ref-line = '262';
        func-mem-ref-name = 'SystemCoreInterruptHandlers';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'system__Device_8c_1ga4de3e443b9a700e84bb1d1dcf3888ad3';
        func-mem-ref-line = '935';
        func-mem-ref-name = 'CLINT_Interrupt_Init';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExcNMI__Handling_1gac7f5b810aee623f65822bac1efe2006d';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'core_exception_handler';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'mcause';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'sp';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      func-mem-desc-line = '406';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
M-Mode Common NMI/Exception/Interrupt handler entry.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function provided a command entry for NMI and exception. Silicon Vendor could modify
this template implementation according to requirement.
@param [in]  mcause    code indicating the reason that caused the trap in machine mode
@param [in]  sp        stack pointer
\remarks
- RISCV provided common entry for all types of exception and interrupt if not in eclic mode. This is proposed code template
  for exception entry function, Silicon Vendor could modify the implementation.
- For the core_exception_handler template, we provided exception register function \ref Exception_Register_EXC
  which can help developer to register your exception handler for specific exception number.
- If you are in eclic interrupt mode, please use \ref ECLIC_Register_IRQ to register both internal and external interrupt
- If you are not in eclic interrupt mode, please use please use \ref Interrupt_Register_CoreIRQ to register internal interrupt
  and use \ref Interrupt_Register_ExtIRQ to register external interrupt
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1ga10f1bcf88d4be44d559c79485f16dd24';
        func-mem-ref-line = '243';
        func-mem-ref-name = 'MAX_SYSTEM_EXCEPTION_NUM';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gac36753607d01e463c6bc40cc7e82e805';
        func-mem-ref-line = '180';
        func-mem-ref-name = 'MCAUSE_CAUSE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga47cb8f2bba4218f518c624bf37b30aec';
        func-mem-ref-line = '179';
        func-mem-ref-name = 'MCAUSE_INTR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1ga5cddbde51a3c513c534e6f87e0362297';
        func-mem-ref-line = '265';
        func-mem-ref-name = 'system_core_interrupt_handler';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1ga97971400b10d2cdd33f0d1fb59f9d0c8';
        func-mem-ref-line = '331';
        func-mem-ref-name = 'system_default_exception_handler';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1gaedd77e0eba0ea9872a4375893480b420';
        func-mem-ref-line = '252';
        func-mem-ref-name = 'SystemExceptionHandlers';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExcNMI__Handling_1ga10e7566ff2983240b81df158ebb1320d';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
static void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'system_default_interrupt_handler_s';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'scause';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'sp';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      func-mem-desc-line = '634';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
s-mode System Default Interrupt Handler for CLINT/PLIC Interrupt Mode
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function provided a default interrupt handling code for all interrupt ids.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '642';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga3981cba40ee737a2f7cf4228b2bdbb67';
        func-mem-ref-line = '574';
        func-mem-ref-name = 'CSR_SEPC';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga705b54eb646ded8aba97f8e39acb9c77';
        func-mem-ref-line = '576';
        func-mem-ref-name = 'CSR_STVAL';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'system__Device_8c_1ga4de3e443b9a700e84bb1d1dcf3888ad3';
        func-mem-ref-line = '935';
        func-mem-ref-name = 'CLINT_Interrupt_Init';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'system__Device_8c_1ga9bf05b8b9ade59d86f9c58eea665ca9c';
        func-mem-ref-line = '963';
        func-mem-ref-name = 'PLIC_Interrupt_Init';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExcNMI__Handling_1ga0db26f15b0169a337f304fd6826c862d';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
static void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'system_smode_extirq_handler';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'exccode';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'sp';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      func-mem-desc-line = '676';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
S-Mode external interrupt handler common entry for plic interrupt mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function provide common entry for s-mode external interrupt for plic interrupt mode.
@param [in]  exccode   exception code indicating the reason that caused the trap in supervisor mode
@param [in]  sp        stack pointer
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__plic_8h_1gad2916e76fe181f9e8c0fd6f60e30e700';
        func-mem-ref-line = '369';
        func-mem-ref-name = 'PLIC_ClaimInterrupt_S';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__plic_8h_1ga7f158068c28431ecfd46a42f431949be';
        func-mem-ref-line = '372';
        func-mem-ref-name = 'PLIC_CompleteInterrupt_S';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1ga42392960aff1b758a3b4f8cc9bae9fd4';
        func-mem-ref-line = '283';
        func-mem-ref-name = 'SystemSExtInterruptHandlers';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'system__Device_8c_1ga9bf05b8b9ade59d86f9c58eea665ca9c';
        func-mem-ref-line = '963';
        func-mem-ref-name = 'PLIC_Interrupt_Init';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExcNMI__Handling_1ga442331de13a5e6cf30e221fb8afd9711';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
static void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'core_interrupt_handler_s';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'exccode';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'sp';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      func-mem-desc-line = '658';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
S-Mode Common Interrupt handler entry when in clint/plic mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function provided a command entry for interrupt in clint/plic mode
@param [in]  exccode   Exception Code
@param [in]  sp        stack pointer
\remarks
- This is not used for clic interrupt mode, which is only used for clint/plic interrupt mode,
  you should call \ref CLINT_Interrupt_Init or \ref PLIC_Interrupt_Init first to make sure this handler entry registered
- If you are not in eclic interrupt mode, please use please use \ref Interrupt_Register_CoreIRQ to register internal interrupt
  and use \ref Interrupt_Register_ExtIRQ to register external interrupt
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1ga0a584bbf77d7982e7dec7c3dcec2f627';
        func-mem-ref-line = '281';
        func-mem-ref-name = 'SystemCoreInterruptHandlers_S';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'system__Device_8c_1ga4de3e443b9a700e84bb1d1dcf3888ad3';
        func-mem-ref-line = '935';
        func-mem-ref-name = 'CLINT_Interrupt_Init';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExcNMI__Handling_1ga96e9e920f6bb0d8e73c817e4523607c4';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'Exception_DumpFrame';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'sp';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'mode';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      func-mem-desc-line = '294';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Dump Exception Frame.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function provided feature to dump exception frame stored in stack.
@param [in]  sp    stackpoint
@param [in]  mode  privileged mode to decide whether to dump msubm CSR
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gafee966c8a48cb4075680eb0cc08ab32e';
        func-mem-ref-line = '366';
        func-mem-ref-name = 'PRV_M';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'system__Device_8c_1ga97971400b10d2cdd33f0d1fb59f9d0c8';
        func-mem-ref-line = '331';
        func-mem-ref-name = 'system_default_exception_handler';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'system__Device_8c_1ga4faf84a59d71ad195d0a114212813f99';
        func-mem-ref-line = '609';
        func-mem-ref-name = 'system_default_exception_handler_s';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExcNMI__Handling_1gaacfb9633cbb3f400d122719f659ece90';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
static void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'system_default_interrupt_handler';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'mcause';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'sp';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      func-mem-desc-line = '357';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
M-Mode System Default Interrupt Handler for CLINT/PLIC Interrupt Mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function provided a default interrupt handling code for all interrupt ids.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '642';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga53d62065ed74fd3583cca895e6157c5f';
        func-mem-ref-line = '642';
        func-mem-ref-name = 'CSR_MEPC';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga7e69e2d5c3618dc9274a39e57d54de8d';
        func-mem-ref-line = '644';
        func-mem-ref-name = 'CSR_MTVAL';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'system__Device_8c_1ga4de3e443b9a700e84bb1d1dcf3888ad3';
        func-mem-ref-line = '935';
        func-mem-ref-name = 'CLINT_Interrupt_Init';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'system__Device_8c_1ga9bf05b8b9ade59d86f9c58eea665ca9c';
        func-mem-ref-line = '963';
        func-mem-ref-name = 'PLIC_Interrupt_Init';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExcNMI__Handling_1gaa7e698bb2dbc4ac7b46a31e5794316c7';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'Interrupt_Register_CoreIRQ';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'irqn';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'int_handler';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      func-mem-desc-line = '470';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Register a m-mode core interrupt handler for core interrupt number.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
* For irqn <=  SYSTEM_CORE_INTNUM, it will be registered into SystemCoreInterruptHandlers[irqn-1], only used in non-eclic mode.
@param irqn    See \ref IRQn
@param int_handler     The core interrupt handler for this interrupt code irqn
\remarks
         You can only use it when you are not in ECLIC interrupt mode.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1ga25c27534bcb8848ca477335ef0a4011b';
        func-mem-ref-line = '258';
        func-mem-ref-name = 'SYSTEM_CORE_INTNUM';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1ga2e19ce23836fd8027da0995ff69d41ca';
        func-mem-ref-line = '262';
        func-mem-ref-name = 'SystemCoreInterruptHandlers';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'system__Device_8c_1gab7a197a47f395e2bbdf447ac0fbd79df';
        func-mem-ref-line = '1069';
        func-mem-ref-name = 'Core_Register_IRQ';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExcNMI__Handling_1ga8b3834f33a6fd6108d5b75de41deefbe';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'Interrupt_Get_CoreIRQ';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'irqn';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      func-mem-desc-line = '485';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get a m-mode core interrupt handler for core interrupt number.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param irqn    See \ref IRQn
\return
The core interrupt handler for this interrupt code irqn, only used in non-eclic mode.
\remarks
         You can only use it when you are not in ECLIC interrupt mode.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1ga25c27534bcb8848ca477335ef0a4011b';
        func-mem-ref-line = '258';
        func-mem-ref-name = 'SYSTEM_CORE_INTNUM';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1ga2e19ce23836fd8027da0995ff69d41ca';
        func-mem-ref-line = '262';
        func-mem-ref-name = 'SystemCoreInterruptHandlers';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExcNMI__Handling_1ga30e7aaf9f024f12fbe5db2eea18cce12';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'Interrupt_Register_ExtIRQ';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'irqn';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'int_handler';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      func-mem-desc-line = '502';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Register a m-mode external interrupt handler for plic external interrupt number.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
* For irqn <= \ref __PLIC_INTNUM, it will be registered into SystemMExtInterruptHandlers[irqn-1].
@param irqn    See \ref IRQn
@param int_handler     The external interrupt handler for this interrupt code irqn
\remarks
         You can only use it when you are in PLIC interrupt mode.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1gad58cbb48427a6c0f09898275423fd879';
        func-mem-ref-line = '255';
        func-mem-ref-name = 'SystemMExtInterruptHandlers';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'system__Device_8c_1gaa6d9a05c4ea29dce5179b6d4e26bb9a5';
        func-mem-ref-line = '1143';
        func-mem-ref-name = 'PLIC_Register_IRQ';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExcNMI__Handling_1gaec7d7c9ef87f1ce1beeef29f225c7662';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'Interrupt_Get_ExtIRQ';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'irqn';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      func-mem-desc-line = '519';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get a m-mode external interrupt handler for external interrupt number.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param irqn    See \ref IRQn
\return
The external interrupt handler for this interrupt code irqn
\remarks
         You can only use it when you are in PLIC interrupt mode.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1gad58cbb48427a6c0f09898275423fd879';
        func-mem-ref-line = '255';
        func-mem-ref-name = 'SystemMExtInterruptHandlers';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExcNMI__Handling_1ga9df7d45dd6f418ba31b6cec6c4958490';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'Exception_Register_EXC';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'EXCn';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'exc_handler';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      func-mem-desc-line = '538';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Register a m-mode exception handler for exception code EXCn.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
- For EXCn < \ref MAX_SYSTEM_EXCEPTION_NUM, it will be registered into SystemExceptionHandlers[EXCn-1].
- For EXCn == NMI_EXCn, it will be registered into SystemExceptionHandlers[MAX_SYSTEM_EXCEPTION_NUM].
@param [in]  EXCn    See \ref EXCn_Type
@param [in]  exc_handler     The exception handler for this exception code EXCn
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1ga10f1bcf88d4be44d559c79485f16dd24';
        func-mem-ref-line = '243';
        func-mem-ref-name = 'MAX_SYSTEM_EXCEPTION_NUM';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1gaedd77e0eba0ea9872a4375893480b420';
        func-mem-ref-line = '252';
        func-mem-ref-name = 'SystemExceptionHandlers';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExcNMI__Handling_1ga84df4676c5284f0ea383eeba33e9aa40';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'Exception_Get_EXC';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'EXCn';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      func-mem-desc-line = '559';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get current m-mode exception handler for exception code EXCn.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
- For EXCn < \ref MAX_SYSTEM_EXCEPTION_NUM, it will return SystemExceptionHandlers[EXCn-1].
- For EXCn == NMI_EXCn, it will return SystemExceptionHandlers[MAX_SYSTEM_EXCEPTION_NUM].
@param [in]  EXCn    See \ref EXCn_Type
\return  Current exception handler for exception code EXCn, if not found, return 0.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1ga10f1bcf88d4be44d559c79485f16dd24';
        func-mem-ref-line = '243';
        func-mem-ref-name = 'MAX_SYSTEM_EXCEPTION_NUM';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1gaedd77e0eba0ea9872a4375893480b420';
        func-mem-ref-line = '252';
        func-mem-ref-name = 'SystemExceptionHandlers';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExcNMI__Handling_1gab6afbaed495af51eeeb4eb7d1c5da420';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
static void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'Exception_Init';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      func-mem-desc-line = '582';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Initialize all the default core exception handlers.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
The core exception handler for each exception id will be initialized to \ref system_default_exception_handler.
\note
Called in \ref _init function, used to initialize default exception handlers for all exception IDs
SystemExceptionHandlers contains NMI, but SystemExceptionHandlers_S not, because NMI can't be delegated to S-mode.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1ga10f1bcf88d4be44d559c79485f16dd24';
        func-mem-ref-line = '243';
        func-mem-ref-name = 'MAX_SYSTEM_EXCEPTION_NUM';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1ga97971400b10d2cdd33f0d1fb59f9d0c8';
        func-mem-ref-line = '331';
        func-mem-ref-name = 'system_default_exception_handler';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1ga4faf84a59d71ad195d0a114212813f99';
        func-mem-ref-line = '609';
        func-mem-ref-name = 'system_default_exception_handler_s';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1gaedd77e0eba0ea9872a4375893480b420';
        func-mem-ref-line = '252';
        func-mem-ref-name = 'SystemExceptionHandlers';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1ga01db1fdb5f948dbf4555b0f7375eff11';
        func-mem-ref-line = '275';
        func-mem-ref-name = 'SystemExceptionHandlers_S';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'system__Device_8c_1gad13ba247efe59bbe2b6004d9bd0f10db';
        func-mem-ref-line = '1324';
        func-mem-ref-name = '_premain_init';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExcNMI__Handling_1ga8b5b8fb823a0e048e7c74d19c2af5639';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'core_exception_handler_s';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'scause';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'sp';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      func-mem-desc-line = '704';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
common Exception handler entry of supervisor mode
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function provided a supervisor mode common entry for exception. Silicon Vendor could modify
this template implementation according to requirement.
@param [in]  scause    code indicating the reason that caused the trap in supervisor mode
@param [in]  sp        stack pointer
\remarks
- RISCV provided supervisor mode common entry for all types of exception. This is proposed code template
  for exception entry function, Silicon Vendor could modify the implementation.
- For the core_exception_handler_s template, we provided exception register function \ref Exception_Register_EXC_S
  which can help developer to register your exception handler for specific exception number.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1ga10f1bcf88d4be44d559c79485f16dd24';
        func-mem-ref-line = '243';
        func-mem-ref-name = 'MAX_SYSTEM_EXCEPTION_NUM';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga47cb8f2bba4218f518c624bf37b30aec';
        func-mem-ref-line = '179';
        func-mem-ref-name = 'MCAUSE_INTR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga0a8e2a80db77f69b3eb0f20503842f1d';
        func-mem-ref-line = '182';
        func-mem-ref-name = 'SCAUSE_CAUSE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1ga310a6c2ee47117e4717d1fe8abb09034';
        func-mem-ref-line = '280';
        func-mem-ref-name = 'system_core_interrupt_handler_s';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1ga4faf84a59d71ad195d0a114212813f99';
        func-mem-ref-line = '609';
        func-mem-ref-name = 'system_default_exception_handler_s';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1ga01db1fdb5f948dbf4555b0f7375eff11';
        func-mem-ref-line = '275';
        func-mem-ref-name = 'SystemExceptionHandlers_S';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExcNMI__Handling_1ga01c05a182790c768695aebb51b847a07';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'Exception_Register_EXC_S';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'EXCn';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'exc_handler';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      func-mem-desc-line = '741';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Register an exception handler for exception code EXCn of supervisor mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
-For EXCn < \ref MAX_SYSTEM_EXCEPTION_NUM, it will be registered into SystemExceptionHandlers_S[EXCn-1].
-For EXCn == NMI_EXCn, The NMI (Non-maskable-interrupt) cannot be trapped to the supervisor-mode or user-mode for any
   configuration, so NMI won't be registered into SystemExceptionHandlers_S.
@param [in]  EXCn            See \ref EXCn_Type
@param [in]  exc_handler     The exception handler for this exception code EXCn
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1ga10f1bcf88d4be44d559c79485f16dd24';
        func-mem-ref-line = '243';
        func-mem-ref-name = 'MAX_SYSTEM_EXCEPTION_NUM';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1ga01db1fdb5f948dbf4555b0f7375eff11';
        func-mem-ref-line = '275';
        func-mem-ref-name = 'SystemExceptionHandlers_S';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExcNMI__Handling_1gaf555b547bbbd1cb5423aec79837f6d92';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'Exception_Get_EXC_S';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'EXCn';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      func-mem-desc-line = '758';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get current exception handler for exception code EXCn of supervisor mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
- For EXCn < \ref MAX_SYSTEM_EXCEPTION_NUM, it will return SystemExceptionHandlers_S[EXCn-1].
@param [in]  EXCn    See \ref EXCn_Type
\return  Current exception handler for exception code EXCn, if not found, return 0.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1ga10f1bcf88d4be44d559c79485f16dd24';
        func-mem-ref-line = '243';
        func-mem-ref-name = 'MAX_SYSTEM_EXCEPTION_NUM';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1ga01db1fdb5f948dbf4555b0f7375eff11';
        func-mem-ref-line = '275';
        func-mem-ref-name = 'SystemExceptionHandlers_S';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExcNMI__Handling_1ga58ced7771f67a1406954014d6c17fa83';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'Interrupt_Register_CoreIRQ_S';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'irqn';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'int_handler';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      func-mem-desc-line = '780';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Register an s-mode core interrupt handler for core interrupt number.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
* For irqn <=  SYSTEM_CORE_INTNUM, it will be registered into SystemCoreInterruptHandlers[irqn-1], only used in non-eclic mode.
@param irqn    See \ref IRQn
@param int_handler     The core interrupt handler for this interrupt code irqn
\remarks
         You can only use it when you are not in ECLIC interrupt mode.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1ga25c27534bcb8848ca477335ef0a4011b';
        func-mem-ref-line = '258';
        func-mem-ref-name = 'SYSTEM_CORE_INTNUM';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1ga0a584bbf77d7982e7dec7c3dcec2f627';
        func-mem-ref-line = '281';
        func-mem-ref-name = 'SystemCoreInterruptHandlers_S';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'system__Device_8c_1ga7b4e3e9a3ff7b408d7e31939a07ac3d7';
        func-mem-ref-line = '1105';
        func-mem-ref-name = 'Core_Register_IRQ_S';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExcNMI__Handling_1gad194be93050a22528b9aa25f04deff18';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'Interrupt_Get_CoreIRQ_S';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'irqn';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      func-mem-desc-line = '795';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get a s-mode core interrupt handler for core interrupt number.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param irqn    See \ref IRQn
\return
The core interrupt handler for this interrupt code irqn, only used in non-eclic mode.
\remarks
         You can only use it when you are not in ECLIC interrupt mode.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1ga25c27534bcb8848ca477335ef0a4011b';
        func-mem-ref-line = '258';
        func-mem-ref-name = 'SYSTEM_CORE_INTNUM';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1ga0a584bbf77d7982e7dec7c3dcec2f627';
        func-mem-ref-line = '281';
        func-mem-ref-name = 'SystemCoreInterruptHandlers_S';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExcNMI__Handling_1ga9b53b91bc1634f2134a8b9c54b2088a1';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'Interrupt_Register_ExtIRQ_S';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'irqn';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'int_handler';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      func-mem-desc-line = '812';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Register an s-mode external interrupt handler for plic external interrupt number.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
* For irqn <= \ref __PLIC_INTNUM, it will be registered into SystemSExtInterruptHandlers[irqn-1].
@param irqn    See \ref IRQn
@param int_handler     The external interrupt handler for this interrupt code irqn
\remarks
         You can only use it when you are in PLIC interrupt mode.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1ga42392960aff1b758a3b4f8cc9bae9fd4';
        func-mem-ref-line = '283';
        func-mem-ref-name = 'SystemSExtInterruptHandlers';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'system__Device_8c_1gadec79146bddf812bc9c38bebdbf9dd6d';
        func-mem-ref-line = '1174';
        func-mem-ref-name = 'PLIC_Register_IRQ_S';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExcNMI__Handling_1ga98b244e9adeb1ac64a297e9772761087';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'Interrupt_Get_ExtIRQ_S';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'irqn';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      func-mem-desc-line = '831';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get an s-mode external interrupt handler for external interrupt number.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param irqn    See \ref IRQn
\return
The external interrupt handler for this interrupt code irqn
\remarks
         You can only use it when you are in PLIC interrupt mode.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1ga42392960aff1b758a3b4f8cc9bae9fd4';
        func-mem-ref-line = '283';
        func-mem-ref-name = 'SystemSExtInterruptHandlers';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SystemConfig_1ga650b0aff4d3e3c20d326fbc558b6f90f';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SystemBannerPrint';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      func-mem-desc-line = '847';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Banner Print for Nuclei SDK.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga578d4ba2532485995190134b2beb03ff';
        func-mem-ref-line = '1250';
        func-mem-ref-name = '__get_hart_id';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1ga0814e683179ebb031663c192f7e9b579';
        func-mem-ref-line = '184';
        func-mem-ref-name = 'SystemCoreClock';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'system__Device_8c_1gad13ba247efe59bbe2b6004d9bd0f10db';
        func-mem-ref-line = '1324';
        func-mem-ref-name = '_premain_init';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SystemConfig_1ga29f22384ffd27dae64af8672f6304781';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'irq_entry';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      func-mem-desc-line = '862';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-referencedby = {
        func-mem-ref-id = 'system__Device_8c_1ga70fba7831dd570ce491537271b675f15';
        func-mem-ref-line = '879';
        func-mem-ref-name = 'ECLIC_Interrupt_Init';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SystemConfig_1gac8966ec72bfbe215fbdca1a3983df2bf';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'exc_entry';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      func-mem-desc-line = '864';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      func-mem-referencedby = {
        func-mem-ref-id = 'system__Device_8c_1ga4de3e443b9a700e84bb1d1dcf3888ad3';
        func-mem-ref-line = '935';
        func-mem-ref-name = 'CLINT_Interrupt_Init';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'system__Device_8c_1ga70fba7831dd570ce491537271b675f15';
        func-mem-ref-line = '879';
        func-mem-ref-name = 'ECLIC_Interrupt_Init';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'system__Device_8c_1gaeac2103d8a0e1baccd0a23df081650c9';
        func-mem-ref-line = '997';
        func-mem-ref-name = 'Interrupt_Init';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SystemConfig_1ga70fba7831dd570ce491537271b675f15';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'ECLIC_Interrupt_Init';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      func-mem-desc-line = '879';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Do ECLIC Interrupt configuration.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function will initialize cpu interrupt mode to eclic mode. It will
- set common non-vector entry to irq_entry
- set vector interrupt table to vector_base
- set exception entry to exc_entry
- set eclic mth to 0, and nlbits to the bigest bits it supports
- set s-mode common non-vector entry to irq_entry_s if tee present
- set s-mode vector interrupt table to vector_base_s if tee present
- set s-mode exception entry to exc_entry_s if tee present
- set eclic sth to 0 if tee present
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '642';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gafdbd9b5a14b44913675d0fa73ca6716f';
        func-mem-ref-line = '697';
        func-mem-ref-name = '__RV_CSR_SET';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga7fd083b254f2438fe5cbf9d667468324';
        func-mem-ref-line = '1058';
        func-mem-ref-name = 'CSR_MCFG_INFO';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga22f5cd17199a966b4b840dd56d151216';
        func-mem-ref-line = '632';
        func-mem-ref-name = 'CSR_MTVEC';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga5e44edb3f3d95986c92f8efad5db0c2c';
        func-mem-ref-line = '962';
        func-mem-ref-name = 'CSR_MTVT';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga7d9dcb2dd7d7c764aab4b68033b383f2';
        func-mem-ref-line = '996';
        func-mem-ref-name = 'CSR_MTVT2';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gab1718f56f1c135bcd02a707b7172301b';
        func-mem-ref-line = '565';
        func-mem-ref-name = 'CSR_STVEC';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaf38aa3d532244f4e3a83782ef24218f2';
        func-mem-ref-line = '617';
        func-mem-ref-name = 'CSR_STVT';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaa66cb3b9c23d77dc064e8bd7d40be93b';
        func-mem-ref-line = '1052';
        func-mem-ref-name = 'CSR_STVT2';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gad35a05a1e8fb89332d59c7db2904756b';
        func-mem-ref-line = '242';
        func-mem-ref-name = 'ECLIC_SetCfgNlbits';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga59e29ad3023110a58eb9163d976f44c6';
        func-mem-ref-line = '247';
        func-mem-ref-name = 'ECLIC_SetMth';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga999d22f65f99deb9a98a239808046bf6';
        func-mem-ref-line = '269';
        func-mem-ref-name = 'ECLIC_SetSth';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga8e6bfafb27d2142ee0035f76b887acca';
        func-mem-ref-line = '294';
        func-mem-ref-name = 'MCFG_INFO_CLIC';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga8b189b0faab8100190d9c0cb9457ab6b';
        func-mem-ref-line = '292';
        func-mem-ref-name = 'MCFG_INFO_TEE';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'system__Device_8c_1gaeac2103d8a0e1baccd0a23df081650c9';
        func-mem-ref-line = '997';
        func-mem-ref-name = 'Interrupt_Init';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SystemConfig_1ga4de3e443b9a700e84bb1d1dcf3888ad3';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'CLINT_Interrupt_Init';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      func-mem-desc-line = '935';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Do CLINT Interrupt configuration.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function will initialize cpu interrupt mode to clint mode. It will
- Set exception/interrupt entry to exc_entry, now interrupt and exception share the same entry point
- Register interrupt handling routine system_core_interrupt_handler to core_interrupt_handler function,
  which will be called in core_exception_handler function
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1gad91007127865ca21ee8296292deaa562';
        func-mem-ref-line = '381';
        func-mem-ref-name = 'core_interrupt_handler';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1ga442331de13a5e6cf30e221fb8afd9711';
        func-mem-ref-line = '658';
        func-mem-ref-name = 'core_interrupt_handler_s';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga22f5cd17199a966b4b840dd56d151216';
        func-mem-ref-line = '632';
        func-mem-ref-name = 'CSR_MTVEC';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gab1718f56f1c135bcd02a707b7172301b';
        func-mem-ref-line = '565';
        func-mem-ref-name = 'CSR_STVEC';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1ga5cddbde51a3c513c534e6f87e0362297';
        func-mem-ref-line = '265';
        func-mem-ref-name = 'system_core_interrupt_handler';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1ga310a6c2ee47117e4717d1fe8abb09034';
        func-mem-ref-line = '280';
        func-mem-ref-name = 'system_core_interrupt_handler_s';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1ga25c27534bcb8848ca477335ef0a4011b';
        func-mem-ref-line = '258';
        func-mem-ref-name = 'SYSTEM_CORE_INTNUM';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1gaacfb9633cbb3f400d122719f659ece90';
        func-mem-ref-line = '357';
        func-mem-ref-name = 'system_default_interrupt_handler';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1ga10e7566ff2983240b81df158ebb1320d';
        func-mem-ref-line = '634';
        func-mem-ref-name = 'system_default_interrupt_handler_s';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1ga2e19ce23836fd8027da0995ff69d41ca';
        func-mem-ref-line = '262';
        func-mem-ref-name = 'SystemCoreInterruptHandlers';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1ga0a584bbf77d7982e7dec7c3dcec2f627';
        func-mem-ref-line = '281';
        func-mem-ref-name = 'SystemCoreInterruptHandlers_S';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'system__Device_8c_1ga9bf05b8b9ade59d86f9c58eea665ca9c';
        func-mem-ref-line = '963';
        func-mem-ref-name = 'PLIC_Interrupt_Init';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SystemConfig_1ga9bf05b8b9ade59d86f9c58eea665ca9c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'PLIC_Interrupt_Init';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      func-mem-desc-line = '963';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Do PLIC Interrupt configuration.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function will initialize cpu interrupt mode to clint/plic mode. It will
- Initialize a software maintained SystemM/SExtInterruptHandlers and SystemCoreInterruptHandlers to default value
- Set exception/interrupt entry to exc_entry, now interrupt and exception share the same entry point
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1ga4de3e443b9a700e84bb1d1dcf3888ad3';
        func-mem-ref-line = '935';
        func-mem-ref-name = 'CLINT_Interrupt_Init';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1gaacfb9633cbb3f400d122719f659ece90';
        func-mem-ref-line = '357';
        func-mem-ref-name = 'system_default_interrupt_handler';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1ga10e7566ff2983240b81df158ebb1320d';
        func-mem-ref-line = '634';
        func-mem-ref-name = 'system_default_interrupt_handler_s';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1ga98c21b177b9d5e41203eec2e1dfaa7b9';
        func-mem-ref-line = '446';
        func-mem-ref-name = 'system_mmode_extirq_handler';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1ga0db26f15b0169a337f304fd6826c862d';
        func-mem-ref-line = '676';
        func-mem-ref-name = 'system_smode_extirq_handler';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1ga2e19ce23836fd8027da0995ff69d41ca';
        func-mem-ref-line = '262';
        func-mem-ref-name = 'SystemCoreInterruptHandlers';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1ga0a584bbf77d7982e7dec7c3dcec2f627';
        func-mem-ref-line = '281';
        func-mem-ref-name = 'SystemCoreInterruptHandlers_S';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1gad58cbb48427a6c0f09898275423fd879';
        func-mem-ref-line = '255';
        func-mem-ref-name = 'SystemMExtInterruptHandlers';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1ga42392960aff1b758a3b4f8cc9bae9fd4';
        func-mem-ref-line = '283';
        func-mem-ref-name = 'SystemSExtInterruptHandlers';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'system__Device_8c_1gaeac2103d8a0e1baccd0a23df081650c9';
        func-mem-ref-line = '997';
        func-mem-ref-name = 'Interrupt_Init';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SystemConfig_1gaeac2103d8a0e1baccd0a23df081650c9';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'Interrupt_Init';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      func-mem-desc-line = '997';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
initialize interrupt controller
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Do CPU interrupt initialization, if plic present, init it, then init eclic if present.
So if ECLIC present, the interrupt will default configured to ECLIC interrupt mode,
if you want to switch to PLIC interrupt mode, you need to call PLIC_Interrupt_Init in
you application code.

By default, if ECLIC present, eclic interrupt mode will be set, otherwise it will be
clint/plic interrupt mode
\remarks
This function previously was ECLIC_Init, now ECLIC_Init is removed
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '660';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga22f5cd17199a966b4b840dd56d151216';
        func-mem-ref-line = '632';
        func-mem-ref-name = 'CSR_MTVEC';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1ga70fba7831dd570ce491537271b675f15';
        func-mem-ref-line = '879';
        func-mem-ref-name = 'ECLIC_Interrupt_Init';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1ga9bf05b8b9ade59d86f9c58eea665ca9c';
        func-mem-ref-line = '963';
        func-mem-ref-name = 'PLIC_Interrupt_Init';
    };
      func-mem-referencedby = {
        func-mem-ref-id = 'system__Device_8c_1gad13ba247efe59bbe2b6004d9bd0f10db';
        func-mem-ref-line = '1324';
        func-mem-ref-name = '_premain_init';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SystemConfig_1ga52cbc8fa60b210b75ac79baa25ac74bb';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
int32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'ECLIC_Register_IRQ';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
IRQn_Type
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'IRQn';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'shv';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
ECLIC_TRIGGER_Type
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'trig_mode';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'lvl';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'priority';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'handler';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      func-mem-desc-line = '1033';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Initialize a specific IRQ and register the handler.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function set vector mode, trigger mode and polarity, interrupt level and priority,
assign handler for specific IRQn.
@param [in]  IRQn        NMI interrupt handler address
@param [in]  shv         \ref ECLIC_NON_VECTOR_INTERRUPT means non-vector mode, and \ref ECLIC_VECTOR_INTERRUPT is vector mode
@param [in]  trig_mode   see \ref ECLIC_TRIGGER_Type
@param [in]  lvl         interupt level
@param [in]  priority    interrupt priority
@param [in]  handler     interrupt handler, if NULL, handler will not be installed
\return       -1 means invalid input parameter. 0 means successful.
\remarks
- This function use to configure specific eclic interrupt and register its interrupt handler and enable its interrupt.
- If the vector table is placed in read-only section(FLASHXIP mode), handler could not be installed
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gaef478ada8e8906c9fe8d4dc2311a39e1';
        func-mem-ref-line = '249';
        func-mem-ref-name = 'ECLIC_EnableIRQ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gga35f79c25d5118ccfde82872bc5946ecfad5184faf1eeb1cd9f5d79f903b65297c';
        func-mem-ref-line = '159';
        func-mem-ref-name = 'ECLIC_NEGTIVE_EDGE_TRIGGER';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gad6f35a2f69908b97b083c5e31c1c5aad';
        func-mem-ref-line = '261';
        func-mem-ref-name = 'ECLIC_SetLevelIRQ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga721375660a030d16e429a9718c1271c8';
        func-mem-ref-line = '263';
        func-mem-ref-name = 'ECLIC_SetPriorityIRQ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga0bd2875fbd02a00bec78735940704c13';
        func-mem-ref-line = '257';
        func-mem-ref-name = 'ECLIC_SetShvIRQ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gac0681d16f62ce0b08e48e89131995a05';
        func-mem-ref-line = '255';
        func-mem-ref-name = 'ECLIC_SetTrigIRQ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gaa7cacacc369af014a0008fe3b5705b77';
        func-mem-ref-line = '294';
        func-mem-ref-name = 'ECLIC_SetVector';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga915384ab6567d38315e8cf5a566f4840';
        func-mem-ref-line = '153';
        func-mem-ref-name = 'ECLIC_VECTOR_INTERRUPT';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gga7e1129cd8a196f4284d41db3e82ad5c8adddd70a514a83716a447d622adf17c78';
        func-mem-ref-line = '232';
        func-mem-ref-name = 'SOC_INT_MAX';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SystemConfig_1gab7a197a47f395e2bbdf447ac0fbd79df';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
int32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'Core_Register_IRQ';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'irqn';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'handler';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      func-mem-desc-line = '1069';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Register a m-mode riscv core interrupt and register the handler.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function set interrupt handler for core interrupt in non-eclic mode
@param [in]  irqn        interrupt number
@param [in]  handler     interrupt handler, if NULL, handler will not be installed
\return       -1 means invalid input parameter. 0 means successful.
\remarks
- This function use to configure riscv core interrupt and register its interrupt handler and enable its interrupt.
- You can only use it when you are not in eclic interrupt mode
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaad0ea08da14cd5c2a31ddc9144be1fb0';
        func-mem-ref-line = '860';
        func-mem-ref-name = '__enable_sw_irq';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gac83f8b12ddd74b8afab96b8b932ad7c3';
        func-mem-ref-line = '838';
        func-mem-ref-name = '__enable_timer_irq';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1gaa7e698bb2dbc4ac7b46a31e5794316c7';
        func-mem-ref-line = '470';
        func-mem-ref-name = 'Interrupt_Register_CoreIRQ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1ga25c27534bcb8848ca477335ef0a4011b';
        func-mem-ref-line = '258';
        func-mem-ref-name = 'SYSTEM_CORE_INTNUM';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gga7e1129cd8a196f4284d41db3e82ad5c8a1c65f7884cf42cfc70b0016245780dc9';
        func-mem-ref-line = '212';
        func-mem-ref-name = 'SysTimer_IRQn';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gga7e1129cd8a196f4284d41db3e82ad5c8a02546766328e3c4539ca22a21284955a';
        func-mem-ref-line = '208';
        func-mem-ref-name = 'SysTimerSW_IRQn';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SystemConfig_1ga7b4e3e9a3ff7b408d7e31939a07ac3d7';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
int32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'Core_Register_IRQ_S';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'irqn';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'handler';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      func-mem-desc-line = '1105';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Register a riscv s-mode core interrupt and register the handler.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function set interrupt handler for core interrupt in non-eclic mode
@param [in]  irqn        interrupt number
@param [in]  handler     interrupt handler, if NULL, handler will not be installed
\return       -1 means invalid input parameter. 0 means successful.
\remarks
- This function use to configure riscv core interrupt and register its interrupt handler and enable its interrupt.
- You can only use it when you are not in eclic interrupt mode
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaeb9d68b22521e7aeac5466d501e65e64';
        func-mem-ref-line = '992';
        func-mem-ref-name = '__enable_sw_irq_s';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga577c6ced2f4de640257240f21e9fa10c';
        func-mem-ref-line = '970';
        func-mem-ref-name = '__enable_timer_irq_s';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1ga58ced7771f67a1406954014d6c17fa83';
        func-mem-ref-line = '780';
        func-mem-ref-name = 'Interrupt_Register_CoreIRQ_S';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1ga25c27534bcb8848ca477335ef0a4011b';
        func-mem-ref-line = '258';
        func-mem-ref-name = 'SYSTEM_CORE_INTNUM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SystemConfig_1gaa6d9a05c4ea29dce5179b6d4e26bb9a5';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
int32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'PLIC_Register_IRQ';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'source';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'priority';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'handler';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      func-mem-desc-line = '1143';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Register a m-mode specific plic interrupt and register the handler.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function set priority and handler for m-mode plic interrupt
@param [in]  source      interrupt source
@param [in]  priority    interrupt priority
@param [in]  handler     interrupt handler, if NULL, handler will not be installed
\return       -1 means invalid input parameter. 0 means successful.
\remarks
- This function use to configure specific plic interrupt and register its interrupt handler and enable its interrupt.
- You can only use it when you are in plic interrupt mode
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga2b540a739c0e8cec2f2b0349aaa2c8ee';
        func-mem-ref-line = '816';
        func-mem-ref-name = '__enable_ext_irq';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1ga30e7aaf9f024f12fbe5db2eea18cce12';
        func-mem-ref-line = '502';
        func-mem-ref-name = 'Interrupt_Register_ExtIRQ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__plic_8h_1ga13e823cd160a6105fa71fa78f31e520b';
        func-mem-ref-line = '377';
        func-mem-ref-name = 'PLIC_EnableInterrupt';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__plic_8h_1ga6947b9d2e1ef61d54f5a09f8537a4c27';
        func-mem-ref-line = '270';
        func-mem-ref-name = 'PLIC_SetPriority';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SystemConfig_1gadec79146bddf812bc9c38bebdbf9dd6d';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
int32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'PLIC_Register_IRQ_S';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'source';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'priority';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'handler';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      func-mem-desc-line = '1174';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Register a s-mode specific plic interrupt and register the handler.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function set priority and handler for s-mode plic interrupt
@param [in]  source      interrupt source
@param [in]  priority    interrupt priority
@param [in]  handler     interrupt handler, if NULL, handler will not be installed
\return       -1 means invalid input parameter. 0 means successful.
\remarks
- This function use to configure specific plic interrupt and register its interrupt handler and enable its interrupt.
- You can only use it when you are in plic interrupt mode
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga11c7677eb827e32da6d94df6c61c8ae8';
        func-mem-ref-line = '948';
        func-mem-ref-name = '__enable_ext_irq_s';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1ga9b53b91bc1634f2134a8b9c54b2088a1';
        func-mem-ref-line = '812';
        func-mem-ref-name = 'Interrupt_Register_ExtIRQ_S';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__plic_8h_1gaef90631814f83a8aa35e0f0407a15ad9';
        func-mem-ref-line = '378';
        func-mem-ref-name = 'PLIC_EnableInterrupt_S';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__plic_8h_1ga6947b9d2e1ef61d54f5a09f8537a4c27';
        func-mem-ref-line = '270';
        func-mem-ref-name = 'PLIC_SetPriority';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SystemConfig_1ga520a945a0989507aba2d8fcc1470ef56';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
int32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'ECLIC_Register_IRQ_S';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
IRQn_Type
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'IRQn';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'shv';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
ECLIC_TRIGGER_Type
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'trig_mode';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'lvl';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'priority';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'handler';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      func-mem-desc-line = '1211';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Initialize a specific IRQ and register the handler for supervisor mode.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function set vector mode, trigger mode and polarity, interrupt level and priority,
assign handler for specific IRQn.
@param [in]  IRQn        NMI interrupt handler address
@param [in]  shv         \ref ECLIC_NON_VECTOR_INTERRUPT means non-vector mode, and \ref ECLIC_VECTOR_INTERRUPT is vector mode
@param [in]  trig_mode   see \ref ECLIC_TRIGGER_Type
@param [in]  lvl         interupt level
@param [in]  priority    interrupt priority
@param [in]  handler     interrupt handler, if NULL, handler will not be installed
\return       -1 means invalid input parameter. 0 means successful.
\remarks
- This function use to configure specific eclic S-mode interrupt and register its interrupt handler and enable its interrupt.
- If the vector table is placed in read-only section (FLASHXIP mode), handler could not be installed.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gae3748a626384ad0458f91de251108d9f';
        func-mem-ref-line = '281';
        func-mem-ref-name = 'ECLIC_EnableIRQ_S';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gga35f79c25d5118ccfde82872bc5946ecfad5184faf1eeb1cd9f5d79f903b65297c';
        func-mem-ref-line = '159';
        func-mem-ref-name = 'ECLIC_NEGTIVE_EDGE_TRIGGER';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gafc63cc5748a7a6c69348496a11715560';
        func-mem-ref-line = '277';
        func-mem-ref-name = 'ECLIC_SetLevelIRQ_S';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga152838b35c063ea7c5334531be34a62a';
        func-mem-ref-line = '279';
        func-mem-ref-name = 'ECLIC_SetPriorityIRQ_S';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gab09f39dabde0e2823234ae145cf4264f';
        func-mem-ref-line = '273';
        func-mem-ref-name = 'ECLIC_SetShvIRQ_S';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga24e9eed74f15faf8520cbc92dd40fa25';
        func-mem-ref-line = '271';
        func-mem-ref-name = 'ECLIC_SetTrigIRQ_S';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gada7015572c59ff6192fa36c53c253a97';
        func-mem-ref-line = '298';
        func-mem-ref-name = 'ECLIC_SetVector_S';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga915384ab6567d38315e8cf5a566f4840';
        func-mem-ref-line = '153';
        func-mem-ref-name = 'ECLIC_VECTOR_INTERRUPT';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gga7e1129cd8a196f4284d41db3e82ad5c8adddd70a514a83716a447d622adf17c78';
        func-mem-ref-line = '232';
        func-mem-ref-name = 'SOC_INT_MAX';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SystemConfig_1ga808fd81293dc09e656377635e8b8cd08';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__sync_harts';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      func-mem-desc-line = '1247';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Synchronize all harts.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function is used to synchronize all the harts,
especially to wait the boot hart finish initialization of
data section, bss section and c runtines initialization
This function must be placed in .text.init section, since
section initialization is not ready, global variable
and static variable should be avoid to use in this function,
and avoid to call other functions
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SystemConfig_1gae464e755c44ec870768275d44f77dc54';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
static void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'Trap_Init';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      func-mem-desc-line = '1312';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
do the init for trap
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SystemConfig_1gad13ba247efe59bbe2b6004d9bd0f10db';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '_premain_init';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      func-mem-desc-line = '1324';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
early init function before main
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function is executed right before main function.
For RISC-V gnu toolchain, _init function might not be called
by __libc_init_array function, so we defined a new function
to do initialization.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga5b4c34e720fb0c9e939540333dd640e6';
        func-mem-ref-line = '2040';
        func-mem-ref-name = '__FENCE_I';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga578d4ba2532485995190134b2beb03ff';
        func-mem-ref-line = '1250';
        func-mem-ref-name = '__get_hart_id';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga14cf0513f6b576fcd1ff700b08f65543';
        func-mem-ref-line = '734';
        func-mem-ref-name = '__RV_CSR_CLEAR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '642';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gafdbd9b5a14b44913675d0fa73ca6716f';
        func-mem-ref-line = '697';
        func-mem-ref-name = '__RV_CSR_SET';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga683c246c3fdba09511675365a2fa8bd3';
        func-mem-ref-line = '2046';
        func-mem-ref-name = '__RWMB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga4e8baf26c3f68696f2b2ad0510eafdb5';
        func-mem-ref-line = '2055';
        func-mem-ref-name = '__SMP_RWMB';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1ga848c9baf0a0e46da60d0874fa9f0796e';
        func-mem-ref-line = '1241';
        func-mem-ref-name = 'CpuIRegionBase';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga6e79ed96b3346ea75923126b7c4d9d67';
        func-mem-ref-line = '980';
        func-mem-ref-name = 'CSR_MCACHE_CTL';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga7fd083b254f2438fe5cbf9d667468324';
        func-mem-ref-line = '1058';
        func-mem-ref-name = 'CSR_MCFG_INFO';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga4958637ace7ceaea76e4fa4467fd6cd6';
        func-mem-ref-line = '975';
        func-mem-ref-name = 'CSR_MDLM_CTL';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga76a5574122af1a8da6e2bd68c39da922';
        func-mem-ref-line = '974';
        func-mem-ref-name = 'CSR_MILM_CTL';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaa4527441fd9a67ca24bc8357ea3c165d';
        func-mem-ref-line = '1046';
        func-mem-ref-name = 'CSR_MIRGB_INFO';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gabec3fb75f542861f5dcd5a1cda1df932';
        func-mem-ref-line = '981';
        func-mem-ref-name = 'CSR_MMISC_CTL';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga8433f280786b22c34c284fcefedd3873';
        func-mem-ref-line = '742';
        func-mem-ref-name = 'DCachePresent';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gaf90783ed69b3589cde6fe7dbabeb17c0';
        func-mem-ref-line = '760';
        func-mem-ref-name = 'EnableDCache';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga76dfd7aff65a6a7fa91b53dbe44f9ce5';
        func-mem-ref-line = '196';
        func-mem-ref-name = 'EnableICache';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1gae688fd9a26b86cd4bd8b78242b3f2e43';
        func-mem-ref-line = '123';
        func-mem-ref-name = 'EnableSUCCM';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1gab6afbaed495af51eeeb4eb7d1c5da420';
        func-mem-ref-line = '582';
        func-mem-ref-name = 'Exception_Init';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__cache_8h_1ga33f538692ce5743e5c23004d03cba712';
        func-mem-ref-line = '178';
        func-mem-ref-name = 'ICachePresent';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1gaeac2103d8a0e1baccd0a23df081650c9';
        func-mem-ref-line = '997';
        func-mem-ref-name = 'Interrupt_Init';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga04485a1a38f8fe5e86a0db810da4a88d';
        func-mem-ref-line = '287';
        func-mem-ref-name = 'MCACHE_CTL_DC_ECC_CHK_EN';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga24f8fec1fe980ff09a748634ded5f3ec';
        func-mem-ref-line = '281';
        func-mem-ref-name = 'MCACHE_CTL_DC_ECC_EN';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaa812767233bc30aa4f5e215a00e10a1a';
        func-mem-ref-line = '282';
        func-mem-ref-name = 'MCACHE_CTL_DC_ECC_EXCP_EN';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga7b4e994c56ce6affb4c795feee2d0543';
        func-mem-ref-line = '279';
        func-mem-ref-name = 'MCACHE_CTL_IC_ECC_CHK_EN';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gac212acd84f08a26197bc439bc58d5e58';
        func-mem-ref-line = '271';
        func-mem-ref-name = 'MCACHE_CTL_IC_ECC_EN';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga791603ffdcc47fbb787ac4c6ecd55f30';
        func-mem-ref-line = '272';
        func-mem-ref-name = 'MCACHE_CTL_IC_ECC_EXCP_EN';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga60e344b3401de3421dde506783b0f5e8';
        func-mem-ref-line = '300';
        func-mem-ref-name = 'MCFG_INFO_DLM';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gabcbe04e4da52ab5fbbbbb10c6629cf32';
        func-mem-ref-line = '299';
        func-mem-ref-name = 'MCFG_INFO_ILM';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga04c47cb7e8dd28baa9489f1af9cdd8ea';
        func-mem-ref-line = '248';
        func-mem-ref-name = 'MDLM_CTL_DLM_ECC_CHK_EN';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaef060f008524963c4e5556b378ab77f4';
        func-mem-ref-line = '252';
        func-mem-ref-name = 'MDLM_CTL_DLM_ECC_EN';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gade0e18fa462c3271b27acb36eae59d80';
        func-mem-ref-line = '251';
        func-mem-ref-name = 'MDLM_CTL_DLM_ECC_EXCP_EN';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga6cb4731642366eac4dfbba732abdf45c';
        func-mem-ref-line = '253';
        func-mem-ref-name = 'MDLM_CTL_DLM_EN';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga41dac82da614aab446c52c6e86cbc822';
        func-mem-ref-line = '240';
        func-mem-ref-name = 'MILM_CTL_ILM_ECC_CHK_EN';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga00f2ec5471765545572aef07793a676c';
        func-mem-ref-line = '244';
        func-mem-ref-name = 'MILM_CTL_ILM_ECC_EN';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga27d7dbd69da032a1abe3471fbb0345c3';
        func-mem-ref-line = '243';
        func-mem-ref-name = 'MILM_CTL_ILM_ECC_EXCP_EN';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga5c75afd05ea4349e7dc851589a2b4c60';
        func-mem-ref-line = '245';
        func-mem-ref-name = 'MILM_CTL_ILM_EN';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gac62547380ae39bae590e77751554f8cd';
        func-mem-ref-line = '267';
        func-mem-ref-name = 'MMISC_CTL_BPU';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga46c28cbcf77e7038da65179d0c47ccf6';
        func-mem-ref-line = '260';
        func-mem-ref-name = 'MMISC_CTL_LDSPEC_ENABLE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1gaa26abf3a071baa0fc828f476a2e5b208';
        func-mem-ref-line = '1245';
        func-mem-ref-name = 'SMP_CTRLREG';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1ga650b0aff4d3e3c20d326fbc558b6f90f';
        func-mem-ref-line = '847';
        func-mem-ref-name = 'SystemBannerPrint';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'system__Device_8c_1ga0814e683179ebb031663c192f7e9b579';
        func-mem-ref-line = '184';
        func-mem-ref-name = 'SystemCoreClock';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SystemConfig_1ga6eb76a75cf67b543443efc82ecf33713';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '_postmain_fini';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'status';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      func-mem-desc-line = '1518';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
finish function after main
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param [in]  status     status code return from main
\ilinebr\ilinebr 
This function is executed right after main function.
For RISC-V gnu toolchain, _fini function might not be called
by __libc_fini_array function, so we defined a new function
to do initialization
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SystemConfig_1gad1cbc4315ef293463e6057dfb24c8115';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '_init';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      func-mem-desc-line = '1540';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
_init function called in __libc_init_array()
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This <tt>__libc_init_array()</tt> function is called during startup code,
user need to implement this function, otherwise when link it will
error init.c:(.text.__libc_init_array+0x26): undefined reference to &lsquo;_init&rsquo;
\note
Please use \ref _premain_init function now
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SystemConfig_1ga173a20f19acf36985bbac6786a02b544';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '_fini';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      func-mem-desc-line = '1554';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
_fini function called in __libc_fini_array()
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This <tt>__libc_fini_array()</tt> function is called when exit main.
user need to implement this function, otherwise when link it will
error fini.c:(.text.__libc_fini_array+0x28): undefined reference to &lsquo;_fini&rsquo;
\note
Please use \ref _postmain_fini function now
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    };
    var = {
    var-member = {
      var-mem-kind = 'variable';
      var-mem-id   = 'group__NMSIS__Core__SystemConfig_1ga0814e683179ebb031663c192f7e9b579';
      var-mem-virt = normal;
      var-mem-prot = public;
      var-mem-type = <<_EnD_oF_dEf_TeXt_
volatile uint32_t
_EnD_oF_dEf_TeXt_;
      var-mem-name = 'SystemCoreClock';
      var-mem-initializer = <<_EnD_oF_dEf_TeXt_
= SYSTEM_CLOCK
_EnD_oF_dEf_TeXt_;
      var-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      var-mem-desc-line = '184';
      var-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Variable to hold the system core clock value.
_EnD_oF_dEf_TeXt_;
      var-mem-documentation = <<_EnD_oF_dEf_TeXt_
Holds the system core clock, which is the system clock frequency supplied to the SysTick
timer and the processor core clock. This variable can be used by debuggers to query the
frequency of the debug timer or to configure the trace clock speed.

\attention
Compilers must be configured to avoid removing this variable in case the application
program is not using it. Debugging systems require the variable to be physically
present in memory so that it can be examined to configure the debugger.
_EnD_oF_dEf_TeXt_;
      var-mem-referencedby = {
        var-mem-ref-id = 'system__Device_8c_1gad13ba247efe59bbe2b6004d9bd0f10db';
        var-mem-ref-line = '1324';
        var-mem-ref-name = '_premain_init';
    };
      var-mem-referencedby = {
        var-mem-ref-id = 'system__Device_8c_1ga650b0aff4d3e3c20d326fbc558b6f90f';
        var-mem-ref-line = '847';
        var-mem-ref-name = 'SystemBannerPrint';
    };
    }; /* var-member */
    var-member = {
      var-mem-kind = 'variable';
      var-mem-id   = 'group__NMSIS__Core__IntExcNMI__Handling_1gaedd77e0eba0ea9872a4375893480b420';
      var-mem-virt = normal;
      var-mem-prot = public;
      var-mem-type = <<_EnD_oF_dEf_TeXt_
static unsigned long
_EnD_oF_dEf_TeXt_;
      var-mem-name = 'SystemExceptionHandlers';
      var-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      var-mem-desc-line = '252';
      var-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Store the exception handlers for each exception ID.
_EnD_oF_dEf_TeXt_;
      var-mem-documentation = <<_EnD_oF_dEf_TeXt_
\note
- This SystemExceptionHandlers are used to store all the handlers for all
the exception codes Nuclei N/NX core provided.
- Exception code 0 - 19, totally 20 exceptions are mapped to SystemExceptionHandlers[0:19]
- Exception for NMI is also re-routed to exception handling(exception code 0xFFF) in startup code configuration, the handler itself is mapped to SystemExceptionHandlers[MAX_SYSTEM_EXCEPTION_NUM]
_EnD_oF_dEf_TeXt_;
      var-mem-referencedby = {
        var-mem-ref-id = 'system__Device_8c_1gac7f5b810aee623f65822bac1efe2006d';
        var-mem-ref-line = '406';
        var-mem-ref-name = 'core_exception_handler';
    };
      var-mem-referencedby = {
        var-mem-ref-id = 'system__Device_8c_1ga84df4676c5284f0ea383eeba33e9aa40';
        var-mem-ref-line = '559';
        var-mem-ref-name = 'Exception_Get_EXC';
    };
      var-mem-referencedby = {
        var-mem-ref-id = 'system__Device_8c_1gab6afbaed495af51eeeb4eb7d1c5da420';
        var-mem-ref-line = '582';
        var-mem-ref-name = 'Exception_Init';
    };
      var-mem-referencedby = {
        var-mem-ref-id = 'system__Device_8c_1ga9df7d45dd6f418ba31b6cec6c4958490';
        var-mem-ref-line = '538';
        var-mem-ref-name = 'Exception_Register_EXC';
    };
    }; /* var-member */
    var-member = {
      var-mem-kind = 'variable';
      var-mem-id   = 'group__NMSIS__Core__IntExcNMI__Handling_1gad58cbb48427a6c0f09898275423fd879';
      var-mem-virt = normal;
      var-mem-prot = public;
      var-mem-type = <<_EnD_oF_dEf_TeXt_
static unsigned long
_EnD_oF_dEf_TeXt_;
      var-mem-name = 'SystemMExtInterruptHandlers';
      var-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      var-mem-desc-line = '255';
      var-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      var-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      var-mem-referencedby = {
        var-mem-ref-id = 'system__Device_8c_1gaec7d7c9ef87f1ce1beeef29f225c7662';
        var-mem-ref-line = '519';
        var-mem-ref-name = 'Interrupt_Get_ExtIRQ';
    };
      var-mem-referencedby = {
        var-mem-ref-id = 'system__Device_8c_1ga30e7aaf9f024f12fbe5db2eea18cce12';
        var-mem-ref-line = '502';
        var-mem-ref-name = 'Interrupt_Register_ExtIRQ';
    };
      var-mem-referencedby = {
        var-mem-ref-id = 'system__Device_8c_1ga9bf05b8b9ade59d86f9c58eea665ca9c';
        var-mem-ref-line = '963';
        var-mem-ref-name = 'PLIC_Interrupt_Init';
    };
      var-mem-referencedby = {
        var-mem-ref-id = 'system__Device_8c_1ga98c21b177b9d5e41203eec2e1dfaa7b9';
        var-mem-ref-line = '446';
        var-mem-ref-name = 'system_mmode_extirq_handler';
    };
    }; /* var-member */
    var-member = {
      var-mem-kind = 'variable';
      var-mem-id   = 'group__NMSIS__Core__IntExcNMI__Handling_1ga2e19ce23836fd8027da0995ff69d41ca';
      var-mem-virt = normal;
      var-mem-prot = public;
      var-mem-type = <<_EnD_oF_dEf_TeXt_
static unsigned long
_EnD_oF_dEf_TeXt_;
      var-mem-name = 'SystemCoreInterruptHandlers';
      var-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      var-mem-desc-line = '262';
      var-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      var-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      var-mem-referencedby = {
        var-mem-ref-id = 'system__Device_8c_1ga4de3e443b9a700e84bb1d1dcf3888ad3';
        var-mem-ref-line = '935';
        var-mem-ref-name = 'CLINT_Interrupt_Init';
    };
      var-mem-referencedby = {
        var-mem-ref-id = 'system__Device_8c_1gad91007127865ca21ee8296292deaa562';
        var-mem-ref-line = '381';
        var-mem-ref-name = 'core_interrupt_handler';
    };
      var-mem-referencedby = {
        var-mem-ref-id = 'system__Device_8c_1ga8b3834f33a6fd6108d5b75de41deefbe';
        var-mem-ref-line = '485';
        var-mem-ref-name = 'Interrupt_Get_CoreIRQ';
    };
      var-mem-referencedby = {
        var-mem-ref-id = 'system__Device_8c_1gaa7e698bb2dbc4ac7b46a31e5794316c7';
        var-mem-ref-line = '470';
        var-mem-ref-name = 'Interrupt_Register_CoreIRQ';
    };
      var-mem-referencedby = {
        var-mem-ref-id = 'system__Device_8c_1ga9bf05b8b9ade59d86f9c58eea665ca9c';
        var-mem-ref-line = '963';
        var-mem-ref-name = 'PLIC_Interrupt_Init';
    };
    }; /* var-member */
    var-member = {
      var-mem-kind = 'variable';
      var-mem-id   = 'group__NMSIS__Core__IntExcNMI__Handling_1ga5cddbde51a3c513c534e6f87e0362297';
      var-mem-virt = normal;
      var-mem-prot = public;
      var-mem-type = <<_EnD_oF_dEf_TeXt_
static INT_HANDLER
_EnD_oF_dEf_TeXt_;
      var-mem-name = 'system_core_interrupt_handler';
      var-mem-initializer = <<_EnD_oF_dEf_TeXt_
= NULL
_EnD_oF_dEf_TeXt_;
      var-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      var-mem-desc-line = '265';
      var-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      var-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      var-mem-referencedby = {
        var-mem-ref-id = 'system__Device_8c_1ga4de3e443b9a700e84bb1d1dcf3888ad3';
        var-mem-ref-line = '935';
        var-mem-ref-name = 'CLINT_Interrupt_Init';
    };
      var-mem-referencedby = {
        var-mem-ref-id = 'system__Device_8c_1gac7f5b810aee623f65822bac1efe2006d';
        var-mem-ref-line = '406';
        var-mem-ref-name = 'core_exception_handler';
    };
    }; /* var-member */
    var-member = {
      var-mem-kind = 'variable';
      var-mem-id   = 'group__NMSIS__Core__IntExcNMI__Handling_1ga01db1fdb5f948dbf4555b0f7375eff11';
      var-mem-virt = normal;
      var-mem-prot = public;
      var-mem-type = <<_EnD_oF_dEf_TeXt_
static unsigned long
_EnD_oF_dEf_TeXt_;
      var-mem-name = 'SystemExceptionHandlers_S';
      var-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      var-mem-desc-line = '275';
      var-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Store the exception handlers for each exception ID in supervisor mode.
_EnD_oF_dEf_TeXt_;
      var-mem-documentation = <<_EnD_oF_dEf_TeXt_
\note
- This SystemExceptionHandlers_S are used to store all the handlers for all
the exception codes Nuclei N/NX core provided.
- Exception code 0 - 19, totally 20 exceptions are mapped to SystemExceptionHandlers_S[0:19]
_EnD_oF_dEf_TeXt_;
      var-mem-referencedby = {
        var-mem-ref-id = 'system__Device_8c_1ga8b5b8fb823a0e048e7c74d19c2af5639';
        var-mem-ref-line = '704';
        var-mem-ref-name = 'core_exception_handler_s';
    };
      var-mem-referencedby = {
        var-mem-ref-id = 'system__Device_8c_1gaf555b547bbbd1cb5423aec79837f6d92';
        var-mem-ref-line = '758';
        var-mem-ref-name = 'Exception_Get_EXC_S';
    };
      var-mem-referencedby = {
        var-mem-ref-id = 'system__Device_8c_1gab6afbaed495af51eeeb4eb7d1c5da420';
        var-mem-ref-line = '582';
        var-mem-ref-name = 'Exception_Init';
    };
      var-mem-referencedby = {
        var-mem-ref-id = 'system__Device_8c_1ga01c05a182790c768695aebb51b847a07';
        var-mem-ref-line = '741';
        var-mem-ref-name = 'Exception_Register_EXC_S';
    };
    }; /* var-member */
    var-member = {
      var-mem-kind = 'variable';
      var-mem-id   = 'group__NMSIS__Core__IntExcNMI__Handling_1ga310a6c2ee47117e4717d1fe8abb09034';
      var-mem-virt = normal;
      var-mem-prot = public;
      var-mem-type = <<_EnD_oF_dEf_TeXt_
static INT_HANDLER
_EnD_oF_dEf_TeXt_;
      var-mem-name = 'system_core_interrupt_handler_s';
      var-mem-initializer = <<_EnD_oF_dEf_TeXt_
= NULL
_EnD_oF_dEf_TeXt_;
      var-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      var-mem-desc-line = '280';
      var-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      var-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      var-mem-referencedby = {
        var-mem-ref-id = 'system__Device_8c_1ga4de3e443b9a700e84bb1d1dcf3888ad3';
        var-mem-ref-line = '935';
        var-mem-ref-name = 'CLINT_Interrupt_Init';
    };
      var-mem-referencedby = {
        var-mem-ref-id = 'system__Device_8c_1ga8b5b8fb823a0e048e7c74d19c2af5639';
        var-mem-ref-line = '704';
        var-mem-ref-name = 'core_exception_handler_s';
    };
    }; /* var-member */
    var-member = {
      var-mem-kind = 'variable';
      var-mem-id   = 'group__NMSIS__Core__IntExcNMI__Handling_1ga0a584bbf77d7982e7dec7c3dcec2f627';
      var-mem-virt = normal;
      var-mem-prot = public;
      var-mem-type = <<_EnD_oF_dEf_TeXt_
static unsigned long
_EnD_oF_dEf_TeXt_;
      var-mem-name = 'SystemCoreInterruptHandlers_S';
      var-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      var-mem-desc-line = '281';
      var-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      var-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      var-mem-referencedby = {
        var-mem-ref-id = 'system__Device_8c_1ga4de3e443b9a700e84bb1d1dcf3888ad3';
        var-mem-ref-line = '935';
        var-mem-ref-name = 'CLINT_Interrupt_Init';
    };
      var-mem-referencedby = {
        var-mem-ref-id = 'system__Device_8c_1ga442331de13a5e6cf30e221fb8afd9711';
        var-mem-ref-line = '658';
        var-mem-ref-name = 'core_interrupt_handler_s';
    };
      var-mem-referencedby = {
        var-mem-ref-id = 'system__Device_8c_1gad194be93050a22528b9aa25f04deff18';
        var-mem-ref-line = '795';
        var-mem-ref-name = 'Interrupt_Get_CoreIRQ_S';
    };
      var-mem-referencedby = {
        var-mem-ref-id = 'system__Device_8c_1ga58ced7771f67a1406954014d6c17fa83';
        var-mem-ref-line = '780';
        var-mem-ref-name = 'Interrupt_Register_CoreIRQ_S';
    };
      var-mem-referencedby = {
        var-mem-ref-id = 'system__Device_8c_1ga9bf05b8b9ade59d86f9c58eea665ca9c';
        var-mem-ref-line = '963';
        var-mem-ref-name = 'PLIC_Interrupt_Init';
    };
    }; /* var-member */
    var-member = {
      var-mem-kind = 'variable';
      var-mem-id   = 'group__NMSIS__Core__IntExcNMI__Handling_1ga42392960aff1b758a3b4f8cc9bae9fd4';
      var-mem-virt = normal;
      var-mem-prot = public;
      var-mem-type = <<_EnD_oF_dEf_TeXt_
static unsigned long
_EnD_oF_dEf_TeXt_;
      var-mem-name = 'SystemSExtInterruptHandlers';
      var-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      var-mem-desc-line = '283';
      var-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      var-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      var-mem-referencedby = {
        var-mem-ref-id = 'system__Device_8c_1ga98b244e9adeb1ac64a297e9772761087';
        var-mem-ref-line = '831';
        var-mem-ref-name = 'Interrupt_Get_ExtIRQ_S';
    };
      var-mem-referencedby = {
        var-mem-ref-id = 'system__Device_8c_1ga9b53b91bc1634f2134a8b9c54b2088a1';
        var-mem-ref-line = '812';
        var-mem-ref-name = 'Interrupt_Register_ExtIRQ_S';
    };
      var-mem-referencedby = {
        var-mem-ref-id = 'system__Device_8c_1ga9bf05b8b9ade59d86f9c58eea665ca9c';
        var-mem-ref-line = '963';
        var-mem-ref-name = 'PLIC_Interrupt_Init';
    };
      var-mem-referencedby = {
        var-mem-ref-id = 'system__Device_8c_1ga0db26f15b0169a337f304fd6826c862d';
        var-mem-ref-line = '676';
        var-mem-ref-name = 'system_smode_extirq_handler';
    };
    }; /* var-member */
    var-member = {
      var-mem-kind = 'variable';
      var-mem-id   = 'group__NMSIS__Core__SystemConfig_1ga15c4e6e47d949b4b3930b8b5adad2e89';
      var-mem-virt = normal;
      var-mem-prot = public;
      var-mem-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
      var-mem-name = 'vector_base';
      var-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      var-mem-desc-line = '861';
      var-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      var-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      var-mem-referencedby = {
        var-mem-ref-id = 'system__Device_8c_1ga70fba7831dd570ce491537271b675f15';
        var-mem-ref-line = '879';
        var-mem-ref-name = 'ECLIC_Interrupt_Init';
    };
    }; /* var-member */
    var-member = {
      var-mem-kind = 'variable';
      var-mem-id   = 'group__NMSIS__Core__SystemConfig_1ga848c9baf0a0e46da60d0874fa9f0796e';
      var-mem-virt = normal;
      var-mem-prot = public;
      var-mem-type = <<_EnD_oF_dEf_TeXt_
volatile unsigned long
_EnD_oF_dEf_TeXt_;
      var-mem-name = 'CpuIRegionBase';
      var-mem-initializer = <<_EnD_oF_dEf_TeXt_
= 0xFFFFFFFF
_EnD_oF_dEf_TeXt_;
      var-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      var-mem-desc-line = '1241';
      var-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Nuclei RISC-V CPU IRegion Base Address Probed, you should avoid to use it in your application code, please use __IREGION_BASEADDR if you want.
_EnD_oF_dEf_TeXt_;
      var-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      var-mem-referencedby = {
        var-mem-ref-id = 'system__Device_8c_1gad13ba247efe59bbe2b6004d9bd0f10db';
        var-mem-ref-line = '1324';
        var-mem-ref-name = '_premain_init';
    };
    }; /* var-member */
    };
  file-full-name  = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
