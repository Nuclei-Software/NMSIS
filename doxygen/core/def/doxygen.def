AutoGen Definitions dummy;
struct = {
  cp-id     = 'structCLIC__CTRL__Type';
  cp-name   = 'CLIC_CTRL_Type';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structCLIC__CTRL__Type_1a2ab3b945b0ce453aa15d4a351d25bb53';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
__IOM uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'INTIP';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      sec-mem-desc-line = '81';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Offset: 0x000 (R/W)  Interrupt set pending register.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structCLIC__CTRL__Type_1a310d842768a67e1bc5c65d5fd16bc557';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
__IOM uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'INTIE';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      sec-mem-desc-line = '82';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Offset: 0x001 (R/W)  Interrupt set enable register.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structCLIC__CTRL__Type_1a7613a5dd2e5cc4a52a58cc38eeb6cb8f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
__IOM uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'INTATTR';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      sec-mem-desc-line = '83';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Offset: 0x002 (R/W)  Interrupt set attributes register.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structCLIC__CTRL__Type_1a934752e513e2fae6ab47d361331058cc';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
__IOM uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'INTCTRL';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      sec-mem-desc-line = '84';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Offset: 0x003 (R/W)  Interrupt configure register.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
  cp-fileline  = '80';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Access to the structure of a vector interrupt controller.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
struct = {
  cp-id     = 'structCLIC__Type';
  cp-name   = 'CLIC_Type';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structCLIC__Type_1a9fd72fa34c705b1555a830e3563d29c4';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
__IOM uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'CFG';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      sec-mem-desc-line = '88';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Offset: 0x000 (R/W)  CLIC configuration register.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structCLIC__Type_1a9325067f5bd573505c648f30af8f4610';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RESERVED0';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      sec-mem-desc-line = '89';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structCLIC__Type_1a72d9ef18be12cf79121c196e454bc4e7';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
__IM uint32_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'INFO';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      sec-mem-desc-line = '90';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Offset: 0x004 (R/ )  CLIC information register.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structCLIC__Type_1ad8de7f2c8f28c0bd9935739a1f4dea8d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RESERVED1';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      sec-mem-desc-line = '91';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structCLIC__Type_1afb6fd4c418a7d2394ee740231685698c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
__IOM uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'MTH';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      sec-mem-desc-line = '92';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Offset: 0x00B (R/W)  CLIC machine mode threshold register.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structCLIC__Type_1a70fbd70805cfd06ecaecd11edffe2229';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RESERVED2';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      sec-mem-desc-line = '93';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structCLIC__Type_1adc9d9a3708d1b18a12fc02eac2c75104';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
CLIC_CTRL_Type
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'CTRL';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      sec-mem-desc-line = '94';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Offset: 0x1000 (R/W) CLIC register structure for INTIP, INTIE, INTATTR, INTCTL.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
  cp-fileline  = '87';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-collaborationgraph = <<_EnD_oF_dEf_TeXt_
      node = {
        node-id    = 52;
        node-label = 'CLIC_Type';
        node-link = {
          node-link-id = 'structCLIC__Type';
        };
        node-child = {
          child-id = '53';
          relation = usage;
          edgelabel = <<_EnD_oF_dEf_TeXt_
CTRL
_EnD_oF_dEf_TeXt_;
        }; /* node-child */
      }; /* node */
      node = {
        node-id    = 53;
        node-label = 'CLIC_CTRL_Type';
        node-link = {
          node-link-id = 'structCLIC__CTRL__Type';
        };
      }; /* node */

_EnD_oF_dEf_TeXt_;
}; /* struct */
union = {
  cp-id     = 'unionCLICCFG__Type';
  cp-name   = 'CLICCFG_Type';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCLICCFG__Type_1a468085eceb1103be6a356f4201fb7c30';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved0';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      sec-mem-desc-line = '56';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     0   Overflow condition code flag
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCLICCFG__Type_1ace553cff35563c1f44a257c6a1187b0c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'nlbits';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      sec-mem-desc-line = '57';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     29  Carry condition code flag
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCLICCFG__Type_1ab1e5af2ea073a59770d6475ecddafc95';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved1';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      sec-mem-desc-line = '58';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     30  Zero condition code flag
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCLICCFG__Type_1af6f5ecf3e79b5bf8acfb452865ad4149';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved2';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      sec-mem-desc-line = '59';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     31  Negative condition code flag
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCLICCFG__Type_1afaee41d71b13d8eaaca91b86e72e9afe';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct CLICCFG_Type::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'b';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      sec-mem-desc-line = '60';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Structure used for bit  access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCLICCFG__Type_1ac27ac739e0794f9a8cdaf303adea6bc0';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'w';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      sec-mem-desc-line = '61';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Type      used for byte access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
  cp-fileline  = '54';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Union type to access CLICFG configure register.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* union */
union = {
  cp-id     = 'unionCLICINFO__Type';
  cp-name   = 'CLICINFO_Type';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCLICINFO__Type_1a274efce01348f869204b2a7dfc747a35';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'numint';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      sec-mem-desc-line = '69';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:  0..12   number of maximum interrupt inputs supported
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCLICINFO__Type_1a53f2d7abe7ade2b398085dba46d5a416';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'version';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      sec-mem-desc-line = '70';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:  13..20  20:17 for architecture version,16:13 for implementation version
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCLICINFO__Type_1a3e99199b48c2878b8cdda4fe380ce575';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'intctlbits';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      sec-mem-desc-line = '71';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:  21..24  specifies how many hardware bits are actually implemented in the clicintctl registers
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCLICINFO__Type_1a8296c5a1a6dda84860646a3a7bb2d070';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved0';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      sec-mem-desc-line = '72';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:  25..31  Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCLICINFO__Type_1aca3c830b86b27aa9055f46d0094f707d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct CLICINFO_Type::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'b';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      sec-mem-desc-line = '73';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Structure used for bit  access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCLICINFO__Type_1a03d1aab2ccfe2c5e61d1627c033a3e0a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'w';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      sec-mem-desc-line = '74';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Type      used for word access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
  cp-fileline  = '67';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Union type to access CLICINFO information register.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* union */
union = {
  cp-id     = 'unionCSR__MCACHECTL__Type';
  cp-name   = 'CSR_MCACHECTL_Type';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCACHECTL__Type_1a7398a02e986db63fe68ffdc03ad87cc6';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ic_en';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '254';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
I-Cache enable.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCACHECTL__Type_1a1b0609a9cc0d369b71cb1b444905d8b8';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ic_scpd_mod';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '255';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Scratchpad mode, 0: Scratchpad as ICache Data RAM, 1: Scratchpad as ILM SRAM.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCACHECTL__Type_1a86e99f8eeffa4d51b4947d0f2f458397';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ic_ecc_en';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '256';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
I-Cache ECC enable.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCACHECTL__Type_1ac62d18e3aea0b24660201b2e029cdb6c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ic_ecc_excp_en';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '257';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
I-Cache 2bit ECC error exception enable.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCACHECTL__Type_1a356268c2e14a2b979923b4e247cc4f7e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ic_rwtecc';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '258';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Control I-Cache Tag Ram ECC code injection.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCACHECTL__Type_1a4a87581325e9c55c525ad1c7a179c2a4';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ic_rwdecc';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '259';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Control I-Cache Data Ram ECC code injection.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCACHECTL__Type_1a4f186396041a45e5192b2884946694c3';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved0';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '260';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCACHECTL__Type_1acb7d5418b6e9562883657c691d998989';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'dc_en';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '261';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DCache enable.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCACHECTL__Type_1ac1d1cb9764a25b7c6cdc3cc691b8cbf6';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'dc_ecc_en';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '262';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
D-Cache ECC enable.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCACHECTL__Type_1a84b8a5a58cf75f886b21a90763ec2f86';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'dc_ecc_excp_en';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '263';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
D-Cache 2bit ECC error exception enable.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCACHECTL__Type_1a2ca3c9c38e7cc9afdb16ed1bdb135951';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'dc_rwtecc';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '264';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Control D-Cache Tag Ram ECC code injection.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCACHECTL__Type_1a0ab28a3d063e3e969cf0a73ca1a2832b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'dc_rwdecc';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '265';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Control D-Cache Data Ram ECC code injection.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCACHECTL__Type_1a73cc081f5608c93a0afc796f9512a84a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved1';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '266';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCACHECTL__Type_1ad18fd132ab25895b4a2e309317afb800';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct CSR_MCACHECTL_Type::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'b';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '267';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Structure used for bit  access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCACHECTL__Type_1a4b815d0133f4cd0dee7a321028800caf';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '268';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Type      used for csr data access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
  cp-fileline  = '252';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Union type to access MCACHE_CTL CSR register.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* union */
union = {
  cp-id     = 'unionCSR__MCAUSE__Type';
  cp-name   = 'CSR_MCAUSE_Type';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCAUSE__Type_1a1cb072e5e7ddb5d23103e5b7ccd4754b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'exccode';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '165';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     11..0  exception or interrupt code
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCAUSE__Type_1a219408dc82a540a8f1984de4754103c5';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved0';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '166';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     15..12  Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCAUSE__Type_1a12e8d8f10c411011485f89d8c8096adb';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'mpil';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '167';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     23..16  Previous interrupt level
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCAUSE__Type_1a71022f579628a81dc0ac558cbc513421';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved1';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '168';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     26..24  Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCAUSE__Type_1a4c04623f4c35a7b546e42c0b39d37d5e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'mpie';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '169';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     27  Interrupt enable flag before enter interrupt
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCAUSE__Type_1a00a27e55a870e69d2747ee2d78b5d3e6';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'mpp';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '170';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     29..28  Privilede mode flag before enter interrupt
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCAUSE__Type_1ab67f23d9962f57913aa683f01a8a2008';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'minhv';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '171';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     30  Machine interrupt vector table
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCAUSE__Type_1ae7500724c75e2815c3624f91df4e7e1d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'interrupt';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '176';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     31  trap type.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
 0 means exception and 1 means interrupt  
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCAUSE__Type_1adc306dbb0b23fc33075d68f60040b3e6';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct CSR_MCAUSE_Type::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'b';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '178';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Structure used for bit  access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCAUSE__Type_1ae5bdc279496969b722055aae0c118460';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '179';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Type      used for csr data access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
  cp-fileline  = '163';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Union type to access MCAUSE CSR register.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* union */
union = {
  cp-id     = 'unionCSR__MCFGINFO__Type';
  cp-name   = 'CSR_MCFGINFO_Type';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCFGINFO__Type_1a0cabeec34cf8e2a11c9c59221f855164';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'tee';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '328';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
TEE present.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCFGINFO__Type_1a5b360486d7355839b07d1d19960b9fb4';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ecc';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '329';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
ECC present.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCFGINFO__Type_1a73946e52a5708c7b47db9cd06d913838';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'clic';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '330';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CLIC present.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCFGINFO__Type_1a63fec79c30424766b3597579b9a06f0e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'plic';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '331';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
PLIC present.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCFGINFO__Type_1aff4ecb10cddcc291ee6ab6070de0d1a6';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'fio';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '332';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
FIO present.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCFGINFO__Type_1a6fbc432ae53334fb3276a2daca081d15';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ppi';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '333';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
PPI present.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCFGINFO__Type_1a852a362daa1ccb36d779a07764e844e6';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'nice';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '334';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
NICE present.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCFGINFO__Type_1aae8758186672b5ef00e04346322e2fe9';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ilm';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '335';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
ILM present.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCFGINFO__Type_1adb720ece0db9e5c82b381a6af4944fea';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'dlm';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '336';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DLM present.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCFGINFO__Type_1a1a0b0e69e1a487c28babba52092e2940';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'icache';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '337';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
ICache present.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCFGINFO__Type_1abbcd95938dd7523fe44c94f88fc2772b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'dcache';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '338';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DCache present.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCFGINFO__Type_1a43cdb8bb44c25bfc5eb829a4bf3718c3';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved0';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '339';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCFGINFO__Type_1afcf28c4b0d19c5903eb3cbd4618d6c7b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct CSR_MCFGINFO_Type::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'b';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '340';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Structure used for bit  access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCFGINFO__Type_1a50dd63592fa2d4e4540132f068cee0cd';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '341';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Type      used for csr data access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
  cp-fileline  = '326';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Union type to access MCFG_INFO CSR register.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* union */
union = {
  cp-id     = 'unionCSR__MCOUNTINHIBIT__Type';
  cp-name   = 'CSR_MCOUNTINHIBIT_Type';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCOUNTINHIBIT__Type_1a254ee53372453cbf96ed0626ba892748';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'cy';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '187';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     0     1 means disable mcycle counter
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCOUNTINHIBIT__Type_1ac263b873022f7faf2083ef0e200ddc6e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved0';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '188';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     1     Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCOUNTINHIBIT__Type_1aa701cdd635c06458c4a2857f709be409';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ir';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '189';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     2     1 means disable minstret counter
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCOUNTINHIBIT__Type_1aab234a4dac2d08f648cb47df509efaeb';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved1';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '193';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     3..31 Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCOUNTINHIBIT__Type_1afef0c274f366f4df3527d71d51ebeed6';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct CSR_MCOUNTINHIBIT_Type::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'b';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '195';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Structure used for bit  access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MCOUNTINHIBIT__Type_1aa9ba6784709e8ba39c6e094156916dc2';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '196';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Type      used for csr data access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
  cp-fileline  = '185';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Union type to access MCOUNTINHIBIT CSR register.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* union */
union = {
  cp-id     = 'unionCSR__MDCAUSE__Type';
  cp-name   = 'CSR_MDCAUSE_Type';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MDCAUSE__Type_1aea660f37d75c94912e4d9aeb883885e0';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'mdcause';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '221';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     0..1   More detailed exception information as MCAUSE supplement
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MDCAUSE__Type_1afb35b39064208f0ebcba3d508899178d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved0';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '222';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     2..XLEN-1 Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MDCAUSE__Type_1a643ebb65143fd97377b92adc7101b2d9';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct CSR_MDCAUSE_Type::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'b';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '223';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Structure used for bit  access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MDCAUSE__Type_1ad6457904e00ed5093adaf60dc65a478c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '224';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Type      used for csr data access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
  cp-fileline  = '219';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Union type to access MDCAUSE CSR register.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* union */
union = {
  cp-id     = 'unionCSR__MDCFGINFO__Type';
  cp-name   = 'CSR_MDCFGINFO_Type';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MDCFGINFO__Type_1a023b173b517068119914ee656fc7a95b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'set';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '367';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
D-Cache sets per way.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referenceby = {
        sec-mem-ref-id = 'core__feature__cache_8h_1gab30be00d8a0583adac5d786149db433f';
        sec-mem-ref-line = '655';
        sec-mem-ref-name = 'DisableDCache';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MDCFGINFO__Type_1af9523adb1cddd68b9ebcf3684c676373';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'way';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '368';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
D-Cache way.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referenceby = {
        sec-mem-ref-id = 'core__feature__cache_8h_1gab30be00d8a0583adac5d786149db433f';
        sec-mem-ref-line = '655';
        sec-mem-ref-name = 'DisableDCache';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MDCFGINFO__Type_1ab3ce74a5f243a63facff399be7643d89';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'lsize';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '369';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
D-Cache line size.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referenceby = {
        sec-mem-ref-id = 'core__feature__cache_8h_1gab30be00d8a0583adac5d786149db433f';
        sec-mem-ref-line = '655';
        sec-mem-ref-name = 'DisableDCache';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MDCFGINFO__Type_1a754ba23246054e1a6eed7b15884a7b8a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'cache_ecc';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '370';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
D-Cache ECC present.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MDCFGINFO__Type_1a333717d8ebf97d34c4b16376165d75d6';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved0';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '371';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MDCFGINFO__Type_1adca07e70d18b1ff255415c6addcec359';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'lm_size';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '372';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DLM size, need to be 2^n size.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MDCFGINFO__Type_1a03f46ebc4ad02853aeb23f6393af879f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'lm_xonly';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '373';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DLM Execute only permission.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MDCFGINFO__Type_1a21c2b66473db29a108862083aa33ee99';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'lm_ecc';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '374';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DLM ECC present.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MDCFGINFO__Type_1a6b960e8dad7dc4765ccecd3bc39b8324';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved1';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '375';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MDCFGINFO__Type_1a85fbee83bac44f6c00cdfe864f96d225';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct CSR_MDCFGINFO_Type::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'b';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '376';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Structure used for bit  access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referenceby = {
        sec-mem-ref-id = 'core__feature__cache_8h_1gab30be00d8a0583adac5d786149db433f';
        sec-mem-ref-line = '655';
        sec-mem-ref-name = 'DisableDCache';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MDCFGINFO__Type_1a458a2abb27aa334c0fda73efc7972aad';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '377';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Type      used for csr data access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
  cp-fileline  = '365';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Union type to access MDCFG_INFO CSR register.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* union */
union = {
  cp-id     = 'unionCSR__MDLMCTL__Type';
  cp-name   = 'CSR_MDLMCTL_Type';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MDLMCTL__Type_1a18b13acd38c328d22c3dd8278bb76501';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'dlm_en';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '313';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DLM enable.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MDLMCTL__Type_1a649937c80a8243f16fdd2194d019bacb';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'dlm_ecc_en';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '314';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DLM ECC eanble.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MDLMCTL__Type_1afdd466303d9baded6a1f3808aa61a115';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'dlm_ecc_excp_en';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '315';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DLM ECC exception enable.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MDLMCTL__Type_1a32b840f5de8f452ac8ed32b2bac1b3d1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'dlm_rwecc';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '316';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Control mecc_code write to dlm, simulate error injection.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MDLMCTL__Type_1a178d709c71080cf5977c08734963c2f6';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved0';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '317';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Reserved.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MDLMCTL__Type_1a2818a047f0411e86358ee943206000c1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'dlm_bpa';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '318';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DLM base address.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MDLMCTL__Type_1afdf070de54166150108e937398b56d58';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct CSR_MDLMCTL_Type::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'b';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '319';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Structure used for bit  access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MDLMCTL__Type_1af387f099dd532d49257a478b27123b52';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '320';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Type      used for csr data access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
  cp-fileline  = '311';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Union type to access MDLM_CTL CSR register.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* union */
union = {
  cp-id     = 'unionCSR__MECCCODE__Type';
  cp-name   = 'CSR_MECCCODE_Type';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MECCCODE__Type_1a8f0640f2f7cd3312e462c9692121ed22';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'code';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '422';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Used to inject ECC check code.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MECCCODE__Type_1ae0f74ab89c67ddddee98564a153c9b7b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved0';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '423';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Reserved.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MECCCODE__Type_1a2dece93fddce6fe3b986cae29302e028';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ramid';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '424';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Indicate 2bit ECC error, software can clear these bits.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MECCCODE__Type_1a1405a793cf94059253bc6447436fcf66';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved1';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '425';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Reserved.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MECCCODE__Type_1ae1440a1a88e3b3e63b7f8c1e27cd83af';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'sramid';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '426';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Indicate 1bit ECC error, software can clear these bits.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MECCCODE__Type_1a5f360471c0c32ea33589a76118b8beac';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved2';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '427';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Reserved.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MECCCODE__Type_1a9783d3cd25c6d04251e9f06e7e0d5f34';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct CSR_MECCCODE_Type::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'b';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '428';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Structure used for bit  access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MECCCODE__Type_1a3de5a1b1edf2ca4f244fb8f949fe3467';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '429';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Type      used for csr data access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
  cp-fileline  = '420';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Union type to access MECC_CODE CSR register.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* union */
union = {
  cp-id     = 'unionCSR__MECCLOCK__Type';
  cp-name   = 'CSR_MECCLOCK_Type';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MECCLOCK__Type_1a26ac4f59d6c768f1bd04bd0cb64e74fa';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ecc_lock';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '411';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RW permission, ECC Lock configure.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MECCLOCK__Type_1a88140d21b5b24147761737d4b9cd5d85';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved0';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '412';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Reserved.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MECCLOCK__Type_1aae4db42c6cca9b74bcf2f875ebaf6fa1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct CSR_MECCLOCK_Type::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'b';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '413';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Structure used for bit  access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MECCLOCK__Type_1adb7a90a3e474201d9461a572240eddaf';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '414';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Type      used for csr data access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
  cp-fileline  = '409';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Union type to access MECC_LOCK CSR register.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* union */
union = {
  cp-id     = 'unionCSR__MFIOCFGINFO__Type';
  cp-name   = 'CSR_MFIOCFGINFO_Type';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MFIOCFGINFO__Type_1a19c4f0a9343bbb22d854c96b16f8a83f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved0';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '398';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Reserved.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MFIOCFGINFO__Type_1a1f0e485583d3413b162d757e37e7cbef';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'fio_size';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '399';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
FIO size, need to be 2^n size.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MFIOCFGINFO__Type_1aa96095fc84dafdb6399212fccb2aa26e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved1';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '400';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Reserved.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MFIOCFGINFO__Type_1abd5dbf580d3e19843d2cbef403a4cb58';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'fio_bpa';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '401';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
FIO base address.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MFIOCFGINFO__Type_1aae09929ce9ba9b721613c5a06dc0a21c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct CSR_MFIOCFGINFO_Type::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'b';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '402';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Structure used for bit  access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MFIOCFGINFO__Type_1a5c2b9f4806e17df73af867d7e9c41d52';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '403';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Type      used for csr data access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
  cp-fileline  = '396';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Union type to access MFIOCFG_INFO CSR register.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* union */
union = {
  cp-id     = 'unionCSR__MICFGINFO__Type';
  cp-name   = 'CSR_MICFGINFO_Type';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MICFGINFO__Type_1a2071a4d9337c8db3b55419e531c0f095';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'set';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '349';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
I-Cache sets per way.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referenceby = {
        sec-mem-ref-id = 'core__feature__cache_8h_1ga4a855b01222d0c42d413f168651616e5';
        sec-mem-ref-line = '191';
        sec-mem-ref-name = 'DisableICache';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MICFGINFO__Type_1aff94588787995de0fdbf41a2cee027a7';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'way';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '350';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
I-Cache way.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referenceby = {
        sec-mem-ref-id = 'core__feature__cache_8h_1ga4a855b01222d0c42d413f168651616e5';
        sec-mem-ref-line = '191';
        sec-mem-ref-name = 'DisableICache';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MICFGINFO__Type_1aa4534ca8d572c6ad46ab5d36fcf4ef8b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'lsize';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '351';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
I-Cache line size.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referenceby = {
        sec-mem-ref-id = 'core__feature__cache_8h_1ga4a855b01222d0c42d413f168651616e5';
        sec-mem-ref-line = '191';
        sec-mem-ref-name = 'DisableICache';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MICFGINFO__Type_1ab8e47775ac97141dd90469564c99f598';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'cache_ecc';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '352';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
I-Cache ECC present.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MICFGINFO__Type_1a75f76b3f8eea0ed1ff1e358f639a8db5';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved0';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '353';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MICFGINFO__Type_1a124f5dd34305eceb2fe7444328b714c2';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'lm_size';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '354';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
ILM size, need to be 2^n size.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MICFGINFO__Type_1aeaab24911ca8c0c5dd80d2daffe88c8c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'lm_xonly';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '355';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
ILM Execute only permission.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MICFGINFO__Type_1a420f1ef39fa0ce7165a4c22ab0a9696e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'lm_ecc';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '356';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
ILM ECC present.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MICFGINFO__Type_1a95f943b3ddce6a9e910d75da888d9d23';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved1';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '357';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MICFGINFO__Type_1a36296b0abf3d9b0a17f7dfd8ce883796';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct CSR_MICFGINFO_Type::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'b';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '358';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Structure used for bit  access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-referenceby = {
        sec-mem-ref-id = 'core__feature__cache_8h_1ga4a855b01222d0c42d413f168651616e5';
        sec-mem-ref-line = '191';
        sec-mem-ref-name = 'DisableICache';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MICFGINFO__Type_1a019a0f2a482a3f2c7cf882a4295ac322';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '359';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Type      used for csr data access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
  cp-fileline  = '347';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Union type to access MICFG_INFO CSR register.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* union */
union = {
  cp-id     = 'unionCSR__MILMCTL__Type';
  cp-name   = 'CSR_MILMCTL_Type';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MILMCTL__Type_1ac892992420e34c4990a7e85ed034260e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ilm_en';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '298';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
ILM enable.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MILMCTL__Type_1a79054a48492cc7cac50cb8f125a11c3a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ilm_ecc_en';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '299';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
ILM ECC eanble.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MILMCTL__Type_1a7507f7d08202fed762566b3cbd6984b1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ilm_ecc_excp_en';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '300';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
ILM ECC exception enable.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MILMCTL__Type_1a77cb8ee0a260c92560375825903c791b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ilm_rwecc';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '301';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Control mecc_code write to ilm, simulate error injection.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MILMCTL__Type_1a31c9512c856b4285967a7a1d0bdceab2';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved0';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '302';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Reserved.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MILMCTL__Type_1af90ed19eceb2b20a7eb2974e59d0a5ae';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ilm_bpa';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '303';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
ILM base address.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MILMCTL__Type_1a495c9c0c76641cc5dc5ba6f31bbd3c2f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct CSR_MILMCTL_Type::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'b';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '304';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Structure used for bit  access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MILMCTL__Type_1a0568601f07d8122b6791cb832c3c43ec';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '305';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Type      used for csr data access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
  cp-fileline  = '296';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Union type to access MILM_CTL CSR register.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* union */
union = {
  cp-id     = 'unionCSR__MISA__Type';
  cp-name   = 'CSR_MISA_Type';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MISA__Type_1a7d03318d070023b589d0493a6fc0c77c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'a';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '69';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     0  Atomic extension
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MISA__Type_1aa79af012ee1e6de37eae3bb515ee01ea';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'b';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '70';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     1  Tentatively reserved for Bit-Manipulation extension
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MISA__Type_1affcb644a18834c71c22c7a3d0717d3f3';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'c';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '71';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     2  Compressed extension
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MISA__Type_1a25171c57dba66f92acc7166020e095cd';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '72';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     3  Double-precision floating-point extension
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Type      used for csr data access.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MISA__Type_1a745359a52dfafcf113c23bcd8c29ec8c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'e';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '73';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     4  RV32E base ISA
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MISA__Type_1a4023363711be3ef80da807a0728930ea';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'f';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '74';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     5  Single-precision floating-point extension
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MISA__Type_1a5ffa39768567ee68ba9ddca749749094';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'g';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '75';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     6  Additional standard extensions present
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MISA__Type_1add06ba0ef4b0e8b34c94b7d097c5b8b6';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'h';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '76';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     7  Hypervisor extension
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MISA__Type_1a388f9e4fdb069e9c0f3853ef8f9f3a04';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'i';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '77';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     8  RV32I/64I/128I base ISA
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MISA__Type_1a4256c5f7bf0017aa46de265af7ad2e73';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'j';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '78';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     9  Tentatively reserved for Dynamically Translated Languages extension
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MISA__Type_1adfa269cf0add951fbec17e4ef58dfc1d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved1';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '79';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     10 Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MISA__Type_1ad3eee1620420ed061491fd48c9483a33';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'l';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '80';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     11 Tentatively reserved for Decimal Floating-Point extension
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MISA__Type_1ae9efe222b556250575bbdb7754ee4df0';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'm';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '81';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     12 Integer Multiply/Divide extension
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MISA__Type_1a08ef7ab18dc90635a062fc702a5b9839';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'n';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '82';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     13 User-level interrupts supported
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MISA__Type_1ad74583efcf15a844c3403f2e5623b8d3';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved2';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '83';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     14 Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MISA__Type_1a1aeda1a8f5b0920ce7fb005fd45851b1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'p';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '84';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     15 Tentatively reserved for Packed-SIMD extension
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MISA__Type_1a293b7c69518f3fd68f566485d50e83e2';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'q';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '85';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     16 Quad-precision floating-point extension
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MISA__Type_1a18e3e874f5d6e2f7bdeab8cf3caf657b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_resreved3';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '86';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     17 Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MISA__Type_1a79e1df39597bf8184932682bba4e59b1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 's';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '87';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     18 Supervisor mode implemented
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MISA__Type_1a8bf50ec00d685519fd3238a4b2222b50';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 't';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '88';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     19 Tentatively reserved for Transactional Memory extension
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MISA__Type_1a746597b02ac481d6f16e9f10c311d85b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'u';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '89';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     20 User mode implemented
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MISA__Type_1a24a555a6f05561ed548f05b37ad48df9';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'v';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '90';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     21 Tentatively reserved for Vector extension
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MISA__Type_1adc432fcf6a2a187caee977c2987f1b8c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved4';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '91';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     22 Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MISA__Type_1ad127ca5673c61354060d7eb77f31ecb4';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'x';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '92';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     23 Non-standard extensions present
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MISA__Type_1a02d0ff9e6c8d54a24be971221e4cbd5a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved5';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '97';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     24..29 Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MISA__Type_1a6f3250a719eb460653f2f4f6f2bc76f8';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'mxl';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '98';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     30..31 Machine XLEN
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MISA__Type_1afba88dc0518f7881a0737fda9547ff53';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct CSR_MISA_Type::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'b';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '100';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Structure used for bit  access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
  cp-fileline  = '67';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Union type to access MISA CSR register.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* union */
union = {
  cp-id     = 'unionCSR__MMISCCTRL__Type';
  cp-name   = 'CSR_MMISCCTRL_Type';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MMISCCTRL__Type_1aa6e5c778c686f03d8b7f050bb6558f73';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved0';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '232';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     0..2  Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MMISCCTRL__Type_1ab4bb604620ef0eb2b13778e892f3b44c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'bpu';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '233';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     3     dynamic prediction enable flag
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MMISCCTRL__Type_1a2ec8d9def938eec6f784c348308dd153';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved1';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '234';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     4..5  Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MMISCCTRL__Type_1abfbd87cd64cdc521f49d43ab17c7dd7a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'misalign';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '235';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     6     misaligned access support flag
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MMISCCTRL__Type_1a7cf36aebc77aad6f2e9daaa99048d6ce';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved2';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '236';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     7..8  Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MMISCCTRL__Type_1ab819b8f5dc4a6ad8256834fdae9c952f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'nmi_cause';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '237';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     9     mnvec control and nmi mcase exccode
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MMISCCTRL__Type_1a22bacba1282cd1dba8e3a1b8f3ee8458';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved3';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '241';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     10..31 Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MMISCCTRL__Type_1a561bf6fa6d2ee52dea233c324aaa8d7c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct CSR_MMISCCTRL_Type::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'b';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '243';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Structure used for bit  access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MMISCCTRL__Type_1a17abdfbefca3554c1cf1f8c86a5c3925';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '244';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Type      used for csr data access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
  cp-fileline  = '230';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Union type to access MMISC_CTRL CSR register.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* union */
union = {
  cp-id     = 'unionCSR__MPPICFGINFO__Type';
  cp-name   = 'CSR_MPPICFGINFO_Type';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MPPICFGINFO__Type_1a0eb2a7df3561ad735893f146d2a8486c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved0';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '385';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Reserved.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MPPICFGINFO__Type_1a3651fb2680625f58d1f89dedcd4e4893';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ppi_size';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '386';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
PPI size, need to be 2^n size.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MPPICFGINFO__Type_1a3399bfc423e7ae9922c4230aa30f1e5b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved1';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '387';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Reserved.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MPPICFGINFO__Type_1a0231d5290407e502a3beeae1446ada69';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ppi_bpa';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '388';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
PPI base address.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MPPICFGINFO__Type_1a1b979b45cd5821bfc709d7f38cedba68';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct CSR_MPPICFGINFO_Type::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'b';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '389';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Structure used for bit  access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MPPICFGINFO__Type_1a3acaa252a892479c3374d93f3cbe136b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '390';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Type      used for csr data access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
  cp-fileline  = '383';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Union type to access MPPICFG_INFO CSR register.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* union */
union = {
  cp-id     = 'unionCSR__MSAVESTATUS__Type';
  cp-name   = 'CSR_MSAVESTATUS_Type';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSAVESTATUS__Type_1aea49d991ccf84140f2871c3d2e9577a1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'mpie1';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '276';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     0     interrupt enable flag of fisrt level NMI/exception nestting
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSAVESTATUS__Type_1a5d06b2cf1ffb09a323db34953a1a1117';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'mpp1';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '277';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     1..2  privilede mode of fisrt level NMI/exception nestting
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSAVESTATUS__Type_1abe13779fb93f296a38bc80cc75d7ffbc';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved0';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '278';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     3..5  Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSAVESTATUS__Type_1a71bcf16bcab565b98e2cd135054daceb';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ptyp1';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '279';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     6..7  NMI/exception type of before first nestting
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSAVESTATUS__Type_1a3b59f01dc6696bb3861f392e12cd83a1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'mpie2';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '280';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     8     interrupt enable flag of second level NMI/exception nestting
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSAVESTATUS__Type_1a507ac66274667f23d4c1c8fb175456b0';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'mpp2';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '281';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     9..10 privilede mode of second level NMI/exception nestting
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSAVESTATUS__Type_1a60c203ffddd944222ed36856c707b51c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved1';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '282';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     11..13     Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSAVESTATUS__Type_1a98cbf02beb8dc8fc1eee27ada6ebf5a4';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ptyp2';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '283';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     14..15     NMI/exception type of before second nestting
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSAVESTATUS__Type_1a8e050bc641728ef17037ab95a2b64293';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved2';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '287';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     16..31 Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSAVESTATUS__Type_1a092be26335f488983ecd8bfa5f513e14';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct CSR_MSAVESTATUS_Type::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'b';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '289';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Structure used for bit  access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSAVESTATUS__Type_1a3830cba893f489931a838102f870bb54';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'w';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '290';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Type      used for csr data access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
  cp-fileline  = '274';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Union type to access MSAVESTATUS CSR register.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* union */
union = {
  cp-id     = 'unionCSR__MSTATUS__Type';
  cp-name   = 'CSR_MSTATUS_Type';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSTATUS__Type_1ae8ca70d836ff92b95d206e681d081329';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved0';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '124';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     0  Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSTATUS__Type_1a39782c19cb5e81a9bb2ac6231b11edcd';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'sie';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '125';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     1  supervisor interrupt enable flag
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSTATUS__Type_1a3f2fb6067e213b937b77c8c72b5a2793';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved1';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '126';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     2  Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSTATUS__Type_1a8fe9b86b3d0ddb66537db55e8fe1b96b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'mie';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '127';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     3  Machine mode interrupt enable flag
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSTATUS__Type_1a6ec97869161f24ac6ccdf52d0d9bf2de';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved2';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '128';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     4  Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSTATUS__Type_1a2da21bb426da143dfba005be019592b3';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'spie';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '129';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     3  Supervisor Privilede mode interrupt enable flag
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSTATUS__Type_1a3c5132f10bbe90eef8a8256edd1e2907';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved3';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '130';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSTATUS__Type_1a1053ed8fd8525df9fbd32c4890bcfe42';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'mpie';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '131';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     mirror of MIE flag
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSTATUS__Type_1a225f2f406e336a6035544c2b718d3d7e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved4';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '132';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSTATUS__Type_1a54f1b11a82d0c710c8568703e006bbe8';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'mpp';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '133';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     mirror of Privilege Mode
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSTATUS__Type_1a0b85d89e89118380007d94c4c2adb0f2';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'fs';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '134';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     FS status flag
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSTATUS__Type_1ab2648a5652adc6cd1dd02e3e47d4cd87';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'xs';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '135';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     XS status flag
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSTATUS__Type_1a5319b79ff9ccab347d70716fc7ad5bf5';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'mprv';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '136';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     Machine mode PMP
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSTATUS__Type_1aa7bf6ccb81c68ffcda46390640774413';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'sum';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '137';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     Supervisor Mode load and store protection
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSTATUS__Type_1a9d5d7b260d563a82fad02c6940902ef0';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved6';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '138';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     19..30 Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSTATUS__Type_1a07006b8b4c0dc88ca1e1a2145a9bce36';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'sd';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '139';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     Dirty status for XS or FS
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSTATUS__Type_1a84e4ca04ad9e3bdb9956a2ef28d85db3';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct CSR_MSTATUS_Type::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'b';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '141';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Structure used for bit  access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSTATUS__Type_1ad6ccdd78fc15b0b10a9e82e3c25dd98a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '142';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Type      used for csr data access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
  cp-fileline  = '107';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Union type to access MSTATUS CSR register.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* union */
union = {
  cp-id     = 'unionCSR__MSUBM__Type';
  cp-name   = 'CSR_MSUBM_Type';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSUBM__Type_1a4df7db7411e57be8ab1826f81ca37514';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved0';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '204';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     0..5   Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSUBM__Type_1a1bea0e7308519e40a3134f8d92bca435';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'typ';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '205';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     6..7   current trap type
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSUBM__Type_1a77220967d0a04f29fb37b9730afc8059';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ptyp';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '206';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     8..9   previous trap type
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSUBM__Type_1a1d0316c0cbd4c58115811939f05334d0';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = '_reserved1';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '210';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     10..31 Reserved
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSUBM__Type_1a4e88749cf997c4d1429f83c411736ebd';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct CSR_MSUBM_Type::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'b';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '212';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Structure used for bit  access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MSUBM__Type_1ab188dee35d91c5cd832a5295b4e21e98';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '213';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Type      used for csr data access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
  cp-fileline  = '202';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Union type to access MSUBM CSR register.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* union */
union = {
  cp-id     = 'unionCSR__MTVEC__Type';
  cp-name   = 'CSR_MTVEC_Type';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MTVEC__Type_1aaedacb992928db5f3486342eadf944e8';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'mode';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '150';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     0..5   interrupt mode control
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MTVEC__Type_1a0d0fea678e6ad934c29011cfd49e9271';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'addr';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '154';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
bit:     6..31  mtvec address
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MTVEC__Type_1a591e5d7c8c9db91b77e52c40686e8737';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct CSR_MTVEC_Type::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'b';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '156';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Structure used for bit  access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'unionCSR__MTVEC__Type_1a78064f13f73bd2c7367fd6dbc8cf356e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'd';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      sec-mem-desc-line = '157';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Type      used for csr data access.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
  cp-fileline  = '148';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Union type to access MTVEC CSR register.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'structSysTimer__Type';
  cp-name   = 'SysTimer_Type';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structSysTimer__Type_1a37a77647021a3ac0325d9337aa063cc7';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
__IOM uint64_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'MTIMER';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      sec-mem-desc-line = '55';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Offset: 0x000 (R/W)  System Timer current value 64bits Register.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structSysTimer__Type_1a6dee6a8430c65e88e458d9fb90d4d8c7';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
__IOM uint64_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'MTIMERCMP';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      sec-mem-desc-line = '56';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Offset: 0x008 (R/W)  System Timer compare Value 64bits Register.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structSysTimer__Type_1aedb1895f0e0be768277f230b4a461a24';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
__IOM uint32_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RESERVED0';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      sec-mem-desc-line = '57';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Offset: 0x010 - 0xFEC Reserved.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structSysTimer__Type_1a4bc27f5c3a0fefa7063ffbcf2b148f78';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
__IOM uint32_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'MSFTRST';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      sec-mem-desc-line = '58';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Offset: 0xFF0 (R/W)  System Timer Software Core Reset Register.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structSysTimer__Type_1a1cec32637a87c4fdd59bf526325755cb';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
__IOM uint32_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'RESERVED1';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      sec-mem-desc-line = '59';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Offset: 0xFF4 Reserved.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structSysTimer__Type_1a2e64638a3327d7932455185033bab733';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
__IOM uint32_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'MTIMECTL';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      sec-mem-desc-line = '60';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Offset: 0xFF8 (R/W)  System Timer Control Register, previously MSTOP register.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'structSysTimer__Type_1a5e43fade844d5c21f68c9bace205ef47';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
__IOM uint32_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'MSIP';
      sec-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      sec-mem-desc-line = '61';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Offset: 0xFFC (R/W)  System Timer SW interrupt Register.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
  cp-fileline  = '54';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Structure type to access the System Timer (SysTimer).
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
Structure definition to access the system timer(SysTimer).
\remarks
- MSFTRST register is introduced in Nuclei N Core version 1.3(\ref __NUCLEI_N_REV >= 0x0103)
- MSTOP register is renamed to MTIMECTL register in Nuclei N Core version 1.4(\ref __NUCLEI_N_REV >= 0x0104)
- CMPCLREN and CLKSRC bit in MTIMECTL register is introduced in Nuclei N Core version 1.4(\ref __NUCLEI_N_REV >= 0x0104)
_EnD_oF_dEf_TeXt_;
}; /* struct */
file = {
  file-id   = 'core__compatiable_8h';
  file-name = 'core_compatiable.h';
    define = {
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ARMCompatiable__Functions_1gaad233022e850a009fc6f7602be1182f6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__ISB';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RWMB()
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_compatiable.h';
      define-mem-desc-line = '42';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Instruction Synchronization Barrier, compatiable with ARM.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ARMCompatiable__Functions_1ga067d257a2b34565410acefb5afef2203';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__DSB';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RWMB()
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_compatiable.h';
      define-mem-desc-line = '45';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Data Synchronization Barrier, compatiable with ARM.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ARMCompatiable__Functions_1ga671101179b5943990785f36f8c1e2269';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__DMB';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RWMB()
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_compatiable.h';
      define-mem-desc-line = '48';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Data Memory Barrier, compatiable with ARM.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ARMCompatiable__Functions_1gacf0a70f77355b4e92cbcf33294a2b834';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__LDRBT';
      define-mem-param  = {
        define-mem-def-name = 'ptr';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__LB((ptr))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_compatiable.h';
      define-mem-desc-line = '51';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
LDRT Unprivileged (8 bit), ARM Compatiable.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ARMCompatiable__Functions_1gaa16005628f00d6fadfc10a51b47df494';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__LDRHT';
      define-mem-param  = {
        define-mem-def-name = 'ptr';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__LH((ptr))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_compatiable.h';
      define-mem-desc-line = '53';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
LDRT Unprivileged (16 bit), ARM Compatiable.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ARMCompatiable__Functions_1ga40e9941f772bbbe5b0d7aa39dbdbd256';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__LDRT';
      define-mem-param  = {
        define-mem-def-name = 'ptr';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__LW((ptr))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_compatiable.h';
      define-mem-desc-line = '55';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
LDRT Unprivileged (32 bit), ARM Compatiable.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ARMCompatiable__Functions_1ga264313e3689fafe2a3f580c338e96c19';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__STRBT';
      define-mem-param  = {
        define-mem-def-name = 'val';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'ptr';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__SB((ptr), (val))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_compatiable.h';
      define-mem-desc-line = '58';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
STRT Unprivileged (8 bit), ARM Compatiable.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ARMCompatiable__Functions_1ga2558a8bb23c4df33bdd206f36c46a911';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__STRHT';
      define-mem-param  = {
        define-mem-def-name = 'val';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'ptr';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__SH((ptr), (val))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_compatiable.h';
      define-mem-desc-line = '60';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
STRT Unprivileged (16 bit), ARM Compatiable.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ARMCompatiable__Functions_1ga643d41aafbfc031d31e1eac1d3b8f6fe';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__STRT';
      define-mem-param  = {
        define-mem-def-name = 'val';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'ptr';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__SW((ptr), (val))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_compatiable.h';
      define-mem-desc-line = '62';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
STRT Unprivileged (32 bit), ARM Compatiable.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ARMCompatiable__Functions_1ga2ca2b1eeec054ee2b02a5e8cb3c88cbf';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__SSAT';
      define-mem-param  = {
        define-mem-def-name = 'val';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'sat';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_SCLIP32((val), (sat-1))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_compatiable.h';
      define-mem-desc-line = '73';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Signed Saturate.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Saturates a signed value.
\param [in]  value  Value to be saturated
\param [in]    sat  Bit position to saturate to (1..32)
\return             Saturated value
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ARMCompatiable__Functions_1ga80269b6402db8ba034a5a1b04d88fdd6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__USAT';
      define-mem-param  = {
        define-mem-def-name = 'val';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'sat';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_UCLIP32((val), (sat))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_compatiable.h';
      define-mem-desc-line = '98';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Unsigned Saturate.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Saturates an unsigned value.
\param [in]  value  Value to be saturated
\param [in]    sat  Bit position to saturate to (0..31)
\return             Saturated value
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ARMCompatiable__Functions_1ga0ffdc7f8b90076408f400768a7f5e372';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RBIT';
      define-mem-param  = {
        define-mem-def-name = 'value';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_BITREVI((value), 31)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_compatiable.h';
      define-mem-desc-line = '190';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Reverse bit order of value.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Reverses the bit order of the given value.
\param [in]    value  Value to reverse
\return               Reversed value
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ARMCompatiable__Functions_1gacac866989a2f4d87628d02fd33fdc61d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__CLZ';
      define-mem-param  = {
        define-mem-def-name = 'data';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_CLZ32(data)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_compatiable.h';
      define-mem-desc-line = '215';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Count leading zeros.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Counts the number of leading zeros of a data value.
\param [in]  data  Value to count the leading zeros
\return             number of leading zeros in value
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    };
    func = {
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__ARMCompatiable__Functions_1gadb92679719950635fba8b1b954072695';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__REV';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'value';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_compatiable.h';
      func-mem-desc-line = '122';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Reverse byte order (32 bit)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Reverses the byte order in unsigned integer value.
For example, 0x12345678 becomes 0x78563412.
\param [in]    value  Value to reverse
\return               Reversed value
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__ARMCompatiable__Functions_1gaa12aedd096506c9639c1581acd5c6a78';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__REV16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'value';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_compatiable.h';
      func-mem-desc-line = '140';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Reverse byte order (16 bit)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Reverses the byte order within each halfword of a word.
For example, 0x12345678 becomes 0x34127856.
\param [in]    value  Value to reverse
\return               Reversed value
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__ARMCompatiable__Functions_1gacb695341318226a5f69ed508166622ac';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE int16_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__REVSH';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int16_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'value';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_compatiable.h';
      func-mem-desc-line = '159';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Reverse byte order (16 bit)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Reverses the byte order in a 16-bit value
and returns the signed 16-bit result.
For example, 0x0080 becomes 0x8000.
\param [in]    value  Value to reverse
\return               Reversed value
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__ARMCompatiable__Functions_1gab16acb6456176f1e87a4f2724c2b6028';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ROR';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'op1';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'op2';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_compatiable.h';
      func-mem-desc-line = '174';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Rotate Right in unsigned value (32 bit)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Rotate Right (immediate) provides the value of
the contents of a register rotated by a variable number of bits.
\param [in]    op1  Value to rotate
\param [in]    op2  Number of Bits to rotate(0-31)
\return               Rotated value
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    };
  file-full-name  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_compatiable.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
ARM compatiable function definitions header file.
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_



_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'core__feature__base_8h';
  file-name = 'core_feature_base.h';
    define = {
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__Registers_1ga768dc3bf3c5e4e75e117c4a053b6d0f7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RISCV_XLEN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
32
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      define-mem-desc-line = '42';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Refer to the width of an integer register in bits(either 32 or 64)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Register__Access_1gab68e26f20086bc54e8fc3af533c8ed7f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_CSR_SWAP';
      define-mem-param  = {
        define-mem-def-name = 'csr';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'val';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
({                                                          \
        register rv_csr_t __v = (unsigned long)(val);           \
        __ASM volatile("csrrw %0, " STRINGIFY(csr) ", %1"       \
                     : "=r"(__v)                                \
                     : "rK"(__v)                                \
                     : "memory");                               \
        __v;                                                    \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      define-mem-desc-line = '460';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CSR operation Macro for csrrw instruction.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Read the content of csr register to __v,
then write content of val into csr register, then return __v
\param csr   CSR macro definition defined in
             \ref NMSIS_Core_CSR_Registers, eg. \ref CSR_MSTATUS
\param val   value to store into the CSR register
\return the CSR register value before written
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Register__Access_1ga355c96e5bd1ab3df0203e23a887c00c0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_CSR_READ';
      define-mem-param  = {
        define-mem-def-name = 'csr';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
({                                                          \
        register rv_csr_t __v;                                  \
        __ASM volatile("csrr %0, " STRINGIFY(csr)               \
                     : "=r"(__v)                                \
                     :                                          \
                     : "memory");                               \
        __v;                                                    \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      define-mem-desc-line = '478';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CSR operation Macro for csrr instruction.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Read the content of csr register to __v and return it
\param csr   CSR macro definition defined in
             \ref NMSIS_Core_CSR_Registers, eg. \ref CSR_MSTATUS
\return the CSR register value
_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1ga7b8025dd8eac9993066d730cee6475a0';
        define-mem-ref-line = '742';
        define-mem-ref-name = '__ECLIC_GetVector';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1ga2e80049df57b285d4dd43454377c0845';
        define-mem-ref-line = '710';
        define-mem-ref-name = '__ECLIC_SetVector';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1ga05bee6a5e41963ef1845c8a7e5a09c89';
        define-mem-ref-line = '782';
        define-mem-ref-name = '__get_exc_entry';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1gac5b9521ea1bd5260330714b8032d04d5';
        define-mem-ref-line = '841';
        define-mem-ref-name = '__get_nmi_entry';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1ga2fe20dcdecc453c6709448944b1f5350';
        define-mem-ref-line = '821';
        define-mem-ref-name = '__get_nonvec_entry';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__pmp_8h_1ga0fc1168753b68d4105d6fc96b038b1fd';
        define-mem-ref-line = '205';
        define-mem-ref-name = '__get_PMPADDRx';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__pmp_8h_1gadca32ce47cd692eb2e7fe25abf36c103';
        define-mem-ref-line = '165';
        define-mem-ref-name = '__get_PMPCFGx';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__pmp_8h_1gadf37b13460f0c2c0d7d2641f31ebbf72';
        define-mem-ref-line = '63';
        define-mem-ref-name = '__get_PMPxCFG';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1ga0d524220141962c60352cfe0a219bdb4';
        define-mem-ref-line = '608';
        define-mem-ref-name = '__get_rv_cycle';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1ga0755f3835c1d5788f99547c185dab2d2';
        define-mem-ref-line = '635';
        define-mem-ref-name = '__get_rv_instret';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1ga5f54b26adf57d254f6a589dab36bd28a';
        define-mem-ref-line = '663';
        define-mem-ref-name = '__get_rv_time';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1gadbe0f14f32c5989304fd05faf0cff648';
        define-mem-ref-line = '799';
        define-mem-ref-name = '__set_nonvec_entry';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__pmp_8h_1gae1905cc6904d78db702c1a0b72b326f5';
        define-mem-ref-line = '105';
        define-mem-ref-name = '__set_PMPxCFG';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__cache_8h_1gab30be00d8a0583adac5d786149db433f';
        define-mem-ref-line = '655';
        define-mem-ref-name = 'DisableDCache';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__cache_8h_1ga4a855b01222d0c42d413f168651616e5';
        define-mem-ref-line = '191';
        define-mem-ref-name = 'DisableICache';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__timer_8h_1ga57b4f64ed87262daf831573e704b12c8';
        define-mem-ref-line = '311';
        define-mem-ref-name = 'SysTimer_ClearSWIRQ';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__timer_8h_1ga515d63f4e4581430fb0bf6e864e5bca9';
        define-mem-ref-line = '206';
        define-mem-ref-name = 'SysTimer_GetCompareValue';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__timer_8h_1ga0431e3f4a44ca2265884c19096912729';
        define-mem-ref-line = '333';
        define-mem-ref-name = 'SysTimer_GetMsipValue';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__timer_8h_1ga52e85918789aa95fc4cd0d7238ca9b6c';
        define-mem-ref-line = '172';
        define-mem-ref-name = 'SysTimer_SetCompareValue';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__timer_8h_1gaa7f8e6c1423f582f958e151ce692395c';
        define-mem-ref-line = '350';
        define-mem-ref-name = 'SysTimer_SetMsipValue';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__timer_8h_1gaa4d13cddf35ef77fd3b3b59e82eb1d47';
        define-mem-ref-line = '291';
        define-mem-ref-name = 'SysTimer_SetSWIRQ';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Register__Access_1gaa2d43f43f3f333cfd8e5a326a2aed413';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_CSR_WRITE';
      define-mem-param  = {
        define-mem-def-name = 'csr';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'val';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
({                                                          \
        register rv_csr_t __v = (rv_csr_t)(val);                \
        __ASM volatile("csrw " STRINGIFY(csr) ", %0"            \
                     :                                          \
                     : "rK"(__v)                                \
                     : "memory");                               \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      define-mem-desc-line = '496';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CSR operation Macro for csrw instruction.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Write the content of val to csr register
\param csr   CSR macro definition defined in
             \ref NMSIS_Core_CSR_Registers, eg. \ref CSR_MSTATUS
\param val   value to store into the CSR register
_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1gaec014abd3940e642f652b97b70d7ac8e';
        define-mem-ref-line = '764';
        define-mem-ref-name = '__set_exc_entry';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1gadbe0f14f32c5989304fd05faf0cff648';
        define-mem-ref-line = '799';
        define-mem-ref-name = '__set_nonvec_entry';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__pmp_8h_1ga6341b28b3c2fe7c6e697a1adee7d4dd2';
        define-mem-ref-line = '234';
        define-mem-ref-name = '__set_PMPADDRx';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__pmp_8h_1gaf509ec494237545e28812695aaaa30c8';
        define-mem-ref-line = '188';
        define-mem-ref-name = '__set_PMPCFGx';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__pmp_8h_1gae1905cc6904d78db702c1a0b72b326f5';
        define-mem-ref-line = '105';
        define-mem-ref-name = '__set_PMPxCFG';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1ga1a1db7d1454df1cf7b1214d18349cac1';
        define-mem-ref-line = '775';
        define-mem-ref-name = '__set_wfi_sleepmode';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__cache_8h_1gab30be00d8a0583adac5d786149db433f';
        define-mem-ref-line = '655';
        define-mem-ref-name = 'DisableDCache';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__cache_8h_1ga4a855b01222d0c42d413f168651616e5';
        define-mem-ref-line = '191';
        define-mem-ref-name = 'DisableICache';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Register__Access_1ga01a3710ed5d399eec664b69fd01b33fb';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_CSR_READ_SET';
      define-mem-param  = {
        define-mem-def-name = 'csr';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'val';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
({                                                          \
        register rv_csr_t __v = (rv_csr_t)(val);                \
        __ASM volatile("csrrs %0, " STRINGIFY(csr) ", %1"       \
                     : "=r"(__v)                                \
                     : "rK"(__v)                                \
                     : "memory");                               \
        __v;                                                    \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      define-mem-desc-line = '515';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CSR operation Macro for csrrs instruction.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Read the content of csr register to __v,
then set csr register to be __v | val, then return __v
\param csr   CSR macro definition defined in
             \ref NMSIS_Core_CSR_Registers, eg. \ref CSR_MSTATUS
\param val   Mask value to be used wih csrrs instruction
\return the CSR register value before written
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Register__Access_1gafdbd9b5a14b44913675d0fa73ca6716f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_CSR_SET';
      define-mem-param  = {
        define-mem-def-name = 'csr';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'val';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
({                                                          \
        register rv_csr_t __v = (rv_csr_t)(val);                \
        __ASM volatile("csrs " STRINGIFY(csr) ", %0"            \
                     :                                          \
                     : "rK"(__v)                                \
                     : "memory");                               \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      define-mem-desc-line = '533';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CSR operation Macro for csrs instruction.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Set csr register to be csr_content | val
\param csr   CSR macro definition defined in
             \ref NMSIS_Core_CSR_Registers, eg. \ref CSR_MSTATUS
\param val   Mask value to be used wih csrs instruction
_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1ga16f715797bba0ac2ed2e1820c63443cd';
        define-mem-ref-line = '846';
        define-mem-ref-name = '__disable_all_counter';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1gaf9ada8a615338120fa38a6e193fd7517';
        define-mem-ref-line = '806';
        define-mem-ref-name = '__disable_mcycle_counter';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1gae1cb8d99e36d784e9071fec80e1f02fe';
        define-mem-ref-line = '826';
        define-mem-ref-name = '__disable_minstret_counter';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1gae84bf4e95944e61937f4ed2453e5ef23';
        define-mem-ref-line = '586';
        define-mem-ref-name = '__enable_irq';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1gaa60612c5e378681f32e815743823ba15';
        define-mem-ref-line = '786';
        define-mem-ref-name = '__TXEVT';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1gaca38170721a2eefd87017ed350162c4c';
        define-mem-ref-line = '730';
        define-mem-ref-name = '__WFE';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__cache_8h_1gaf90783ed69b3589cde6fe7dbabeb17c0';
        define-mem-ref-line = '640';
        define-mem-ref-name = 'EnableDCache';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__cache_8h_1ga76dfd7aff65a6a7fa91b53dbe44f9ce5';
        define-mem-ref-line = '176';
        define-mem-ref-name = 'EnableICache';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Register__Access_1ga1ead73950cec4e7221a24500846f39a2';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_CSR_READ_CLEAR';
      define-mem-param  = {
        define-mem-def-name = 'csr';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'val';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
({                                                          \
        register rv_csr_t __v = (rv_csr_t)(val);                \
        __ASM volatile("csrrc %0, " STRINGIFY(csr) ", %1"       \
                     : "=r"(__v)                                \
                     : "rK"(__v)                                \
                     : "memory");                               \
        __v;                                                    \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      define-mem-desc-line = '552';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CSR operation Macro for csrrc instruction.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Read the content of csr register to __v,
then set csr register to be __v & ~val, then return __v
\param csr   CSR macro definition defined in
             \ref NMSIS_Core_CSR_Registers, eg. \ref CSR_MSTATUS
\param val   Mask value to be used wih csrrc instruction
\return the CSR register value before written
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Register__Access_1ga14cf0513f6b576fcd1ff700b08f65543';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_CSR_CLEAR';
      define-mem-param  = {
        define-mem-def-name = 'csr';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'val';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
({                                                          \
        register rv_csr_t __v = (rv_csr_t)(val);                \
        __ASM volatile("csrc " STRINGIFY(csr) ", %0"            \
                     :                                          \
                     : "rK"(__v)                                \
                     : "memory");                               \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      define-mem-desc-line = '570';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CSR operation Macro for csrc instruction.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
Set csr register to be csr_content & ~val
\param csr   CSR macro definition defined in
             \ref NMSIS_Core_CSR_Registers, eg. \ref CSR_MSTATUS
\param val   Mask value to be used wih csrc instruction
_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1ga2299877e4ba3e162ca9dbabd6e0abef6';
        define-mem-ref-line = '597';
        define-mem-ref-name = '__disable_irq';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1ga1b25cc01665431cd509fd3c1be93a811';
        define-mem-ref-line = '836';
        define-mem-ref-name = '__enable_all_counter';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1gadba90c4a57befeb5e4f739295af55e73';
        define-mem-ref-line = '796';
        define-mem-ref-name = '__enable_mcycle_counter';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1gae7bb45974eee5b66ea6332ba0ccf23d5';
        define-mem-ref-line = '816';
        define-mem-ref-name = '__enable_minstret_counter';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1gaca38170721a2eefd87017ed350162c4c';
        define-mem-ref-line = '730';
        define-mem-ref-name = '__WFE';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1ga8bc0687a967ccba8e8adbe7abe5fe2f7';
        define-mem-ref-line = '717';
        define-mem-ref-name = '__WFI';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__cache_8h_1gab30be00d8a0583adac5d786149db433f';
        define-mem-ref-line = '655';
        define-mem-ref-name = 'DisableDCache';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__cache_8h_1ga4a855b01222d0c42d413f168651616e5';
        define-mem-ref-line = '191';
        define-mem-ref-name = 'DisableICache';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga101db0d567f4403490117d9bb0a8c9c0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__FENCE';
      define-mem-param  = {
        define-mem-def-name = 'p';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 's';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ASM volatile ("fence " #p "," #s : : : "memory")
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      define-mem-desc-line = '861';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Execute fence instruction, p -> pred, s -> succ.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
the FENCE instruction ensures that all memory accesses from instructions preceding
the fence in program order (the <tt>predecessor set</tt>) appear earlier in the global memory order than
memory accesses from instructions appearing after the fence in program order (the <tt>successor set</tt>).
For details, please refer to The RISC-V Instruction Set Manual
\param p     predecessor set, such as iorw, rw, r, w
\param s     successor set, such as iorw, rw, r, w
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga683c246c3fdba09511675365a2fa8bd3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RWMB';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__FENCE(iorw,iorw)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      define-mem-desc-line = '875';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Read & Write Memory barrier.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga74918217f0fe94af72bfe5d406d4164b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RMB';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__FENCE(ir,ir)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      define-mem-desc-line = '878';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Read Memory barrier.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga4063a0176acd66b4cdad567b45f3249b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__WMB';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__FENCE(ow,ow)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      define-mem-desc-line = '881';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Write Memory barrier.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga4e8baf26c3f68696f2b2ad0510eafdb5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__SMP_RWMB';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__FENCE(rw,rw)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      define-mem-desc-line = '884';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMP Read & Write Memory barrier.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga78c8abb848ec15a6e9dcce8c9e4dc1ba';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__SMP_RMB';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__FENCE(r,r)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      define-mem-desc-line = '887';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMP Read Memory barrier.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga96d95139b3239e90fad24caf26da2160';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__SMP_WMB';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__FENCE(w,w)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      define-mem-desc-line = '890';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMP Write Memory barrier.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga653c374f1130650b2f115a92bdf23f7b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__CPU_RELAX';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ASM volatile ("" : : : "memory")
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      define-mem-desc-line = '893';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CPU relax for busy loop.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    };
    typedef = {
    typedef-member = {
      typedef-mem-kind = 'typedef';
      typedef-mem-id   = 'group__NMSIS__Core__Registers_1ga9fe08aae694cff694dde8758e73f4e3e';
      typedef-mem-virt = normal;
      typedef-mem-prot = public;
      typedef-mem-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
      typedef-mem-name = 'rv_csr_t';
      typedef-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      typedef-mem-desc-line = '50';
      typedef-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Type of Control and Status Register(CSR), depends on the XLEN defined in RISC-V.
_EnD_oF_dEf_TeXt_;
      typedef-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* typedef-member */
    typedef-member = {
      typedef-mem-kind = 'typedef';
      typedef-mem-id   = 'group__NMSIS__Core__Base__Registers_1ga56f425a6599bc28e3921326cf5bbd040';
      typedef-mem-virt = normal;
      typedef-mem-prot = public;
      typedef-mem-type = <<_EnD_oF_dEf_TeXt_
CSR_MMISCCTRL_Type
_EnD_oF_dEf_TeXt_;
      typedef-mem-name = 'CSR_MMISCCTL_Type';
      typedef-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      typedef-mem-desc-line = '247';
      typedef-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      typedef-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* typedef-member */
    };
    enum = {
    enum-member = {
      enum-mem-kind = 'enum';
      enum-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga5d9cca8c88cb703c619aff084e4e7648';
      enum-mem-virt = normal;
      enum-mem-prot = public;
      enum-mem-name = 'WFI_SleepMode_Type';
      enum-mem-enum = { enum-name = WFI_SHALLOW_SLEEP; enum-value = '= 0'; };
      enum-mem-enum = { enum-name = WFI_DEEP_SLEEP; enum-value = '= 1'; };
      enum-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      enum-mem-desc-line = '763';
      enum-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
WFI Sleep Mode enumeration.
_EnD_oF_dEf_TeXt_;
      enum-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* enum-member */
    };
    func = {
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CSR__Register__Access_1gae84bf4e95944e61937f4ed2453e5ef23';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__enable_irq';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '586';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Enable IRQ Interrupts.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Enables IRQ interrupts by setting the MIE-bit in the MSTATUS Register.
\remarks
         Can only be executed in Privileged modes.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gafdbd9b5a14b44913675d0fa73ca6716f';
        func-mem-ref-line = '533';
        func-mem-ref-name = '__RV_CSR_SET';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga7086e667c65affe87d2c32115193d736';
        func-mem-ref-line = '401';
        func-mem-ref-name = 'CSR_MSTATUS';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga225cb34e3b991318fa87f090cfc3fc5f';
        func-mem-ref-line = '40';
        func-mem-ref-name = 'MSTATUS_MIE';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CSR__Register__Access_1ga2299877e4ba3e162ca9dbabd6e0abef6';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__disable_irq';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '597';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Disable IRQ Interrupts.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Disables IRQ interrupts by clearing the MIE-bit in the MSTATUS Register.
\remarks
         Can only be executed in Privileged modes.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga14cf0513f6b576fcd1ff700b08f65543';
        func-mem-ref-line = '570';
        func-mem-ref-name = '__RV_CSR_CLEAR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga7086e667c65affe87d2c32115193d736';
        func-mem-ref-line = '401';
        func-mem-ref-name = 'CSR_MSTATUS';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga225cb34e3b991318fa87f090cfc3fc5f';
        func-mem-ref-line = '40';
        func-mem-ref-name = 'MSTATUS_MIE';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CSR__Register__Access_1ga0d524220141962c60352cfe0a219bdb4';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint64_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__get_rv_cycle';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '608';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Read whole 64 bits value of mcycle counter.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function will read the whole 64 bits of MCYCLE register
\return  The whole 64 bits value of MCYCLE
\remarks It will work for both RV32 and RV64 to get full 64bits value of MCYCLE
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '478';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga5a7abfd3679706088142a50995c1bdb8';
        func-mem-ref-line = '441';
        func-mem-ref-name = 'CSR_MCYCLE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gae3368bea588a2fcdf2e7d24707ef4dda';
        func-mem-ref-line = '539';
        func-mem-ref-name = 'CSR_MCYCLEH';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CSR__Register__Access_1ga0755f3835c1d5788f99547c185dab2d2';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint64_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__get_rv_instret';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '635';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Read whole 64 bits value of machine instruction-retired counter.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function will read the whole 64 bits of MINSTRET register
\return  The whole 64 bits value of MINSTRET
\remarks It will work for both RV32 and RV64 to get full 64bits value of MINSTRET
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '478';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga204b84adcbccada25ecd7aff3c5a31f5';
        func-mem-ref-line = '442';
        func-mem-ref-name = 'CSR_MINSTRET';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaa59d1f570770dc3be6cd493cbb5a12e4';
        func-mem-ref-line = '540';
        func-mem-ref-name = 'CSR_MINSTRETH';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CSR__Register__Access_1ga5f54b26adf57d254f6a589dab36bd28a';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint64_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__get_rv_time';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '663';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Read whole 64 bits value of real-time clock.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function will read the whole 64 bits of TIME register
\return  The whole 64 bits value of TIME CSR
\remarks It will work for both RV32 and RV64 to get full 64bits value of TIME
\attention only available when user mode available
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '478';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga4bbdf33e8b20f4cb020869e7394e388a';
        func-mem-ref-line = '361';
        func-mem-ref-name = 'CSR_TIME';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga2e2ce9bac3d1ad2128a4eb9438a1022d';
        func-mem-ref-line = '508';
        func-mem-ref-name = 'CSR_TIMEH';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga3113efdf11b109a9cbd50fae783d1adc';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__NOP';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '703';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
NOP Instruction.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
No Operation does nothing.
This instruction can be used for code alignment purposes.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga8bc0687a967ccba8e8adbe7abe5fe2f7';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__WFI';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '717';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Wait For Interrupt.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Wait For Interrupt is is executed using CSR_WFE.WFE=0 and WFI instruction.
It will suspends execution until interrupt, NMI or Debug happened.
When Core is waked up by interrupt, if
1. mstatus.MIE == 1(interrupt enabled), Core will enter ISR code
2. mstatus.MIE == 0(interrupt disabled), Core will resume previous execution
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga14cf0513f6b576fcd1ff700b08f65543';
        func-mem-ref-line = '570';
        func-mem-ref-name = '__RV_CSR_CLEAR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga9852d0d6221b272f8f5290c3445ee1ba';
        func-mem-ref-line = '639';
        func-mem-ref-name = 'CSR_WFE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga20aa60b214851659e139accdc108f131';
        func-mem-ref-line = '155';
        func-mem-ref-name = 'WFE_WFE';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1gaca38170721a2eefd87017ed350162c4c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__WFE';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '730';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Wait For Event.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Wait For Event is executed using CSR_WFE.WFE=1 and WFI instruction.
It will suspends execution until event, NMI or Debug happened.
When Core is waked up, Core will resume previous execution
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga14cf0513f6b576fcd1ff700b08f65543';
        func-mem-ref-line = '570';
        func-mem-ref-name = '__RV_CSR_CLEAR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gafdbd9b5a14b44913675d0fa73ca6716f';
        func-mem-ref-line = '533';
        func-mem-ref-name = '__RV_CSR_SET';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga9852d0d6221b272f8f5290c3445ee1ba';
        func-mem-ref-line = '639';
        func-mem-ref-name = 'CSR_WFE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga20aa60b214851659e139accdc108f131';
        func-mem-ref-line = '155';
        func-mem-ref-name = 'WFE_WFE';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga2d22b9286eefbf1e1b73ed50ce443183';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__EBREAK';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '744';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Breakpoint Instruction.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Causes the processor to enter Debug state.
Debug tools can use this to investigate system state
when the instruction at a particular address is reached.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga639ad274fdb079a1219006725d772c6c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECALL';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '755';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Environment Call Instruction.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
The ECALL instruction is used to make a service request to
the execution environment.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga1a1db7d1454df1cf7b1214d18349cac1';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__set_wfi_sleepmode';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
WFI_SleepMode_Type
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'mode';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '775';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set Sleep mode of WFI.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Set the SLEEPVALUE CSR register to control the
WFI Sleep mode.
\param[in] mode      The sleep mode to be set
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '496';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga7ee7f2cce602b8b3e2943bc2d0ca65cb';
        func-mem-ref-line = '637';
        func-mem-ref-name = 'CSR_SLEEPVALUE';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1gaa60612c5e378681f32e815743823ba15';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__TXEVT';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '786';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Send TX Event.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Set the CSR TXEVT to control send a TX Event.
The Core will output signal tx_evt as output event signal.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gafdbd9b5a14b44913675d0fa73ca6716f';
        func-mem-ref-line = '533';
        func-mem-ref-name = '__RV_CSR_SET';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga730f164e5d79c6b27d2187a1e7a17e25';
        func-mem-ref-line = '638';
        func-mem-ref-name = 'CSR_TXEVT';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1gadba90c4a57befeb5e4f739295af55e73';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__enable_mcycle_counter';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '796';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Enable MCYCLE counter.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Clear the CY bit of MCOUNTINHIBIT to 0 to enable MCYCLE Counter
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga14cf0513f6b576fcd1ff700b08f65543';
        func-mem-ref-line = '570';
        func-mem-ref-name = '__RV_CSR_CLEAR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga9643607a23d4bc6a50a562d0a1f5a8f3';
        func-mem-ref-line = '605';
        func-mem-ref-name = 'CSR_MCOUNTINHIBIT';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga675e4d52a85bafc0a1663cf2f431583a';
        func-mem-ref-line = '160';
        func-mem-ref-name = 'MCOUNTINHIBIT_CY';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1gaf9ada8a615338120fa38a6e193fd7517';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__disable_mcycle_counter';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '806';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Disable MCYCLE counter.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Set the CY bit of MCOUNTINHIBIT to 1 to disable MCYCLE Counter
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gafdbd9b5a14b44913675d0fa73ca6716f';
        func-mem-ref-line = '533';
        func-mem-ref-name = '__RV_CSR_SET';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga9643607a23d4bc6a50a562d0a1f5a8f3';
        func-mem-ref-line = '605';
        func-mem-ref-name = 'CSR_MCOUNTINHIBIT';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga675e4d52a85bafc0a1663cf2f431583a';
        func-mem-ref-line = '160';
        func-mem-ref-name = 'MCOUNTINHIBIT_CY';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1gae7bb45974eee5b66ea6332ba0ccf23d5';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__enable_minstret_counter';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '816';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Enable MINSTRET counter.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Clear the IR bit of MCOUNTINHIBIT to 0 to enable MINSTRET Counter
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga14cf0513f6b576fcd1ff700b08f65543';
        func-mem-ref-line = '570';
        func-mem-ref-name = '__RV_CSR_CLEAR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga9643607a23d4bc6a50a562d0a1f5a8f3';
        func-mem-ref-line = '605';
        func-mem-ref-name = 'CSR_MCOUNTINHIBIT';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gae8693a1f795a0f752391c609ce011cbf';
        func-mem-ref-line = '159';
        func-mem-ref-name = 'MCOUNTINHIBIT_IR';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1gae1cb8d99e36d784e9071fec80e1f02fe';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__disable_minstret_counter';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '826';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Disable MINSTRET counter.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Set the IR bit of MCOUNTINHIBIT to 1 to disable MINSTRET Counter
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gafdbd9b5a14b44913675d0fa73ca6716f';
        func-mem-ref-line = '533';
        func-mem-ref-name = '__RV_CSR_SET';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga9643607a23d4bc6a50a562d0a1f5a8f3';
        func-mem-ref-line = '605';
        func-mem-ref-name = 'CSR_MCOUNTINHIBIT';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gae8693a1f795a0f752391c609ce011cbf';
        func-mem-ref-line = '159';
        func-mem-ref-name = 'MCOUNTINHIBIT_IR';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga1b25cc01665431cd509fd3c1be93a811';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__enable_all_counter';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '836';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Enable MCYCLE & MINSTRET counter.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Clear the IR and CY bit of MCOUNTINHIBIT to 1 to enable MINSTRET & MCYCLE Counter
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga14cf0513f6b576fcd1ff700b08f65543';
        func-mem-ref-line = '570';
        func-mem-ref-name = '__RV_CSR_CLEAR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga9643607a23d4bc6a50a562d0a1f5a8f3';
        func-mem-ref-line = '605';
        func-mem-ref-name = 'CSR_MCOUNTINHIBIT';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga675e4d52a85bafc0a1663cf2f431583a';
        func-mem-ref-line = '160';
        func-mem-ref-name = 'MCOUNTINHIBIT_CY';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gae8693a1f795a0f752391c609ce011cbf';
        func-mem-ref-line = '159';
        func-mem-ref-name = 'MCOUNTINHIBIT_IR';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga16f715797bba0ac2ed2e1820c63443cd';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__disable_all_counter';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '846';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Disable MCYCLE & MINSTRET counter.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Set the IR and CY bit of MCOUNTINHIBIT to 1 to disable MINSTRET & MCYCLE Counter
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gafdbd9b5a14b44913675d0fa73ca6716f';
        func-mem-ref-line = '533';
        func-mem-ref-name = '__RV_CSR_SET';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga9643607a23d4bc6a50a562d0a1f5a8f3';
        func-mem-ref-line = '605';
        func-mem-ref-name = 'CSR_MCOUNTINHIBIT';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga675e4d52a85bafc0a1663cf2f431583a';
        func-mem-ref-line = '160';
        func-mem-ref-name = 'MCOUNTINHIBIT_CY';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gae8693a1f795a0f752391c609ce011cbf';
        func-mem-ref-line = '159';
        func-mem-ref-name = 'MCOUNTINHIBIT_IR';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga5b4c34e720fb0c9e939540333dd640e6';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__FENCE_I';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '869';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Fence.i Instruction.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
The FENCE.I instruction is used to synchronize the instruction
and data streams.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
      func-mem-referenceby = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga2e80049df57b285d4dd43454377c0845';
        func-mem-ref-line = '710';
        func-mem-ref-name = '__ECLIC_SetVector';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga7f225699061594cd9a4d905a39cb9ae8';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint8_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__LB';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
volatile void *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '903';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Load 8bit value from address (8 bit)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Load 8 bit value.
\param [in]    addr  Address pointer to data
\return              value of type uint8_t at (*addr)
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga08a0019225f8ecc2e0a5bdcefa77ec6f';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint16_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__LH';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
volatile void *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '917';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Load 16bit value from address (16 bit)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Load 16 bit value.
\param [in]    addr  Address pointer to data
\return              value of type uint16_t at (*addr)
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1gaf898279e3db81302391a698214744865';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__LW';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
volatile void *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '931';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Load 32bit value from address (32 bit)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Load 32 bit value.
\param [in]    addr  Address pointer to data
\return              value of type uint32_t at (*addr)
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1gab904513442afdf77d4f8c74f23cbb040';
        func-mem-ref-line = '70';
        func-mem-ref-name = '__STATIC_FORCEINLINE';
    };
      func-mem-referenceby = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga515d63f4e4581430fb0bf6e864e5bca9';
        func-mem-ref-line = '206';
        func-mem-ref-name = 'SysTimer_GetCompareValue';
    };
      func-mem-referenceby = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga5b454e48769abd7a88c2cc65fe53ac7a';
        func-mem-ref-line = '139';
        func-mem-ref-name = 'SysTimer_GetLoadValue';
    };
      func-mem-referenceby = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga0431e3f4a44ca2265884c19096912729';
        func-mem-ref-line = '333';
        func-mem-ref-name = 'SysTimer_GetMsipValue';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga85ee6d049f3b807b7c5f37513f6b95bd';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__SB';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
volatile void *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'val';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '961';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Write 8bit value to address (8 bit)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Write 8 bit value.
\param [in]    addr  Address pointer to data
\param [in]    val   Value to set
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga10e81b063600f3abb562f7a6efa3aaca';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__SH';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
volatile void *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint16_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'val';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '972';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Write 16bit value to address (16 bit)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Write 16 bit value.
\param [in]    addr  Address pointer to data
\param [in]    val   Value to set
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga9df58a7326fee34b546cae7d7d6e6de3';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__SW';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
volatile void *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'val';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '983';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Write 32bit value to address (32 bit)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Write 32 bit value.
\param [in]    addr  Address pointer to data
\param [in]    val   Value to set
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1gab904513442afdf77d4f8c74f23cbb040';
        func-mem-ref-line = '70';
        func-mem-ref-name = '__STATIC_FORCEINLINE';
    };
      func-mem-referenceby = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga75378560287340bb6630fe31062a0dc9';
        func-mem-ref-line = '395';
        func-mem-ref-name = 'SysTimer_ClearIPI';
    };
      func-mem-referenceby = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga57b4f64ed87262daf831573e704b12c8';
        func-mem-ref-line = '311';
        func-mem-ref-name = 'SysTimer_ClearSWIRQ';
    };
      func-mem-referenceby = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga6006f9ce9bd7e86b5ab503ffa85d2126';
        func-mem-ref-line = '383';
        func-mem-ref-name = 'SysTimer_SendIPI';
    };
      func-mem-referenceby = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga52e85918789aa95fc4cd0d7238ca9b6c';
        func-mem-ref-line = '172';
        func-mem-ref-name = 'SysTimer_SetCompareValue';
    };
      func-mem-referenceby = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga08c74ffae27d46218ae11321ff5e1673';
        func-mem-ref-line = '117';
        func-mem-ref-name = 'SysTimer_SetLoadValue';
    };
      func-mem-referenceby = {
        func-mem-ref-id = 'core__feature__timer_8h_1gaa7f8e6c1423f582f958e151ce692395c';
        func-mem-ref-line = '350';
        func-mem-ref-name = 'SysTimer_SetMsipValue';
    };
      func-mem-referenceby = {
        func-mem-ref-id = 'core__feature__timer_8h_1gaa4d13cddf35ef77fd3b3b59e82eb1d47';
        func-mem-ref-line = '291';
        func-mem-ref-name = 'SysTimer_SetSWIRQ';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga8dab656e3251b574311b852efa785109';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__CAS_W';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
volatile uint32_t *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'oldval';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'newval';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '1012';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Compare and Swap 32bit value using LR and SC.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Compare old value with memory, if identical,
store new value in memory. Return the initial value in memory.
Success is indicated by comparing return value with OLD.
memory address, return 0 if successful, otherwise return !0
\param [in]    addr      Address pointer to data, address need to be 4byte aligned
\param [in]    oldval    Old value of the data in address
\param [in]    newval    New value to be stored into the address
\return  return the initial value in memory
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga68f1ebfff49ba330ac04996d3e2b9df8';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__AMOSWAP_W';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
volatile uint32_t *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'newval';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '1036';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Atomic Swap 32bit value into memory.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Atomically swap new 32bit value into memory using amoswap.d.
\param [in]    addr      Address pointer to data, address need to be 4byte aligned
\param [in]    newval    New value to be stored into the address
\return  return the original value in memory
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1gac12ad95ec020f1c2c83c46231468a40e';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE int32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__AMOADD_W';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
volatile int32_t *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'value';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '1052';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Atomic Add with 32bit value.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Atomically ADD 32bit value with value in memory using amoadd.d.
\param [in]    addr   Address pointer to data, address need to be 4byte aligned
\param [in]    value  value to be ADDed
\return  return memory value + add value
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga927482a006985e82d90512f19ea68f67';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE int32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__AMOAND_W';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
volatile int32_t *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'value';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '1068';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Atomic And with 32bit value.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Atomically AND 32bit value with value in memory using amoand.d.
\param [in]    addr   Address pointer to data, address need to be 4byte aligned
\param [in]    value  value to be ANDed
\return  return memory value & and value
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1gaa6f71a398756f05bbc1ef4b4a548174f';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE int32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__AMOOR_W';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
volatile int32_t *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'value';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '1084';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Atomic OR with 32bit value.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Atomically OR 32bit value with value in memory using amoor.d.
\param [in]    addr   Address pointer to data, address need to be 4byte aligned
\param [in]    value  value to be ORed
\return  return memory value | and value
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga69a2e79b90f42d82c236fae1aced5c73';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE int32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__AMOXOR_W';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
volatile int32_t *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'value';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '1100';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Atomic XOR with 32bit value.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Atomically XOR 32bit value with value in memory using amoxor.d.
\param [in]    addr   Address pointer to data, address need to be 4byte aligned
\param [in]    value  value to be XORed
\return  return memory value ^ and value
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga75a6dc5418991df25ef66de5e16dbd46';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__AMOMAXU_W';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
volatile uint32_t *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'value';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '1116';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Atomic unsigned MAX with 32bit value.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Atomically unsigned max compare 32bit value with value in memory using amomaxu.d.
\param [in]    addr   Address pointer to data, address need to be 4byte aligned
\param [in]    value  value to be compared
\return  return the bigger value
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga13034a453b85372f85974b178bd3ee6f';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE int32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__AMOMAX_W';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
volatile int32_t *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'value';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '1132';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Atomic signed MAX with 32bit value.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Atomically signed max compare 32bit value with value in memory using amomax.d.
\param [in]    addr   Address pointer to data, address need to be 4byte aligned
\param [in]    value  value to be compared
\return the bigger value
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1ga75515ac6719d3abca5030cb4fd2f4c2a';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__AMOMINU_W';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
volatile uint32_t *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'value';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '1148';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Atomic unsigned MIN with 32bit value.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Atomically unsigned min compare 32bit value with value in memory using amominu.d.
\param [in]    addr   Address pointer to data, address need to be 4byte aligned
\param [in]    value  value to be compared
\return the smaller value
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__CPU__Intrinsic_1gadd554cdf00f5417208433154e9c9228e';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE int32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__AMOMIN_W';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
volatile int32_t *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'value';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
      func-mem-desc-line = '1164';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Atomic signed MIN with 32bit value.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Atomically signed min compare 32bit value with value in memory using amomin.d.
\param [in]    addr   Address pointer to data, address need to be 4byte aligned
\param [in]    value  value to be compared
\return  the smaller value
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1gab904513442afdf77d4f8c74f23cbb040';
        func-mem-ref-line = '70';
        func-mem-ref-name = '__STATIC_FORCEINLINE';
    };
    }; /* func-member */
    };
  file-full-name  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_base.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
Base core feature API for Nuclei N/NX Core.
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_



_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'core__feature__cache_8h';
  file-name = 'core_feature_cache.h';
    func = {
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__ICache_1ga76dfd7aff65a6a7fa91b53dbe44f9ce5';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'EnableICache';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '176';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Enable ICache.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function enable I-Cache
\remarks
- This function can be called in M-Mode only.
- This \ref CSR_MCACHE_CTL register control I Cache enable.
\sa
- \ref DisableICache
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gafdbd9b5a14b44913675d0fa73ca6716f';
        func-mem-ref-line = '533';
        func-mem-ref-name = '__RV_CSR_SET';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga6e79ed96b3346ea75923126b7c4d9d67';
        func-mem-ref-line = '612';
        func-mem-ref-name = 'CSR_MCACHE_CTL';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga838be4fb6cc0796dfdab1d492c992e91';
        func-mem-ref-line = '71';
        func-mem-ref-name = 'CSR_MCACHE_CTL_IE';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__ICache_1ga4a855b01222d0c42d413f168651616e5';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'DisableICache';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '191';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Disable ICache.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function Disable I-Cache
\remarks
- This function can be called in M-Mode only.
- This \ref CSR_MCACHE_CTL register control I Cache enable.
\sa
- \ref EnableICache
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga14cf0513f6b576fcd1ff700b08f65543';
        func-mem-ref-line = '570';
        func-mem-ref-name = '__RV_CSR_CLEAR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '478';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '496';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1gab904513442afdf77d4f8c74f23cbb040';
        func-mem-ref-line = '70';
        func-mem-ref-name = '__STATIC_FORCEINLINE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga4faa0c15728837765ec9aaf28f14c09b';
        func-mem-ref-line = '651';
        func-mem-ref-name = 'CSR_CCM_MBEGINADDR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga09b6c06fdc71424566c30bad5470c0c1';
        func-mem-ref-line = '652';
        func-mem-ref-name = 'CSR_CCM_MCOMMAND';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga68f7537cd8e79434b1a191053d09d5f7';
        func-mem-ref-line = '653';
        func-mem-ref-name = 'CSR_CCM_MDATA';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gab508f4dfbd649a25f7eaa8ac5b88a8c0';
        func-mem-ref-line = '655';
        func-mem-ref-name = 'CSR_CCM_SBEGINADDR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga19b9cf123424b131c5ba30946c54c2fd';
        func-mem-ref-line = '656';
        func-mem-ref-name = 'CSR_CCM_SCOMMAND';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga58c7d8ca64fe96544d85e57f4b6a3bca';
        func-mem-ref-line = '657';
        func-mem-ref-name = 'CSR_CCM_SDATA';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaca251c4a3f81dd257831ac6407088e52';
        func-mem-ref-line = '658';
        func-mem-ref-name = 'CSR_CCM_UBEGINADDR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga53c64245d173eed1d1622cfac509ff60';
        func-mem-ref-line = '659';
        func-mem-ref-name = 'CSR_CCM_UCOMMAND';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gad18936febc391b50b6ba078eb605758e';
        func-mem-ref-line = '660';
        func-mem-ref-name = 'CSR_CCM_UDATA';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga6e79ed96b3346ea75923126b7c4d9d67';
        func-mem-ref-line = '612';
        func-mem-ref-name = 'CSR_MCACHE_CTL';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga838be4fb6cc0796dfdab1d492c992e91';
        func-mem-ref-line = '71';
        func-mem-ref-name = 'CSR_MCACHE_CTL_IE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga3401036463f597de22658714115bed5b';
        func-mem-ref-line = '645';
        func-mem-ref-name = 'CSR_MICFG_INFO';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1aa4534ca8d572c6ad46ab5d36fcf4ef8b';
        func-mem-ref-line = '351';
        func-mem-ref-name = 'CSR_MICFGINFO_Type::lsize';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1a2071a4d9337c8db3b55419e531c0f095';
        func-mem-ref-line = '349';
        func-mem-ref-name = 'CSR_MICFGINFO_Type::set';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1aff94588787995de0fdbf41a2cee027a7';
        func-mem-ref-line = '350';
        func-mem-ref-name = 'CSR_MICFGINFO_Type::way';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DCache_1gaf90783ed69b3589cde6fe7dbabeb17c0';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'EnableDCache';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '640';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Enable DCache.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function enable D-Cache
\remarks
- This function can be called in M-Mode only.
- This \ref CSR_MCACHE_CTL register control D Cache enable.
\sa
- \ref DisableDCache
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gafdbd9b5a14b44913675d0fa73ca6716f';
        func-mem-ref-line = '533';
        func-mem-ref-name = '__RV_CSR_SET';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga6e79ed96b3346ea75923126b7c4d9d67';
        func-mem-ref-line = '612';
        func-mem-ref-name = 'CSR_MCACHE_CTL';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaabaff1feb67c2351eb71e1b1c97565bf';
        func-mem-ref-line = '72';
        func-mem-ref-name = 'CSR_MCACHE_CTL_DE';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DCache_1gab30be00d8a0583adac5d786149db433f';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'DisableDCache';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
      func-mem-desc-line = '655';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Disable DCache.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function Disable D-Cache
\remarks
- This function can be called in M-Mode only.
- This \ref CSR_MCACHE_CTL register control D Cache enable.
\sa
- \ref EnableDCache
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga14cf0513f6b576fcd1ff700b08f65543';
        func-mem-ref-line = '570';
        func-mem-ref-name = '__RV_CSR_CLEAR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '478';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '496';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1gab904513442afdf77d4f8c74f23cbb040';
        func-mem-ref-line = '70';
        func-mem-ref-name = '__STATIC_FORCEINLINE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga4faa0c15728837765ec9aaf28f14c09b';
        func-mem-ref-line = '651';
        func-mem-ref-name = 'CSR_CCM_MBEGINADDR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga09b6c06fdc71424566c30bad5470c0c1';
        func-mem-ref-line = '652';
        func-mem-ref-name = 'CSR_CCM_MCOMMAND';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga68f7537cd8e79434b1a191053d09d5f7';
        func-mem-ref-line = '653';
        func-mem-ref-name = 'CSR_CCM_MDATA';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gab508f4dfbd649a25f7eaa8ac5b88a8c0';
        func-mem-ref-line = '655';
        func-mem-ref-name = 'CSR_CCM_SBEGINADDR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga19b9cf123424b131c5ba30946c54c2fd';
        func-mem-ref-line = '656';
        func-mem-ref-name = 'CSR_CCM_SCOMMAND';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga58c7d8ca64fe96544d85e57f4b6a3bca';
        func-mem-ref-line = '657';
        func-mem-ref-name = 'CSR_CCM_SDATA';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaca251c4a3f81dd257831ac6407088e52';
        func-mem-ref-line = '658';
        func-mem-ref-name = 'CSR_CCM_UBEGINADDR';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga53c64245d173eed1d1622cfac509ff60';
        func-mem-ref-line = '659';
        func-mem-ref-name = 'CSR_CCM_UCOMMAND';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gad18936febc391b50b6ba078eb605758e';
        func-mem-ref-line = '660';
        func-mem-ref-name = 'CSR_CCM_UDATA';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga6e79ed96b3346ea75923126b7c4d9d67';
        func-mem-ref-line = '612';
        func-mem-ref-name = 'CSR_MCACHE_CTL';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gaabaff1feb67c2351eb71e1b1c97565bf';
        func-mem-ref-line = '72';
        func-mem-ref-name = 'CSR_MCACHE_CTL_DE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gacb31b31285f7ea1d527a19f4388b01bd';
        func-mem-ref-line = '646';
        func-mem-ref-name = 'CSR_MDCFG_INFO';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ab3ce74a5f243a63facff399be7643d89';
        func-mem-ref-line = '369';
        func-mem-ref-name = 'CSR_MDCFGINFO_Type::lsize';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1a023b173b517068119914ee656fc7a95b';
        func-mem-ref-line = '367';
        func-mem-ref-name = 'CSR_MDCFGINFO_Type::set';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1af9523adb1cddd68b9ebcf3684c676373';
        func-mem-ref-line = '368';
        func-mem-ref-name = 'CSR_MDCFGINFO_Type::way';
    };
    }; /* func-member */
    };
  file-full-name  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_cache.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
Cache feature API header file for Nuclei N/NX Core.
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_



_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'core__feature__dsp_8h';
  file-name = 'core_feature_dsp.h';
    define = {
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1gaf9a4bbbb2d5e33735a6a2f67ca30d1a9';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_BITREVI';
      define-mem-param  = {
        define-mem-def-name = 'a';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'b';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
({    \
        register unsigned long result;    \
        register unsigned long __a = (unsigned long)(a);    \
        __ASM volatile("bitrevi %0, %1, %2" : "=r"(result) : "r"(__a), "K"(b));    \
        result;    \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '663';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
BITREVI (Bit Reverse Immediate)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
(RV32) BITREVI Rd, Rs1, imm[4:0]
(RV64) BITREVI Rd, Rs1, imm[5:0]
@endcode

<strong>Purpose</strong>:\n
Reverse the bit positions of the source operand within a specified width starting from bit
0. The reversed width is an immediate value.

<strong>Description</strong>:\n
This instruction reverses the bit positions of the content of Rs1. The reversed bit width
is calculated as imm[4:0]+1 (RV32) or imm[5:0]+1 (RV64). The upper bits beyond the reversed width
are filled with zeros. After the bit reverse operation, the result is written to Rd.

<strong>Operations</strong>:\n
@code
msb = imm[4:0]; (RV32)
msb = imm[5:0]; (RV64)
rev[0:msb] = Rs1[msb:0];
Rd = ZE(rev[msb:0]);
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1ga04b2b789ef54ed37c3cd2371bf4748b8';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_INSB';
      define-mem-param  = {
        define-mem-def-name = 't';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'a';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'b';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
({    \
        register unsigned long __t = (unsigned long)(t);    \
        register unsigned long __a = (unsigned long)(a);    \
        __ASM volatile("insb %0, %1, %2" : "+r"(__t) : "r"(__a), "K"(b));    \
        __t;    \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '1366';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
INSB (Insert Byte)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
(RV32) INSB Rd, Rs1, imm[1:0]
(RV64) INSB Rd, Rs1, imm[2:0]
@endcode

<strong>Purpose</strong>:\n
Insert byte 0 of a 32-bit or 64-bit register into one of the byte elements of another register.

<strong>Description</strong>:\n
This instruction inserts byte 0 of Rs1 into byte <tt>imm[1:0]</tt> (RV32) or <tt>imm[2:0]</tt> (RV64)
of Rd.

<strong>Operations</strong>:\n
@code
bpos = imm[1:0]; (RV32)
bpos = imm[2:0]; (RV64)
Rd.B[bpos] = Rs1.B[0]
@endcode

\param [in]  t    unsigned long type of value stored in t
\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1gabe1e56e815426d757f416698bcae2529';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_KSLLIW';
      define-mem-param  = {
        define-mem-def-name = 'a';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'b';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
({    \
        register long result;    \
        register long __a = (long)(a);    \
        __ASM volatile("kslliw %0, %1, %2" : "=r"(result) : "r"(__a), "K"(b));    \
        result;    \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '4615';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KSLLIW (Saturating Shift Left Logical Immediate for Word)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
KSLLIW Rd, Rs1, imm5u
@endcode

<strong>Purpose</strong>:\n
Do logical left shift operation with saturation on a 32-bit word. The shift amount is an
immediate value.

<strong>Description</strong>:\n
The first word data in Rs1 is left-shifted logically. The shifted out bits are filled with
zero and the shift amount is specified by the imm5u constant. Any shifted value greater than 2^31-1 is
saturated to 2^31-1. Any shifted value smaller than -2^31 is saturated to -2^31. And the saturated result is
sign-extended and written to Rd. If any saturation is performed, set OV bit to 1.

<strong>Operations</strong>:\n
@code
sa = imm5u;
res[(31+sa):0] = Rs1.W[0] << sa;
if (res > (2^31)-1) {
  res = 0x7fffffff; OV = 1;
} else if (res < -2^31) {
  res = 0x80000000; OV = 1;
}
Rd[31:0] = res[31:0]; // RV32
Rd[63:0] = SE(res[31:0]); // RV64
@endcode

\param [in]  a    long type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1ga125ad99cdcdbccde3d925ddd16cc5e26';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_KSLLI8';
      define-mem-param  = {
        define-mem-def-name = 'a';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'b';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
({    \
        register unsigned long result;    \
        register unsigned long __a = (unsigned long)(a);    \
        __ASM volatile("kslli8 %0, %1, %2" : "=r"(result) : "r"(__a), "K"(b));    \
        result;    \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '4721';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KSLLI8 (SIMD 8-bit Saturating Shift Left Logical Immediate)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
KSLLI8 Rd, Rs1, imm3u
@endcode

<strong>Purpose</strong>:\n
Do 8-bit elements logical left shift operations with saturation simultaneously. The shift
amount is an immediate value.

<strong>Description</strong>:\n
The 8-bit data elements in Rs1 are left-shifted logically. The shifted out bits are filled
with zero and the shift amount is specified by the imm3u constant. Any shifted value greater than
2^7-1 is saturated to 2^7-1. Any shifted value smaller than -2^7 is saturated to -2^7. And the saturated
results are written to Rd. If any saturation is performed, set OV bit to 1.

<strong>Operations</strong>:\n
@code
sa = imm3u[2:0];
if (sa != 0) {
  res[(7+sa):0] = Rs1.B[x] << sa;
  if (res > (2^7)-1) {
    res = 0x7f; OV = 1;
  } else if (res < -2^7) {
    res = 0x80; OV = 1;
  }
  Rd.B[x] = res[7:0];
} else {
  Rd = Rs1;
}
for RV32: x=3...0,
for RV64: x=7...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1ga6926818b4df53eed570be8d922ca19ca';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_KSLLI16';
      define-mem-param  = {
        define-mem-def-name = 'a';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'b';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
({    \
        register unsigned long result;    \
        register unsigned long __a = (unsigned long)(a);    \
        __ASM volatile("kslli16 %0, %1, %2" : "=r"(result) : "r"(__a), "K"(b));    \
        result;    \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '4827';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KSLLI16 (SIMD 16-bit Saturating Shift Left Logical Immediate)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
KSLLI16 Rd, Rs1, imm4u
@endcode

<strong>Purpose</strong>:\n
Do 16-bit elements logical left shift operations with saturation simultaneously. The shift
amount is an immediate value.

<strong>Description</strong>:\n
The 16-bit data elements in Rs1 are left-shifted logically. The shifted out bits are filled
with zero and the shift amount is specified by the imm4u constant. Any shifted value greater than
2^15-1 is saturated to 2^15-1. Any shifted value smaller than -2^15 is saturated to -2^15. And the saturated
results are written to Rd. If any saturation is performed, set OV bit to 1.

<strong>Operations</strong>:\n
@code
sa = imm4u[3:0];
if (sa != 0) {
  res[(15+sa):0] = Rs1.H[x] << sa;
  if (res > (2^15)-1) {
    res = 0x7fff; OV = 1;
  } else if (res < -2^15) {
    res = 0x8000; OV = 1;
  }
  Rd.H[x] = res[15:0];
} else {
  Rd = Rs1;
}
for RV32: x=1...0,
for RV64: x=3...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MISC_1gad9df33bdac33b54851414ded1a8ae0b9';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_SCLIP8';
      define-mem-param  = {
        define-mem-def-name = 'a';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'b';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
({    \
        register unsigned long result;    \
        register unsigned long __a = (unsigned long)(a);    \
        __ASM volatile("sclip8 %0, %1, %2" : "=r"(result) : "r"(__a), "K"(b));    \
        result;    \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '6914';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SCLIP8 (SIMD 8-bit Signed Clip Value)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
SCLIP8 Rd, Rs1, imm3u[2:0]
@endcode

<strong>Purpose</strong>:\n
Limit the 8-bit signed integer elements of a register into a signed range simultaneously.

<strong>Description</strong>:\n
This instruction limits the 8-bit signed integer elements stored in Rs1 into a signed
integer range between 2^imm3u-1 and -2^imm3u, and writes the limited results to Rd. For example, if
imm3u is 3, the 8-bit input values should be saturated between 7 and -8. If saturation is performed,
set OV bit to 1.

<strong>Operations</strong>:\n
@code
src = Rs1.B[x];
if (src > (2^imm3u)-1) {
  src = (2^imm3u)-1;
  OV = 1;
} else if (src < -2^imm3u) {
  src = -2^imm3u;
  OV = 1;
}
Rd.B[x] = src
for RV32: x=3...0,
for RV64: x=7...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MISC_1gad4f98e8ffe4b82cbedafd4dc8348f863';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_SCLIP16';
      define-mem-param  = {
        define-mem-def-name = 'a';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'b';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
({    \
        register unsigned long result;    \
        register unsigned long __a = (unsigned long)(a);    \
        __ASM volatile("sclip16 %0, %1, %2" : "=r"(result) : "r"(__a), "K"(b));    \
        result;    \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '6963';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SCLIP16 (SIMD 16-bit Signed Clip Value)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
SCLIP16 Rd, Rs1, imm4u[3:0]
@endcode

<strong>Purpose</strong>:\n
Limit the 16-bit signed integer elements of a register into a signed range simultaneously.

<strong>Description</strong>:\n
This instruction limits the 16-bit signed integer elements stored in Rs1 into a signed
integer range between 2imm4u-1 and -2imm4u, and writes the limited results to Rd. For example, if
imm4u is 3, the 16-bit input values should be saturated between 7 and -8. If saturation is performed,
set OV bit to 1.

<strong>Operations</strong>:\n
@code
src = Rs1.H[x];
if (src > (2^imm4u)-1) {
  src = (2^imm4u)-1;
  OV = 1;
} else if (src < -2^imm4u) {
  src = -2^imm4u;
  OV = 1;
}
Rd.H[x] = src
for RV32: x=1...0,
for RV64: x=3...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__PART__SIMD__MISC_1gaee72cc6a242182cd7e59c3185522d56e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_SCLIP32';
      define-mem-param  = {
        define-mem-def-name = 'a';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'b';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
({    \
        register long result;    \
        register long __a = (long)(a);    \
        __ASM volatile("sclip32 %0, %1, %2" : "=r"(result) : "r"(__a), "K"(b));    \
        result;    \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '7012';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SCLIP32 (SIMD 32-bit Signed Clip Value)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
SCLIP32 Rd, Rs1, imm5u[4:0]
@endcode

<strong>Purpose</strong>:\n
Limit the 32-bit signed integer elements of a register into a signed range simultaneously.

<strong>Description</strong>:\n
This instruction limits the 32-bit signed integer elements stored in Rs1 into a signed
integer range between 2imm5u-1 and -2imm5u, and writes the limited results to Rd. For example, if
imm5u is 3, the 32-bit input values should be saturated between 7 and -8. If saturation is performed,
set OV bit to 1.

<strong>Operations</strong>:\n
@code
src = Rs1.W[x];
if (src > (2^imm5u)-1) {
  src = (2^imm5u)-1;
  OV = 1;
} else if (src < -2^imm5u) {
  src = -2^imm5u;
  OV = 1;
}
Rd.W[x] = src
for RV32: x=0,
for RV64: x=1...0
@endcode

\param [in]  a    long type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1gac4bafa8253fac342466573fccee06cb3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_SLLI8';
      define-mem-param  = {
        define-mem-def-name = 'a';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'b';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
({    \
        register unsigned long result;    \
        register unsigned long __a = (unsigned long)(a);    \
        __ASM volatile("slli8 %0, %1, %2" : "=r"(result) : "r"(__a), "K"(b));    \
        result;    \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '7252';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SLLI8 (SIMD 8-bit Shift Left Logical Immediate)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
SLLI8 Rd, Rs1, imm3u
@endcode

<strong>Purpose</strong>:\n
Do 8-bit elements logical left shift operations simultaneously. The shift amount is an
immediate value.

<strong>Description</strong>:\n
The 8-bit elements in Rs1 are left-shifted logically. And the results are written to Rd.
The shifted out bits are filled with zero and the shift amount is specified by the imm3u constant.

<strong>Operations</strong>:\n
@code
sa = imm3u[2:0];
Rd.B[x] = Rs1.B[x] << sa;
for RV32: x=3...0,
for RV64: x=7...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1gae64e8d3cc171a464a716e317cd0eca66';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_SLLI16';
      define-mem-param  = {
        define-mem-def-name = 'a';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'b';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
({    \
        register unsigned long result;    \
        register unsigned long __a = (unsigned long)(a);    \
        __ASM volatile("slli16 %0, %1, %2" : "=r"(result) : "r"(__a), "K"(b));    \
        result;    \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '7334';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SLLI16 (SIMD 16-bit Shift Left Logical Immediate)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
SLLI16 Rd, Rs1, imm4[3:0]
@endcode

<strong>Purpose</strong>:\n
Do 16-bit element logical left shift operations simultaneously. The shift amount is an
immediate value.

<strong>Description</strong>:\n
The 16-bit elements in Rs1 are left-shifted logically. The shifted out bits are filled with
zero and the shift amount is specified by the imm4[3:0] constant. And the results are written to Rd.

<strong>Operations</strong>:\n
@code
sa = imm4[3:0];
Rd.H[x] = Rs1.H[x] << sa;
for RV32: x=1...0,
for RV64: x=3...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1ga0d2571dc1e7889b45c9a7305dce2a59f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_SRAI_U';
      define-mem-param  = {
        define-mem-def-name = 'a';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'b';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
({    \
        register long result;    \
        register long __a = (long)(a);    \
        __ASM volatile("srai.u %0, %1, %2" : "=r"(result) : "r"(__a), "K"(b));    \
        result;    \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '9676';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SRAI.u (Rounding Shift Right Arithmetic Immediate)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
SRAI.u Rd, Rs1, imm6u[4:0] (RV32)
SRAI.u Rd, Rs1, imm6u[5:0] (RV64)
@endcode

<strong>Purpose</strong>:\n
Perform an arithmetic right shift operation with rounding. The shift amount is an
immediate value.

<strong>Description</strong>:\n
This instruction right-shifts the content of Rs1 arithmetically. The shifted out bits are
filled with the sign-bit and the shift amount is specified by the imm6u[4:0] (RV32) or imm6u[5:0]
(RV64) constant . For the rounding operation, a value of 1 is added to the most significant discarded
bit of the data to calculate the final result. And the result is written to Rd.

<strong>Operations</strong>:\n
@code
* RV32:
sa = imm6u[4:0];
if (sa > 0) {
  res[31:-1] = SE33(Rs1[31:(sa-1)]) + 1;
  Rd = res[31:0];
} else {
  Rd = Rs1;
}
* RV64:
sa = imm6u[5:0];
if (sa > 0) {
  res[63:-1] = SE65(Rs1[63:(sa-1)]) + 1;
  Rd = res[63:0];
} else {
  Rd = Rs1;
}
@endcode

\param [in]  a    long type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1gafa0713c67f97b5e98f9c86c48b8d2ba6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_SRAI8';
      define-mem-param  = {
        define-mem-def-name = 'a';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'b';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
({    \
        register unsigned long result;    \
        register unsigned long __a = (unsigned long)(a);    \
        __ASM volatile("srai8 %0, %1, %2" : "=r"(result) : "r"(__a), "K"(b));    \
        result;    \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '9838';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SRAI8 (SIMD 8-bit Shift Right Arithmetic Immediate)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
SRAI8 Rd, Rs1, imm3u
SRAI8.u Rd, Rs1, imm3u
@endcode

<strong>Purpose</strong>:\n
Do 8-bit element arithmetic right shift operations simultaneously. The shift amount is an
immediate value. The <tt>.u</tt> form performs additional rounding up operations on the shifted results.

<strong>Description</strong>:\n
The 8-bit data elements in Rs1 are right-shifted arithmetically, that is, the shifted out
bits are filled with the sign-bit of the data elements. The shift amount is specified by the imm3u
constant. For the rounding operation of the <tt>.u</tt> form, a value of 1 is added to the most significant
discarded bit of each 8-bit data element to calculate the final results. And the results are written to
Rd.

<strong>Operations</strong>:\n
@code
sa = imm3u[2:0];
if (sa > 0) {
  if (`.u` form) { // SRA8.u
    res[7:-1] = SE9(Rs1.B[x][7:sa-1]) + 1;
    Rd.B[x] = res[7:0];
  } else { // SRA8
    Rd.B[x] = SE8(Rd.B[x][7:sa])
  }
} else {
  Rd = Rs1;
}
for RV32: x=3...0,
for RV64: x=7...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1gae6dc67a0e44c3f32100d532b1a2a4386';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_SRAI8_U';
      define-mem-param  = {
        define-mem-def-name = 'a';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'b';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
({    \
        register unsigned long result;    \
        register unsigned long __a = (unsigned long)(a);    \
        __ASM volatile("srai8.u %0, %1, %2" : "=r"(result) : "r"(__a), "K"(b));    \
        result;    \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '9892';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SRAI8.u (SIMD 8-bit Rounding Shift Right Arithmetic Immediate)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
SRAI8 Rd, Rs1, imm3u
SRAI8.u Rd, Rs1, imm3u
@endcode

<strong>Purpose</strong>:\n
Do 8-bit element arithmetic right shift operations simultaneously. The shift amount is an
immediate value. The <tt>.u</tt> form performs additional rounding up operations on the shifted results.

<strong>Description</strong>:\n
The 8-bit data elements in Rs1 are right-shifted arithmetically, that is, the shifted out
bits are filled with the sign-bit of the data elements. The shift amount is specified by the imm3u
constant. For the rounding operation of the <tt>.u</tt> form, a value of 1 is added to the most significant
discarded bit of each 8-bit data element to calculate the final results. And the results are written to
Rd.

<strong>Operations</strong>:\n
@code
sa = imm3u[2:0];
if (sa > 0) {
  if (`.u` form) { // SRA8.u
    res[7:-1] = SE9(Rs1.B[x][7:sa-1]) + 1;
    Rd.B[x] = res[7:0];
  } else { // SRA8
    Rd.B[x] = SE8(Rd.B[x][7:sa])
  }
} else {
  Rd = Rs1;
}
for RV32: x=3...0,
for RV64: x=7...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1ga6fa2d780199be27817ab78209e4e234c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_SRAI16';
      define-mem-param  = {
        define-mem-def-name = 'a';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'b';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
({    \
        register unsigned long result;    \
        register unsigned long __a = (unsigned long)(a);    \
        __ASM volatile("srai16 %0, %1, %2" : "=r"(result) : "r"(__a), "K"(b));    \
        result;    \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '10055';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SRAI16 (SIMD 16-bit Shift Right Arithmetic Immediate)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
SRAI16 Rd, Rs1, imm4u
SRAI16.u Rd, Rs1, imm4u
@endcode

<strong>Purpose</strong>:\n
Do 16-bit elements arithmetic right shift operations simultaneously. The shift amount is
an immediate value. The <tt>.u</tt> form performs additional rounding up operations on the shifted
results.

<strong>Description</strong>:\n
The 16-bit data elements in Rs1 are right-shifted arithmetically, that is, the shifted out
bits are filled with the sign-bit of the 16-bit data elements. The shift amount is specified by the
imm4u constant. For the rounding operation of the <tt>.u</tt> form, a value of 1 is added to the most
significant discarded bit of each 16-bit data to calculate the final results. And the results are written
to Rd.

<strong>Operations</strong>:\n
@code
sa = imm4u[3:0];
if (sa > 0) {
  if (`.u` form) { // SRAI16.u
    res[15:-1] = SE17(Rs1.H[x][15:sa-1]) + 1;
    Rd.H[x] = res[15:0];
  } else { // SRAI16
    Rd.H[x] = SE16(Rs1.H[x][15:sa]);
  }
} else {
  Rd = Rs1;
}
for RV32: x=1...0,
for RV64: x=3...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1gaf1be1014728b97f6e3c5481ef7b9644e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_SRAI16_U';
      define-mem-param  = {
        define-mem-def-name = 'a';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'b';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
({    \
        register unsigned long result;    \
        register unsigned long __a = (unsigned long)(a);    \
        __ASM volatile("srai16.u %0, %1, %2" : "=r"(result) : "r"(__a), "K"(b));    \
        result;    \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '10110';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SRAI16.u (SIMD 16-bit Rounding Shift Right Arithmetic Immediate)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
SRAI16 Rd, Rs1, imm4u
SRAI16.u Rd, Rs1, imm4u
@endcode

<strong>Purpose</strong>:\n
Do 16-bit elements arithmetic right shift operations simultaneously. The shift amount is
an immediate value. The <tt>.u</tt> form performs additional rounding up operations on the shifted
results.

<strong>Description</strong>:\n
The 16-bit data elements in Rs1 are right-shifted arithmetically, that is, the shifted out
bits are filled with the sign-bit of the 16-bit data elements. The shift amount is specified by the
imm4u constant. For the rounding operation of the <tt>.u</tt> form, a value of 1 is added to the most
significant discarded bit of each 16-bit data to calculate the final results. And the results are written
to Rd.

<strong>Operations</strong>:\n
@code
sa = imm4u[3:0];
if (sa > 0) {
  if (`.u` form) { // SRAI16.u
    res[15:-1] = SE17(Rs1.H[x][15:sa-1]) + 1;
    Rd.H[x] = res[15:0];
  } else { // SRAI16
    Rd.H[x] = SE16(Rs1.H[x][15:sa]);
  }
} else {
  Rd = Rs1;
}
for RV32: x=1...0,
for RV64: x=3...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1ga6e200926c9e92a70d3bae266450715cd';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_SRLI8';
      define-mem-param  = {
        define-mem-def-name = 'a';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'b';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
({    \
        register unsigned long result;    \
        register unsigned long __a = (unsigned long)(a);    \
        __ASM volatile("srli8 %0, %1, %2" : "=r"(result) : "r"(__a), "K"(b));    \
        result;    \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '10269';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SRLI8 (SIMD 8-bit Shift Right Logical Immediate)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
SRLI8 Rt, Ra, imm3u
SRLI8.u Rt, Ra, imm3u
@endcode

<strong>Purpose</strong>:\n
Do 8-bit elements logical right shift operations simultaneously. The shift amount is an
immediate value. The <tt>.u</tt> form performs additional rounding up operations on the shifted results.

<strong>Description</strong>:\n
The 8-bit data elements in Rs1 are right-shifted logically, that is, the shifted out bits are
filled with zero. The shift amount is specified by the imm3u constant. For the rounding operation of
the <tt>.u</tt> form, a value of 1 is added to the most significant discarded bit of each 8-bit data element to
calculate the final results. And the results are written to Rd.

<strong>Operations</strong>:\n
@code
sa = imm3u[2:0];
if (sa > 0) {
  if (`.u` form) { // SRLI8.u
    res[8:0] = ZE9(Rs1.B[x][7:sa-1]) + 1;
    Rd.B[x] = res[8:1];
  } else { // SRLI8
    Rd.B[x] = ZE8(Rs1.B[x][7:sa]);
  }
} else {
  Rd = Rs1;
}
for RV32: x=3...0,
for RV64: x=7...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1ga168480b888035c553e85ba0934c5e50d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_SRLI8_U';
      define-mem-param  = {
        define-mem-def-name = 'a';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'b';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
({    \
        register unsigned long result;    \
        register unsigned long __a = (unsigned long)(a);    \
        __ASM volatile("srli8.u %0, %1, %2" : "=r"(result) : "r"(__a), "K"(b));    \
        result;    \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '10322';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SRLI8.u (SIMD 8-bit Rounding Shift Right Logical Immediate)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
SRLI8 Rt, Ra, imm3u
SRLI8.u Rt, Ra, imm3u
@endcode

<strong>Purpose</strong>:\n
Do 8-bit elements logical right shift operations simultaneously. The shift amount is an
immediate value. The <tt>.u</tt> form performs additional rounding up operations on the shifted results.

<strong>Description</strong>:\n
The 8-bit data elements in Rs1 are right-shifted logically, that is, the shifted out bits are
filled with zero. The shift amount is specified by the imm3u constant. For the rounding operation of
the <tt>.u</tt> form, a value of 1 is added to the most significant discarded bit of each 8-bit data element to
calculate the final results. And the results are written to Rd.

<strong>Operations</strong>:\n
@code
sa = imm3u[2:0];
if (sa > 0) {
  if (`.u` form) { // SRLI8.u
    res[8:0] = ZE9(Rs1.B[x][7:sa-1]) + 1;
    Rd.B[x] = res[8:1];
  } else { // SRLI8
    Rd.B[x] = ZE8(Rs1.B[x][7:sa]);
  }
} else {
  Rd = Rs1;
}
for RV32: x=3...0,
for RV64: x=7...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1gae990a9f2ef6b5f70f563327a56c693e0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_SRLI16';
      define-mem-param  = {
        define-mem-def-name = 'a';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'b';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
({    \
        register unsigned long result;    \
        register unsigned long __a = (unsigned long)(a);    \
        __ASM volatile("srli16 %0, %1, %2" : "=r"(result) : "r"(__a), "K"(b));    \
        result;    \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '10479';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SRLI16 (SIMD 16-bit Shift Right Logical Immediate)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
SRLI16 Rt, Ra, imm4u
SRLI16.u Rt, Ra, imm4u
@endcode

<strong>Purpose</strong>:\n
Do 16-bit elements logical right shift operations simultaneously. The shift amount is an
immediate value. The <tt>.u</tt> form performs additional rounding up operations on the shifted results.

<strong>Description</strong>:\n
The 16-bit data elements in Rs1 are right-shifted logically, that is, the shifted out bits
are filled with zero. The shift amount is specified by the imm4u constant. For the rounding
operation of the <tt>.u</tt> form, a value of 1 is added to the most significant discarded bit of each 16-bit
data element to calculate the final results. And the results are written to Rd.

<strong>Operations</strong>:\n
@code
sa = imm4u;
if (sa > 0) {
  if (`.u` form) { // SRLI16.u
    res[16:0] = ZE17(Rs1.H[x][15:sa-1]) + 1;
    Rd.H[x] = res[16:1];
  } else { // SRLI16
    Rd.H[x] = ZE16(Rs1.H[x][15:sa]);
  }
} else {
  Rd = Rs1;
}
for RV32: x=1...0,
for RV64: x=3...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1ga26055d836ed9bb21a1191bbf10197636';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_SRLI16_U';
      define-mem-param  = {
        define-mem-def-name = 'a';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'b';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
({    \
        register unsigned long result;    \
        register unsigned long __a = (unsigned long)(a);    \
        __ASM volatile("srli16.u %0, %1, %2" : "=r"(result) : "r"(__a), "K"(b));    \
        result;    \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '10532';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SRLI16.u (SIMD 16-bit Rounding Shift Right Logical Immediate)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
SRLI16 Rt, Ra, imm4u
SRLI16.u Rt, Ra, imm4u
@endcode

<strong>Purpose</strong>:\n
Do 16-bit elements logical right shift operations simultaneously. The shift amount is an
immediate value. The <tt>.u</tt> form performs additional rounding up operations on the shifted results.

<strong>Description</strong>:\n
The 16-bit data elements in Rs1 are right-shifted logically, that is, the shifted out bits
are filled with zero. The shift amount is specified by the imm4u constant. For the rounding
operation of the <tt>.u</tt> form, a value of 1 is added to the most significant discarded bit of each 16-bit
data element to calculate the final results. And the results are written to Rd.

<strong>Operations</strong>:\n
@code
sa = imm4u;
if (sa > 0) {
  if (`.u` form) { // SRLI16.u
    res[16:0] = ZE17(Rs1.H[x][15:sa-1]) + 1;
    Rd.H[x] = res[16:1];
  } else { // SRLI16
    Rd.H[x] = ZE16(Rs1.H[x][15:sa]);
  }
} else {
  Rd = Rs1;
}
for RV32: x=1...0,
for RV64: x=3...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MISC_1gab205f3a7213d65c3fc0567e88a06b3c6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_UCLIP8';
      define-mem-param  = {
        define-mem-def-name = 'a';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'b';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
({    \
        register unsigned long result;    \
        register unsigned long __a = (unsigned long)(a);    \
        __ASM volatile("uclip8 %0, %1, %2" : "=r"(result) : "r"(__a), "K"(b));    \
        result;    \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '11112';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UCLIP8 (SIMD 8-bit Unsigned Clip Value)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
UCLIP8 Rt, Ra, imm3u
@endcode

<strong>Purpose</strong>:\n
Limit the 8-bit signed elements of a register into an unsigned range simultaneously.

<strong>Description</strong>:\n
This instruction limits the 8-bit signed elements stored in Rs1 into an unsigned integer
range between 2^imm3u-1 and 0, and writes the limited results to Rd. For example, if imm3u is 3, the 8-
bit input values should be saturated between 7 and 0. If saturation is performed, set OV bit to 1.

<strong>Operations</strong>:\n
@code
src = Rs1.H[x];
if (src > (2^imm3u)-1) {
  src = (2^imm3u)-1;
  OV = 1;
} else if (src < 0) {
  src = 0;
  OV = 1;
}
Rd.H[x] = src;
for RV32: x=3...0,
for RV64: x=7...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MISC_1ga6448eaddeb437add172014662e9d52f7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_UCLIP16';
      define-mem-param  = {
        define-mem-def-name = 'a';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'b';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
({    \
        register unsigned long result;    \
        register unsigned long __a = (unsigned long)(a);    \
        __ASM volatile("uclip16 %0, %1, %2" : "=r"(result) : "r"(__a), "K"(b));    \
        result;    \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '11161';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UCLIP16 (SIMD 16-bit Unsigned Clip Value)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
UCLIP16 Rt, Ra, imm4u
@endcode

<strong>Purpose</strong>:\n
Limit the 16-bit signed elements of a register into an unsigned range simultaneously.

<strong>Description</strong>:\n
This instruction limits the 16-bit signed elements stored in Rs1 into an unsigned
integer range between 2imm4u-1 and 0, and writes the limited results to Rd. For example, if imm4u is
3, the 16-bit input values should be saturated between 7 and 0. If saturation is performed, set OV bit
to 1.

<strong>Operations</strong>:\n
@code
src = Rs1.H[x];
if (src > (2^imm4u)-1) {
  src = (2^imm4u)-1;
  OV = 1;
} else if (src < 0) {
  src = 0;
  OV = 1;
}
Rd.H[x] = src;
for RV32: x=1...0,
for RV64: x=3...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__PART__SIMD__MISC_1ga6aea3f3d303e395e7cf41d45c0618385';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_UCLIP32';
      define-mem-param  = {
        define-mem-def-name = 'a';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'b';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
({    \
        register unsigned long result;    \
        register unsigned long __a = (unsigned long)(a);    \
        __ASM volatile("uclip32 %0, %1, %2" : "=r"(result) : "r"(__a), "K"(b));    \
        result;    \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '11211';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UCLIP32 (SIMD 32-bit Unsigned Clip Value)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
UCLIP32 Rd, Rs1, imm5u[4:0]
@endcode

<strong>Purpose</strong>:\n
Limit the 32-bit signed integer elements of a register into an unsigned range
simultaneously.

<strong>Description</strong>:\n
This instruction limits the 32-bit signed integer elements stored in Rs1 into an
unsigned integer range between 2imm5u-1 and 0, and writes the limited results to Rd. For example, if
imm5u is 3, the 32-bit input values should be saturated between 7 and 0. If saturation is performed,
set OV bit to 1.

<strong>Operations</strong>:\n
@code
src = Rs1.W[x];
if (src > (2^imm5u)-1) {
  src = (2^imm5u)-1;
  OV = 1;
} else if (src < 0) {
  src = 0;
  OV = 1;
}
Rd.W[x] = src
for RV32: x=0,
for RV64: x=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1ga491f47f7a20cddb763dacb0d75309121';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_WEXTI';
      define-mem-param  = {
        define-mem-def-name = 'a';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'b';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
({    \
        register unsigned long result;    \
        register long long __a = (long long)(a);    \
        __ASM volatile("wexti %0, %1, %2" : "=r"(result) : "r"(__a), "K"(b));    \
        result;    \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      define-mem-desc-line = '13484';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
WEXTI (Extract Word from 64-bit Immediate)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
WEXTI Rd, Rs1, #LSBloc
@endcode

<strong>Purpose</strong>:\n
Extract a 32-bit word from a 64-bit value stored in an even/odd pair of registers (RV32) or
a register (RV64) starting from a specified immediate LSB bit position.

<strong>RV32 Description</strong>:\n
This instruction extracts a 32-bit word from a 64-bit value of an even/odd pair of registers specified
by Rs1(4,1) starting from a specified immediate LSB bit position, #LSBloc. The extracted word is
written to Rd.
Rs1(4,1), i.e., d, determines the even/odd pair group of the two registers. Specifically, the register
pair includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the high 32-bit of the 64-bit value and the even <tt>2d</tt>
register of the pair contains the low 32-bit of the 64-bit value.

<strong>RV64 Description</strong>:\n
This instruction extracts a 32-bit word from a 64-bit value in Rs1 starting from a specified
immediate LSB bit position, #LSBloc. The extracted word is sign-extended and written to lower 32-
bit of Rd.

<strong>Operations</strong>:\n
@code
* RV32:
Idx0 = CONCAT(Rs1(4,1),1'b0); Idx1 = CONCAT(Rs2(4,1),1'b1);
src[63:0] = Concat(R[Idx1], R[Idx0]);
Rd = src[31+LSBloc:LSBloc];
* RV64:
ExtractW = Rs1[31+LSBloc:LSBloc];
Rd = SE(ExtractW)
@endcode

\param [in]  a    long long type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    };
    func = {
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__ADDSUB_1ga502647bb2462e3bb724ba292a16e62ef';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_ADD8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '447';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
ADD8 (SIMD 8-bit Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
ADD8 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 8-bit integer element additions simultaneously.

<strong>Description</strong>:\n
This instruction adds the 8-bit integer elements in Rs1 with the 8-bit integer elements
in Rs2, and then writes the 8-bit element results to Rd.

<strong>Note</strong>:\n
This instruction can be used for either signed or unsigned addition.

<strong>Operations</strong>:\n
@code
Rd.B[x] = Rs1.B[x] + Rs2.B[x];
for RV32: x=3...0,
for RV64: x=7...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1gacacca4e304ad42fc68a96c785f2a0b69';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_ADD16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '488';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
ADD16 (SIMD 16-bit Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
ADD16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit integer element additions simultaneously.

<strong>Description</strong>:\n
This instruction adds the 16-bit integer elements in Rs1 with the 16-bit integer
elements in Rs2, and then writes the 16-bit element results to Rd.

<strong>Note</strong>:\n
This instruction can be used for either signed or unsigned addition.

<strong>Operations</strong>:\n
@code
Rd.H[x] = Rs1.H[x] + Rs2.H[x];
for RV32: x=1...0,
for RV64: x=3...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
      func-mem-referenceby = {
        func-mem-ref-id = 'core__feature__dsp_8h_1ga6d8dce49013b778d0290cd057cf45dd0';
        func-mem-ref-line = '18530';
        func-mem-ref-name = '__RV_EXPD83';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__64B__ADDSUB_1ga886e1cf9d61d72c7b6028f2e58ad9f5d';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_ADD64';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '541';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
ADD64 (64-bit Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: 64-bit Profile

<strong>Syntax</strong>:\n
@code
ADD64 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Add two 64-bit signed or unsigned integers.

<strong>RV32 Description</strong>:\n
This instruction adds the 64-bit integer of an even/odd pair of registers specified
by Rs1(4,1) with the 64-bit integer of an even/odd pair of registers specified by Rs2(4,1), and then
writes the 64-bit result to an even/odd pair of registers specified by Rd(4,1).
Rx(4,1), i.e., value d, determines the even/odd pair group of two registers. Specifically, the register
pair includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the high 32-bit of the result and the even <tt>2d</tt> register
of the pair contains the low 32-bit of the result.

<strong>RV64 Description</strong>:\n
This instruction has the same behavior as the ADD instruction in RV64I.

<strong>Note</strong>:\n
This instruction can be used for either signed or unsigned addition.

<strong>Operations</strong>:\n
@code
RV32:
 t_L = CONCAT(Rd(4,1),1'b0); t_H = CONCAT(Rd(4,1),1'b1);
 a_L = CONCAT(Rs1(4,1),1'b0); a_H = CONCAT(Rs1(4,1),1'b1);
 b_L = CONCAT(Rs2(4,1),1'b0); b_H = CONCAT(Rs2(4,1),1'b1);
 R[t_H].R[t_L] = R[a_H].R[a_L] + R[b_H].R[b_L];
RV64:
 Rd = Rs1 + Rs2;
@endcode

\param [in]  a    unsigned long long type of value stored in a
\param [in]  b    unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1ga3a4b869f2df434f7e9f3f35e79715c6c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_AVE';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '580';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
AVE (Average with Rounding)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
AVE Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Calculate the average of the contents of two general registers.

<strong>Description</strong>:\n
This instruction calculates the average value of two signed integers stored in Rs1 and
Rs2, rounds up a half-integer result to the nearest integer, and writes the result to Rd.

<strong>Operations</strong>:\n
@code
Sum = CONCAT(Rs1[MSB],Rs1[MSB:0]) + CONCAT(Rs2[MSB],Rs2[MSB:0]) + 1;
Rd = Sum[(MSB+1):1];
for RV32: MSB=31,
for RV64: MSB=63
@endcode

\param [in]  a    long type of value stored in a
\param [in]  b    long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1ga5061e392780b3bea521580befe37556f';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_BITREV';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '621';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
BITREV (Bit Reverse)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
BITREV Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Reverse the bit positions of the source operand within a specified width starting from bit
0. The reversed width is a variable from a GPR.

<strong>Description</strong>:\n
This instruction reverses the bit positions of the content of Rs1. The reversed bit width
is calculated as Rs2[4:0]+1 (RV32) or Rs2[5:0]+1 (RV64). The upper bits beyond the reversed width
are filled with zeros. After the bit reverse operation, the result is written to Rd.

<strong>Operations</strong>:\n
@code
msb = Rs2[4:0]; (for RV32)
msb = Rs2[5:0]; (for RV64)
rev[0:msb] = Rs1[msb:0];
Rd = ZE(rev[msb:0]);
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1ga0e9da2de29b3f47f38a315ca8f3e5f18';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_BPICK';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'c';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '704';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
BPICK (Bit-wise Pick)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
BPICK Rd, Rs1, Rs2, Rc
@endcode

<strong>Purpose</strong>:\n
Select from two source operands based on a bit mask in the third operand.

<strong>Description</strong>:\n
This instruction selects individual bits from Rs1 or Rs2, based on the bit mask value in
Rc. If a bit in Rc is 1, the corresponding bit is from Rs1; otherwise, the corresponding bit is from Rs2.
The selection results are written to Rd.

<strong>Operations</strong>:\n
@code
Rd[x] = Rc[x]? Rs1[x] : Rs2[x];
for RV32, x=31...0
for RV64, x=63...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\param [in]  c    unsigned long type of value stored in c
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__OV__FLAG__SC_1ga0198a8fa03f62716f0b4d0cec311dfd2';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_CLROV';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '729';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CLROV (Clear OV flag)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
CLROV # pseudo mnemonic
@endcode

<strong>Purpose</strong>:\n
This pseudo instruction is an alias to <tt>CSRRCI x0, ucode, 1</tt> instruction.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MISC_1ga439f0189dfb52d89887cd8905d4f5695';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_CLRS8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '774';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CLRS8 (SIMD 8-bit Count Leading Redundant Sign)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
CLRS8 Rd, Rs1
@endcode

<strong>Purpose</strong>:\n
Count the number of redundant sign bits of the 8-bit elements of a general register.

<strong>Description</strong>:\n
Starting from the bits next to the sign bits of the 8-bit elements of Rs1, this instruction
counts the number of redundant sign bits and writes the result to the corresponding 8-bit elements
of Rd.

<strong>Operations</strong>:\n
@code
snum[x] = Rs1.B[x];
cnt[x] = 0;
for (i = 6 to 0) {
  if (snum[x](i) == snum[x](7)) {
    cnt[x] = cnt[x] + 1;
  } else {
    break;
  }
}
Rd.B[x] = cnt[x];
for RV32: x=3...0
for RV64: x=7...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MISC_1ga368e2f49b0007ec1776f04ba5a850226';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_CLRS16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '821';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CLRS16 (SIMD 16-bit Count Leading Redundant Sign)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
CLRS16 Rd, Rs1
@endcode

<strong>Purpose</strong>:\n
Count the number of redundant sign bits of the 16-bit elements of a general register.

<strong>Description</strong>:\n
Starting from the bits next to the sign bits of the 16-bit elements of Rs1, this
instruction counts the number of redundant sign bits and writes the result to the corresponding 16-
bit elements of Rd.

<strong>Operations</strong>:\n
@code
snum[x] = Rs1.H[x];
cnt[x] = 0;
for (i = 14 to 0) {
  if (snum[x](i) == snum[x](15)) {
    cnt[x] = cnt[x] + 1;
  } else {
    break;
  }
}
Rd.H[x] = cnt[x];
for RV32: x=1...0
for RV64: x=3...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__PART__SIMD__MISC_1ga4f68c42f5bf770045469f5cc5b8dd80c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_CLRS32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '868';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CLRS32 (SIMD 32-bit Count Leading Redundant Sign)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
CLRS32 Rd, Rs1
@endcode

<strong>Purpose</strong>:\n
Count the number of redundant sign bits of the 32-bit elements of a general register.

<strong>Description</strong>:\n
Starting from the bits next to the sign bits of the 32-bit elements of Rs1, this
instruction counts the number of redundant sign bits and writes the result to the corresponding 32-
bit elements of Rd.

<strong>Operations</strong>:\n
@code
snum[x] = Rs1.W[x];
cnt[x] = 0;
for (i = 30 to 0) {
  if (snum[x](i) == snum[x](31)) {
    cnt[x] = cnt[x] + 1;
  } else {
    break;
  }
}
Rd.W[x] = cnt[x];
for RV32: x=0
for RV64: x=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MISC_1gaf9e26b273480fb62dd48b315270fb3d1';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_CLO8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '915';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CLO8 (SIMD 8-bit Count Leading One)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
CLO8 Rd, Rs1
@endcode

<strong>Purpose</strong>:\n
Count the number of leading one bits of the 8-bit elements of a general register.

<strong>Description</strong>:\n
Starting from the most significant bits of the 8-bit elements of Rs1, this instruction
counts the number of leading one bits and writes the results to the corresponding 8-bit elements of
Rd.

<strong>Operations</strong>:\n
@code
snum[x] = Rs1.B[x];
cnt[x] = 0;
  for (i = 7 to 0) {
  if (snum[x](i) == 1) {
    cnt[x] = cnt[x] + 1;
  } else {
    break;
  }
}
Rd.B[x] = cnt[x];
for RV32: x=3...0
for RV64: x=7...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MISC_1ga00c822eb5d2a5b1ff5bc88790a43103c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_CLO16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '962';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CLO16 (SIMD 16-bit Count Leading One)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
CLO16 Rd, Rs1
@endcode

<strong>Purpose</strong>:\n
Count the number of leading one bits of the 16-bit elements of a general register.

<strong>Description</strong>:\n
Starting from the most significant bits of the 16-bit elements of Rs1, this instruction
counts the number of leading one bits and writes the results to the corresponding 16-bit elements
of Rd.

<strong>Operations</strong>:\n
@code
snum[x] = Rs1.H[x];
cnt[x] = 0;
for (i = 15 to 0) {
  if (snum[x](i) == 1) {
    cnt[x] = cnt[x] + 1;
  } else {
    break;
  }
}
Rd.H[x] = cnt[x];
for RV32: x=1...0
for RV64: x=3...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__PART__SIMD__MISC_1ga9a3bb8538cb1c67d747dbcf77d50b1f0';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_CLO32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '1009';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CLO32 (SIMD 32-bit Count Leading One)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
CLO32 Rd, Rs1
@endcode

<strong>Purpose</strong>:\n
Count the number of leading one bits of the 32-bit elements of a general register.

<strong>Description</strong>:\n
Starting from the most significant bits of the 32-bit elements of Rs1, this instruction
counts the number of leading one bits and writes the results to the corresponding 32-bit elements
of Rd.

<strong>Operations</strong>:\n
@code
snum[x] = Rs1.W[x];
cnt[x] = 0;
for (i = 31 to 0) {
  if (snum[x](i) == 1) {
    cnt[x] = cnt[x] + 1;
  } else {
    break;
  }
}
Rd.W[x] = cnt[x];
for RV32: x=0
for RV64: x=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MISC_1gac034821a27f8ab322a689b24ce1257a0';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_CLZ8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '1056';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CLZ8 (SIMD 8-bit Count Leading Zero)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
CLZ8 Rd, Rs1
@endcode

<strong>Purpose</strong>:\n
Count the number of leading zero bits of the 8-bit elements of a general register.

<strong>Description</strong>:\n
Starting from the most significant bits of the 8-bit elements of Rs1, this instruction
counts the number of leading zero bits and writes the results to the corresponding 8-bit elements of
Rd.

<strong>Operations</strong>:\n
@code
snum[x] = Rs1.B[x];
cnt[x] = 0;
for (i = 7 to 0) {
  if (snum[x](i) == 0) {
    cnt[x] = cnt[x] + 1;
  } else {
    break;
  }
}
Rd.B[x] = cnt[x];
for RV32: x=3...0
for RV64: x=7...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MISC_1ga862e937fdf95c754472d41ab2df392f2';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_CLZ16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '1103';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CLZ16 (SIMD 16-bit Count Leading Zero)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
CLZ16 Rd, Rs1
@endcode

<strong>Purpose</strong>:\n
Count the number of leading zero bits of the 16-bit elements of a general register.

<strong>Description</strong>:\n
Starting from the most significant bits of the 16-bit elements of Rs1, this instruction
counts the number of leading zero bits and writes the results to the corresponding 16-bit elements
of Rd.

<strong>Operations</strong>:\n
@code
snum[x] = Rs1.H[x];
cnt[x] = 0;
for (i = 15 to 0) {
  if (snum[x](i) == 0) {
    cnt[x] = cnt[x] + 1;
  } else {
    break;
  }
}
Rd.H[x] = cnt[x];
for RV32: x=1...0
for RV64: x=3...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__PART__SIMD__MISC_1ga5250b89ea0959cf4f02534c5cd30b79c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_CLZ32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '1150';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CLZ32 (SIMD 32-bit Count Leading Zero)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
CLZ32 Rd, Rs1
@endcode

<strong>Purpose</strong>:\n
Count the number of leading zero bits of the 32-bit elements of a general register.

<strong>Description</strong>:\n
Starting from the most significant bits of the 32-bit elements of Rs1, this instruction
counts the number of leading zero bits and writes the results to the corresponding 32-bit elements
of Rd.

<strong>Operations</strong>:\n
@code
snum[x] = Rs1.W[x];
cnt[x] = 0;
for (i = 31 to 0) {
  if (snum[x](i) == 0) {
    cnt[x] = cnt[x] + 1;
  } else {
    break;
  }
}
Rd.W[x] = cnt[x];
for RV32: x=0
for RV64: x=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__CMP_1gaf3b7bef50684b91cf3b8de6045ea9579';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_CMPEQ8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '1192';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CMPEQ8 (SIMD 8-bit Integer Compare Equal)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
CMPEQ8 Rs, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 8-bit integer elements equal comparisons simultaneously.

<strong>Description</strong>:\n
This instruction compares the 8-bit integer elements in Rs1 with the 8-bit integer
elements in Rs2 to see if they are equal. If they are equal, the result is 0xFF; otherwise, the result is
0x0. The 8-bit element comparison results are written to Rd.

<strong>Note</strong>:\n
This instruction can be used for either signed or unsigned numbers.

<strong>Operations</strong>:\n
@code
Rd.B[x] = (Rs1.B[x] == Rs2.B[x])? 0xff : 0x0;
for RV32: x=3...0,
for RV64: x=7...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__CMP_1ga751703d59ea5e8737f21ba152f348293';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_CMPEQ16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '1234';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CMPEQ16 (SIMD 16-bit Integer Compare Equal)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
CMPEQ16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit integer elements equal comparisons simultaneously.

<strong>Description</strong>:\n
This instruction compares the 16-bit integer elements in Rs1 with the 16-bit integer
elements in Rs2 to see if they are equal. If they are equal, the result is 0xFFFF; otherwise, the result
is 0x0. The 16-bit element comparison results are written to Rt.

<strong>Note</strong>:\n
This instruction can be used for either signed or unsigned numbers.

<strong>Operations</strong>:\n
@code
Rd.H[x] = (Rs1.H[x] == Rs2.H[x])? 0xffff : 0x0;
for RV32: x=1...0,
for RV64: x=3...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga96746dfb052a196b65217708b3d31bd8';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_CRAS16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '1280';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CRAS16 (SIMD 16-bit Cross Addition & Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
CRAS16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit integer element addition and 16-bit integer element subtraction in a 32-bit
chunk simultaneously. Operands are from crossed positions in 32-bit chunks.

<strong>Description</strong>:\n
This instruction adds the 16-bit integer element in [31:16] of 32-bit chunks in Rs1 with
the 16-bit integer element in [15:0] of 32-bit chunks in Rs2, and writes the result to [31:16] of 32-bit
chunks in Rd; at the same time, it subtracts the 16-bit integer element in [31:16] of 32-bit chunks in
Rs2 from the 16-bit integer element in [15:0] of 32-bit chunks, and writes the result to [15:0] of 32-
bit chunks in Rd.

<strong>Note</strong>:\n
This instruction can be used for either signed or unsigned operations.

<strong>Operations</strong>:\n
@code
Rd.W[x][31:16] = Rs1.W[x][31:16] + Rs2.W[x][15:0];
Rd.W[x][15:0] = Rs1.W[x][15:0] - Rs2.W[x][31:16];
for RV32, x=0
for RV64, x=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1gabbbc32ee11e188a042cd6f4bae5ae8ed';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_CRSA16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '1326';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CRSA16 (SIMD 16-bit Cross Subtraction & Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
CRSA16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit integer element subtraction and 16-bit integer element addition in a 32-bit
chunk simultaneously. Operands are from crossed positions in 32-bit chunks.

<strong>Description</strong>:\n
This instruction subtracts the 16-bit integer element in [15:0] of 32-bit chunks in Rs2
from the 16-bit integer element in [31:16] of 32-bit chunks in Rs1, and writes the result to [31:16] of
32-bit chunks in Rd; at the same time, it adds the 16-bit integer element in [31:16] of 32-bit chunks
in Rs2 with the 16-bit integer element in [15:0] of 32-bit chunks in Rs1, and writes the result to
[15:0] of 32-bit chunks in Rd.

<strong>Note</strong>:\n
This instruction can be used for either signed or unsigned operations.

<strong>Operations</strong>:\n
@code
Rd.W[x][31:16] = Rs1.W[x][31:16] - Rs2.W[x][15:0];
Rd.W[x][15:0] = Rs1.W[x][15:0] + Rs2.W[x][31:16];
for RV32, x=0
for RV64, x=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MISC_1ga0316d69cb7b16fe8571d11d53af50918';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KABS8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '1412';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KABS8 (SIMD 8-bit Saturating Absolute)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
KABS8 Rd, Rs1
@endcode

<strong>Purpose</strong>:\n
Get the absolute value of 8-bit signed integer elements simultaneously.

<strong>Description</strong>:\n
This instruction calculates the absolute value of 8-bit signed integer elements stored
in Rs1 and writes the element results to Rd. If the input number is 0x80, this instruction generates
0x7f as the output and sets the OV bit to 1.

<strong>Operations</strong>:\n
@code
src = Rs1.B[x];
if (src == 0x80) {
  src = 0x7f;
  OV = 1;
} else if (src[7] == 1)
  src = -src;
}
Rd.B[x] = src;
for RV32: x=3...0,
for RV64: x=7...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MISC_1ga2144ee330b7d084593a38bc98919399c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KABS16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '1457';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KABS16 (SIMD 16-bit Saturating Absolute)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
KABS16 Rd, Rs1
@endcode

<strong>Purpose</strong>:\n
Get the absolute value of 16-bit signed integer elements simultaneously.

<strong>Description</strong>:\n
This instruction calculates the absolute value of 16-bit signed integer elements stored
in Rs1 and writes the element results to Rd. If the input number is 0x8000, this instruction
generates 0x7fff as the output and sets the OV bit to 1.

<strong>Operations</strong>:\n
@code
src = Rs1.H[x];
if (src == 0x8000) {
  src = 0x7fff;
  OV = 1;
} else if (src[15] == 1)
  src = -src;
}
Rd.H[x] = src;
for RV32: x=1...0,
for RV64: x=3...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1ga1bdcf3e62c9328169f9052c3e01a0fd1';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KABSW';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
signed long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '1504';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KABSW (Scalar 32-bit Absolute Value with Saturation)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
KABSW Rd, Rs1
@endcode

<strong>Purpose</strong>:\n
Get the absolute value of a signed 32-bit integer in a general register.

<strong>Description</strong>:\n
This instruction calculates the absolute value of a signed 32-bit integer stored in Rs1.
The result is sign-extended (for RV64) and written to Rd. This instruction with the minimum
negative integer input of 0x80000000 will produce a saturated output of maximum positive integer
of 0x7fffffff and the OV flag will be set to 1.

<strong>Operations</strong>:\n
@code
if (Rs1.W[0] >= 0) {
  res = Rs1.W[0];
} else {
  If (Rs1.W[0] == 0x80000000) {
    res = 0x7fffffff;
    OV = 1;
  } else {
    res = -Rs1.W[0];
  }
}
Rd = SE32(res);
@endcode

\param [in]  a    signed long type of value stored in a
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__ADDSUB_1ga64622c4cea6b25708edcf53511ac2846';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KADD8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '1551';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KADD8 (SIMD 8-bit Signed Saturating Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
KADD8 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 8-bit signed integer element saturating additions simultaneously.

<strong>Description</strong>:\n
This instruction adds the 8-bit signed integer elements in Rs1 with the 8-bit signed
integer elements in Rs2. If any of the results are beyond the Q7 number range (-2^7 <= Q7 <= 2^7-1), they
are saturated to the range and the OV bit is set to 1. The saturated results are written to Rd.

<strong>Operations</strong>:\n
@code
res[x] = Rs1.B[x] + Rs2.B[x];
if (res[x] > 127) {
  res[x] = 127;
  OV = 1;
} else if (res[x] < -128) {
  res[x] = -128;
  OV = 1;
}
Rd.B[x] = res[x];
for RV32: x=3...0,
for RV64: x=7...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1gae514ac0875046449b9d45cd277d85063';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KADD16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '1598';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KADD16 (SIMD 16-bit Signed Saturating Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
KADD16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit signed integer element saturating additions simultaneously.

<strong>Description</strong>:\n
This instruction adds the 16-bit signed integer elements in Rs1 with the 16-bit signed
integer elements in Rs2. If any of the results are beyond the Q15 number range (-2^15 <= Q15 <= 2^15-1),
they are saturated to the range and the OV bit is set to 1. The saturated results are written to Rd.

<strong>Operations</strong>:\n
@code
res[x] = Rs1.H[x] + Rs2.H[x];
if (res[x] > 32767) {
  res[x] = 32767;
  OV = 1;
} else if (res[x] < -32768) {
  res[x] = -32768;
  OV = 1;
}
Rd.H[x] = res[x];
for RV32: x=1...0,
for RV64: x=3...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__64B__ADDSUB_1gace8675089dafa59f5ba9114232ffe31d';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KADD64';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '1664';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KADD64 (64-bit Signed Saturating Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (64-bit Profile)

<strong>Syntax</strong>:\n
@code
KADD64 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Add two 64-bit signed integers. The result is saturated to the Q63 range.

<strong>RV32 Description</strong>:\n
This instruction adds the 64-bit signed integer of an even/odd pair of registers
specified by Rs1(4,1) with the 64-bit signed integer of an even/odd pair of registers specified by
Rs2(4,1). If the 64-bit result is beyond the Q63 number range (-2^63 <= Q63 <= 2^63-1), it is saturated to the
range and the OV bit is set to 1. The saturated result is written to an even/odd pair of registers
specified by Rd(4,1).
Rx(4,1), i.e., value d, determines the even/odd pair group of two registers. Specifically, the register
pair includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the high 32-bit of the result and the even <tt>2d</tt> register
of the pair contains the low 32-bit of the result.

<strong>RV64 Description</strong>:\n
This instruction adds the 64-bit signed integer in Rs1 with the 64-bit signed
integer in Rs2. If the result is beyond the Q63 number range (-2^63 <= Q63 <= 2^63-1), it is saturated to the
range and the OV bit is set to 1. The saturated result is written to Rd.

<strong>Operations</strong>:\n
@code
RV32:
 t_L = CONCAT(Rd(4,1),1'b0); t_H = CONCAT(Rd(4,1),1'b1);
 a_L = CONCAT(Rs1(4,1),1'b0); a_H = CONCAT(Rs1(4,1),1'b1);
 b_L = CONCAT(Rs2(4,1),1'b0); b_H = CONCAT(Rs2(4,1),1'b1);
 result = R[a_H].R[a_L] + R[b_H].R[b_L];
 if (result > (2^63)-1) {
   result = (2^63)-1; OV = 1;
 } else if (result < -2^63) {
   result = -2^63; OV = 1;
 }
 R[t_H].R[t_L] = result;
RV64:
 result = Rs1 + Rs2;
 if (result > (2^63)-1) {
   result = (2^63)-1; OV = 1;
 } else if (result < -2^63) {
   result = -2^63; OV = 1;
 }
 Rd = result;
@endcode

\param [in]  a    long long type of value stored in a
\param [in]  b    long long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q15__SAT__ALU_1ga3d272c3c6988c3c1c76ed6f5896c008e';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KADDH';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '1711';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KADDH (Signed Addition with Q15 Saturation)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
KADDH Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Add the signed lower 32-bit content of two registers with Q15 saturation.

<strong>Description</strong>:\n
The signed lower 32-bit content of Rs1 is added with the signed lower 32-bit content of
Rs2. And the result is saturated to the 16-bit signed integer range of [-2^15, 2^15-1] and then sign-
extended and written to Rd. If saturation happens, this instruction sets the OV flag.

<strong>Operations</strong>:\n
@code
tmp = Rs1.W[0] + Rs2.W[0];
if (tmp > 32767) {
  res = 32767;
  OV = 1;
} else if (tmp < -32768) {
  res = -32768;
  OV = 1
} else {
  res = tmp;
}
Rd = SE(tmp[15:0]);
@endcode

\param [in]  a    int type of value stored in a
\param [in]  b    int type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1ga9faead3db3c1ffb6a8566719b1f46ffa';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KADDW';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '1759';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KADDW (Signed Addition with Q31 Saturation)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
KADDW Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Add the lower 32-bit signed content of two registers with Q31 saturation.

<strong>Description</strong>:\n
The lower 32-bit signed content of Rs1 is added with the lower 32-bit signed content of
Rs2. And the result is saturated to the 32-bit signed integer range of [-2^31, 2^31-1] and then sign-
extended and written to Rd. If saturation happens, this instruction sets the OV flag.

<strong>Operations</strong>:\n
@code
tmp = Rs1.W[0] + Rs2.W[0];
if (tmp > (2^31)-1) {
  res = (2^31)-1;
  OV = 1;
} else if (tmp < -2^31) {
  res = -2^31;
  OV = 1
} else {
  res = tmp;
}
Rd = res[31:0]; // RV32
Rd = SE(res[31:0]) // RV64
@endcode

\param [in]  a    int type of value stored in a
\param [in]  b    int type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1gabeee05c8c6965fc9955a62121324992c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KCRAS16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '1816';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KCRAS16 (SIMD 16-bit Signed Saturating Cross Addition & Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
KCRAS16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit signed integer element saturating addition and 16-bit signed integer element
saturating subtraction in a 32-bit chunk simultaneously. Operands are from crossed positions in 32-
bit chunks.

<strong>Description</strong>:\n
This instruction adds the 16-bit signed integer element in [31:16] of 32-bit chunks in
Rs1 with the 16-bit signed integer element in [15:0] of 32-bit chunks in Rs2; at the same time, it
subtracts the 16-bit signed integer element in [31:16] of 32-bit chunks in Rs2 from the 16-bit signed
integer element in [15:0] of 32-bit chunks in Rs1. If any of the results are beyond the Q15 number
range (-2^15 <= Q15 <= 2^15-1), they are saturated to the range and the OV bit is set to 1. The saturated
results are written to [31:16] of 32-bit chunks in Rd for addition and [15:0] of 32-bit chunks in Rd for
subtraction.

<strong>Operations</strong>:\n
@code
res1 = Rs1.W[x][31:16] + Rs2.W[x][15:0];
res2 = Rs1.W[x][15:0] - Rs2.W[x][31:16];
for (res in [res1, res2]) {
  if (res > (2^15)-1) {
    res = (2^15)-1;
    OV = 1;
  } else if (res < -2^15) {
    res = -2^15;
    OV = 1;
  }
}
Rd.W[x][31:16] = res1;
Rd.W[x][15:0] = res2;
for RV32, x=0
for RV64, x=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga506f2d59400875aba65112bc6563fb08';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KCRSA16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '1873';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KCRSA16 (SIMD 16-bit Signed Saturating Cross Subtraction & Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
KCRSA16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit signed integer element saturating subtraction and 16-bit signed integer element
saturating addition in a 32-bit chunk simultaneously. Operands are from crossed positions in 32-bit
chunks.

<strong>Description</strong>:\n
This instruction subtracts the 16-bit signed integer element in [15:0] of 32-bit chunks
in Rs2 from the 16-bit signed integer element in [31:16] of 32-bit chunks in Rs1; at the same time, it
adds the 16-bit signed integer element in [31:16] of 32-bit chunks in Rs2 with the 16-bit signed
integer element in [15:0] of 32-bit chunks in Rs1. If any of the results are beyond the Q15 number
range (-2^15 <= Q15 <= 2^15-1), they are saturated to the range and the OV bit is set to 1. The saturated
results are written to [31:16] of 32-bit chunks in Rd for subtraction and [15:0] of 32-bit chunks in Rd
for addition.

<strong>Operations</strong>:\n
@code
res1 = Rs1.W[x][31:16] - Rs2.W[x][15:0];
res2 = Rs1.W[x][15:0] + Rs2.W[x][31:16];
for (res in [res1, res2]) {
  if (res > (2^15)-1) {
    res = (2^15)-1;
    OV = 1;
  } else if (res < -2^15) {
    res = -2^15;
    OV = 1;
  }
}
Rd.W[x][31:16] = res1;
Rd.W[x][15:0] = res2;
for RV32, x=0
for RV64, x=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1ga7e18b0f1cd5e9110bbb38a058eb01d97';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KDMBB';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '1928';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KDMBB (Signed Saturating Double Multiply B16 x B16)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
KDMxy Rd, Rs1, Rs2 (xy = BB, BT, TT)
@endcode

<strong>Purpose</strong>:\n
Multiply the signed Q15 integer contents of two 16-bit data in the corresponding portion
of the lower 32-bit chunk in registers and then double and saturate the Q31 result. The result is
written into the destination register for RV32 or sign-extended to 64-bits and written into the
destination register for RV64. If saturation happens, an overflow flag OV will be set.

<strong>Description</strong>:\n
Multiply the top or bottom 16-bit Q15 content of the lower 32-bit portion in Rs1 with
the top or bottom 16-bit Q15 content of the lower 32-bit portion in Rs2. The Q30 result is then
doubled and saturated into a Q31 value. The Q31 value is then written into Rd (sign-extended in
RV64). When both the two Q15 inputs are 0x8000, saturation will happen. The result will be
saturated to 0x7FFFFFFF and the overflow flag OV will be set.

<strong>Operations</strong>:\n
@code
aop = Rs1.H[0]; bop = Rs2.H[0]; // KDMBB
aop = Rs1.H[0]; bop = Rs2.H[1]; // KDMBT
aop = Rs1.H[1]; bop = Rs2.H[1]; // KDMTT
If (0x8000 != aop | 0x8000 != bop) {
  Mresult = aop * bop;
  resQ31 = Mresult << 1;
  Rd = resQ31; // RV32
  Rd = SE(resQ31); // RV64
} else {
  resQ31 = 0x7FFFFFFF;
  Rd = resQ31; // RV32
  Rd = SE(resQ31); // RV64
  OV = 1;
}
@endcode

\param [in]  a    unsigned int type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1ga067179bedfe1e3e48bbd8df87bed48dc';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KDMBT';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '1983';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KDMBT (Signed Saturating Double Multiply B16 x T16)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
KDMxy Rd, Rs1, Rs2 (xy = BB, BT, TT)
@endcode

<strong>Purpose</strong>:\n
Multiply the signed Q15 integer contents of two 16-bit data in the corresponding portion
of the lower 32-bit chunk in registers and then double and saturate the Q31 result. The result is
written into the destination register for RV32 or sign-extended to 64-bits and written into the
destination register for RV64. If saturation happens, an overflow flag OV will be set.

<strong>Description</strong>:\n
Multiply the top or bottom 16-bit Q15 content of the lower 32-bit portion in Rs1 with
the top or bottom 16-bit Q15 content of the lower 32-bit portion in Rs2. The Q30 result is then
doubled and saturated into a Q31 value. The Q31 value is then written into Rd (sign-extended in
RV64). When both the two Q15 inputs are 0x8000, saturation will happen. The result will be
saturated to 0x7FFFFFFF and the overflow flag OV will be set.

<strong>Operations</strong>:\n
@code
aop = Rs1.H[0]; bop = Rs2.H[0]; // KDMBB
aop = Rs1.H[0]; bop = Rs2.H[1]; // KDMBT
aop = Rs1.H[1]; bop = Rs2.H[1]; // KDMTT
If (0x8000 != aop | 0x8000 != bop) {
  Mresult = aop * bop;
  resQ31 = Mresult << 1;
  Rd = resQ31; // RV32
  Rd = SE(resQ31); // RV64
} else {
  resQ31 = 0x7FFFFFFF;
  Rd = resQ31; // RV32
  Rd = SE(resQ31); // RV64
  OV = 1;
}
@endcode

\param [in]  a    unsigned int type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1gaeac5ef72f33c8014a3f045587046c5de';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KDMTT';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '2038';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KDMTT (Signed Saturating Double Multiply T16 x T16)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
KDMxy Rd, Rs1, Rs2 (xy = BB, BT, TT)
@endcode

<strong>Purpose</strong>:\n
Multiply the signed Q15 integer contents of two 16-bit data in the corresponding portion
of the lower 32-bit chunk in registers and then double and saturate the Q31 result. The result is
written into the destination register for RV32 or sign-extended to 64-bits and written into the
destination register for RV64. If saturation happens, an overflow flag OV will be set.

<strong>Description</strong>:\n
Multiply the top or bottom 16-bit Q15 content of the lower 32-bit portion in Rs1 with
the top or bottom 16-bit Q15 content of the lower 32-bit portion in Rs2. The Q30 result is then
doubled and saturated into a Q31 value. The Q31 value is then written into Rd (sign-extended in
RV64). When both the two Q15 inputs are 0x8000, saturation will happen. The result will be
saturated to 0x7FFFFFFF and the overflow flag OV will be set.

<strong>Operations</strong>:\n
@code
aop = Rs1.H[0]; bop = Rs2.H[0]; // KDMBB
aop = Rs1.H[0]; bop = Rs2.H[1]; // KDMBT
aop = Rs1.H[1]; bop = Rs2.H[1]; // KDMTT
If (0x8000 != aop | 0x8000 != bop) {
  Mresult = aop * bop;
  resQ31 = Mresult << 1;
  Rd = resQ31; // RV32
  Rd = SE(resQ31); // RV64
} else {
  resQ31 = 0x7FFFFFFF;
  Rd = resQ31; // RV32
  Rd = SE(resQ31); // RV64
  OV = 1;
}
@endcode

\param [in]  a    unsigned int type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1ga1dfb3b7d81e19adc86e14e98971f3e42';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KDMABB';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '2103';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KDMABB (Signed Saturating Double Multiply Addition B16 x B16)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
KDMAxy Rd, Rs1, Rs2 (xy = BB, BT, TT)
@endcode

<strong>Purpose</strong>:\n
Multiply the signed Q15 integer contents of two 16-bit data in the corresponding portion
of the lower 32-bit chunk in registers and then double and saturate the Q31 result, add the result
with the sign-extended lower 32-bit chunk destination register and write the saturated addition
result into the destination register. If saturation happens, an overflow flag OV will be set.

<strong>Description</strong>:\n
Multiply the top or bottom 16-bit Q15 content of the lower 32-bit portion in Rs1 with
the top or bottom 16-bit Q15 content of the lower 32-bit portion in Rs2. The Q30 result is then
doubled and saturated into a Q31 value. The Q31 value is then added with the content of Rd. If the
addition result is beyond the Q31 number range (-2^31 <= Q31 <= 2^31-1), it is saturated to the range and
the OV flag is set to 1. The result after saturation is written to Rd.
When both the two Q15 inputs are 0x8000, saturation will happen and the overflow flag OV will be
set.

<strong>Operations</strong>:\n
@code
aop = Rs1.H[0]; bop = Rs2.H[0]; // KDMABB
aop = Rs1.H[0]; bop = Rs2.H[1]; // KDMABT
aop = Rs1.H[1]; bop = Rs2.H[1]; // KDMATT
If (0x8000 != aop | 0x8000 != bop) {
  Mresult = aop * bop;
  resQ31 = Mresult << 1;
} else {
  resQ31 = 0x7FFFFFFF;
  OV = 1;
}
resadd = Rd + resQ31; // RV32
resadd = Rd.W[0] + resQ31; // RV64
if (resadd > (2^31)-1) {
  resadd = (2^31)-1;
  OV = 1;
} else if (resadd < -2^31) {
  resadd = -2^31;
  OV = 1;
}
Rd = resadd; // RV32
Rd = SE(resadd); // RV64
@endcode

\param [in]  t    long type of value stored in t
\param [in]  a    unsigned int type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1ga15d10fbf27043451ffe312f61a7356d0';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KDMABT';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '2167';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KDMABT (Signed Saturating Double Multiply Addition B16 x T16)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
KDMAxy Rd, Rs1, Rs2 (xy = BB, BT, TT)
@endcode

<strong>Purpose</strong>:\n
Multiply the signed Q15 integer contents of two 16-bit data in the corresponding portion
of the lower 32-bit chunk in registers and then double and saturate the Q31 result, add the result
with the sign-extended lower 32-bit chunk destination register and write the saturated addition
result into the destination register. If saturation happens, an overflow flag OV will be set.

<strong>Description</strong>:\n
Multiply the top or bottom 16-bit Q15 content of the lower 32-bit portion in Rs1 with
the top or bottom 16-bit Q15 content of the lower 32-bit portion in Rs2. The Q30 result is then
doubled and saturated into a Q31 value. The Q31 value is then added with the content of Rd. If the
addition result is beyond the Q31 number range (-2^31 <= Q31 <= 2^31-1), it is saturated to the range and
the OV flag is set to 1. The result after saturation is written to Rd.
When both the two Q15 inputs are 0x8000, saturation will happen and the overflow flag OV will be
set.

<strong>Operations</strong>:\n
@code
aop = Rs1.H[0]; bop = Rs2.H[0]; // KDMABB
aop = Rs1.H[0]; bop = Rs2.H[1]; // KDMABT
aop = Rs1.H[1]; bop = Rs2.H[1]; // KDMATT
If (0x8000 != aop | 0x8000 != bop) {
  Mresult = aop * bop;
  resQ31 = Mresult << 1;
} else {
  resQ31 = 0x7FFFFFFF;
  OV = 1;
}
resadd = Rd + resQ31; // RV32
resadd = Rd.W[0] + resQ31; // RV64
if (resadd > (2^31)-1) {
  resadd = (2^31)-1;
  OV = 1;
} else if (resadd < -2^31) {
  resadd = -2^31;
  OV = 1;
}
Rd = resadd; // RV32
Rd = SE(resadd); // RV64
@endcode

\param [in]  t    long type of value stored in t
\param [in]  a    unsigned int type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1ga64a75e6b0aecedf02afd2df4458a6ee1';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KDMATT';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '2231';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KDMATT (Signed Saturating Double Multiply Addition T16 x T16)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
KDMAxy Rd, Rs1, Rs2 (xy = BB, BT, TT)
@endcode

<strong>Purpose</strong>:\n
Multiply the signed Q15 integer contents of two 16-bit data in the corresponding portion
of the lower 32-bit chunk in registers and then double and saturate the Q31 result, add the result
with the sign-extended lower 32-bit chunk destination register and write the saturated addition
result into the destination register. If saturation happens, an overflow flag OV will be set.

<strong>Description</strong>:\n
Multiply the top or bottom 16-bit Q15 content of the lower 32-bit portion in Rs1 with
the top or bottom 16-bit Q15 content of the lower 32-bit portion in Rs2. The Q30 result is then
doubled and saturated into a Q31 value. The Q31 value is then added with the content of Rd. If the
addition result is beyond the Q31 number range (-2^31 <= Q31 <= 2^31-1), it is saturated to the range and
the OV flag is set to 1. The result after saturation is written to Rd.
When both the two Q15 inputs are 0x8000, saturation will happen and the overflow flag OV will be
set.

<strong>Operations</strong>:\n
@code
aop = Rs1.H[0]; bop = Rs2.H[0]; // KDMABB
aop = Rs1.H[0]; bop = Rs2.H[1]; // KDMABT
aop = Rs1.H[1]; bop = Rs2.H[1]; // KDMATT
If (0x8000 != aop | 0x8000 != bop) {
  Mresult = aop * bop;
  resQ31 = Mresult << 1;
} else {
  resQ31 = 0x7FFFFFFF;
  OV = 1;
}
resadd = Rd + resQ31; // RV32
resadd = Rd.W[0] + resQ31; // RV64
if (resadd > (2^31)-1) {
  resadd = (2^31)-1;
  OV = 1;
} else if (resadd < -2^31) {
  resadd = -2^31;
  OV = 1;
}
Rd = resadd; // RV32
Rd = SE(resadd); // RV64
@endcode

\param [in]  t    long type of value stored in t
\param [in]  a    unsigned int type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MULTIPLY_1ga4e14ca16506e0e4190fe003aba01d90f';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KHM8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '2292';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KHM8 (SIMD Signed Saturating Q7 Multiply)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
KHM8 Rd, Rs1, Rs2
KHMX8 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do Q7xQ7 element multiplications simultaneously. The Q14 results are then reduced to Q7
numbers again.

<strong>Description</strong>:\n
For the <tt>KHM8</tt> instruction, multiply the top 8-bit Q7 content of 16-bit chunks in Rs1
with the top 8-bit Q7 content of 16-bit chunks in Rs2. At the same time, multiply the bottom 8-bit Q7
content of 16-bit chunks in Rs1 with the bottom 8-bit Q7 content of 16-bit chunks in Rs2.
For the <tt>KHMX16</tt> instruction, multiply the top 8-bit Q7 content of 16-bit chunks in Rs1 with the
bottom 8-bit Q7 content of 16-bit chunks in Rs2. At the same time, multiply the bottom 8-bit Q7
content of 16-bit chunks in Rs1 with the top 8-bit Q7 content of 16-bit chunks in Rs2.
The Q14 results are then right-shifted 7-bits and saturated into Q7 values. The Q7 results are then
written into Rd. When both the two Q7 inputs of a multiplication are 0x80, saturation will happen.
The result will be saturated to 0x7F and the overflow flag OV will be set.

<strong>Operations</strong>:\n
@code
if (is `KHM8`) {
  op1t = Rs1.B[x+1]; op2t = Rs2.B[x+1]; // top
  op1b = Rs1.B[x]; op2b = Rs2.B[x]; // bottom
} else if (is `KHMX8`) {
  op1t = Rs1.H[x+1]; op2t = Rs2.H[x]; // Rs1 top
  op1b = Rs1.H[x]; op2b = Rs2.H[x+1]; // Rs1 bottom
}
for ((aop,bop,res) in [(op1t,op2t,rest), (op1b,op2b,resb)]) {
  if (0x80 != aop | 0x80 != bop) {
    res = (aop s* bop) >> 7;
  } else {
    res= 0x7F;
    OV = 1;
  }
}
Rd.H[x/2] = concat(rest, resb);
for RV32, x=0,2
for RV64, x=0,2,4,6
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MULTIPLY_1ga147c294001e28791aaf5d757add3ff29';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KHMX8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '2354';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KHMX8 (SIMD Signed Saturating Crossed Q7 Multiply)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
KHM8 Rd, Rs1, Rs2
KHMX8 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do Q7xQ7 element multiplications simultaneously. The Q14 results are then reduced to Q7
numbers again.

<strong>Description</strong>:\n
For the <tt>KHM8</tt> instruction, multiply the top 8-bit Q7 content of 16-bit chunks in Rs1
with the top 8-bit Q7 content of 16-bit chunks in Rs2. At the same time, multiply the bottom 8-bit Q7
content of 16-bit chunks in Rs1 with the bottom 8-bit Q7 content of 16-bit chunks in Rs2.
For the <tt>KHMX16</tt> instruction, multiply the top 8-bit Q7 content of 16-bit chunks in Rs1 with the
bottom 8-bit Q7 content of 16-bit chunks in Rs2. At the same time, multiply the bottom 8-bit Q7
content of 16-bit chunks in Rs1 with the top 8-bit Q7 content of 16-bit chunks in Rs2.
The Q14 results are then right-shifted 7-bits and saturated into Q7 values. The Q7 results are then
written into Rd. When both the two Q7 inputs of a multiplication are 0x80, saturation will happen.
The result will be saturated to 0x7F and the overflow flag OV will be set.

<strong>Operations</strong>:\n
@code
if (is `KHM8`) {
  op1t = Rs1.B[x+1]; op2t = Rs2.B[x+1]; // top
  op1b = Rs1.B[x]; op2b = Rs2.B[x]; // bottom
} else if (is `KHMX8`) {
  op1t = Rs1.H[x+1]; op2t = Rs2.H[x]; // Rs1 top
  op1b = Rs1.H[x]; op2b = Rs2.H[x+1]; // Rs1 bottom
}
for ((aop,bop,res) in [(op1t,op2t,rest), (op1b,op2b,resb)]) {
  if (0x80 != aop | 0x80 != bop) {
    res = (aop s* bop) >> 7;
  } else {
    res= 0x7F;
    OV = 1;
  }
}
Rd.H[x/2] = concat(rest, resb);
for RV32, x=0,2
for RV64, x=0,2,4,6
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MULTIPLY_1ga4d6124229f1e4e1bef085b9a1fad5414';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KHM16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '2417';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KHM16 (SIMD Signed Saturating Q15 Multiply)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
KHM16 Rd, Rs1, Rs2
KHMX16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do Q15xQ15 element multiplications simultaneously. The Q30 results are then reduced to
Q15 numbers again.

<strong>Description</strong>:\n
For the <tt>KHM16</tt> instruction, multiply the top 16-bit Q15 content of 32-bit chunks in
Rs1 with the top 16-bit Q15 content of 32-bit chunks in Rs2. At the same time, multiply the bottom
16-bit Q15 content of 32-bit chunks in Rs1 with the bottom 16-bit Q15 content of 32-bit chunks in
Rs2.
For the <tt>KHMX16</tt> instruction, multiply the top 16-bit Q15 content of 32-bit chunks in Rs1 with the
bottom 16-bit Q15 content of 32-bit chunks in Rs2. At the same time, multiply the bottom 16-bit Q15
content of 32-bit chunks in Rs1 with the top 16-bit Q15 content of 32-bit chunks in Rs2.
The Q30 results are then right-shifted 15-bits and saturated into Q15 values. The Q15 results are
then written into Rd. When both the two Q15 inputs of a multiplication are 0x8000, saturation will
happen. The result will be saturated to 0x7FFF and the overflow flag OV will be set.

<strong>Operations</strong>:\n
@code
if (is `KHM16`) {
  op1t = Rs1.H[x+1]; op2t = Rs2.H[x+1]; // top
  op1b = Rs1.H[x]; op2b = Rs2.H[x]; // bottom
} else if (is `KHMX16`) {
  op1t = Rs1.H[x+1]; op2t = Rs2.H[x]; // Rs1 top
  op1b = Rs1.H[x]; op2b = Rs2.H[x+1]; // Rs1 bottom
}
for ((aop,bop,res) in [(op1t,op2t,rest), (op1b,op2b,resb)]) {
  if (0x8000 != aop | 0x8000 != bop) {
    res = (aop s* bop) >> 15;
  } else {
    res= 0x7FFF;
    OV = 1;
  }
}
Rd.W[x/2] = concat(rest, resb);
for RV32: x=0
for RV64: x=0,2
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MULTIPLY_1ga99ca71b2ac7b14ff937d4ca9946be3d3';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KHMX16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '2480';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KHMX16 (SIMD Signed Saturating Crossed Q15 Multiply)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
KHM16 Rd, Rs1, Rs2
KHMX16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do Q15xQ15 element multiplications simultaneously. The Q30 results are then reduced to
Q15 numbers again.

<strong>Description</strong>:\n
For the <tt>KHM16</tt> instruction, multiply the top 16-bit Q15 content of 32-bit chunks in
Rs1 with the top 16-bit Q15 content of 32-bit chunks in Rs2. At the same time, multiply the bottom
16-bit Q15 content of 32-bit chunks in Rs1 with the bottom 16-bit Q15 content of 32-bit chunks in
Rs2.
For the <tt>KHMX16</tt> instruction, multiply the top 16-bit Q15 content of 32-bit chunks in Rs1 with the
bottom 16-bit Q15 content of 32-bit chunks in Rs2. At the same time, multiply the bottom 16-bit Q15
content of 32-bit chunks in Rs1 with the top 16-bit Q15 content of 32-bit chunks in Rs2.
The Q30 results are then right-shifted 15-bits and saturated into Q15 values. The Q15 results are
then written into Rd. When both the two Q15 inputs of a multiplication are 0x8000, saturation will
happen. The result will be saturated to 0x7FFF and the overflow flag OV will be set.

<strong>Operations</strong>:\n
@code
if (is `KHM16`) {
  op1t = Rs1.H[x+1]; op2t = Rs2.H[x+1]; // top
  op1b = Rs1.H[x]; op2b = Rs2.H[x]; // bottom
} else if (is `KHMX16`) {
  op1t = Rs1.H[x+1]; op2t = Rs2.H[x]; // Rs1 top
  op1b = Rs1.H[x]; op2b = Rs2.H[x+1]; // Rs1 bottom
}
for ((aop,bop,res) in [(op1t,op2t,rest), (op1b,op2b,resb)]) {
  if (0x8000 != aop | 0x8000 != bop) {
    res = (aop s* bop) >> 15;
  } else {
    res= 0x7FFF;
    OV = 1;
  }
}
Rd.W[x/2] = concat(rest, resb);
for RV32: x=0
for RV64: x=0,2
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q15__SAT__ALU_1ga26af5537e6aca0133b66832596728a8e';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KHMBB';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '2533';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KHMBB (Signed Saturating Half Multiply B16 x B16)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
KHMxy Rd, Rs1, Rs2 (xy = BB, BT, TT)
@endcode

<strong>Purpose</strong>:\n
Multiply the signed Q15 number contents of two 16-bit data in the corresponding portion
of the lower 32-bit chunk in registers and then right-shift 15 bits to turn the Q30 result into a Q15
number again and saturate the Q15 result into the destination register. If saturation happens, an
overflow flag OV will be set.

<strong>Description</strong>:\n
Multiply the top or bottom 16-bit Q15 content of the lower 32-bit portion in Rs1 with
the top or bottom 16-bit Q15 content of the lower 32-bit portion in Rs2. The Q30 result is then right-
shifted 15-bits and saturated into a Q15 value. The Q15 value is then sing-extended and written into
Rd. When both the two Q15 inputs are 0x8000, saturation will happen. The result will be saturated
to 0x7FFF and the overflow flag OV will be set.

<strong>Operations</strong>:\n
@code
aop = Rs1.H[0]; bop = Rs2.H[0]; // KHMBB
aop = Rs1.H[0]; bop = Rs2.H[1]; // KHMBT
aop = Rs1.H[1]; bop = Rs2.H[1]; // KHMTT
If (0x8000 != aop | 0x8000 != bop) {
  Mresult[31:0] = aop * bop;
  res[15:0] = Mresult[30:15];
} else {
  res[15:0] = 0x7FFF;
  OV = 1;
}
Rd = SE32(res[15:0]); // Rv32
Rd = SE64(res[15:0]); // RV64
@endcode

\param [in]  a    unsigned int type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q15__SAT__ALU_1ga96e244df43ec32a722a3562a0a59a6a6';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KHMBT';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '2586';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KHMBT (Signed Saturating Half Multiply B16 x T16)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
KHMxy Rd, Rs1, Rs2 (xy = BB, BT, TT)
@endcode

<strong>Purpose</strong>:\n
Multiply the signed Q15 number contents of two 16-bit data in the corresponding portion
of the lower 32-bit chunk in registers and then right-shift 15 bits to turn the Q30 result into a Q15
number again and saturate the Q15 result into the destination register. If saturation happens, an
overflow flag OV will be set.

<strong>Description</strong>:\n
Multiply the top or bottom 16-bit Q15 content of the lower 32-bit portion in Rs1 with
the top or bottom 16-bit Q15 content of the lower 32-bit portion in Rs2. The Q30 result is then right-
shifted 15-bits and saturated into a Q15 value. The Q15 value is then sing-extended and written into
Rd. When both the two Q15 inputs are 0x8000, saturation will happen. The result will be saturated
to 0x7FFF and the overflow flag OV will be set.

<strong>Operations</strong>:\n
@code
aop = Rs1.H[0]; bop = Rs2.H[0]; // KHMBB
aop = Rs1.H[0]; bop = Rs2.H[1]; // KHMBT
aop = Rs1.H[1]; bop = Rs2.H[1]; // KHMTT
If (0x8000 != aop | 0x8000 != bop) {
  Mresult[31:0] = aop * bop;
  res[15:0] = Mresult[30:15];
} else {
  res[15:0] = 0x7FFF;
  OV = 1;
}
Rd = SE32(res[15:0]); // Rv32
Rd = SE64(res[15:0]); // RV64
@endcode

\param [in]  a    unsigned int type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q15__SAT__ALU_1ga06a6deed6954a496ac381758e067e850';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KHMTT';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '2639';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KHMTT (Signed Saturating Half Multiply T16 x T16)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
KHMxy Rd, Rs1, Rs2 (xy = BB, BT, TT)
@endcode

<strong>Purpose</strong>:\n
Multiply the signed Q15 number contents of two 16-bit data in the corresponding portion
of the lower 32-bit chunk in registers and then right-shift 15 bits to turn the Q30 result into a Q15
number again and saturate the Q15 result into the destination register. If saturation happens, an
overflow flag OV will be set.

<strong>Description</strong>:\n
Multiply the top or bottom 16-bit Q15 content of the lower 32-bit portion in Rs1 with
the top or bottom 16-bit Q15 content of the lower 32-bit portion in Rs2. The Q30 result is then right-
shifted 15-bits and saturated into a Q15 value. The Q15 value is then sing-extended and written into
Rd. When both the two Q15 inputs are 0x8000, saturation will happen. The result will be saturated
to 0x7FFF and the overflow flag OV will be set.

<strong>Operations</strong>:\n
@code
aop = Rs1.H[0]; bop = Rs2.H[0]; // KHMBB
aop = Rs1.H[0]; bop = Rs2.H[1]; // KHMBT
aop = Rs1.H[1]; bop = Rs2.H[1]; // KHMTT
If (0x8000 != aop | 0x8000 != bop) {
  Mresult[31:0] = aop * bop;
  res[15:0] = Mresult[30:15];
} else {
  res[15:0] = 0x7FFF;
  OV = 1;
}
Rd = SE32(res[15:0]); // Rv32
Rd = SE64(res[15:0]); // RV64
@endcode

\param [in]  a    unsigned int type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga3a415f9cbeefb992bc791099e73c8794';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMABB';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '2703';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMABB (SIMD Saturating Signed Multiply Bottom Halfs & Add)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
KMABB Rd, Rs1, Rs2
KMABT Rd, Rs1, Rs2
KMATT Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 16-bit content of 32-bit elements in a register with the 16-bit content
of 32-bit elements in another register and add the result to the content of 32-bit elements in the
third register. The addition result may be saturated and is written to the third register.
* KMABB: rd.W[x] + bottom*bottom (per 32-bit element)
* KMABT rd.W[x] + bottom*top (per 32-bit element)
* KMATT rd.W[x] + top*top (per 32-bit element)

<strong>Description</strong>:\n
For the <tt>KMABB</tt> instruction, it multiplies the bottom 16-bit content of 32-bit elements in Rs1 with
the bottom 16-bit content of 32-bit elements in Rs2.
For the <tt>KMABT</tt> instruction, it multiplies the bottom 16-bit content of 32-bit elements in Rs1 with
the top 16-bit content of 32-bit elements in Rs2.
For the <tt>KMATT</tt> instruction, it multiplies the top 16-bit content of 32-bit elements in Rs1 with the
top 16-bit content of 32-bit elements in Rs2.
The multiplication result is added to the content of 32-bit elements in Rd. If the addition result is
beyond the Q31 number range (-2^31 <= Q31 <= 2^31-1), it is saturated to the range and the OV bit is set to
1. The results after saturation are written to Rd. The 16-bit contents of Rs1 and Rs2 are treated as
signed integers.

<strong>Operations</strong>:\n
@code
res[x] = Rd.W[x] + (Rs1.W[x].H[0] * Rs2.W[x].H[0]); // KMABB
res[x] = Rd.W[x] + (Rs1.W[x].H[0] * Rs2.W[x].H[1]); // KMABT
res[x] = Rd.W[x] + (Rs1.W[x].H[1] * Rs2.W[x].H[1]); // KMATT
if (res[x] > (2^31)-1) {
  res[x] = (2^31)-1;
  OV = 1;
} else if (res[x] < -2^31) {
  res[x] = -2^31;
  OV = 1;
}
Rd.W[x] = res[x];
for RV32: x=0
for RV64: x=1...0
@endcode

\param [in]  t    long type of value stored in t
\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga3fe17f8a2e70a69f1751a1c0093c3158';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMABT';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '2766';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMABT (SIMD Saturating Signed Multiply Bottom & Top Halfs & Add)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
KMABB Rd, Rs1, Rs2
KMABT Rd, Rs1, Rs2
KMATT Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 16-bit content of 32-bit elements in a register with the 16-bit content
of 32-bit elements in another register and add the result to the content of 32-bit elements in the
third register. The addition result may be saturated and is written to the third register.
* KMABB: rd.W[x] + bottom*bottom (per 32-bit element)
* KMABT rd.W[x] + bottom*top (per 32-bit element)
* KMATT rd.W[x] + top*top (per 32-bit element)

<strong>Description</strong>:\n
For the <tt>KMABB</tt> instruction, it multiplies the bottom 16-bit content of 32-bit elements in Rs1 with
the bottom 16-bit content of 32-bit elements in Rs2.
For the <tt>KMABT</tt> instruction, it multiplies the bottom 16-bit content of 32-bit elements in Rs1 with
the top 16-bit content of 32-bit elements in Rs2.
For the <tt>KMATT</tt> instruction, it multiplies the top 16-bit content of 32-bit elements in Rs1 with the
top 16-bit content of 32-bit elements in Rs2.
The multiplication result is added to the content of 32-bit elements in Rd. If the addition result is
beyond the Q31 number range (-2^31 <= Q31 <= 2^31-1), it is saturated to the range and the OV bit is set to
1. The results after saturation are written to Rd. The 16-bit contents of Rs1 and Rs2 are treated as
signed integers.

<strong>Operations</strong>:\n
@code
res[x] = Rd.W[x] + (Rs1.W[x].H[0] * Rs2.W[x].H[0]); // KMABB
res[x] = Rd.W[x] + (Rs1.W[x].H[0] * Rs2.W[x].H[1]); // KMABT
res[x] = Rd.W[x] + (Rs1.W[x].H[1] * Rs2.W[x].H[1]); // KMATT
if (res[x] > (2^31)-1) {
  res[x] = (2^31)-1;
  OV = 1;
} else if (res[x] < -2^31) {
  res[x] = -2^31;
  OV = 1;
}
Rd.W[x] = res[x];
for RV32: x=0
for RV64: x=1...0
@endcode

\param [in]  t    long type of value stored in t
\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1gad6267dd09022516bcd77ce742b8b40ab';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMATT';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '2829';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMATT (SIMD Saturating Signed Multiply Top Halfs & Add)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
KMABB Rd, Rs1, Rs2
KMABT Rd, Rs1, Rs2
KMATT Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 16-bit content of 32-bit elements in a register with the 16-bit content
of 32-bit elements in another register and add the result to the content of 32-bit elements in the
third register. The addition result may be saturated and is written to the third register.
* KMABB: rd.W[x] + bottom*bottom (per 32-bit element)
* KMABT rd.W[x] + bottom*top (per 32-bit element)
* KMATT rd.W[x] + top*top (per 32-bit element)

<strong>Description</strong>:\n
For the <tt>KMABB</tt> instruction, it multiplies the bottom 16-bit content of 32-bit elements in Rs1 with
the bottom 16-bit content of 32-bit elements in Rs2.
For the <tt>KMABT</tt> instruction, it multiplies the bottom 16-bit content of 32-bit elements in Rs1 with
the top 16-bit content of 32-bit elements in Rs2.
For the <tt>KMATT</tt> instruction, it multiplies the top 16-bit content of 32-bit elements in Rs1 with the
top 16-bit content of 32-bit elements in Rs2.
The multiplication result is added to the content of 32-bit elements in Rd. If the addition result is
beyond the Q31 number range (-2^31 <= Q31 <= 2^31-1), it is saturated to the range and the OV bit is set to
1. The results after saturation are written to Rd. The 16-bit contents of Rs1 and Rs2 are treated as
signed integers.

<strong>Operations</strong>:\n
@code
res[x] = Rd.W[x] + (Rs1.W[x].H[0] * Rs2.W[x].H[0]); // KMABB
res[x] = Rd.W[x] + (Rs1.W[x].H[0] * Rs2.W[x].H[1]); // KMABT
res[x] = Rd.W[x] + (Rs1.W[x].H[1] * Rs2.W[x].H[1]); // KMATT
if (res[x] > (2^31)-1) {
  res[x] = (2^31)-1;
  OV = 1;
} else if (res[x] < -2^31) {
  res[x] = -2^31;
  OV = 1;
}
Rd.W[x] = res[x];
for RV32: x=0
for RV64: x=1...0
@endcode

\param [in]  t    long type of value stored in t
\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga84ab72987eeee69e2392965d8d8944f4';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMADA';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '2893';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMADA (SIMD Saturating Signed Multiply Two Halfs and Two Adds)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
KMADA Rd, Rs1, Rs2
KMAXDA Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 16-bit multiplications from 32-bit elements in two registers; and then adds
the two 32-bit results and 32-bit elements in a third register together. The addition result may be
saturated.
* KMADA: rd.W[x] + top*top + bottom*bottom (per 32-bit element)
* KMAXDA: rd.W[x] + top*bottom + bottom*top (per 32-bit element)

<strong>Description</strong>:\n
For the `KMADA instruction, it multiplies the bottom 16-bit content of 32-bit elements in Rs1 with
the bottom 16-bit content of 32-bit elements in Rs2 and then adds the result to the result of
multiplying the top 16-bit content of 32-bit elements in Rs1 with the top 16-bit content of 32-bit
elements in Rs2.
For the <tt>KMAXDA</tt> instruction, it multiplies the top 16-bit content of 32-bit elements in Rs1 with the
bottom 16-bit content of 32-bit elements in Rs2 and then adds the result to the result of multiplying
the bottom 16-bit content of 32-bit elements in Rs1 with the top 16-bit content of 32-bit elements in
Rs2.
The result is added to the content of 32-bit elements in Rd. If the addition result is beyond the Q31
number range (-2^31 <= Q31 <= 2^31-1), it is saturated to the range and the OV bit is set to 1. The 32-bit
results after saturation are written to Rd. The 16-bit contents of Rs1 and Rs2 are treated as signed
integers.

<strong>Operations</strong>:\n
@code
// KMADA
res[x] = Rd.W[x] + (Rs1.W[x].H[1] * Rs2.W[x].H[1]) + (Rs1.W[x].H[0] * Rs2.W[x].H[0]);
// KMAXDA
res[x] = Rd.W[x] + (Rs1.W[x].H[1] * Rs2.W[x].H[0]) + (Rs1.W[x].H[0] * Rs2.W[x].H[1]);
if (res[x] > (2^31)-1) {
  res[x] = (2^31)-1;
  OV = 1;
} else if (res[x] < -2^31) {
  res[x] = -2^31;
OV = 1;
}
Rd.W[x] = res[x];
for RV32: x=0
for RV64: x=1...0
@endcode

\param [in]  t    long type of value stored in t
\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
      func-mem-referenceby = {
        func-mem-ref-id = 'core__feature__dsp_8h_1ga6d8dce49013b778d0290cd057cf45dd0';
        func-mem-ref-line = '18530';
        func-mem-ref-name = '__RV_EXPD83';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga1cab84ebee0378b9c1069e17efdbfd69';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMAXDA';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '2957';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMAXDA (SIMD Saturating Signed Crossed Multiply Two Halfs and Two Adds)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
KMADA Rd, Rs1, Rs2
KMAXDA Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 16-bit multiplications from 32-bit elements in two registers; and then adds
the two 32-bit results and 32-bit elements in a third register together. The addition result may be
saturated.
* KMADA: rd.W[x] + top*top + bottom*bottom (per 32-bit element)
* KMAXDA: rd.W[x] + top*bottom + bottom*top (per 32-bit element)

<strong>Description</strong>:\n
For the `KMADA instruction, it multiplies the bottom 16-bit content of 32-bit elements in Rs1 with
the bottom 16-bit content of 32-bit elements in Rs2 and then adds the result to the result of
multiplying the top 16-bit content of 32-bit elements in Rs1 with the top 16-bit content of 32-bit
elements in Rs2.
For the <tt>KMAXDA</tt> instruction, it multiplies the top 16-bit content of 32-bit elements in Rs1 with the
bottom 16-bit content of 32-bit elements in Rs2 and then adds the result to the result of multiplying
the bottom 16-bit content of 32-bit elements in Rs1 with the top 16-bit content of 32-bit elements in
Rs2.
The result is added to the content of 32-bit elements in Rd. If the addition result is beyond the Q31
number range (-2^31 <= Q31 <= 2^31-1), it is saturated to the range and the OV bit is set to 1. The 32-bit
results after saturation are written to Rd. The 16-bit contents of Rs1 and Rs2 are treated as signed
integers.

<strong>Operations</strong>:\n
@code
// KMADA
res[x] = Rd.W[x] + (Rs1.W[x].H[1] * Rs2.W[x].H[1]) + (Rs1.W[x].H[0] * Rs2.W[x].H[0]);
// KMAXDA
res[x] = Rd.W[x] + (Rs1.W[x].H[1] * Rs2.W[x].H[0]) + (Rs1.W[x].H[0] * Rs2.W[x].H[1]);
if (res[x] > (2^31)-1) {
  res[x] = (2^31)-1;
  OV = 1;
} else if (res[x] < -2^31) {
  res[x] = -2^31;
OV = 1;
}
Rd.W[x] = res[x];
for RV32: x=0
for RV64: x=1...0
@endcode

\param [in]  t    long type of value stored in t
\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
      func-mem-referenceby = {
        func-mem-ref-id = 'core__feature__dsp_8h_1ga6d8dce49013b778d0290cd057cf45dd0';
        func-mem-ref-line = '18530';
        func-mem-ref-name = '__RV_EXPD83';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga6b9f5141c87a343051b03494705eeac8';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMADS';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '3029';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMADS (SIMD Saturating Signed Multiply Two Halfs & Subtract & Add)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
KMADS Rd, Rs1, Rs2
KMADRS Rd, Rs1, Rs2
KMAXDS Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 16-bit multiplications from 32-bit elements in two registers; and then
perform a subtraction operation between the two 32-bit results. Then add the subtraction result to
the corresponding 32-bit elements in a third register. The addition result may be saturated.
* KMADS: rd.W[x] + (top*top - bottom*bottom) (per 32-bit element)
* KMADRS: rd.W[x] + (bottom*bottom - top*top) (per 32-bit element)
* KMAXDS: rd.W[x] + (top*bottom - bottom*top) (per 32-bit element)

<strong>Description</strong>:\n
For the <tt>KMADS</tt> instruction, it multiplies the bottom 16-bit content of 32-bit elements in Rs1 with
the bottom 16-bit content of 32-bit elements in Rs2 and then subtracts the result from the result of
multiplying the top 16-bit content of 32-bit elements in Rs1 with the top 16-bit content of 32-bit
elements in Rs2.
For the <tt>KMADRS</tt> instruction, it multiplies the top 16-bit content of 32-bit elements in Rs1 with the
top 16-bit content of 32-bit elements in Rs2 and then subtracts the result from the result of
multiplying the bottom 16-bit content of 32-bit elements in Rs1 with the bottom 16-bit content of 32-
bit elements in Rs2.
For the <tt>KMAXDS</tt> instruction, it multiplies the bottom 16-bit content of 32-bit elements in Rs1 with
the top 16-bit content of 32-bit elements in Rs2 and then subtracts the result from the result of
multiplying the top 16-bit content of 32-bit elements in Rs1 with the bottom 16-bit content of 32-bit
elements in Rs2.
The subtraction result is then added to the content of the corresponding 32-bit elements in Rd. If the
addition result is beyond the Q31 number range (-2^31 <= Q31 <= 2^31-1), it is saturated to the range and
the OV bit is set to 1. The 32-bit results after saturation are written to Rd. The 16-bit contents of Rs1
and Rs2 are treated as signed integers.

<strong>Operations</strong>:\n
@code
// KMADS
res[x] = Rd.W[x] + (Rs1.W[x].H[1] * Rs2.W[x].H[1]) - (Rs1.W[x].H[0] * Rs2.W[x].H[0]);
// KMADRS
res[x] = Rd.W[x] + (Rs1.W[x].H[0] * Rs2.W[x].H[0]) - (Rs1.W[x].H[1] * Rs2.W[x].H[1]);
// KMAXDS
res[x] = Rd.W[x] + (Rs1.W[x].H[1] * Rs2.W[x].H[0]) - (Rs1.W[x].H[0] * Rs2.W[x].H[1]);
if (res[x] > (2^31)-1) {
  res[x] = (2^31)-1;
  OV = 1;
} else if (res[x] < -2^31) {
  res[x] = -2^31;
  OV = 1;
}
Rd.W[x] = res[x];
for RV32: x=0
for RV64: x=1...0
@endcode

\param [in]  t    long type of value stored in t
\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga13576aa03f836be838f491fe7cc483d9';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMADRS';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '3101';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMADRS (SIMD Saturating Signed Multiply Two Halfs & Reverse Subtract & Add)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
KMADS Rd, Rs1, Rs2
KMADRS Rd, Rs1, Rs2
KMAXDS Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 16-bit multiplications from 32-bit elements in two registers; and then
perform a subtraction operation between the two 32-bit results. Then add the subtraction result to
the corresponding 32-bit elements in a third register. The addition result may be saturated.
* KMADS: rd.W[x] + (top*top - bottom*bottom) (per 32-bit element)
* KMADRS: rd.W[x] + (bottom*bottom - top*top) (per 32-bit element)
* KMAXDS: rd.W[x] + (top*bottom - bottom*top) (per 32-bit element)

<strong>Description</strong>:\n
For the <tt>KMADS</tt> instruction, it multiplies the bottom 16-bit content of 32-bit elements in Rs1 with
the bottom 16-bit content of 32-bit elements in Rs2 and then subtracts the result from the result of
multiplying the top 16-bit content of 32-bit elements in Rs1 with the top 16-bit content of 32-bit
elements in Rs2.
For the <tt>KMADRS</tt> instruction, it multiplies the top 16-bit content of 32-bit elements in Rs1 with the
top 16-bit content of 32-bit elements in Rs2 and then subtracts the result from the result of
multiplying the bottom 16-bit content of 32-bit elements in Rs1 with the bottom 16-bit content of 32-
bit elements in Rs2.
For the <tt>KMAXDS</tt> instruction, it multiplies the bottom 16-bit content of 32-bit elements in Rs1 with
the top 16-bit content of 32-bit elements in Rs2 and then subtracts the result from the result of
multiplying the top 16-bit content of 32-bit elements in Rs1 with the bottom 16-bit content of 32-bit
elements in Rs2.
The subtraction result is then added to the content of the corresponding 32-bit elements in Rd. If the
addition result is beyond the Q31 number range (-2^31 <= Q31 <= 2^31-1), it is saturated to the range and
the OV bit is set to 1. The 32-bit results after saturation are written to Rd. The 16-bit contents of Rs1
and Rs2 are treated as signed integers.

<strong>Operations</strong>:\n
@code
// KMADS
res[x] = Rd.W[x] + (Rs1.W[x].H[1] * Rs2.W[x].H[1]) - (Rs1.W[x].H[0] * Rs2.W[x].H[0]);
// KMADRS
res[x] = Rd.W[x] + (Rs1.W[x].H[0] * Rs2.W[x].H[0]) - (Rs1.W[x].H[1] * Rs2.W[x].H[1]);
// KMAXDS
res[x] = Rd.W[x] + (Rs1.W[x].H[1] * Rs2.W[x].H[0]) - (Rs1.W[x].H[0] * Rs2.W[x].H[1]);
if (res[x] > (2^31)-1) {
  res[x] = (2^31)-1;
  OV = 1;
} else if (res[x] < -2^31) {
  res[x] = -2^31;
  OV = 1;
}
Rd.W[x] = res[x];
for RV32: x=0
for RV64: x=1...0
@endcode

\param [in]  t    long type of value stored in t
\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga4649629156d0af6a2e64c30ae5bee381';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMAXDS';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '3173';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMAXDS (SIMD Saturating Signed Crossed Multiply Two Halfs & Subtract & Add)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
KMADS Rd, Rs1, Rs2
KMADRS Rd, Rs1, Rs2
KMAXDS Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 16-bit multiplications from 32-bit elements in two registers; and then
perform a subtraction operation between the two 32-bit results. Then add the subtraction result to
the corresponding 32-bit elements in a third register. The addition result may be saturated.
* KMADS: rd.W[x] + (top*top - bottom*bottom) (per 32-bit element)
* KMADRS: rd.W[x] + (bottom*bottom - top*top) (per 32-bit element)
* KMAXDS: rd.W[x] + (top*bottom - bottom*top) (per 32-bit element)

<strong>Description</strong>:\n
For the <tt>KMADS</tt> instruction, it multiplies the bottom 16-bit content of 32-bit elements in Rs1 with
the bottom 16-bit content of 32-bit elements in Rs2 and then subtracts the result from the result of
multiplying the top 16-bit content of 32-bit elements in Rs1 with the top 16-bit content of 32-bit
elements in Rs2.
For the <tt>KMADRS</tt> instruction, it multiplies the top 16-bit content of 32-bit elements in Rs1 with the
top 16-bit content of 32-bit elements in Rs2 and then subtracts the result from the result of
multiplying the bottom 16-bit content of 32-bit elements in Rs1 with the bottom 16-bit content of 32-
bit elements in Rs2.
For the <tt>KMAXDS</tt> instruction, it multiplies the bottom 16-bit content of 32-bit elements in Rs1 with
the top 16-bit content of 32-bit elements in Rs2 and then subtracts the result from the result of
multiplying the top 16-bit content of 32-bit elements in Rs1 with the bottom 16-bit content of 32-bit
elements in Rs2.
The subtraction result is then added to the content of the corresponding 32-bit elements in Rd. If the
addition result is beyond the Q31 number range (-2^31 <= Q31 <= 2^31-1), it is saturated to the range and
the OV bit is set to 1. The 32-bit results after saturation are written to Rd. The 16-bit contents of Rs1
and Rs2 are treated as signed integers.

<strong>Operations</strong>:\n
@code
// KMADS
res[x] = Rd.W[x] + (Rs1.W[x].H[1] * Rs2.W[x].H[1]) - (Rs1.W[x].H[0] * Rs2.W[x].H[0]);
// KMADRS
res[x] = Rd.W[x] + (Rs1.W[x].H[0] * Rs2.W[x].H[0]) - (Rs1.W[x].H[1] * Rs2.W[x].H[1]);
// KMAXDS
res[x] = Rd.W[x] + (Rs1.W[x].H[1] * Rs2.W[x].H[0]) - (Rs1.W[x].H[0] * Rs2.W[x].H[1]);
if (res[x] > (2^31)-1) {
  res[x] = (2^31)-1;
  OV = 1;
} else if (res[x] < -2^31) {
  res[x] = -2^31;
  OV = 1;
}
Rd.W[x] = res[x];
for RV32: x=0
for RV64: x=1...0
@endcode

\param [in]  t    long type of value stored in t
\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__32B__MULT__64B__ADDSUB_1ga9033dac220a33b6a89c2fa0200534e48';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMAR64';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '3241';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMAR64 (Signed Multiply and Saturating Add to 64-Bit Data)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (64-bit Profile)

<strong>Syntax</strong>:\n
@code
KMAR64 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the 32-bit signed elements in two registers and add the 64-bit multiplication
results to the 64-bit signed data of a pair of registers (RV32) or a register (RV64). The result is
saturated to the Q63 range and written back to the pair of registers (RV32) or the register (RV64).

<strong>RV32 Description</strong>:\n
This instruction multiplies the 32-bit signed data of Rs1 with that of Rs2. It adds
the 64-bit multiplication result to the 64-bit signed data of an even/odd pair of registers specified by
Rd(4,1) with unlimited precision. If the 64-bit addition result is beyond the Q63 number range (-2^63 <=
Q63 <= 2^63-1), it is saturated to the range and the OV bit is set to 1. The saturated result is written back
to the even/odd pair of registers specified by Rd(4,1).
Rx(4,1), i.e., value d, determines the even/odd pair group of two registers. Specifically, the register
pair includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the high 32-bit of the result and the even <tt>2d</tt> register
of the pair contains the low 32-bit of the result.

<strong>RV64 Description</strong>:\n
This instruction multiplies the 32-bit signed elements of Rs1 with that of Rs2. It
adds the 64-bit multiplication results to the 64-bit signed data of Rd with unlimited precision. If the
64-bit addition result is beyond the Q63 number range (-2^63 <= Q63 <= 2^63-1), it is saturated to the range
and the OV bit is set to 1. The saturated result is written back to Rd.

<strong>Operations</strong>:\n
@code
RV32:
t_L = CONCAT(Rd(4,1),1'b0); t_H = CONCAT(Rd(4,1),1'b1);
result = R[t_H].R[t_L] + (Rs1 * Rs2);
if (result > (2^63)-1) {
  result = (2^63)-1; OV = 1;
} else if (result < -2^63) {
  result = -2^63; OV = 1;
}
R[t_H].R[t_L] = result;
RV64:
// `result` has unlimited precision
result = Rd + (Rs1.W[0] * Rs2.W[0]) + (Rs1.W[1] * Rs2.W[1]);
if (result > (2^63)-1) {
  result = (2^63)-1; OV = 1;
} else if (result < -2^63) {
  result = -2^63; OV = 1;
}
Rd = result;
@endcode

\param [in]  t    long long type of value stored in t
\param [in]  a    long type of value stored in a
\param [in]  b    long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga2de43c62af85225d40c1ac4210640925';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMDA';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '3291';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMDA (SIMD Signed Multiply Two Halfs and Add)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
KMDA Rd, Rs1, Rs2
KMXDA Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 16-bit multiplications from the 32-bit elements of two registers; and then
adds the two 32-bit results together. The addition result may be saturated.
* KMDA: top*top + bottom*bottom (per 32-bit element)
* KMXDA: top*bottom + bottom*top (per 32-bit element)

<strong>Description</strong>:\n
For the <tt>KMDA</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the bottom 16-bit content of the 32-bit elements of Rs2 and then adds the result to the result of
multiplying the top 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the 32-
bit elements of Rs2.
For the <tt>KMXDA</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the top 16-bit content of the 32-bit elements of Rs2 and then adds the result to the result of
multiplying the top 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit content of the
32-bit elements of Rs2.
The addition result is checked for saturation. If saturation happens, the result is saturated to 2^31-1.
The final results are written to Rd. The 16-bit contents are treated as signed integers.

<strong>Operations</strong>:\n
@code
if  Rs1.W[x]  !=  0x80008000)  or  (Rs2.W[x]  !=  0x80008000  {  //  KMDA  Rd.W[x]  =  Rs1.W[x].H[1]  *
Rs2.W[x].H[1]) + (Rs1.W[x].H[0] * Rs2.W[x].H[0]; // KMXDA Rd.W[x] = Rs1.W[x].H[1] * Rs2.W[x].H[0])
+  (Rs1.W[x].H[0]  *  Rs2.W[x].H[1];  }  else  {  Rd.W[x]  =  0x7fffffff;  OV  =  1;  }  for  RV32:  x=0  for  RV64:
x=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
      func-mem-referenceby = {
        func-mem-ref-id = 'core__feature__dsp_8h_1ga6d8dce49013b778d0290cd057cf45dd0';
        func-mem-ref-line = '18530';
        func-mem-ref-name = '__RV_EXPD83';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga37c752d6151fb29b43b01b2dd8af55d6';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMXDA';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '3342';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMXDA (SIMD Signed Crossed Multiply Two Halfs and Add)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
KMDA Rd, Rs1, Rs2
KMXDA Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 16-bit multiplications from the 32-bit elements of two registers; and then
adds the two 32-bit results together. The addition result may be saturated.
* KMDA: top*top + bottom*bottom (per 32-bit element)
* KMXDA: top*bottom + bottom*top (per 32-bit element)

<strong>Description</strong>:\n
For the <tt>KMDA</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the bottom 16-bit content of the 32-bit elements of Rs2 and then adds the result to the result of
multiplying the top 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the 32-
bit elements of Rs2.
For the <tt>KMXDA</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the top 16-bit content of the 32-bit elements of Rs2 and then adds the result to the result of
multiplying the top 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit content of the
32-bit elements of Rs2.
The addition result is checked for saturation. If saturation happens, the result is saturated to 2^31-1.
The final results are written to Rd. The 16-bit contents are treated as signed integers.

<strong>Operations</strong>:\n
@code
if  Rs1.W[x]  !=  0x80008000)  or  (Rs2.W[x]  !=  0x80008000  {  //  KMDA  Rd.W[x]  =  Rs1.W[x].H[1]  *
Rs2.W[x].H[1]) + (Rs1.W[x].H[0] * Rs2.W[x].H[0]; // KMXDA Rd.W[x] = Rs1.W[x].H[1] * Rs2.W[x].H[0])
+  (Rs1.W[x].H[0]  *  Rs2.W[x].H[1];  }  else  {  Rd.W[x]  =  0x7fffffff;  OV  =  1;  }  for  RV32:  x=0  for  RV64:
x=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
      func-mem-referenceby = {
        func-mem-ref-id = 'core__feature__dsp_8h_1ga6d8dce49013b778d0290cd057cf45dd0';
        func-mem-ref-line = '18530';
        func-mem-ref-name = '__RV_EXPD83';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X32__MAC_1gab418c1a557ddfedc1803594cb18fa293';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMMAC';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '3404';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMMAC (SIMD Saturating MSW Signed Multiply Word and Add)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
KMMAC Rd, Rs1, Rs2
KMMAC.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit integer elements of two registers and add the most significant
32-bit results with the signed 32-bit integer elements of a third register. The addition results are
saturated first and then written back to the third register. The <tt>.u</tt> form performs an additional
rounding up operation on the multiplication results before adding the most significant 32-bit part
of the results.

<strong>Description</strong>:\n
This instruction multiplies the signed 32-bit elements of Rs1 with the signed 32-bit elements of Rs2
and adds the most significant 32-bit multiplication results with the signed 32-bit elements of Rd. If
the addition result is beyond the Q31 number range (-2^31 <= Q31 <= 2^31-1), it is saturated to the range
and the OV bit is set to 1. The results after saturation are written to Rd. The <tt>.u</tt> form of the
instruction additionally rounds up the most significant 32-bit of the 64-bit multiplication results by
adding a 1 to bit 31 of the results.

<strong>Operations</strong>:\n
@code
Mres[x][63:0] = Rs1.W[x] * Rs2.W[x];
if (`.u` form) {
  Round[x][32:0] = Mres[x][63:31] + 1;
  res[x] = Rd.W[x] + Round[x][32:1];
} else {
  res[x] = Rd.W[x] + Mres[x][63:32];
}
if (res[x] > (2^31)-1) {
  res[x] = (2^31)-1;
  OV = 1;
} else if (res[x] < -2^31) {
  res[x] = -2^31;
  OV = 1;
}
Rd.W[x] = res[x];
for RV32: x=0
for RV64: x=1...0
@endcode

\param [in]  t    long type of value stored in t
\param [in]  a    long type of value stored in a
\param [in]  b    long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X32__MAC_1ga7d7e1eb9ab21e7f41722684804590f18';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMMAC_U';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '3465';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMMAC.u (SIMD Saturating MSW Signed Multiply Word and Add with Rounding)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
KMMAC Rd, Rs1, Rs2
KMMAC.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit integer elements of two registers and add the most significant
32-bit results with the signed 32-bit integer elements of a third register. The addition results are
saturated first and then written back to the third register. The <tt>.u</tt> form performs an additional
rounding up operation on the multiplication results before adding the most significant 32-bit part
of the results.

<strong>Description</strong>:\n
This instruction multiplies the signed 32-bit elements of Rs1 with the signed 32-bit elements of Rs2
and adds the most significant 32-bit multiplication results with the signed 32-bit elements of Rd. If
the addition result is beyond the Q31 number range (-2^31 <= Q31 <= 2^31-1), it is saturated to the range
and the OV bit is set to 1. The results after saturation are written to Rd. The <tt>.u</tt> form of the
instruction additionally rounds up the most significant 32-bit of the 64-bit multiplication results by
adding a 1 to bit 31 of the results.

<strong>Operations</strong>:\n
@code
Mres[x][63:0] = Rs1.W[x] * Rs2.W[x];
if (`.u` form) {
  Round[x][32:0] = Mres[x][63:31] + 1;
  res[x] = Rd.W[x] + Round[x][32:1];
} else {
  res[x] = Rd.W[x] + Mres[x][63:32];
}
if (res[x] > (2^31)-1) {
  res[x] = (2^31)-1;
  OV = 1;
} else if (res[x] < -2^31) {
  res[x] = -2^31;
  OV = 1;
}
Rd.W[x] = res[x];
for RV32: x=0
for RV64: x=1...0
@endcode

\param [in]  t    long type of value stored in t
\param [in]  a    long type of value stored in a
\param [in]  b    long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1ga10e2d0cb6ee70c6e603ce425a74a9b8a';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMMAWB';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '3527';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMMAWB (SIMD Saturating MSW Signed Multiply Word and Bottom Half and Add)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
KMMAWB Rd, Rs1, Rs2
KMMAWB.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit integer elements of one register and the bottom 16-bit of the
corresponding 32-bit elements of another register and add the most significant 32-bit results with
the corresponding signed 32-bit elements of a third register. The addition result is written to the
corresponding 32-bit elements of the third register. The <tt>.u</tt> form rounds up the multiplication
results from the most significant discarded bit before the addition operations.

<strong>Description</strong>:\n
This instruction multiplies the signed 32-bit elements of Rs1 with the signed bottom 16-bit content
of the corresponding 32-bit elements of Rs2 and adds the most significant 32-bit multiplication
results with the corresponding signed 32-bit elements of Rd. If the addition result is beyond the Q31
number range (-2^31 <= Q31 <= 2^31-1), it is saturated to the range and the OV bit is set to 1. The results
after saturation are written to the corresponding 32-bit elements of Rd. The <tt>.u</tt> form of the
instruction rounds up the most significant 32-bit of the 48-bit multiplication results by adding a 1 to
bit 15 of the result before the addition operations.

<strong>Operations</strong>:\n
@code
Mres[x][47:0] = Rs1.W[x] * Rs2.W[x].H[0];
if (`.u` form) {
  Round[x][32:0] = Mres[x][47:15] + 1;
  res[x] = Rd.W[x] + Round[x][32:1];
} else {
  res[x] = Rd.W[x] + Mres[x][47:16];
}
if (res[x] > (2^31)-1) {
  res[x] = (2^31)-1;
  OV = 1;
} else if (res[x] < -2^31) {
  res[x] = -2^31;
  OV = 1;
}
Rd.W[x] = res[x];
for RV32: x=0
for RV64: x=1...0
@endcode

\param [in]  t    long type of value stored in t
\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1ga6385e945e25b69987eb34e8e9e862bcf';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMMAWB_U';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '3589';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMMAWB.u (SIMD Saturating MSW Signed Multiply Word and Bottom Half and Add with Rounding)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
KMMAWB Rd, Rs1, Rs2
KMMAWB.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit integer elements of one register and the bottom 16-bit of the
corresponding 32-bit elements of another register and add the most significant 32-bit results with
the corresponding signed 32-bit elements of a third register. The addition result is written to the
corresponding 32-bit elements of the third register. The <tt>.u</tt> form rounds up the multiplication
results from the most significant discarded bit before the addition operations.

<strong>Description</strong>:\n
This instruction multiplies the signed 32-bit elements of Rs1 with the signed bottom 16-bit content
of the corresponding 32-bit elements of Rs2 and adds the most significant 32-bit multiplication
results with the corresponding signed 32-bit elements of Rd. If the addition result is beyond the Q31
number range (-2^31 <= Q31 <= 2^31-1), it is saturated to the range and the OV bit is set to 1. The results
after saturation are written to the corresponding 32-bit elements of Rd. The <tt>.u</tt> form of the
instruction rounds up the most significant 32-bit of the 48-bit multiplication results by adding a 1 to
bit 15 of the result before the addition operations.

<strong>Operations</strong>:\n
@code
Mres[x][47:0] = Rs1.W[x] * Rs2.W[x].H[0];
if (`.u` form) {
  Round[x][32:0] = Mres[x][47:15] + 1;
  res[x] = Rd.W[x] + Round[x][32:1];
} else {
  res[x] = Rd.W[x] + Mres[x][47:16];
}
if (res[x] > (2^31)-1) {
  res[x] = (2^31)-1;
  OV = 1;
} else if (res[x] < -2^31) {
  res[x] = -2^31;
  OV = 1;
}
Rd.W[x] = res[x];
for RV32: x=0
for RV64: x=1...0
@endcode

\param [in]  t    long type of value stored in t
\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1ga19bd50c2b77b1749c9c63c64c1f5bb44';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMMAWB2';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '3657';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMMAWB2 (SIMD Saturating MSW Signed Multiply Word and Bottom Half & 2 and Add)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
KMMAWB2 Rd, Rs1, Rs2
KMMAWB2.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit elements of one register and the bottom 16-bit of the
corresponding 32-bit elements of another register, double the multiplication results and add the
saturated most significant 32-bit results with the corresponding signed 32-bit elements of a third
register. The saturated addition result is written to the corresponding 32-bit elements of the third
register. The <tt>.u</tt> form rounds up the multiplication results from the most significant discarded bit
before the addition operations.

<strong>Description</strong>:\n
This instruction multiplies the signed 32-bit Q31 elements of Rs1 with the signed bottom 16-bit Q15
content of the corresponding 32-bit elements of Rs2, doubles the Q46 results to Q47 numbers and
adds the saturated most significant 32-bit Q31 multiplication results with the corresponding signed
32-bit elements of Rd. If the addition result is beyond the Q31 number range (-2^31 <= Q31 <= 2^31-1), it is
saturated to the range and the OV bit is set to 1. The results after saturation are written to the
corresponding 32-bit elements of Rd. The <tt>.u</tt> form of the instruction rounds up the most significant
32-bit of the 48-bit Q47 multiplication results by adding a 1 to bit 15 (i.e., bit 14 before doubling) of
the result before the addition operations.

<strong>Operations</strong>:\n
@code
if ((Rs1.W[x] == 0x80000000) & (Rs2.W[x].H[0] == 0x8000)) {
  addop.W[x] = 0x7fffffff;
  OV = 1;
} else {
  Mres[x][47:0] = Rs1.W[x] s* Rs2.W[x].H[0];
  if (`.u` form) {
    Mres[x][47:14] = Mres[x][47:14] + 1;
  }
  addop.W[x] = Mres[x][46:15]; // doubling
}
res[x] = Rd.W[x] + addop.W[x];
if (res[x] > (2^31)-1) {
  res[x] = (2^31)-1;
  OV = 1;
} else if (res[x] < -2^31) {
  res[x] = -2^31;
  OV = 1;
}
Rd.W[x] = res[x];
for RV32: x=0
for RV64: x=1...0
@endcode

\param [in]  t    long type of value stored in t
\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1gac281461b8f0907d2d0c1a922ca5e65b8';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMMAWB2_U';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '3725';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMMAWB2.u (SIMD Saturating MSW Signed Multiply Word and Bottom Half & 2 and Add with Rounding)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
KMMAWB2 Rd, Rs1, Rs2
KMMAWB2.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit elements of one register and the bottom 16-bit of the
corresponding 32-bit elements of another register, double the multiplication results and add the
saturated most significant 32-bit results with the corresponding signed 32-bit elements of a third
register. The saturated addition result is written to the corresponding 32-bit elements of the third
register. The <tt>.u</tt> form rounds up the multiplication results from the most significant discarded bit
before the addition operations.

<strong>Description</strong>:\n
This instruction multiplies the signed 32-bit Q31 elements of Rs1 with the signed bottom 16-bit Q15
content of the corresponding 32-bit elements of Rs2, doubles the Q46 results to Q47 numbers and
adds the saturated most significant 32-bit Q31 multiplication results with the corresponding signed
32-bit elements of Rd. If the addition result is beyond the Q31 number range (-2^31 <= Q31 <= 2^31-1), it is
saturated to the range and the OV bit is set to 1. The results after saturation are written to the
corresponding 32-bit elements of Rd. The <tt>.u</tt> form of the instruction rounds up the most significant
32-bit of the 48-bit Q47 multiplication results by adding a 1 to bit 15 (i.e., bit 14 before doubling) of
the result before the addition operations.

<strong>Operations</strong>:\n
@code
if ((Rs1.W[x] == 0x80000000) & (Rs2.W[x].H[0] == 0x8000)) {
  addop.W[x] = 0x7fffffff;
  OV = 1;
} else {
  Mres[x][47:0] = Rs1.W[x] s* Rs2.W[x].H[0];
  if (`.u` form) {
    Mres[x][47:14] = Mres[x][47:14] + 1;
  }
  addop.W[x] = Mres[x][46:15]; // doubling
}
res[x] = Rd.W[x] + addop.W[x];
if (res[x] > (2^31)-1) {
  res[x] = (2^31)-1;
  OV = 1;
} else if (res[x] < -2^31) {
  res[x] = -2^31;
  OV = 1;
}
Rd.W[x] = res[x];
for RV32: x=0
for RV64: x=1...0
@endcode

\param [in]  t    long type of value stored in t
\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1ga447a6dd6e573595ce930f8ba1ab135ca';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMMAWT';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '3787';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMMAWT (SIMD Saturating MSW Signed Multiply Word and Top Half and Add)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
KMMAWT Rd, Rs1, Rs2
KMMAWT.u Rd Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit integer elements of one register and the signed top 16-bit of the
corresponding 32-bit elements of another register and add the most significant 32-bit results with
the corresponding signed 32-bit elements of a third register. The addition results are written to the
corresponding 32-bit elements of the third register. The <tt>.u</tt> form rounds up the multiplication
results from the most significant discarded bit before the addition operations.

<strong>Description</strong>:\n
This instruction multiplies the signed 32-bit elements of Rs1 with the signed top 16-bit of the
corresponding 32-bit elements of Rs2 and adds the most significant 32-bit multiplication results
with the corresponding signed 32-bit elements of Rd. If the addition result is beyond the Q31
number range (-2^31 <= Q31 <= 2^31-1), it is saturated to the range and the OV bit is set to 1. The results
after saturation are written to the corresponding 32-bit elements of Rd. The <tt>.u</tt> form of the
instruction rounds up the most significant 32-bit of the 48-bit multiplication results by adding a 1 to
bit 15 of the result before the addition operations.

<strong>Operations</strong>:\n
@code
Mres[x][47:0] = Rs1.W[x] * Rs2.W[x].H[1];
if (`.u` form) {
  Round[x][32:0] = Mres[x][47:15] + 1;
  res[x] = Rd.W[x] + Round[x][32:1];
} else {
  res[x] = Rd.W[x] + Mres[x][47:16];
}
if (res[x] > (2^31)-1) {
  res[x] = (2^31)-1;
  OV = 1;
} else if (res[x] < -2^31) {
  res[x] = -2^31;
  OV = 1;
}
Rd.W[x] = res[x];
for RV32: x=0
for RV64: x=1...0
@endcode

\param [in]  t    long type of value stored in t
\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1ga480bf71de56eefe132ae06a9bdeaf203';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMMAWT_U';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '3849';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMMAWT.u (SIMD Saturating MSW Signed Multiply Word and Top Half and Add with Rounding)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
KMMAWT Rd, Rs1, Rs2
KMMAWT.u Rd Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit integer elements of one register and the signed top 16-bit of the
corresponding 32-bit elements of another register and add the most significant 32-bit results with
the corresponding signed 32-bit elements of a third register. The addition results are written to the
corresponding 32-bit elements of the third register. The <tt>.u</tt> form rounds up the multiplication
results from the most significant discarded bit before the addition operations.

<strong>Description</strong>:\n
This instruction multiplies the signed 32-bit elements of Rs1 with the signed top 16-bit of the
corresponding 32-bit elements of Rs2 and adds the most significant 32-bit multiplication results
with the corresponding signed 32-bit elements of Rd. If the addition result is beyond the Q31
number range (-2^31 <= Q31 <= 2^31-1), it is saturated to the range and the OV bit is set to 1. The results
after saturation are written to the corresponding 32-bit elements of Rd. The <tt>.u</tt> form of the
instruction rounds up the most significant 32-bit of the 48-bit multiplication results by adding a 1 to
bit 15 of the result before the addition operations.

<strong>Operations</strong>:\n
@code
Mres[x][47:0] = Rs1.W[x] * Rs2.W[x].H[1];
if (`.u` form) {
  Round[x][32:0] = Mres[x][47:15] + 1;
  res[x] = Rd.W[x] + Round[x][32:1];
} else {
  res[x] = Rd.W[x] + Mres[x][47:16];
}
if (res[x] > (2^31)-1) {
  res[x] = (2^31)-1;
  OV = 1;
} else if (res[x] < -2^31) {
  res[x] = -2^31;
  OV = 1;
}
Rd.W[x] = res[x];
for RV32: x=0
for RV64: x=1...0
@endcode

\param [in]  t    long type of value stored in t
\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1ga60e15a6243014fd5b76b7cffa7275eb4';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMMAWT2';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '3917';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMMAWT2 (SIMD Saturating MSW Signed Multiply Word and Top Half & 2 and Add)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
KMMAWT2 Rd, Rs1, Rs2
KMMAWT2.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit elements of one register and the top 16-bit of the
corresponding 32-bit elements of another register, double the multiplication results and add the
saturated most significant 32-bit results with the corresponding signed 32-bit elements of a third
register. The saturated addition result is written to the corresponding 32-bit elements of the third
register. The <tt>.u</tt> form rounds up the multiplication results from the most significant discarded bit
before the addition operations.

<strong>Description</strong>:\n
This instruction multiplies the signed 32-bit Q31 elements of Rs1 with the signed top 16-bit Q15
content of the corresponding 32-bit elements of Rs2, doubles the Q46 results to Q47 numbers and
adds the saturated most significant 32-bit Q31 multiplication results with the corresponding signed
32-bit elements of Rd. If the addition result is beyond the Q31 number range (-2^31 <= Q31 <= 2^31-1), it is
saturated to the range and the OV bit is set to 1. The results after saturation are written to the
corresponding 32-bit elements of Rd. The <tt>.u</tt> form of the instruction rounds up the most significant
32-bit of the 48-bit Q47 multiplication results by adding a 1 to bit 15 (i.e., bit 14 before doubling) of
the result before the addition operations.

<strong>Operations</strong>:\n
@code
if ((Rs1.W[x] == 0x80000000) & (Rs2.W[x].H[1] == 0x8000)) {
  addop.W[x] = 0x7fffffff;
  OV = 1;
} else {
  Mres[x][47:0] = Rs1.W[x] s* Rs2.W[x].H[1];
  if (`.u` form) {
    Mres[x][47:14] = Mres[x][47:14] + 1;
  }
  addop.W[x] = Mres[x][46:15]; // doubling
}
res[x] = Rd.W[x] + addop.W[x];
if (res[x] > (2^31)-1) {
  res[x] = (2^31)-1;
  OV = 1;
} else if (res[x] < -2^31) {
  res[x] = -2^31;
  OV = 1;
}
Rd.W[x] = res[x];
for RV32: x=0
for RV64: x=1...0
@endcode

\param [in]  t    long type of value stored in t
\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1ga30aa2050f5f50a26aedc28dfce398db8';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMMAWT2_U';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '3985';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMMAWT2.u (SIMD Saturating MSW Signed Multiply Word and Top Half & 2 and Add with Rounding)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
KMMAWT2 Rd, Rs1, Rs2
KMMAWT2.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit elements of one register and the top 16-bit of the
corresponding 32-bit elements of another register, double the multiplication results and add the
saturated most significant 32-bit results with the corresponding signed 32-bit elements of a third
register. The saturated addition result is written to the corresponding 32-bit elements of the third
register. The <tt>.u</tt> form rounds up the multiplication results from the most significant discarded bit
before the addition operations.

<strong>Description</strong>:\n
This instruction multiplies the signed 32-bit Q31 elements of Rs1 with the signed top 16-bit Q15
content of the corresponding 32-bit elements of Rs2, doubles the Q46 results to Q47 numbers and
adds the saturated most significant 32-bit Q31 multiplication results with the corresponding signed
32-bit elements of Rd. If the addition result is beyond the Q31 number range (-2^31 <= Q31 <= 2^31-1), it is
saturated to the range and the OV bit is set to 1. The results after saturation are written to the
corresponding 32-bit elements of Rd. The <tt>.u</tt> form of the instruction rounds up the most significant
32-bit of the 48-bit Q47 multiplication results by adding a 1 to bit 15 (i.e., bit 14 before doubling) of
the result before the addition operations.

<strong>Operations</strong>:\n
@code
if ((Rs1.W[x] == 0x80000000) & (Rs2.W[x].H[1] == 0x8000)) {
  addop.W[x] = 0x7fffffff;
  OV = 1;
} else {
  Mres[x][47:0] = Rs1.W[x] s* Rs2.W[x].H[1];
  if (`.u` form) {
    Mres[x][47:14] = Mres[x][47:14] + 1;
  }
  addop.W[x] = Mres[x][46:15]; // doubling
}
res[x] = Rd.W[x] + addop.W[x];
if (res[x] > (2^31)-1) {
  res[x] = (2^31)-1;
  OV = 1;
} else if (res[x] < -2^31) {
  res[x] = -2^31;
  OV = 1;
}
Rd.W[x] = res[x];
for RV32: x=0
for RV64: x=1...0
@endcode

\param [in]  t    long type of value stored in t
\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X32__MAC_1ga0e7c48c050ad2b2343ad2a8cf2e38ec3';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMMSB';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '4045';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMMSB (SIMD Saturating MSW Signed Multiply Word and Subtract)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
KMMSB Rd, Rs1, Rs2
KMMSB.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit integer elements of two registers and subtract the most
significant 32-bit results from the signed 32-bit elements of a third register. The subtraction results
are written to the third register. The <tt>.u</tt> form performs an additional rounding up operation on
the multiplication results before subtracting the most significant 32-bit part of the results.

<strong>Description</strong>:\n
This instruction multiplies the signed 32-bit elements of Rs1 with the signed 32-bit elements of Rs2
and subtracts the most significant 32-bit multiplication results from the signed 32-bit elements of
Rd. If the subtraction result is beyond the Q31 number range (-2^31 <= Q31 <= 2^31-1), it is saturated to the
range and the OV bit is set to 1. The results after saturation are written to Rd. The <tt>.u</tt> form of the
instruction additionally rounds up the most significant 32-bit of the 64-bit multiplication results by
adding a 1 to bit 31 of the results.

<strong>Operations</strong>:\n
@code
Mres[x][63:0] = Rs1.W[x] * Rs2.W[x];
if (`.u` form) {
  Round[x][32:0] = Mres[x][63:31] + 1;
  res[x] = Rd.W[x] - Round[x][32:1];
} else {
  res[x] = Rd.W[x] - Mres[x][63:32];
}
if (res[x] > (2^31)-1) {
  res[x] = (2^31)-1;
  OV = 1;
} else if (res[x] < -2^31) {
  res[x] = -2^31;
  OV = 1;
}
Rd.W[x] = res[x];
for RV32: x=0
for RV64: x=1...0
@endcode

\param [in]  t    long type of value stored in t
\param [in]  a    long type of value stored in a
\param [in]  b    long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X32__MAC_1gae1c27f8ba264508b78a0de566dd18a9b';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMMSB_U';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '4105';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMMSB.u (SIMD Saturating MSW Signed Multiply Word and Subtraction with Rounding)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
KMMSB Rd, Rs1, Rs2
KMMSB.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit integer elements of two registers and subtract the most
significant 32-bit results from the signed 32-bit elements of a third register. The subtraction results
are written to the third register. The <tt>.u</tt> form performs an additional rounding up operation on
the multiplication results before subtracting the most significant 32-bit part of the results.

<strong>Description</strong>:\n
This instruction multiplies the signed 32-bit elements of Rs1 with the signed 32-bit elements of Rs2
and subtracts the most significant 32-bit multiplication results from the signed 32-bit elements of
Rd. If the subtraction result is beyond the Q31 number range (-2^31 <= Q31 <= 2^31-1), it is saturated to the
range and the OV bit is set to 1. The results after saturation are written to Rd. The <tt>.u</tt> form of the
instruction additionally rounds up the most significant 32-bit of the 64-bit multiplication results by
adding a 1 to bit 31 of the results.

<strong>Operations</strong>:\n
@code
Mres[x][63:0] = Rs1.W[x] * Rs2.W[x];
if (`.u` form) {
  Round[x][32:0] = Mres[x][63:31] + 1;
  res[x] = Rd.W[x] - Round[x][32:1];
} else {
  res[x] = Rd.W[x] - Mres[x][63:32];
}
if (res[x] > (2^31)-1) {
  res[x] = (2^31)-1;
  OV = 1;
} else if (res[x] < -2^31) {
  res[x] = -2^31;
  OV = 1;
}
Rd.W[x] = res[x];
for RV32: x=0
for RV64: x=1...0
@endcode

\param [in]  t    long type of value stored in t
\param [in]  a    long type of value stored in a
\param [in]  b    long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1gaaec865ab687a1764eb5b1e1f5603611d';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMMWB2';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '4160';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMMWB2 (SIMD Saturating MSW Signed Multiply Word and Bottom Half & 2)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
KMMWB2 Rd, Rs1, Rs2
KMMWB2.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit integer elements of one register and the bottom 16-bit of the
corresponding 32-bit elements of another register, double the multiplication results and write the
saturated most significant 32-bit results to the corresponding 32-bit elements of a register. The <tt>.u</tt>
form rounds up the results from the most significant discarded bit.

<strong>Description</strong>:\n
This instruction multiplies the signed 32-bit Q31 elements of Rs1 with the signed bottom 16-bit Q15
content of the corresponding 32-bit elements of Rs2, doubles the Q46 results to Q47 numbers and
writes the saturated most significant 32-bit Q31 multiplication results to the corresponding 32-bit
elements of Rd. The <tt>.u</tt> form of the instruction rounds up the most significant 32-bit of the 48-bit
Q47 multiplication results by adding a 1 to bit 15 (i.e., bit 14 before doubling) of the results.

<strong>Operations</strong>:\n
@code
if ((Rs1.W[x] == 0x80000000) & (Rs2.W[x].H[0] == 0x8000)) {
  Rd.W[x] = 0x7fffffff;
  OV = 1;
} else {
  Mres[x][47:0] = Rs1.W[x] s* Rs2.W[x].H[0];
  if (`.u` form) {
    Round[x][32:0] = Mres[x][46:14] + 1;
    Rd.W[x] = Round[x][32:1];
  } else {
    Rd.W[x] = Mres[x][46:15];
  }
}
for RV32: x=0
for RV64: x=1...0
@endcode

\param [in]  a    long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1ga9f55b328152b5b5b840931b5415b2865';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMMWB2_U';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '4216';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMMWB2.u (SIMD Saturating MSW Signed Multiply Word and Bottom Half & 2 with Rounding)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
KMMWB2 Rd, Rs1, Rs2
KMMWB2.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit integer elements of one register and the bottom 16-bit of the
corresponding 32-bit elements of another register, double the multiplication results and write the
saturated most significant 32-bit results to the corresponding 32-bit elements of a register. The <tt>.u</tt>
form rounds up the results from the most significant discarded bit.

<strong>Description</strong>:\n
This instruction multiplies the signed 32-bit Q31 elements of Rs1 with the signed bottom 16-bit Q15
content of the corresponding 32-bit elements of Rs2, doubles the Q46 results to Q47 numbers and
writes the saturated most significant 32-bit Q31 multiplication results to the corresponding 32-bit
elements of Rd. The <tt>.u</tt> form of the instruction rounds up the most significant 32-bit of the 48-bit
Q47 multiplication results by adding a 1 to bit 15 (i.e., bit 14 before doubling) of the results.

<strong>Operations</strong>:\n
@code
if ((Rs1.W[x] == 0x80000000) & (Rs2.W[x].H[0] == 0x8000)) {
  Rd.W[x] = 0x7fffffff;
  OV = 1;
} else {
  Mres[x][47:0] = Rs1.W[x] s* Rs2.W[x].H[0];
  if (`.u` form) {
    Round[x][32:0] = Mres[x][46:14] + 1;
    Rd.W[x] = Round[x][32:1];
  } else {
    Rd.W[x] = Mres[x][46:15];
  }
}
for RV32: x=0
for RV64: x=1...0
@endcode

\param [in]  a    long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1gaa83e41e92fe13e28b2509a0bf92224bf';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMMWT2';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '4272';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMMWT2 (SIMD Saturating MSW Signed Multiply Word and Top Half & 2)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
KMMWT2 Rd, Rs1, Rs2
KMMWT2.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit integer elements of one register and the top 16-bit of the
corresponding 32-bit elements of another register, double the multiplication results and write the
saturated most significant 32-bit results to the corresponding 32-bit elements of a register. The <tt>.u</tt>
form rounds up the results from the most significant discarded bit.

<strong>Description</strong>:\n
This instruction multiplies the signed 32-bit Q31 elements of Rs1 with the signed top 16-bit Q15
content of the corresponding 32-bit elements of Rs2, doubles the Q46 results to Q47 numbers and
writes the saturated most significant 32-bit Q31 multiplication results to the corresponding 32-bit
elements of Rd. The <tt>.u</tt> form of the instruction rounds up the most significant 32-bit of the 48-bit
Q47 multiplication results by adding a 1 to bit 15 (i.e., bit 14 before doubling) of the results.

<strong>Operations</strong>:\n
@code
if ((Rs1.W[x] == 0x80000000) & (Rs2.W[x].H[1] == 0x8000)) {
  Rd.W[x] = 0x7fffffff;
  OV = 1;
} else {
  Mres[x][47:0] = Rs1.W[x] s* Rs2.W[x].H[1];
  if (`.u` form) {
    Round[x][32:0] = Mres[x][46:14] + 1;
    Rd.W[x] = Round[x][32:1];
  } else {
    Rd.W[x] = Mres[x][46:15];
  }
}
for RV32: x=0
for RV64: x=1...0
@endcode

\param [in]  a    long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1ga1d59336d9cabde5ac5a646abcc0b25c9';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMMWT2_U';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '4328';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMMWT2.u (SIMD Saturating MSW Signed Multiply Word and Top Half & 2 with Rounding)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
KMMWT2 Rd, Rs1, Rs2
KMMWT2.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit integer elements of one register and the top 16-bit of the
corresponding 32-bit elements of another register, double the multiplication results and write the
saturated most significant 32-bit results to the corresponding 32-bit elements of a register. The <tt>.u</tt>
form rounds up the results from the most significant discarded bit.

<strong>Description</strong>:\n
This instruction multiplies the signed 32-bit Q31 elements of Rs1 with the signed top 16-bit Q15
content of the corresponding 32-bit elements of Rs2, doubles the Q46 results to Q47 numbers and
writes the saturated most significant 32-bit Q31 multiplication results to the corresponding 32-bit
elements of Rd. The <tt>.u</tt> form of the instruction rounds up the most significant 32-bit of the 48-bit
Q47 multiplication results by adding a 1 to bit 15 (i.e., bit 14 before doubling) of the results.

<strong>Operations</strong>:\n
@code
if ((Rs1.W[x] == 0x80000000) & (Rs2.W[x].H[1] == 0x8000)) {
  Rd.W[x] = 0x7fffffff;
  OV = 1;
} else {
  Mres[x][47:0] = Rs1.W[x] s* Rs2.W[x].H[1];
  if (`.u` form) {
    Round[x][32:0] = Mres[x][46:14] + 1;
    Rd.W[x] = Round[x][32:1];
  } else {
    Rd.W[x] = Mres[x][46:15];
  }
}
for RV32: x=0
for RV64: x=1...0
@endcode

\param [in]  a    long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga3922fe2b6d47974c6bd85cba3f826b4b';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMSDA';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '4391';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMSDA (SIMD Saturating Signed Multiply Two Halfs & Add & Subtract)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
KMSDA Rd, Rs1, Rs2
KMSXDA Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 16-bit multiplications from the 32-bit elements of two registers; and then
subtracts the two 32-bit results from the corresponding 32-bit elements of a third register. The
subtraction result may be saturated.
* KMSDA: rd.W[x] - top*top - bottom*bottom (per 32-bit element)
* KMSXDA: rd.W[x] - top*bottom - bottom*top (per 32-bit element)

<strong>Description</strong>:\n
For the <tt>KMSDA</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the bottom 16-bit content of the 32-bit elements of Rs2 and multiplies the top 16-bit content of
the 32-bit elements of Rs1 with the top 16-bit content of the 32-bit elements of Rs2.
For the <tt>KMSXDA</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the top 16-bit content of the 32-bit elements of Rs2 and multiplies the top 16-bit content of the
32-bit elements of Rs1 with the bottom 16-bit content of the 32-bit elements of Rs2.
The two 32-bit multiplication results are then subtracted from the content of the corresponding 32-
bit elements of Rd. If the subtraction result is beyond the Q31 number range (-2^31 <= Q31 <= 2^31-1), it is
saturated to the range and the OV bit is set to 1. The results after saturation are written to Rd. The
16-bit contents are treated as signed integers.

<strong>Operations</strong>:\n
@code
// KMSDA
res[x] = Rd.W[x] - (Rs1.W[x].H[1] * Rs2.W[x].H[1]) - (Rs1.W[x].H[0] * Rs2.W[x].H[0]);
// KMSXDA
res[x] = Rd.W[x] - (Rs1.W[x].H[1] * Rs2.W[x].H[0]) - (Rs1.W[x].H[0] * Rs2.W[x].H[1]);
if (res[x] > (2^31)-1) {
  res[x] = (2^31)-1;
  OV = 1;
} else if (res[x] < -2^31) {
  res[x] = -2^31;
  OV = 1;
}
Rd.W[x] = res[x];
for RV32: x=0
for RV64: x=1...0
@endcode

\param [in]  t    long type of value stored in t
\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1gaacebc28be147f66ab73162b37cc35ce0';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMSXDA';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '4453';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMSXDA (SIMD Saturating Signed Crossed Multiply Two Halfs & Add & Subtract)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
KMSDA Rd, Rs1, Rs2
KMSXDA Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 16-bit multiplications from the 32-bit elements of two registers; and then
subtracts the two 32-bit results from the corresponding 32-bit elements of a third register. The
subtraction result may be saturated.
* KMSDA: rd.W[x] - top*top - bottom*bottom (per 32-bit element)
* KMSXDA: rd.W[x] - top*bottom - bottom*top (per 32-bit element)

<strong>Description</strong>:\n
For the <tt>KMSDA</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the bottom 16-bit content of the 32-bit elements of Rs2 and multiplies the top 16-bit content of
the 32-bit elements of Rs1 with the top 16-bit content of the 32-bit elements of Rs2.
For the <tt>KMSXDA</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the top 16-bit content of the 32-bit elements of Rs2 and multiplies the top 16-bit content of the
32-bit elements of Rs1 with the bottom 16-bit content of the 32-bit elements of Rs2.
The two 32-bit multiplication results are then subtracted from the content of the corresponding 32-
bit elements of Rd. If the subtraction result is beyond the Q31 number range (-2^31 <= Q31 <= 2^31-1), it is
saturated to the range and the OV bit is set to 1. The results after saturation are written to Rd. The
16-bit contents are treated as signed integers.

<strong>Operations</strong>:\n
@code
// KMSDA
res[x] = Rd.W[x] - (Rs1.W[x].H[1] * Rs2.W[x].H[1]) - (Rs1.W[x].H[0] * Rs2.W[x].H[0]);
// KMSXDA
res[x] = Rd.W[x] - (Rs1.W[x].H[1] * Rs2.W[x].H[0]) - (Rs1.W[x].H[0] * Rs2.W[x].H[1]);
if (res[x] > (2^31)-1) {
  res[x] = (2^31)-1;
  OV = 1;
} else if (res[x] < -2^31) {
  res[x] = -2^31;
  OV = 1;
}
Rd.W[x] = res[x];
for RV32: x=0
for RV64: x=1...0
@endcode

\param [in]  t    long type of value stored in t
\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__32B__MULT__64B__ADDSUB_1gac89788561e034d44bea403fd22047a94';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMSR64';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '4521';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMSR64 (Signed Multiply and Saturating Subtract from 64-Bit Data)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (64-bit Profile)

<strong>Syntax</strong>:\n
@code
KMSR64 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the 32-bit signed elements in two registers and subtract the 64-bit multiplication
results from the 64-bit signed data of a pair of registers (RV32) or a register (RV64). The result is
saturated to the Q63 range and written back to the pair of registers (RV32) or the register (RV64).

<strong>RV32 Description</strong>:\n
This instruction multiplies the 32-bit signed data of Rs1 with that of Rs2. It
subtracts the 64-bit multiplication result from the 64-bit signed data of an even/odd pair of registers
specified by Rd(4,1) with unlimited precision. If the 64-bit subtraction result is beyond the Q63
number range (-2^63 <= Q63 <= 2^63-1), it is saturated to the range and the OV bit is set to 1. The saturated
result is written back to the even/odd pair of registers specified by Rd(4,1).
Rx(4,1), i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair
includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the high 32-bit of the result and the even <tt>2d</tt> register
of the pair contains the low 32-bit of the result.

<strong>RV64 Description</strong>:\n
This instruction multiplies the 32-bit signed elements of Rs1 with that of Rs2. It
subtracts the 64-bit multiplication results from the 64-bit signed data in Rd with unlimited
precision. If the 64-bit subtraction result is beyond the Q63 number range (-2^63 <= Q63 <= 2^63-1), it is
saturated to the range and the OV bit is set to 1. The saturated result is written back to Rd.

<strong>Operations</strong>:\n
@code
RV32:
t_L = CONCAT(Rd(4,1),1'b0); t_H = CONCAT(Rd(4,1),1'b1);
result = R[t_H].R[t_L] - (Rs1 * Rs2);
if (result > (2^63)-1) {
  result = (2^63)-1; OV = 1;
} else if (result < -2^63) {
  result = -2^63; OV = 1;
}
R[t_H].R[t_L] = result;
RV64:
// `result` has unlimited precision
result = Rd - (Rs1.W[0] * Rs2.W[0]) - (Rs1.W[1] * Rs2.W[1]);
if (result > (2^63)-1) {
  result = (2^63)-1; OV = 1;
} else if (result < -2^63) {
  result = -2^63; OV = 1;
}
Rd = result;
@endcode

\param [in]  t    long long type of value stored in t
\param [in]  a    long type of value stored in a
\param [in]  b    long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1gab5dc82aa8b7514f882979a71d88fb154';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KSLLW';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '4568';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KSLLW (Saturating Shift Left Logical for Word)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
KSLLW Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do logical left shift operation with saturation on a 32-bit word. The shift amount is a
variable from a GPR.

<strong>Description</strong>:\n
The first word data in Rs1 is left-shifted logically. The shifted out bits are filled with
zero and the shift amount is specified by the low-order 5-bits of the value in the Rs2 register. Any
shifted value greater than 2^31-1 is saturated to 2^31-1. Any shifted value smaller than -2^31 is saturated
to -2^31. And the saturated result is sign-extended and written to Rd. If any saturation is performed,
set OV bit to 1.

<strong>Operations</strong>:\n
@code
sa = Rs2[4:0];
res[(31+sa):0] = Rs1.W[0] << sa;
if (res > (2^31)-1) {
  res = 0x7fffffff; OV = 1;
} else if (res < -2^31) {
  res = 0x80000000; OV = 1;
}
Rd[31:0] = res[31:0]; // RV32
Rd[63:0] = SE(res[31:0]); // RV64
@endcode

\param [in]  a    long type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1gafed94424b7e8431a31632ac1f9097e35';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KSLL8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '4669';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KSLL8 (SIMD 8-bit Saturating Shift Left Logical)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
KSLL8 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 8-bit elements logical left shift operations with saturation simultaneously. The shift
amount is a variable from a GPR.

<strong>Description</strong>:\n
The 8-bit data elements in Rs1 are left-shifted logically. The shifted out bits are filled
with zero and the shift amount is specified by the low-order 3-bits of the value in the Rs2 register.
Any shifted value greater than 2^7-1 is saturated to 2^7-1. Any shifted value smaller than -2^7 is
saturated to -2^7. And the saturated results are written to Rd. If any saturation is performed, set OV
bit to 1.

<strong>Operations</strong>:\n
@code
sa = Rs2[2:0];
if (sa != 0) {
  res[(7+sa):0] = Rs1.B[x] << sa;
  if (res > (2^7)-1) {
    res = 0x7f; OV = 1;
  } else if (res < -2^7) {
    res = 0x80; OV = 1;
  }
  Rd.B[x] = res[7:0];
} else {
  Rd = Rs1;
}
for RV32: x=3...0,
for RV64: x=7...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1gae0d8b0f00c558d5a7f1119b9d261779f';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KSLL16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '4775';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KSLL16 (SIMD 16-bit Saturating Shift Left Logical)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
KSLL16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit elements logical left shift operations with saturation simultaneously. The shift
amount is a variable from a GPR.

<strong>Description</strong>:\n
The 16-bit data elements in Rs1 are left-shifted logically. The shifted out bits are filled
with zero and the shift amount is specified by the low-order 4-bits of the value in the Rs2 register.
Any shifted value greater than 2^15-1 is saturated to 2^15-1. Any shifted value smaller than -2^15 is
saturated to -2^15. And the saturated results are written to Rd. If any saturation is performed, set OV
bit to 1.

<strong>Operations</strong>:\n
@code
sa = Rs2[3:0];
if (sa != 0) {
  res[(15+sa):0] = Rs1.H[x] << sa;
  if (res > (2^15)-1) {
    res = 0x7fff; OV = 1;
  } else if (res < -2^15) {
    res = 0x8000; OV = 1;
  }
  Rd.H[x] = res[15:0];
} else {
  Rd = Rs1;
}
for RV32: x=1...0,
for RV64: x=3...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1ga748809588c9a563b78102b3a4e7ae0f5';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KSLRA8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '4895';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KSLRA8 (SIMD 8-bit Shift Left Logical with Saturation or Shift Right Arithmetic)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
KSLRA8 Rd, Rs1, Rs2
KSLRA8.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 8-bit elements logical left (positive) or arithmetic right (negative) shift operation with
Q7 saturation for the left shift. The <tt>.u</tt> form performs additional rounding up operations for the
right shift.

<strong>Description</strong>:\n
The 8-bit data elements of Rs1 are left-shifted logically or right-shifted arithmetically
based on the value of Rs2[3:0]. Rs2[3:0] is in the signed range of [-2^3, 2^3-1]. A positive Rs2[3:0] means
logical left shift and a negative Rs2[3:0] means arithmetic right shift. The shift amount is the
absolute value of Rs2[3:0]. However, the behavior of <tt>Rs2[3:0]==-2^3 (0x8)</tt> is defined to be
equivalent to the behavior of <tt>Rs2[3:0]==-(2^3-1) (0x9)</tt>.
The left-shifted results are saturated to the 8-bit signed integer range of [-2^7, 2^7-1]. For the <tt>.u</tt> form
of the instruction, the right-shifted results are added a 1 to the most significant discarded bit
position for rounding effect. After the shift, saturation, or rounding, the final results are written to
Rd. If any saturation happens, this instruction sets the OV flag. The value of Rs2[31:4] will not affect
this instruction.

<strong>Operations</strong>:\n
@code
if (Rs2[3:0] < 0) {
  sa = -Rs2[3:0];
  sa = (sa == 8)? 7 : sa;
  if (`.u` form) {
    res[7:-1] = SE9(Rs1.B[x][7:sa-1]) + 1;
    Rd.B[x] = res[7:0];
  } else {
    Rd.B[x] = SE8(Rs1.B[x][7:sa]);
  }
} else {
  sa = Rs2[2:0];
  res[(7+sa):0] = Rs1.B[x] <<(logic) sa;
  if (res > (2^7)-1) {
    res[7:0] = 0x7f; OV = 1;
  } else if (res < -2^7) {
    res[7:0] = 0x80; OV = 1;
  }
  Rd.B[x] = res[7:0];
}
for RV32: x=3...0,
for RV64: x=7...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1ga5e46b6bd44f57528f3dd1a4f509fdb12';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KSLRA8_U';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '4962';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KSLRA8.u (SIMD 8-bit Shift Left Logical with Saturation or Rounding Shift Right Arithmetic)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
KSLRA8 Rd, Rs1, Rs2
KSLRA8.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 8-bit elements logical left (positive) or arithmetic right (negative) shift operation with
Q7 saturation for the left shift. The <tt>.u</tt> form performs additional rounding up operations for the
right shift.

<strong>Description</strong>:\n
The 8-bit data elements of Rs1 are left-shifted logically or right-shifted arithmetically
based on the value of Rs2[3:0]. Rs2[3:0] is in the signed range of [-2^3, 2^3-1]. A positive Rs2[3:0] means
logical left shift and a negative Rs2[3:0] means arithmetic right shift. The shift amount is the
absolute value of Rs2[3:0]. However, the behavior of <tt>Rs2[3:0]==-2^3 (0x8)</tt> is defined to be
equivalent to the behavior of <tt>Rs2[3:0]==-(2^3-1) (0x9)</tt>.
The left-shifted results are saturated to the 8-bit signed integer range of [-2^7, 2^7-1]. For the <tt>.u</tt> form
of the instruction, the right-shifted results are added a 1 to the most significant discarded bit
position for rounding effect. After the shift, saturation, or rounding, the final results are written to
Rd. If any saturation happens, this instruction sets the OV flag. The value of Rs2[31:4] will not affect
this instruction.

<strong>Operations</strong>:\n
@code
if (Rs2[3:0] < 0) {
  sa = -Rs2[3:0];
  sa = (sa == 8)? 7 : sa;
  if (`.u` form) {
    res[7:-1] = SE9(Rs1.B[x][7:sa-1]) + 1;
    Rd.B[x] = res[7:0];
  } else {
    Rd.B[x] = SE8(Rs1.B[x][7:sa]);
  }
} else {
  sa = Rs2[2:0];
  res[(7+sa):0] = Rs1.B[x] <<(logic) sa;
  if (res > (2^7)-1) {
    res[7:0] = 0x7f; OV = 1;
  } else if (res < -2^7) {
    res[7:0] = 0x80; OV = 1;
  }
  Rd.B[x] = res[7:0];
}
for RV32: x=3...0,
for RV64: x=7...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1gaa85a466f43c98b2a2b34dc19e9c8e9d2';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KSLRA16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '5029';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KSLRA16 (SIMD 16-bit Shift Left Logical with Saturation or Shift Right Arithmetic)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
KSLRA16 Rd, Rs1, Rs2
KSLRA16.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit elements logical left (positive) or arithmetic right (negative) shift operation with
Q15 saturation for the left shift. The <tt>.u</tt> form performs additional rounding up operations for the
right shift.

<strong>Description</strong>:\n
The 16-bit data elements of Rs1 are left-shifted logically or right-shifted arithmetically
based on the value of Rs2[4:0]. Rs2[4:0] is in the signed range of [-2^4, 2^4-1]. A positive Rs2[4:0] means
logical left shift and a negative Rs2[4:0] means arithmetic right shift. The shift amount is the
absolute value of Rs2[4:0]. However, the behavior of <tt>Rs2[4:0]==-2^4 (0x10)</tt> is defined to be
equivalent to the behavior of <tt>Rs2[4:0]==-(2^4-1) (0x11)</tt>.
The left-shifted results are saturated to the 16-bit signed integer range of [-2^15, 2^15-1]. For the <tt>.u</tt>
form of the instruction, the right-shifted results are added a 1 to the most significant discarded bit
position for rounding effect. After the shift, saturation, or rounding, the final results are written to
Rd. If any saturation happens, this instruction sets the OV flag. The value of Rs2[31:5] will not affect
this instruction.

<strong>Operations</strong>:\n
@code
if (Rs2[4:0] < 0) {
  sa = -Rs2[4:0];
  sa = (sa == 16)? 15 : sa;
  if (`.u` form) {
    res[15:-1] = SE17(Rs1.H[x][15:sa-1]) + 1;
    Rd.H[x] = res[15:0];
  } else {
    Rd.H[x] = SE16(Rs1.H[x][15:sa]);
  }
} else {
  sa = Rs2[3:0];
  res[(15+sa):0] = Rs1.H[x] <<(logic) sa;
  if (res > (2^15)-1) {
    res[15:0] = 0x7fff; OV = 1;
  } else if (res < -2^15) {
    res[15:0] = 0x8000; OV = 1;
  }
  d.H[x] = res[15:0];
}
for RV32: x=1...0,
for RV64: x=3...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1gae5b84af52b3d277117a4ee509df1504d';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KSLRA16_U';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '5096';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KSLRA16.u (SIMD 16-bit Shift Left Logical with Saturation or Rounding Shift Right Arithmetic)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
KSLRA16 Rd, Rs1, Rs2
KSLRA16.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit elements logical left (positive) or arithmetic right (negative) shift operation with
Q15 saturation for the left shift. The <tt>.u</tt> form performs additional rounding up operations for the
right shift.

<strong>Description</strong>:\n
The 16-bit data elements of Rs1 are left-shifted logically or right-shifted arithmetically
based on the value of Rs2[4:0]. Rs2[4:0] is in the signed range of [-2^4, 2^4-1]. A positive Rs2[4:0] means
logical left shift and a negative Rs2[4:0] means arithmetic right shift. The shift amount is the
absolute value of Rs2[4:0]. However, the behavior of <tt>Rs2[4:0]==-2^4 (0x10)</tt> is defined to be
equivalent to the behavior of <tt>Rs2[4:0]==-(2^4-1) (0x11)</tt>.
The left-shifted results are saturated to the 16-bit signed integer range of [-2^15, 2^15-1]. For the <tt>.u</tt>
form of the instruction, the right-shifted results are added a 1 to the most significant discarded bit
position for rounding effect. After the shift, saturation, or rounding, the final results are written to
Rd. If any saturation happens, this instruction sets the OV flag. The value of Rs2[31:5] will not affect
this instruction.

<strong>Operations</strong>:\n
@code
if (Rs2[4:0] < 0) {
  sa = -Rs2[4:0];
  sa = (sa == 16)? 15 : sa;
  if (`.u` form) {
    res[15:-1] = SE17(Rs1.H[x][15:sa-1]) + 1;
    Rd.H[x] = res[15:0];
  } else {
    Rd.H[x] = SE16(Rs1.H[x][15:sa]);
  }
} else {
  sa = Rs2[3:0];
  res[(15+sa):0] = Rs1.H[x] <<(logic) sa;
  if (res > (2^15)-1) {
    res[15:0] = 0x7fff; OV = 1;
  } else if (res < -2^15) {
    res[15:0] = 0x8000; OV = 1;
  }
  d.H[x] = res[15:0];
}
for RV32: x=1...0,
for RV64: x=3...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1ga3a01ea385d7d505ab86f7db697567e5b';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KSLRAW';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '5156';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KSLRAW (Shift Left Logical with Q31 Saturation or Shift Right Arithmetic)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
KSLRAW Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Perform a logical left (positive) or arithmetic right (negative) shift operation with Q31
saturation for the left shift on a 32-bit data.

<strong>Description</strong>:\n
The lower 32-bit content of Rs1 is left-shifted logically or right-shifted arithmetically
based on the value of Rs2[5:0]. Rs2[5:0] is in the signed range of [-25, 25-1]. A positive Rs2[5:0] means
logical left shift and a negative Rs2[5:0] means arithmetic right shift. The shift amount is the
absolute value of Rs2[5:0] clamped to the actual shift range of [0, 31].
The left-shifted result is saturated to the 32-bit signed integer range of [-2^31, 2^31-1]. After the shift
operation, the final result is bit-31 sign-extended and written to Rd. If any saturation happens, this
instruction sets the OV flag. The value of Rs2[31:6] will not affected the operation of this instruction.

<strong>Operations</strong>:\n
@code
if (Rs2[5:0] < 0) {
  sa = -Rs2[5:0];
  sa = (sa == 32)? 31 : sa;
  res[31:0] = Rs1.W[0] >>(arith) sa;
} else {
  sa = Rs2[5:0];
  tmp = Rs1.W[0] <<(logic) sa;
  if (tmp > (2^31)-1) {
    res[31:0] = (2^31)-1;
    OV = 1;
  } else if (tmp < -2^31) {
    res[31:0] = -2^31;
    OV = 1
  } else {
    res[31:0] = tmp[31:0];
  }
}
Rd = res[31:0]; // RV32
Rd = SE64(res[31:0]); // RV64
@endcode

\param [in]  a    int type of value stored in a
\param [in]  b    int type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1ga9f23cd90864721f831fefd87acd4182e';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KSLRAW_U';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '5219';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KSLRAW.u (Shift Left Logical with Q31 Saturation or Rounding Shift Right Arithmetic)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
KSLRAW.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Perform a logical left (positive) or arithmetic right (negative) shift operation with Q31
saturation for the left shift and a rounding up operation for the right shift on a 32-bit data.

<strong>Description</strong>:\n
The lower 32-bit content of Rs1 is left-shifted logically or right-shifted arithmetically
based on the value of Rs2[5:0]. Rs2[5:0] is in the signed range of [-25, 25-1]. A positive Rs2[5:0] means
logical left shift and a negative Rs2[5:0] means arithmetic right shift. The shift amount is the
absolute value of Rs2[5:0] clamped to the actual shift range of [0, 31].
The left-shifted result is saturated to the 32-bit signed integer range of [-2^31, 2^31-1]. The right-shifted
result is added a 1 to the most significant discarded bit position for rounding effect. After the shift,
saturation, or rounding, the final result is bit-31 sign-extended and written to Rd. If any saturation
happens, this instruction sets the OV flag. The value of Rs2[31:6] will not affect the operation of this
instruction.

<strong>Operations</strong>:\n
@code
if (Rs2[5:0] < 0) {
  sa = -Rs2[5:0];
  sa = (sa == 32)? 31 : sa;
  res[31:-1] = SE33(Rs1[31:(sa-1)]) + 1;
  rst[31:0] = res[31:0];
} else {
  sa = Rs2[5:0];
  tmp = Rs1.W[0] <<(logic) sa;
  if (tmp > (2^31)-1) {
    rst[31:0] = (2^31)-1;
    OV = 1;
  } else if (tmp < -2^31) {
    rst[31:0] = -2^31;
    OV = 1
  } else {
    rst[31:0] = tmp[31:0];
  }
}
Rd = rst[31:0]; // RV32
Rd = SE64(rst[31:0]); // RV64
@endcode

\param [in]  a    int type of value stored in a
\param [in]  b    int type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga5623725bde47550878158bc9a52dd0aa';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KSTAS16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '5276';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KSTAS16 (SIMD 16-bit Signed Saturating Straight Addition & Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
KSTAS16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit signed integer element saturating addition and 16-bit signed integer element
saturating subtraction in a 32-bit chunk simultaneously. Operands are from corresponding
positions in 32-bit chunks.

<strong>Description</strong>:\n
This instruction adds the 16-bit signed integer element in [31:16] of 32-bit chunks in
Rs1 with the 16-bit signed integer element in [31:16] of 32-bit chunks in Rs2; at the same time, it
subtracts the 16-bit signed integer element in [15:0] of 32-bit chunks in Rs2 from the 16-bit signed
integer element in [15:0] of 32-bit chunks in Rs1. If any of the results are beyond the Q15 number
range (-2^15 <= Q15 <= 2^15-1), they are saturated to the range and the OV bit is set to 1. The saturated
results are written to [31:16] of 32-bit chunks in Rd for addition and [15:0] of 32-bit chunks in Rd for
subtraction.

<strong>Operations</strong>:\n
@code
res1 = Rs1.W[x][31:16] + Rs2.W[x][31:16];
res2 = Rs1.W[x][15:0] - Rs2.W[x][15:0];
for (res in [res1, res2]) {
  if (res > (2^15)-1) {
    res = (2^15)-1;
    OV = 1;
  } else if (res < -2^15) {
    res = -2^15;
    OV = 1;
  }
}
Rd.W[x][31:16] = res1;
Rd.W[x][15:0] = res2;
for RV32, x=0
for RV64, x=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga8feffb9748de700f30a52c93302be55d';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KSTSA16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '5333';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KSTSA16 (SIMD 16-bit Signed Saturating Straight Subtraction & Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
KSTSA16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit signed integer element saturating subtraction and 16-bit signed integer element
saturating addition in a 32-bit chunk simultaneously. Operands are from corresponding positions in
32-bit chunks.

<strong>Description</strong>:\n
This instruction subtracts the 16-bit signed integer element in [31:16] of 32-bit chunks
in Rs2 from the 16-bit signed integer element in [31:16] of 32-bit chunks in Rs1; at the same time, it
adds the 16-bit signed integer element in [15:0] of 32-bit chunks in Rs2 with the 16-bit signed integer
element in [15:0] of 32-bit chunks in Rs1. If any of the results are beyond the Q15 number range (-2^15
<= Q15 <= 2^15-1), they are saturated to the range and the OV bit is set to 1. The saturated results are
written to [31:16] of 32-bit chunks in Rd for subtraction and [15:0] of 32-bit chunks in Rd for
addition.

<strong>Operations</strong>:\n
@code
res1 = Rs1.W[x][31:16] - Rs2.W[x][31:16];
res2 = Rs1.W[x][15:0] + Rs2.W[x][15:0];
for (res in [res1, res2]) {
  if (res > (2^15)-1) {
    res = (2^15)-1;
    OV = 1;
  } else if (res < -2^15) {
    res = -2^15;
    OV = 1;
  }
}
Rd.W[x][31:16] = res1;
Rd.W[x][15:0] = res2;
for RV32, x=0
for RV64, x=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__ADDSUB_1ga872cc2823228c92d1004bd859af27147';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KSUB8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '5380';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KSUB8 (SIMD 8-bit Signed Saturating Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
KSUB8 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 8-bit signed elements saturating subtractions simultaneously.

<strong>Description</strong>:\n
This instruction subtracts the 8-bit signed integer elements in Rs2 from the 8-bit
signed integer elements in Rs1. If any of the results are beyond the Q7 number range (-2^7 <= Q7 <= 27
-1), they are saturated to the range and the OV bit is set to 1. The saturated results are written to Rd.

<strong>Operations</strong>:\n
@code
res[x] = Rs1.B[x] - Rs2.B[x];
if (res[x] > (2^7)-1) {
  res[x] = (2^7)-1;
  OV = 1;
} else if (res[x] < -2^7) {
  res[x] = -2^7;
  OV = 1;
}
Rd.B[x] = res[x];
for RV32: x=3...0,
for RV64: x=7...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga062dbffd606488852b1e4aabcf6369b4';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KSUB16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '5428';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KSUB16 (SIMD 16-bit Signed Saturating Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
KSUB16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit signed integer elements saturating subtractions simultaneously.

<strong>Description</strong>:\n
This instruction subtracts the 16-bit signed integer elements in Rs2 from the 16-bit
signed integer elements in Rs1. If any of the results are beyond the Q15 number range (-2^15 <= Q15 <=
2^15-1), they are saturated to the range and the OV bit is set to 1. The saturated results are written to
Rd.

<strong>Operations</strong>:\n
@code
res[x] = Rs1.H[x] - Rs2.H[x];
if (res[x] > (2^15)-1) {
  res[x] = (2^15)-1;
  OV = 1;
} else if (res[x] < -2^15) {
  res[x] = -2^15;
  OV = 1;
}
Rd.H[x] = res[x];
for RV32: x=1...0,
for RV64: x=3...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__64B__ADDSUB_1gad703720a47f05b3e322caffbcc45298a';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KSUB64';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '5494';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KSUB64 (64-bit Signed Saturating Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (64-bit Profile)

<strong>Syntax</strong>:\n
@code
KSUB64 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Perform a 64-bit signed integer subtraction. The result is saturated to the Q63 range.

<strong>RV32 Description</strong>:\n
This instruction subtracts the 64-bit signed integer of an even/odd pair of
registers specified by Rs2(4,1) from the 64-bit signed integer of an even/odd pair of registers
specified by Rs1(4,1). If the 64-bit result is beyond the Q63 number range (-2^63 <= Q63 <= 2^63-1), it is
saturated to the range and the OV bit is set to 1. The saturated result is then written to an even/odd
pair of registers specified by Rd(4,1).
Rx(4,1), i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair
includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the high 32-bit of the operand and the even <tt>2d</tt>
register of the pair contains the low 32-bit of the operand.

<strong>RV64 Description</strong>:\n
This instruction subtracts the 64-bit signed integer of Rs2 from the 64-bit signed
integer of Rs1. If the 64-bit result is beyond the Q63 number range (-2^63 <= Q63 <= 2^63-1), it is saturated
to the range and the OV bit is set to 1. The saturated result is then written to Rd.

<strong>Operations</strong>:\n
@code
RV32:
t_L = CONCAT(Rd(4,1),1'b0); t_H = CONCAT(Rd(4,1),1'b1);
a_L = CONCAT(Rs1(4,1),1'b0); a_H = CONCAT(Rs1(4,1),1'b1);
b_L = CONCAT(Rs2(4,1),1'b0); b_H = CONCAT(Rs2(4,1),1'b1);
result = R[a_H].R[a_L] - R[b_H].R[b_L];
if (result > (2^63)-1) {
  result = (2^63)-1; OV = 1;
} else if (result < -2^63) {
  result = -2^63; OV = 1;
}
R[t_H].R[t_L] = result;
RV64:
result = Rs1 - Rs2;
if (result > (2^63)-1) {
  result = (2^63)-1; OV = 1;
} else if (result < -2^63) {
  result = -2^63; OV = 1;
}
Rd = result;
@endcode

\param [in]  a    long long type of value stored in a
\param [in]  b    long long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q15__SAT__ALU_1gae30012cd8914b62f2fb84236b138f54f';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KSUBH';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '5541';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KSUBH (Signed Subtraction with Q15 Saturation)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
KSUBH Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Subtract the signed lower 32-bit content of two registers with Q15 saturation.

<strong>Description</strong>:\n
The signed lower 32-bit content of Rs2 is subtracted from the signed lower 32-bit
content of Rs1. And the result is saturated to the 16-bit signed integer range of [-2^15, 2^15-1] and then
sign-extended and written to Rd. If saturation happens, this instruction sets the OV flag.

<strong>Operations</strong>:\n
@code
tmp = Rs1.W[0] - Rs2.W[0];
if (tmp > (2^15)-1) {
  res = (2^15)-1;
  OV = 1;
} else if (tmp < -2^15) {
  res = -2^15;
  OV = 1
} else {
  res = tmp;
}
Rd = SE(res[15:0]);
@endcode

\param [in]  a    int type of value stored in a
\param [in]  b    int type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1ga2a28907bd6cda3a2caa1e2200eafaec3';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KSUBW';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '5589';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KSUBW (Signed Subtraction with Q31 Saturation)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
KSUBW Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Subtract the signed lower 32-bit content of two registers with Q31 saturation.

<strong>Description</strong>:\n
The signed lower 32-bit content of Rs2 is subtracted from the signed lower 32-bit
content of Rs1. And the result is saturated to the 32-bit signed integer range of [-2^31, 2^31-1] and then
sign-extened and written to Rd. If saturation happens, this instruction sets the OV flag.

<strong>Operations</strong>:\n
@code
tmp = Rs1.W[0] - Rs2.W[0];
if (tmp > (2^31)-1) {
  res = (2^31)-1;
  OV = 1;
} else if (tmp < -2^31) {
res = -2^31;
  OV = 1
} else {
  res = tmp;
}
Rd = res[31:0]; // RV32
Rd = SE(res[31:0]); // RV64
@endcode

\param [in]  a    int type of value stored in a
\param [in]  b    int type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X32__MAC_1ga37ef876bfb8f2a063dd2d6554086efe4';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KWMMUL';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '5645';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KWMMUL (SIMD Saturating MSW Signed Multiply Word & Double)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
KWMMUL Rd, Rs1, Rs2
KWMMUL.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit integer elements of two registers, shift the results left 1-bit,
saturate, and write the most significant 32-bit results to a register. The <tt>.u</tt> form additionally
rounds up the multiplication results from the most signification discarded bit.

<strong>Description</strong>:\n
This instruction multiplies the 32-bit elements of Rs1 with the 32-bit elements of Rs2. It then shifts
the multiplication results one bit to the left and takes the most significant 32-bit results. If the
shifted result is greater than 2^31-1, it is saturated to 2^31-1 and the OV flag is set to 1. The final element
result is written to Rd. The 32-bit elements of Rs1 and Rs2 are treated as signed integers. The <tt>.u</tt>
form of the instruction additionally rounds up the 64-bit multiplication results by adding a 1 to bit
30 before the shift and saturation operations.

<strong>Operations</strong>:\n
@code
if ((0x80000000 != Rs1.W[x]) | (0x80000000 != Rs2.W[x])) {
  Mres[x][63:0] = Rs1.W[x] * Rs2.W[x];
  if (`.u` form) {
    Round[x][33:0] = Mres[x][63:30] + 1;
    Rd.W[x] = Round[x][32:1];
  } else {
    Rd.W[x] = Mres[x][62:31];
  }
} else {
  Rd.W[x] = 0x7fffffff;
  OV = 1;
}
for RV32: x=0
for RV64: x=1...0
@endcode

\param [in]  a    long type of value stored in a
\param [in]  b    long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X32__MAC_1ga5fc98cdba6f2dda6fc65d4c3a836c20f';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KWMMUL_U';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '5701';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KWMMUL.u (SIMD Saturating MSW Signed Multiply Word & Double with Rounding)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
KWMMUL Rd, Rs1, Rs2
KWMMUL.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit integer elements of two registers, shift the results left 1-bit,
saturate, and write the most significant 32-bit results to a register. The <tt>.u</tt> form additionally
rounds up the multiplication results from the most signification discarded bit.

<strong>Description</strong>:\n
This instruction multiplies the 32-bit elements of Rs1 with the 32-bit elements of Rs2. It then shifts
the multiplication results one bit to the left and takes the most significant 32-bit results. If the
shifted result is greater than 2^31-1, it is saturated to 2^31-1 and the OV flag is set to 1. The final element
result is written to Rd. The 32-bit elements of Rs1 and Rs2 are treated as signed integers. The <tt>.u</tt>
form of the instruction additionally rounds up the 64-bit multiplication results by adding a 1 to bit
30 before the shift and saturation operations.

<strong>Operations</strong>:\n
@code
if ((0x80000000 != Rs1.W[x]) | (0x80000000 != Rs2.W[x])) {
  Mres[x][63:0] = Rs1.W[x] * Rs2.W[x];
  if (`.u` form) {
    Round[x][33:0] = Mres[x][63:30] + 1;
    Rd.W[x] = Round[x][32:1];
  } else {
    Rd.W[x] = Mres[x][62:31];
  }
} else {
  Rd.W[x] = 0x7fffffff;
  OV = 1;
}
for RV32: x=0
for RV64: x=1...0
@endcode

\param [in]  a    long type of value stored in a
\param [in]  b    long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1ga1e5062cc77c31e898d6a85e7768a7b2d';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_MADDR32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '5747';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
MADDR32 (Multiply and Add to 32-Bit Word)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
MADDR32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the 32-bit contents of two registers and add the lower 32-bit multiplication result
to the 32-bit content of a destination register. Write the final result back to the destination register.

<strong>Description</strong>:\n
This instruction multiplies the lower 32-bit content of Rs1 with that of Rs2. It adds the
lower 32-bit multiplication result to the lower 32-bit content of Rd and writes the final result (RV32)
or sign-extended result (RV64) back to Rd. The contents of Rs1 and Rs2 can be either signed or
unsigned integers.

<strong>Operations</strong>:\n
@code
RV32:
Mresult = Rs1 * Rs2;
Rd = Rd + Mresult.W[0];
RV64:
Mresult = Rs1.W[0] * Rs2.W[0];
tres[31:0] = Rd.W[0] + Mresult.W[0];
Rd = SE64(tres[31:0]);
@endcode

\param [in]  t    unsigned long type of value stored in t
\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__32B__COMPUTATION_1ga636b734793493bbcf7a61dfa55749e82';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_MAXW';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '5786';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
MAXW (32-bit Signed Word Maximum)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
MAXW Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Get the larger value from the 32-bit contents of two general registers.

<strong>Description</strong>:\n
This instruction compares two signed 32-bit integers stored in Rs1 and Rs2, picks the
larger value as the result, and writes the result to Rd.

<strong>Operations</strong>:\n
@code
if (Rs1.W[0] >= Rs2.W[0]) {
  Rd = SE(Rs1.W[0]);
} else {
  Rd = SE(Rs2.W[0]);
}
@endcode

\param [in]  a    int type of value stored in a
\param [in]  b    int type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__32B__COMPUTATION_1ga60a38a5ee2cab1dd916cf4745c86a77e';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_MINW';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '5822';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
MINW (32-bit Signed Word Minimum)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
MINW Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Get the smaller value from the 32-bit contents of two general registers.

<strong>Description</strong>:\n
This instruction compares two signed 32-bit integers stored in Rs1 and Rs2, picks the
smaller value as the result, and writes the result to Rd.

<strong>Operations</strong>:\n
@code
if (Rs1.W[0] >= Rs2.W[0]) { Rd = SE(Rs2.W[0]); } else { Rd = SE(Rs1.W[0]); }
@endcode

\param [in]  a    int type of value stored in a
\param [in]  b    int type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1ga8260760ab7c146507ec4507862534332';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_MSUBR32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '5869';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
MSUBR32 (Multiply and Subtract from 32-Bit Word)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
MSUBR32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the 32-bit contents of two registers and subtract the lower 32-bit multiplication
result from the 32-bit content of a destination register. Write the final result back to the destination
register.

<strong>Description</strong>:\n
This instruction multiplies the lower 32-bit content of Rs1 with that of Rs2, subtracts
the lower 32-bit multiplication result from the lower 32-bit content of Rd, then writes the final
result (RV32) or sign-extended result (RV64) back to Rd. The contents of Rs1 and Rs2 can be either
signed or unsigned integers.

<strong>Operations</strong>:\n
@code
RV32:
Mresult = Rs1 * Rs2;
Rd = Rd - Mresult.W[0];
RV64:
Mresult = Rs1.W[0] * Rs2.W[0];
tres[31:0] = Rd.W[0] - Mresult.W[0];
Rd = SE64(tres[31:0]);
@endcode

\param [in]  t    unsigned long type of value stored in t
\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__32B__COMPUTATION_1gab76bac5299a9c41ce034594a704a126b';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_MULR64';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '5920';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
MULR64 (Multiply Word Unsigned to 64-bit Data)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
MULR64 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the 32-bit unsigned integer contents of two registers and write the 64-bit result.

<strong>RV32 Description</strong>:\n
This instruction multiplies the 32-bit content of Rs1 with that of Rs2 and writes the 64-bit
multiplication result to an even/odd pair of registers containing Rd. Rd(4,1) index d determines the
even/odd pair group of the two registers. Specifically, the register pair includes register 2d and
2d+1.
The odd <tt>2d+1</tt> register of the pair contains the high 32-bit of the result and the even <tt>2d</tt> register
of the pair contains the low 32-bit of the result.
The lower 32-bit contents of Rs1 and Rs2 are treated as unsigned integers.

<strong>RV64 Description</strong>:\n
This instruction multiplies the lower 32-bit content of Rs1 with that of Rs2 and writes the 64-bit
multiplication result to Rd.
The lower 32-bit contents of Rs1 and Rs2 are treated as unsigned integers.

<strong>Operations</strong>:\n
@code
RV32:
Mresult = CONCAT(1`b0,Rs1) u* CONCAT(1`b0,Rs2);
R[Rd(4,1).1(0)][31:0] = Mresult[63:32];
R[Rd(4,1).0(0)][31:0] = Mresult[31:0];
RV64:
Rd = Mresult[63:0];
Mresult = CONCAT(1`b0,Rs1.W[0]) u* CONCAT(1`b0,Rs2.W[0]);
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__32B__COMPUTATION_1ga70bfdde5df211d5aa20cf406736d2ea1';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_MULSR64';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '5972';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
MULSR64 (Multiply Word Signed to 64-bit Data)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
MULSR64 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the 32-bit signed integer contents of two registers and write the 64-bit result.

<strong>RV32 Description</strong>:\n
This instruction multiplies the lower 32-bit content of Rs1 with the lower 32-bit content of Rs2 and
writes the 64-bit multiplication result to an even/odd pair of registers containing Rd. Rd(4,1) index d
determines the even/odd pair group of the two registers. Specifically, the register pair includes
register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the high 32-bit of the result and the even <tt>2d</tt> register
of the pair contains the low 32-bit of the result.
The lower 32-bit contents of Rs1 and Rs2 are treated as signed integers.

<strong>RV64 Description</strong>:\n
This instruction multiplies the lower 32-bit content of Rs1 with the lower 32-bit content of Rs2 and
writes the 64-bit multiplication result to Rd.
The lower 32-bit contents of Rs1 and Rs2 are treated as signed integers.

<strong>Operations</strong>:\n
@code
RV32:
Mresult = Ra s* Rb;
R[Rd(4,1).1(0)][31:0] = Mresult[63:32];
R[Rd(4,1).0(0)][31:0] = Mresult[31:0];
RV64:
Mresult = Ra.W[0] s* Rb.W[0];
Rd = Mresult[63:0];
@endcode

\param [in]  a    long type of value stored in a
\param [in]  b    long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__PART__SIMD__MISC_1ga4d0a417bfde5846e13d2ae5a2da2dbb3';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_PBSAD';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '6011';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
PBSAD (Parallel Byte Sum of Absolute Difference)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
PBSAD Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Calculate the sum of absolute difference of unsigned 8-bit data elements.

<strong>Description</strong>:\n
This instruction subtracts the un-signed 8-bit elements of Rs2 from those of Rs1. Then
it adds the absolute value of each difference together and writes the result to Rd.

<strong>Operations</strong>:\n
@code
absdiff[x] = ABS(Rs1.B[x] - Rs2.B[x]);
Rd = SUM(absdiff[x]);
for RV32: x=3...0,
for RV64: x=7...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__PART__SIMD__MISC_1gab29c8817a341834901b676f1be7e6279';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_PBSADA';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '6053';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
PBSADA (Parallel Byte Sum of Absolute Difference Accum)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
PBSADA Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Calculate the sum of absolute difference of four unsigned 8-bit data elements and
accumulate it into a register.

<strong>Description</strong>:\n
This instruction subtracts the un-signed 8-bit elements of Rs2 from those of Rs1. It
then adds the absolute value of each difference together along with the content of Rd and writes the
accumulated result back to Rd.

<strong>Operations</strong>:\n
@code
absdiff[x] = ABS(Rs1.B[x] - Rs2.B[x]);
Rd = Rd + SUM(absdiff[x]);
for RV32: x=3...0,
for RV64: x=7...0
@endcode

\param [in]  t    unsigned long type of value stored in t
\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__PACK_1gabd698d8de29ab162d919a182b9c6779c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_PKBB16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '6103';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
PKBB16 (Pack Two 16-bit Data from Both Bottom Half)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
PKBB16 Rd, Rs1, Rs2
PKBT16 Rd, Rs1, Rs2
PKTT16 Rd, Rs1, Rs2
PKTB16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Pack 16-bit data from 32-bit chunks in two registers.
* PKBB16: bottom.bottom
* PKBT16 bottom.top
* PKTT16 top.top
* PKTB16 top.bottom

<strong>Description</strong>:\n
(PKBB16) moves Rs1.W[x][15:0] to Rd.W[x][31:16] and moves Rs2.W[x] [15:0] to
Rd.W[x] [15:0].
(PKBT16) moves Rs1.W[x] [15:0] to Rd.W[x] [31:16] and moves Rs2.W[x] [31:16] to Rd.W[x] [15:0].
(PKTT16) moves Rs1.W[x] [31:16] to Rd.W[x] [31:16] and moves Rs2.W[x] [31:16] to Rd.W[x] [15:0].
(PKTB16) moves Rs1.W[x] [31:16] to Rd.W[x] [31:16] and moves Rs2.W[x] [15:0] to Rd.W[x] [15:0].

<strong>Operations</strong>:\n
@code
Rd.W[x][31:0] = CONCAT(Rs1.W[x][15:0], Rs2.W[x][15:0]); // PKBB16
Rd.W[x][31:0] = CONCAT(Rs1.W[x][15:0], Rs2.W[x][31:16]); // PKBT16
Rd.W[x][31:0] = CONCAT(Rs1.W[x][31:16], Rs2.W[x][15:0]); // PKTB16
Rd.W[x][31:0] = CONCAT(Rs1.W[x][31:16], Rs2.W[x][31:16]); // PKTT16
for RV32: x=0,
for RV64: x=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__PACK_1gaf10c9bb0704694903991a3a77e4134a1';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_PKBT16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '6154';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
PKBT16 (Pack Two 16-bit Data from Bottom and Top Half)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
PKBB16 Rd, Rs1, Rs2
PKBT16 Rd, Rs1, Rs2
PKTT16 Rd, Rs1, Rs2
PKTB16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Pack 16-bit data from 32-bit chunks in two registers.
* PKBB16: bottom.bottom
* PKBT16 bottom.top
* PKTT16 top.top
* PKTB16 top.bottom

<strong>Description</strong>:\n
(PKBB16) moves Rs1.W[x][15:0] to Rd.W[x][31:16] and moves Rs2.W[x] [15:0] to
Rd.W[x] [15:0].
(PKBT16) moves Rs1.W[x] [15:0] to Rd.W[x] [31:16] and moves Rs2.W[x] [31:16] to Rd.W[x] [15:0].
(PKTT16) moves Rs1.W[x] [31:16] to Rd.W[x] [31:16] and moves Rs2.W[x] [31:16] to Rd.W[x] [15:0].
(PKTB16) moves Rs1.W[x] [31:16] to Rd.W[x] [31:16] and moves Rs2.W[x] [15:0] to Rd.W[x] [15:0].

<strong>Operations</strong>:\n
@code
Rd.W[x][31:0] = CONCAT(Rs1.W[x][15:0], Rs2.W[x][15:0]); // PKBB16
Rd.W[x][31:0] = CONCAT(Rs1.W[x][15:0], Rs2.W[x][31:16]); // PKBT16
Rd.W[x][31:0] = CONCAT(Rs1.W[x][31:16], Rs2.W[x][15:0]); // PKTB16
Rd.W[x][31:0] = CONCAT(Rs1.W[x][31:16], Rs2.W[x][31:16]); // PKTT16
for RV32: x=0,
for RV64: x=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__PACK_1ga2d33235fc87cd78798e5824e3b84054d';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_PKTT16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '6205';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
PKTT16 (Pack Two 16-bit Data from Both Top Half)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
PKBB16 Rd, Rs1, Rs2
PKBT16 Rd, Rs1, Rs2
PKTT16 Rd, Rs1, Rs2
PKTB16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Pack 16-bit data from 32-bit chunks in two registers.
* PKBB16: bottom.bottom
* PKBT16 bottom.top
* PKTT16 top.top
* PKTB16 top.bottom

<strong>Description</strong>:\n
(PKBB16) moves Rs1.W[x][15:0] to Rd.W[x][31:16] and moves Rs2.W[x] [15:0] to
Rd.W[x] [15:0].
(PKBT16) moves Rs1.W[x] [15:0] to Rd.W[x] [31:16] and moves Rs2.W[x] [31:16] to Rd.W[x] [15:0].
(PKTT16) moves Rs1.W[x] [31:16] to Rd.W[x] [31:16] and moves Rs2.W[x] [31:16] to Rd.W[x] [15:0].
(PKTB16) moves Rs1.W[x] [31:16] to Rd.W[x] [31:16] and moves Rs2.W[x] [15:0] to Rd.W[x] [15:0].

<strong>Operations</strong>:\n
@code
Rd.W[x][31:0] = CONCAT(Rs1.W[x][15:0], Rs2.W[x][15:0]); // PKBB16
Rd.W[x][31:0] = CONCAT(Rs1.W[x][15:0], Rs2.W[x][31:16]); // PKBT16
Rd.W[x][31:0] = CONCAT(Rs1.W[x][31:16], Rs2.W[x][15:0]); // PKTB16
Rd.W[x][31:0] = CONCAT(Rs1.W[x][31:16], Rs2.W[x][31:16]); // PKTT16
for RV32: x=0,
for RV64: x=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__PACK_1gacb5418972db5061d6f993f3b4a3a131e';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_PKTB16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '6256';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
PKTB16 (Pack Two 16-bit Data from Top and Bottom Half)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
PKBB16 Rd, Rs1, Rs2
PKBT16 Rd, Rs1, Rs2
PKTT16 Rd, Rs1, Rs2
PKTB16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Pack 16-bit data from 32-bit chunks in two registers.
* PKBB16: bottom.bottom
* PKBT16 bottom.top
* PKTT16 top.top
* PKTB16 top.bottom

<strong>Description</strong>:\n
(PKBB16) moves Rs1.W[x][15:0] to Rd.W[x][31:16] and moves Rs2.W[x] [15:0] to
Rd.W[x] [15:0].
(PKBT16) moves Rs1.W[x] [15:0] to Rd.W[x] [31:16] and moves Rs2.W[x] [31:16] to Rd.W[x] [15:0].
(PKTT16) moves Rs1.W[x] [31:16] to Rd.W[x] [31:16] and moves Rs2.W[x] [31:16] to Rd.W[x] [15:0].
(PKTB16) moves Rs1.W[x] [31:16] to Rd.W[x] [31:16] and moves Rs2.W[x] [15:0] to Rd.W[x] [15:0].

<strong>Operations</strong>:\n
@code
Rd.W[x][31:0] = CONCAT(Rs1.W[x][15:0], Rs2.W[x][15:0]); // PKBB16
Rd.W[x][31:0] = CONCAT(Rs1.W[x][15:0], Rs2.W[x][31:16]); // PKBT16
Rd.W[x][31:0] = CONCAT(Rs1.W[x][31:16], Rs2.W[x][15:0]); // PKTB16
Rd.W[x][31:0] = CONCAT(Rs1.W[x][31:16], Rs2.W[x][31:16]); // PKTT16
for RV32: x=0,
for RV64: x=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__ADDSUB_1ga270f185315a2f3d5da8d14e9a89e716b';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_RADD8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '6301';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RADD8 (SIMD 8-bit Signed Halving Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
RADD8 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 8-bit signed integer element additions simultaneously. The element results are halved
to avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction adds the 8-bit signed integer elements in Rs1 with the 8-bit signed
integer elements in Rs2. The results are first arithmetically right-shifted by 1 bit and then written to
Rd.

<strong>Examples</strong>:\n
@code
* Rs1 = 0x7F, Rs2 = 0x7F, Rd = 0x7F
* Rs1 = 0x80, Rs2 = 0x80, Rd = 0x80
* Rs1 = 0x40, Rs2 = 0x80, Rd = 0xE0
@endcode

<strong>Operations</strong>:\n
@code
Rd.B[x] = (Rs1.B[x] + Rs2.B[x]) s>> 1; for RV32: x=3...0, for RV64: x=7...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga53762c95c79e336f330d308b64b4c40e';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_RADD16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '6346';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RADD16 (SIMD 16-bit Signed Halving Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
RADD16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit signed integer element additions simultaneously. The results are halved to avoid
overflow or saturation.

<strong>Description</strong>:\n
This instruction adds the 16-bit signed integer elements in Rs1 with the 16-bit signed
integer elements in Rs2. The results are first arithmetically right-shifted by 1 bit and then written to
Rd.

<strong>Examples</strong>:\n
@code
* Rs1 = 0x7FFF, Rs2 = 0x7FFF, Rd = 0x7FFF
* Rs1 = 0x8000, Rs2 = 0x8000, Rd = 0x8000
* Rs1 = 0x4000, Rs2 = 0x8000, Rd = 0xE000
@endcode

<strong>Operations</strong>:\n
@code
Rd.H[x] = (Rs1.H[x] + Rs2.H[x]) s>> 1; for RV32: x=1...0, for RV64: x=3...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__64B__ADDSUB_1ga152f18d1ef922b3104cc763d00611511';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_RADD64';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '6399';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RADD64 (64-bit Signed Halving Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (64-bit Profile)

<strong>Syntax</strong>:\n
@code
RADD64 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Add two 64-bit signed integers. The result is halved to avoid overflow or saturation.

<strong>RV32 Description</strong>:\n
This instruction adds the 64-bit signed integer of an even/odd pair of registers
specified by Rs1(4,1) with the 64-bit signed integer of an even/odd pair of registers specified by
Rs2(4,1). The 64-bit addition result is first arithmetically right-shifted by 1 bit and then written to an
even/odd pair of registers specified by Rd(4,1).
Rx(4,1), i.e., value d, determines the even/odd pair group of two registers. Specifically, the register
pair includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the high 32-bit of the result and the even <tt>2d</tt> register
of the pair contains the low 32-bit of the result.

<strong>RV64 Description</strong>:\n
This instruction adds the 64-bit signed integer in Rs1 with the 64-bit signed
integer in Rs2. The 64-bit addition result is first arithmetically right-shifted by 1 bit and then
written to Rd.

<strong>Operations</strong>:\n
@code
RV32:
t_L = CONCAT(Rd(4,1),1'b0); t_H = CONCAT(Rd(4,1),1'b1);
a_L = CONCAT(Rs1(4,1),1'b0); a_H = CONCAT(Rs1(4,1),1'b1);
b_L = CONCAT(Rs2(4,1),1'b0); b_H = CONCAT(Rs2(4,1),1'b1);
R[t_H].R[t_L] = (R[a_H].R[a_L] + R[b_H].R[b_L]) s>> 1;
RV64:
Rd = (Rs1 + Rs2) s>> 1;
@endcode

\param [in]  a    long long type of value stored in a
\param [in]  b    long long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__32B__COMPUTATION_1ga162b41b571bd84dcd8860437417544dd';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_RADDW';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '6447';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RADDW (32-bit Signed Halving Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
RADDW Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Add 32-bit signed integers and the results are halved to avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction adds the first 32-bit signed integer in Rs1 with the first 32-bit signed
integer in Rs2. The result is first arithmetically right-shifted by 1 bit and then sign-extended and
written to Rd.

<strong>Examples</strong>:\n
@code
* Rs1 = 0x7FFFFFFF, Rs2 = 0x7FFFFFFF, Rd = 0x7FFFFFFF
* Rs1 = 0x80000000, Rs2 = 0x80000000, Rd = 0x80000000
* Rs1 = 0x40000000, Rs2 = 0x80000000, Rd = 0xE0000000
@endcode

<strong>Operations</strong>:\n
@code
RV32:
Rd[31:0] = (Rs1[31:0] + Rs2[31:0]) s>> 1;
RV64:
resw[31:0] = (Rs1[31:0] + Rs2[31:0]) s>> 1;
Rd[63:0] = SE(resw[31:0]);
@endcode

\param [in]  a    int type of value stored in a
\param [in]  b    int type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga425c896839da2d7162fd68f53a50a9f9';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_RCRAS16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '6496';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RCRAS16 (SIMD 16-bit Signed Halving Cross Addition & Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
RCRAS16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit signed integer element addition and 16-bit signed integer element subtraction in
a 32-bit chunk simultaneously. Operands are from crossed positions in 32-bit chunks. The results
are halved to avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction adds the 16-bit signed integer element in [31:16] of 32-bit chunks in
Rs1 with the 16-bit signed integer element in [15:0] of 32-bit chunks in Rs2, and subtracts the 16-bit
signed integer element in [31:16] of 32-bit chunks in Rs2 from the 16-bit signed integer element in
[15:0] of 32-bit chunks in Rs1. The element results are first arithmetically right-shifted by 1 bit and
then written to [31:16] of 32-bit chunks in Rd and [15:0] of 32-bit chunks in Rd.

<strong>Examples</strong>:\n
@code
Please see `RADD16` and `RSUB16` instructions.
@endcode

<strong>Operations</strong>:\n
@code
Rd.W[x][31:16] = (Rs1.W[x][31:16] + Rs2.W[x][15:0]) s>> 1;
Rd.W[x][15:0] = (Rs1.W[x][15:0] - Rs2.W[x][31:16]) s>> 1;
for RV32, x=0
for RV64, x=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga98d239e879270c5e4c8dd575e9cb6529';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_RCRSA16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '6545';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RCRSA16 (SIMD 16-bit Signed Halving Cross Subtraction & Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
RCRSA16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit signed integer element subtraction and 16-bit signed integer element addition in
a 32-bit chunk simultaneously. Operands are from crossed positions in 32-bit chunks. The results
are halved to avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction subtracts the 16-bit signed integer element in [15:0] of 32-bit chunks
in Rs2 from the 16-bit signed integer element in [31:16] of 32-bit chunks in Rs1, and adds the 16-bit
signed element integer in [15:0] of 32-bit chunks in Rs1 with the 16-bit signed integer element in
[31:16] of 32-bit chunks in Rs2. The two results are first arithmetically right-shifted by 1 bit and
then written to [31:16] of 32-bit chunks in Rd and [15:0] of 32-bit chunks in Rd.

<strong>Examples</strong>:\n
@code
Please see `RADD16` and `RSUB16` instructions.
@endcode

<strong>Operations</strong>:\n
@code
Rd.W[x][31:16] = (Rs1.W[x][31:16] - Rs2.W[x][15:0]) s>> 1;
Rd.W[x][15:0] = (Rs1.W[x][15:0] + Rs2.W[x][31:16]) s>> 1;
for RV32, x=0
for RV64, x=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__OV__FLAG__SC_1gaff8e2c883c492aff917d183ae7097535';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_RDOV';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '6572';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RDOV (Read OV flag)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
RDOV Rd  # pseudo mnemonic
@endcode

<strong>Purpose</strong>:\n
This pseudo instruction is an alias to <tt>CSRR Rd, ucode</tt> instruction which maps to the real
instruction of <tt>CSRRS Rd, ucode, x0</tt>.


\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1gaec8b94f14dfbcab9f1230e3d43047de9';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_RSTAS16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '6621';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RSTAS16 (SIMD 16-bit Signed Halving Straight Addition & Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
RSTAS16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit signed integer element addition and 16-bit signed integer element subtraction in
a 32-bit chunk simultaneously. Operands are from corresponding positions in 32-bit chunks. The
results are halved to avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction adds the 16-bit signed integer element in [31:16] of 32-bit chunks in
Rs1 with the 16-bit signed integer element in [31:16] of 32-bit chunks in Rs2, and subtracts the 16-bit
signed integer element in [15:0] of 32-bit chunks in Rs2 from the 16-bit signed integer element in
[15:0] of 32-bit chunks in Rs1. The element results are first arithmetically right-shifted by 1 bit and
then written to [31:16] of 32-bit chunks in Rd and [15:0] of 32-bit chunks in Rd.

<strong>Examples</strong>:\n
@code
Please see `RADD16` and `RSUB16` instructions.
@endcode

<strong>Operations</strong>:\n
@code
Rd.W[x][31:16] = (Rs1.W[x][31:16] + Rs2.W[x][31:16]) s>> 1;
Rd.W[x][15:0] = (Rs1.W[x][15:0] - Rs2.W[x][15:0]) s>> 1;
for RV32, x=0
for RV64, x=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1gaf9b70a84f1b52fd578ffe432f7bb0492';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_RSTSA16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '6670';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RSTSA16 (SIMD 16-bit Signed Halving Straight Subtraction & Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
RSTSA16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit signed integer element subtraction and 16-bit signed integer element addition in
a 32-bit chunk simultaneously. Operands are from corresponding positions in 32-bit chunks. The
results are halved to avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction subtracts the 16-bit signed integer element in [31:16] of 32-bit chunks
in Rs2 from the 16-bit signed integer element in [31:16] of 32-bit chunks in Rs1, and adds the 16-bit
signed element integer in [15:0] of 32-bit chunks in Rs1 with the 16-bit signed integer element in
[15:0] of 32-bit chunks in Rs2. The two results are first arithmetically right-shifted by 1 bit and then
written to [31:16] of 32-bit chunks in Rd and [15:0] of 32-bit chunks in Rd.

<strong>Examples</strong>:\n
@code
Please see `RADD16` and `RSUB16` instructions.
@endcode

<strong>Operations</strong>:\n
@code
Rd.W[x][31:16] = (Rs1.W[x][31:16] - Rs2.W[x][31:16]) s>> 1;
Rd.W[x][15:0] = (Rs1.W[x][15:0] + Rs2.W[x][15:0]) s>> 1;
for RV32, x=0
for RV64, x=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__ADDSUB_1gae3a2b016b3af39c178ef275c7e939bb3';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_RSUB8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '6717';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RSUB8 (SIMD 8-bit Signed Halving Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
RSUB8 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 8-bit signed integer element subtractions simultaneously. The results are halved to
avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction subtracts the 8-bit signed integer elements in Rs2 from the 8-bit
signed integer elements in Rs1. The results are first arithmetically right-shifted by 1 bit and then
written to Rd.

<strong>Examples</strong>:\n
@code
* Rs1 = 0x7F, Rs2 = 0x80, Rd = 0x7F
* Rs1 = 0x80, Rs2 = 0x7F, Rd = 0x80
* Rs1= 0x80, Rs2 = 0x40, Rd = 0xA0
@endcode

<strong>Operations</strong>:\n
@code
Rd.B[x] = (Rs1.B[x] - Rs2.B[x]) s>> 1;
for RV32: x=3...0,
for RV64: x=7...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1gabb7544dfa512a408384621aee3956fe0';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_RSUB16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '6764';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RSUB16 (SIMD 16-bit Signed Halving Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
RSUB16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit signed integer element subtractions simultaneously. The results are halved to
avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction subtracts the 16-bit signed integer elements in Rs2 from the 16-bit
signed integer elements in Rs1. The results are first arithmetically right-shifted by 1 bit and then
written to Rd.

<strong>Examples</strong>:\n
@code
* Ra = 0x7FFF, Rb = 0x8000, Rt = 0x7FFF
* Ra = 0x8000, Rb = 0x7FFF, Rt = 0x8000
* Ra = 0x8000, Rb = 0x4000, Rt = 0xA000
@endcode

<strong>Operations</strong>:\n
@code
Rd.H[x] = (Rs1.H[x] - Rs2.H[x]) s>> 1;
for RV32: x=1...0,
for RV64: x=3...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__64B__ADDSUB_1gafc5f4bf4b712ae2559a30356fc9773a8';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_RSUB64';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '6818';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RSUB64 (64-bit Signed Halving Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (64-bit Profile)

<strong>Syntax</strong>:\n
@code
RSUB64 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Perform a 64-bit signed integer subtraction. The result is halved to avoid overflow or
saturation.

<strong>RV32 Description</strong>:\n
This instruction subtracts the 64-bit signed integer of an even/odd pair of
registers specified by Rb(4,1) from the 64-bit signed integer of an even/odd pair of registers
specified by Ra(4,1). The subtraction result is first arithmetically right-shifted by 1 bit and then
written to an even/odd pair of registers specified by Rt(4,1).
Rx(4,1), i.e., value d, determines the even/odd pair group of two registers. Specifically, the register
pair includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the high 32-bit of the result and the even <tt>2d</tt> register
of the pair contains the low 32-bit of the result.

<strong>RV64 Description</strong>:\n
This instruction subtracts the 64-bit signed integer in Rs2 from the 64-bit signed
integer in Rs1. The 64-bit subtraction result is first arithmetically right-shifted by 1 bit and then
written to Rd.

<strong>Operations</strong>:\n
@code
RV32:
t_L = CONCAT(Rd(4,1),1'b0); t_H = CONCAT(Rd(4,1),1'b1);
a_L = CONCAT(Rs1(4,1),1'b0); a_H = CONCAT(Rs1(4,1),1'b1);
b_L = CONCAT(Rs2(4,1),1'b0); b_H = CONCAT(Rs2(4,1),1'b1);
R[t_H].R[t_L] = (R[a_H].R[a_L] - R[b_H].R[b_L]) s>> 1;
RV64:
Rd = (Rs1 - Rs2) s>> 1;
@endcode

\param [in]  a    long long type of value stored in a
\param [in]  b    long long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__32B__COMPUTATION_1gad19388580ce1a2cc1afee60f9d73e60c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_RSUBW';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '6866';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RSUBW (32-bit Signed Halving Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
RSUBW Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Subtract 32-bit signed integers and the result is halved to avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction subtracts the first 32-bit signed integer in Rs2 from the first 32-bit
signed integer in Rs1. The result is first arithmetically right-shifted by 1 bit and then sign-extended
and written to Rd.

<strong>Examples</strong>:\n
@code
* Rs1 = 0x7FFFFFFF, Rs2 = 0x80000000, Rd = 0x7FFFFFFF
* Rs1 = 0x80000000, Rs2 = 0x7FFFFFFF, Rd = 0x80000000
* Rs1 = 0x80000000, Rs2 = 0x40000000, Rd = 0xA0000000
@endcode

<strong>Operations</strong>:\n
@code
RV32:
Rd[31:0] = (Rs1[31:0] - Rs2[31:0]) s>> 1;
RV64:
resw[31:0] = (Rs1[31:0] - Rs2[31:0]) s>> 1;
Rd[63:0] = SE(resw[31:0]);
@endcode

\param [in]  a    int type of value stored in a
\param [in]  b    int type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__CMP_1ga0b086037e48ff8891523b74b07154810';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SCMPLE8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '7053';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SCMPLE8 (SIMD 8-bit Signed Compare Less Than & Equal)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
SCMPLE8 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 8-bit signed integer elements less than & equal comparisons simultaneously.

<strong>Description</strong>:\n
This instruction compares the 8-bit signed integer elements in Rs1 with the 8-bit
signed integer elements in Rs2 to see if the one in Rs1 is less than or equal to the one in Rs2. If it is
true, the result is 0xFF; otherwise, the result is 0x0. The element comparison results are written to
Rd

<strong>Operations</strong>:\n
@code
Rd.B[x] = (Rs1.B[x] {le} Rs2.B[x])? 0xff : 0x0;
for RV32: x=3...0,
for RV64: x=7...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__CMP_1gad86adb4c738c71d2b9c07e44fb02113c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SCMPLE16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '7093';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SCMPLE16 (SIMD 16-bit Signed Compare Less Than & Equal)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
SCMPLE16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit signed integer elements less than & equal comparisons simultaneously.

<strong>Description</strong>:\n
This instruction compares the 16-bit signed integer elements in Rs1 with the 16-bit
signed integer elements in Rs2 to see if the one in Rs1 is less than or equal to the one in Rs2. If it is
true, the result is 0xFFFF; otherwise, the result is 0x0. The element comparison results are written
to Rd.

<strong>Operations</strong>:\n
@code
Rd.H[x] = (Rs1.H[x] {le} Rs2.H[x])? 0xffff : 0x0;
for RV32: x=1...0,
for RV64: x=3...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__CMP_1ga7a01ed10478504e9703dafdccc415ab6';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SCMPLT8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '7132';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SCMPLT8 (SIMD 8-bit Signed Compare Less Than)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
SCMPLT8 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 8-bit signed integer elements less than comparisons simultaneously.

<strong>Description</strong>:\n
This instruction compares the 8-bit signed integer elements in Rs1 with the 8-bit
signed integer elements in Rs2 to see if the one in Rs1 is less than the one in Rs2. If it is true, the
result is 0xFF; otherwise, the result is 0x0. The element comparison results are written to Rd.

<strong>Operations</strong>:\n
@code
Rd.B[x] = (Rs1.B[x] < Rs2.B[x])? 0xff : 0x0;
for RV32: x=3...0,
for RV64: x=7...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__CMP_1ga18887b352c5dbe9535424bee83bf7d42';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SCMPLT16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '7171';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SCMPLT16 (SIMD 16-bit Signed Compare Less Than)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
SCMPLT16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit signed integer elements less than comparisons simultaneously.

<strong>Description</strong>:\n
This instruction compares the 16-bit signed integer elements in Rs1 with the two 16-
bit signed integer elements in Rs2 to see if the one in Rs1 is less than the one in Rs2. If it is true, the
result is 0xFFFF; otherwise, the result is 0x0. The element comparison results are written to Rd.

<strong>Operations</strong>:\n
@code
Rd.H[x] = (Rs1.H[x] < Rs2.H[x])? 0xffff : 0x0;
for RV32: x=1...0,
for RV64: x=3...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1ga99febdacba921c09aff588332a658fba';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SLL8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '7212';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SLL8 (SIMD 8-bit Shift Left Logical)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
SLL8 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 8-bit elements logical left shift operations simultaneously. The shift amount is a
variable from a GPR.

<strong>Description</strong>:\n
The 8-bit elements in Rs1 are left-shifted logically. And the results are written to Rd.
The shifted out bits are filled with zero and the shift amount is specified by the low-order 3-bits of
the value in the Rs2 register.

<strong>Operations</strong>:\n
@code
sa = Rs2[2:0];
Rd.B[x] = Rs1.B[x] << sa;
for RV32: x=3...0,
for RV64: x=7...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1ga567ef612a72bcfbdc3a12a55bafb3b8c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SLL16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '7294';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SLL16 (SIMD 16-bit Shift Left Logical)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
SLL16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit elements logical left shift operations simultaneously. The shift amount is a
variable from a GPR.

<strong>Description</strong>:\n
The 16-bit elements in Rs1 are left-shifted logically. And the results are written to Rd.
The shifted out bits are filled with zero and the shift amount is specified by the low-order 4-bits of
the value in the Rs2 register.

<strong>Operations</strong>:\n
@code
sa = Rs2[3:0];
Rd.H[x] = Rs1.H[x] << sa;
for RV32: x=1...0,
for RV64: x=3...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__64B__ADDSUB_1ga4161cf3c9857cbef8d23b6a8e09b49d2';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMAL';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '7395';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMAL (Signed Multiply Halfs & Add 64-bit)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: Partial-SIMD

<strong>Syntax</strong>:\n
@code
SMAL Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed bottom 16-bit content of the 32-bit elements of a register with the top
16-bit content of the same 32-bit elements of the same register, and add the results with a 64-bit
value of an even/odd pair of registers (RV32) or a register (RV64). The addition result is written back
to another even/odd pair of registers (RV32) or a register (RV64).

<strong>RV32 Description</strong>:\n
This instruction multiplies the bottom 16-bit content of the lower 32-bit of Rs2 with the top 16-bit
content of the lower 32-bit of Rs2 and adds the result with the 64-bit value of an even/odd pair of
registers specified by Rs1(4,1). The 64-bit addition result is written back to an even/odd pair of
registers specified by Rd(4,1). The 16-bit values of Rs2, and the 64-bit value of the Rs1(4,1) register-
pair are treated as signed integers.
Rx(4,1), i.e., d, determines the even/odd pair group of the two registers. Specifically, the register pair
includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the high 32-bit of the operand and the even <tt>2d</tt>
register of the pair contains the low 32-bit of the operand.

<strong>RV64 Description</strong>:\n
This instruction multiplies the bottom 16-bit content of the 32-bit elements of Rs2 with the top 16-bit
content of the same 32-bit elements of Rs2 and adds the results with the 64-bit value of Rs1. The 64-
bit addition result is written back to Rd. The 16-bit values of Rs2, and the 64-bit value of Rs1 are
treated as signed integers.

<strong>Operations</strong>:\n
@code
RV32:
Mres[31:0] = Rs2.H[1] * Rs2.H[0];
Idx0 = CONCAT(Rs1(4,1),1'b0); Idx1 = CONCAT(Rs1(4,1),1'b1); +
Idx2 = CONCAT(Rd(4,1),1'b0); Idx3 = CONCAT(Rd(4,1),1'b1);
R[Idx3].R[Idx2] = R[Idx1].R[Idx0] + SE64(Mres[31:0]);
RV64:
Mres[0][31:0] = Rs2.W[0].H[1] * Rs2.W[0].H[0];
Mres[1][31:0] = Rs2.W[1].H[1] * Rs2.W[1].H[0];
Rd = Rs1 + SE64(Mres[1][31:0]) + SE64(Mres[0][31:0]);
@endcode

\param [in]  a    long long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__64B__ADDSUB_1gaceb791bc1a33f08f2abc7c5ec16c1a8f';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMALBB';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '7478';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMALBB (Signed Multiply Bottom Halfs & Add 64-bit)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (64-bit Profile)

<strong>Syntax</strong>:\n
@code
SMALBB Rd, Rs1, Rs2
SMALBT Rd, Rs1, Rs2
SMALTT Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 16-bit content of the 32-bit elements of a register with the 16-bit
content of the corresponding 32-bit elements of another register and add the results with a 64-bit
value of an even/odd pair of registers (RV32) or a register (RV64). The addition result is written back
to the register-pair (RV32) or the register (RV64).
* SMALBB: rt pair + bottom*bottom (all 32-bit elements)
* SMALBT rt pair + bottom*top (all 32-bit elements)
* SMALTT rt pair + top*top (all 32-bit elements)

<strong>RV32 Description</strong>:\n
For the <tt>SMALBB</tt> instruction, it multiplies the bottom 16-bit content of Rs1 with the bottom 16-bit
content of Rs2.
For the <tt>SMALBT</tt> instruction, it multiplies the bottom 16-bit content of Rs1 with the top 16-bit
content of Rs2.
For the <tt>SMALTT</tt> instruction, it multiplies the top 16-bit content of Rs1 with the top 16-bit content
of Rs2.
The multiplication result is added with the 64-bit value of an even/odd pair of registers specified by
Rd(4,1). The 64-bit addition result is written back to the register-pair. The 16-bit values of Rs1 and
Rs2, and the 64-bit value of the register-pair are treated as signed integers.
Rd(4,1), i.e., d, determines the even/odd pair group of the two registers. Specifically, the register pair
includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the high 32-bit of the operand and the even <tt>2d</tt>
register of the pair contains the low 32-bit of the operand.

<strong>RV64 Description</strong>:\n
For the <tt>SMALBB</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the bottom 16-bit content of the 32-bit elements of Rs2.
For the <tt>SMALBT</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the top 16-bit content of the 32-bit elements of Rs2.
For the <tt>SMALTT</tt> instruction, it multiplies the top 16-bit content of the 32-bit elements of Rs1 with
the top 16-bit content of the 32-bit elements of Rs2.
The multiplication results are added with the 64-bit value of Rd. The 64-bit addition result is written
back to Rd. The 16-bit values of Rs1 and Rs2, and the 64-bit value of Rd are treated as signed
integers.

<strong>Operations</strong>:\n
@code
RV32:
Mres[31:0] = Rs1.H[0] * Rs2.H[0]; // SMALBB
Mres[31:0] = Rs1.H[0] * Rs2.H[1]; // SMALBT
Mres[31:0] = Rs1.H[1] * Rs2.H[1]; // SMALTT
Idx0 = CONCAT(Rd(4,1),1'b0); Idx1 = CONCAT(Rd(4,1),1'b1);
R[Idx1].R[Idx0] = R[Idx1].R[Idx0] + SE64(Mres[31:0]);
RV64:
// SMALBB
Mres[0][31:0] = Rs1.W[0].H[0] * Rs2.W[0].H[0];
Mres[1][31:0] = Rs1.W[1].H[0] * Rs2.W[1].H[0];
// SMALBT
Mres[0][31:0] = Rs1.W[0].H[0] * Rs2.W[0].H[1];
Mres[1][31:0] = Rs1.W[1].H[0] * Rs2.W[1].H[1];
// SMALTT
Mres[0][31:0] = Rs1.W[0].H[1] * Rs2.W[0].H[1];
Mres[1][31:0] = Rs1.W[1].H[1] * Rs2.W[1].H[1];
Rd = Rd + SE64(Mres[0][31:0]) + SE64(Mres[1][31:0]);
@endcode

\param [in]  t    long long type of value stored in t
\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__64B__ADDSUB_1ga74fe212140384150726143f2f43c900f';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMALBT';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '7560';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMALBT (Signed Multiply Bottom Half & Top Half & Add 64-bit)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (64-bit Profile)

<strong>Syntax</strong>:\n
@code
SMALBB Rd, Rs1, Rs2
SMALBT Rd, Rs1, Rs2
SMALTT Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 16-bit content of the 32-bit elements of a register with the 16-bit
content of the corresponding 32-bit elements of another register and add the results with a 64-bit
value of an even/odd pair of registers (RV32) or a register (RV64). The addition result is written back
to the register-pair (RV32) or the register (RV64).
* SMALBB: rt pair + bottom*bottom (all 32-bit elements)
* SMALBT rt pair + bottom*top (all 32-bit elements)
* SMALTT rt pair + top*top (all 32-bit elements)

<strong>RV32 Description</strong>:\n
For the <tt>SMALBB</tt> instruction, it multiplies the bottom 16-bit content of Rs1 with the bottom 16-bit
content of Rs2.
For the <tt>SMALBT</tt> instruction, it multiplies the bottom 16-bit content of Rs1 with the top 16-bit
content of Rs2.
For the <tt>SMALTT</tt> instruction, it multiplies the top 16-bit content of Rs1 with the top 16-bit content
of Rs2.
The multiplication result is added with the 64-bit value of an even/odd pair of registers specified by
Rd(4,1). The 64-bit addition result is written back to the register-pair. The 16-bit values of Rs1 and
Rs2, and the 64-bit value of the register-pair are treated as signed integers.
Rd(4,1), i.e., d, determines the even/odd pair group of the two registers. Specifically, the register pair
includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the high 32-bit of the operand and the even <tt>2d</tt>
register of the pair contains the low 32-bit of the operand.

<strong>RV64 Description</strong>:\n
For the <tt>SMALBB</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the bottom 16-bit content of the 32-bit elements of Rs2.
For the <tt>SMALBT</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the top 16-bit content of the 32-bit elements of Rs2.
For the <tt>SMALTT</tt> instruction, it multiplies the top 16-bit content of the 32-bit elements of Rs1 with
the top 16-bit content of the 32-bit elements of Rs2.
The multiplication results are added with the 64-bit value of Rd. The 64-bit addition result is written
back to Rd. The 16-bit values of Rs1 and Rs2, and the 64-bit value of Rd are treated as signed
integers.

<strong>Operations</strong>:\n
@code
RV32:
Mres[31:0] = Rs1.H[0] * Rs2.H[0]; // SMALBB
Mres[31:0] = Rs1.H[0] * Rs2.H[1]; // SMALBT
Mres[31:0] = Rs1.H[1] * Rs2.H[1]; // SMALTT
Idx0 = CONCAT(Rd(4,1),1'b0); Idx1 = CONCAT(Rd(4,1),1'b1);
R[Idx1].R[Idx0] = R[Idx1].R[Idx0] + SE64(Mres[31:0]);
RV64:
// SMALBB
Mres[0][31:0] = Rs1.W[0].H[0] * Rs2.W[0].H[0];
Mres[1][31:0] = Rs1.W[1].H[0] * Rs2.W[1].H[0];
// SMALBT
Mres[0][31:0] = Rs1.W[0].H[0] * Rs2.W[0].H[1];
Mres[1][31:0] = Rs1.W[1].H[0] * Rs2.W[1].H[1];
// SMALTT
Mres[0][31:0] = Rs1.W[0].H[1] * Rs2.W[0].H[1];
Mres[1][31:0] = Rs1.W[1].H[1] * Rs2.W[1].H[1];
Rd = Rd + SE64(Mres[0][31:0]) + SE64(Mres[1][31:0]);
@endcode

\param [in]  t    long long type of value stored in t
\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__64B__ADDSUB_1ga39331e38421eb5f882a615941cf00444';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMALTT';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '7642';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMALTT (Signed Multiply Top Halfs & Add 64-bit)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (64-bit Profile)

<strong>Syntax</strong>:\n
@code
SMALBB Rd, Rs1, Rs2
SMALBT Rd, Rs1, Rs2
SMALTT Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 16-bit content of the 32-bit elements of a register with the 16-bit
content of the corresponding 32-bit elements of another register and add the results with a 64-bit
value of an even/odd pair of registers (RV32) or a register (RV64). The addition result is written back
to the register-pair (RV32) or the register (RV64).
* SMALBB: rt pair + bottom*bottom (all 32-bit elements)
* SMALBT rt pair + bottom*top (all 32-bit elements)
* SMALTT rt pair + top*top (all 32-bit elements)

<strong>RV32 Description</strong>:\n
For the <tt>SMALBB</tt> instruction, it multiplies the bottom 16-bit content of Rs1 with the bottom 16-bit
content of Rs2.
For the <tt>SMALBT</tt> instruction, it multiplies the bottom 16-bit content of Rs1 with the top 16-bit
content of Rs2.
For the <tt>SMALTT</tt> instruction, it multiplies the top 16-bit content of Rs1 with the top 16-bit content
of Rs2.
The multiplication result is added with the 64-bit value of an even/odd pair of registers specified by
Rd(4,1). The 64-bit addition result is written back to the register-pair. The 16-bit values of Rs1 and
Rs2, and the 64-bit value of the register-pair are treated as signed integers.
Rd(4,1), i.e., d, determines the even/odd pair group of the two registers. Specifically, the register pair
includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the high 32-bit of the operand and the even <tt>2d</tt>
register of the pair contains the low 32-bit of the operand.

<strong>RV64 Description</strong>:\n
For the <tt>SMALBB</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the bottom 16-bit content of the 32-bit elements of Rs2.
For the <tt>SMALBT</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the top 16-bit content of the 32-bit elements of Rs2.
For the <tt>SMALTT</tt> instruction, it multiplies the top 16-bit content of the 32-bit elements of Rs1 with
the top 16-bit content of the 32-bit elements of Rs2.
The multiplication results are added with the 64-bit value of Rd. The 64-bit addition result is written
back to Rd. The 16-bit values of Rs1 and Rs2, and the 64-bit value of Rd are treated as signed
integers.

<strong>Operations</strong>:\n
@code
RV32:
Mres[31:0] = Rs1.H[0] * Rs2.H[0]; // SMALBB
Mres[31:0] = Rs1.H[0] * Rs2.H[1]; // SMALBT
Mres[31:0] = Rs1.H[1] * Rs2.H[1]; // SMALTT
Idx0 = CONCAT(Rd(4,1),1'b0); Idx1 = CONCAT(Rd(4,1),1'b1);
R[Idx1].R[Idx0] = R[Idx1].R[Idx0] + SE64(Mres[31:0]);
RV64:
// SMALBB
Mres[0][31:0] = Rs1.W[0].H[0] * Rs2.W[0].H[0];
Mres[1][31:0] = Rs1.W[1].H[0] * Rs2.W[1].H[0];
// SMALBT
Mres[0][31:0] = Rs1.W[0].H[0] * Rs2.W[0].H[1];
Mres[1][31:0] = Rs1.W[1].H[0] * Rs2.W[1].H[1];
// SMALTT
Mres[0][31:0] = Rs1.W[0].H[1] * Rs2.W[0].H[1];
Mres[1][31:0] = Rs1.W[1].H[1] * Rs2.W[1].H[1];
Rd = Rd + SE64(Mres[0][31:0]) + SE64(Mres[1][31:0]);
@endcode

\param [in]  t    long long type of value stored in t
\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__64B__ADDSUB_1ga8320e2679cb96ee46fcaf761925b8708';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMALDA';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '7726';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMALDA (Signed Multiply Two Halfs and Two Adds 64-bit)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (64-bit Profile)

<strong>Syntax</strong>:\n
@code
SMALDA Rd, Rs1, Rs2
SMALXDA Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 16-bit multiplications from the 32-bit elements of two registers; and then
adds the two 32-bit results and the 64-bit value of an even/odd pair of registers together.
* SMALDA: rt pair+ top*top + bottom*bottom (all 32-bit elements)
* SMALXDA: rt pair+ top*bottom + bottom*top (all 32-bit elements)

<strong>RV32 Description</strong>:\n
For the <tt>SMALDA</tt> instruction, it multiplies the bottom 16-bit content of Rs1 with the bottom 16-bit
content of Rs2 and then adds the result to the result of multiplying the top 16-bit content of Rs1 with
the top 16-bit content of Rs2 with unlimited precision.
For the <tt>SMALXDA</tt> instruction, it multiplies the top 16-bit content of Rs1 with the bottom 16-bit
content of Rs2 and then adds the result to the result of multiplying the bottom 16-bit content of Rs1
with the top 16-bit content of Rs2 with unlimited precision.
The result is added to the 64-bit value of an even/odd pair of registers specified by Rd(4,1). The 64-
bit addition result is written back to the register-pair. The 16-bit values of Rs1 and Rs2, and the 64-
bit value of the register-pair are treated as signed integers.
Rd(4,1), i.e., d, determines the even/odd pair group of the two registers. Specifically, the register pair
includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the high 32-bit of the operand and the even <tt>2d</tt>
register of the pair contains the low 32-bit of the operand.

<strong>RV64 Description</strong>:\n
For the <tt>SMALDA</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the bottom 16-bit content of the 32-bit elements of Rs2 and then adds the result to the result of
multiplying the top 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the 32-
bit elements of Rs2 with unlimited precision.
For the <tt>SMALXDA</tt> instruction, it multiplies the top 16-bit content of the 32-bit elements of Rs1
with the bottom 16-bit content of the 32-bit elements of Rs2 and then adds the result to the result of
multiplying the bottom 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the
32-bit elements of Rs2 with unlimited precision.
The results are added to the 64-bit value of Rd. The 64-bit addition result is written back to Rd. The
16-bit values of Rs1 and Rs2, and the 64-bit value of Rd are treated as signed integers.

<strong>Operations</strong>:\n
@code
RV32:
// SMALDA
Mres0[31:0] = (Rs1.H[0] * Rs2.H[0]);
Mres1[31:0] = (Rs1.H[1] * Rs2.H[1]);
// SMALXDA
Mres0[31:0] = (Rs1.H[0] * Rs2.H[1]);
Mres1[31:0] = (Rs1.H[1] * Rs2.H[0]);
Idx0 = CONCAT(Rd(4,1),1'b0); Idx1 = CONCAT(Rd(4,1),1'b1);
R[Idx1].R[Idx0] = R[Idx1].R[Idx0] + SE64(Mres0[31:0]) + SE64(Mres1[31:0]);
RV64:
// SMALDA
Mres0[0][31:0] = (Rs1.W[0].H[0] * Rs2.W[0].H[0]);
Mres1[0][31:0] = (Rs1.W[0].H[1] * Rs2.W[0].H[1]);
Mres0[1][31:0] = (Rs1.W[1].H[0] * Rs2.W[1].H[0]);
Mres1[1][31:0] = (Rs1.W[1].H[1] * Rs2.W[1].H[1]);
// SMALXDA
Mres0[0][31:0] = (Rs1.W[0].H[0] * Rs2.W[0].H[1]);
Mres1[0][31:0] = (Rs1.W[0].H[1] * Rs2.W[0].H[0]);
Mres0[1][31:0] = (Rs1.W[1].H[0] * Rs2.W[1].H[1]);
Mres1[1][31:0] = (Rs1.W[1].H[1] * Rs2.W[1].H[0]);
Rd = Rd + SE64(Mres0[0][31:0]) + SE64(Mres1[0][31:0]) + SE64(Mres0[1][31:0]) +
SE64(Mres1[1][31:0]);
@endcode

\param [in]  t    long long type of value stored in t
\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
      func-mem-referenceby = {
        func-mem-ref-id = 'core__feature__dsp_8h_1ga6d8dce49013b778d0290cd057cf45dd0';
        func-mem-ref-line = '18530';
        func-mem-ref-name = '__RV_EXPD83';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__64B__ADDSUB_1ga18e89f90f0b3e3d8c34ceb33b671a61b';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMALXDA';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '7810';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMALXDA (Signed Crossed Multiply Two Halfs and Two Adds 64-bit)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (64-bit Profile)

<strong>Syntax</strong>:\n
@code
SMALDA Rd, Rs1, Rs2
SMALXDA Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 16-bit multiplications from the 32-bit elements of two registers; and then
adds the two 32-bit results and the 64-bit value of an even/odd pair of registers together.
* SMALDA: rt pair+ top*top + bottom*bottom (all 32-bit elements)
* SMALXDA: rt pair+ top*bottom + bottom*top (all 32-bit elements)

<strong>RV32 Description</strong>:\n
For the <tt>SMALDA</tt> instruction, it multiplies the bottom 16-bit content of Rs1 with the bottom 16-bit
content of Rs2 and then adds the result to the result of multiplying the top 16-bit content of Rs1 with
the top 16-bit content of Rs2 with unlimited precision.
For the <tt>SMALXDA</tt> instruction, it multiplies the top 16-bit content of Rs1 with the bottom 16-bit
content of Rs2 and then adds the result to the result of multiplying the bottom 16-bit content of Rs1
with the top 16-bit content of Rs2 with unlimited precision.
The result is added to the 64-bit value of an even/odd pair of registers specified by Rd(4,1). The 64-
bit addition result is written back to the register-pair. The 16-bit values of Rs1 and Rs2, and the 64-
bit value of the register-pair are treated as signed integers.
Rd(4,1), i.e., d, determines the even/odd pair group of the two registers. Specifically, the register pair
includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the high 32-bit of the operand and the even <tt>2d</tt>
register of the pair contains the low 32-bit of the operand.

<strong>RV64 Description</strong>:\n
For the <tt>SMALDA</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the bottom 16-bit content of the 32-bit elements of Rs2 and then adds the result to the result of
multiplying the top 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the 32-
bit elements of Rs2 with unlimited precision.
For the <tt>SMALXDA</tt> instruction, it multiplies the top 16-bit content of the 32-bit elements of Rs1
with the bottom 16-bit content of the 32-bit elements of Rs2 and then adds the result to the result of
multiplying the bottom 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the
32-bit elements of Rs2 with unlimited precision.
The results are added to the 64-bit value of Rd. The 64-bit addition result is written back to Rd. The
16-bit values of Rs1 and Rs2, and the 64-bit value of Rd are treated as signed integers.

<strong>Operations</strong>:\n
@code
RV32:
// SMALDA
Mres0[31:0] = (Rs1.H[0] * Rs2.H[0]);
Mres1[31:0] = (Rs1.H[1] * Rs2.H[1]);
// SMALXDA
Mres0[31:0] = (Rs1.H[0] * Rs2.H[1]);
Mres1[31:0] = (Rs1.H[1] * Rs2.H[0]);
Idx0 = CONCAT(Rd(4,1),1'b0); Idx1 = CONCAT(Rd(4,1),1'b1);
R[Idx1].R[Idx0] = R[Idx1].R[Idx0] + SE64(Mres0[31:0]) + SE64(Mres1[31:0]);
RV64:
// SMALDA
Mres0[0][31:0] = (Rs1.W[0].H[0] * Rs2.W[0].H[0]);
Mres1[0][31:0] = (Rs1.W[0].H[1] * Rs2.W[0].H[1]);
Mres0[1][31:0] = (Rs1.W[1].H[0] * Rs2.W[1].H[0]);
Mres1[1][31:0] = (Rs1.W[1].H[1] * Rs2.W[1].H[1]);
// SMALXDA
Mres0[0][31:0] = (Rs1.W[0].H[0] * Rs2.W[0].H[1]);
Mres1[0][31:0] = (Rs1.W[0].H[1] * Rs2.W[0].H[0]);
Mres0[1][31:0] = (Rs1.W[1].H[0] * Rs2.W[1].H[1]);
Mres1[1][31:0] = (Rs1.W[1].H[1] * Rs2.W[1].H[0]);
Rd = Rd + SE64(Mres0[0][31:0]) + SE64(Mres1[0][31:0]) + SE64(Mres0[1][31:0]) +
SE64(Mres1[1][31:0]);
@endcode

\param [in]  t    long long type of value stored in t
\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
      func-mem-referenceby = {
        func-mem-ref-id = 'core__feature__dsp_8h_1ga6d8dce49013b778d0290cd057cf45dd0';
        func-mem-ref-line = '18530';
        func-mem-ref-name = '__RV_EXPD83';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__64B__ADDSUB_1ga68b7e1927e142a46a1e3132a7e04b777';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMALDS';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '7901';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMALDS (Signed Multiply Two Halfs & Subtract & Add 64-bit)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (64-bit Profile)

<strong>Syntax</strong>:\n
@code
SMALDS Rd, Rs1, Rs2
SMALDRS Rd, Rs1, Rs2
SMALXDS Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 16-bit multiplications from the 32-bit elements of two registers; and then
perform a subtraction operation between the two 32-bit results. Then add the subtraction result to
the 64-bit value of an even/odd pair of registers (RV32) or a register (RV64). The addition result is
written back to the register-pair.
* SMALDS: rt pair + (top*top - bottom*bottom) (all 32-bit elements)
* SMALDRS: rt pair + (bottom*bottom - top*top) (all 32-bit elements)
* SMALXDS: rt pair + (top*bottom - bottom*top) (all 32-bit elements)

<strong>RV32 Description</strong>:\n
For the <tt>SMALDS</tt> instruction, it multiplies the bottom 16-bit content of Rs1 with the bottom 16-bit
content of Rs2 and then subtracts the result from the result of multiplying the top 16-bit content of
Rs1 with the top 16-bit content of Rs2.
For the <tt>SMALDRS</tt> instruction, it multiplies the top 16-bit content of Rs1 with the top 16-bit content
of Rs2 and then subtracts the result from the result of multiplying the bottom 16-bit content of Rs1
with the bottom 16-bit content of Rs2.
For the <tt>SMALXDS</tt> instruction, it multiplies the bottom 16-bit content of Rs1 with the top 16-bit
content of Rs2 and then subtracts the result from the result of multiplying the top 16-bit content of
Rs1 with the bottom 16-bit content of Rs2.
The subtraction result is then added to the 64-bit value of an even/odd pair of registers specified by
Rd(4,1). The 64-bit addition result is written back to the register-pair. The 16-bit values of Rs1 and
Rs2, and the 64-bit value of the register-pair are treated as signed integers.
Rd(4,1), i.e., d, determines the even/odd pair group of the two registers. Specifically, the register pair
includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the high 32-bit of the operand and the even <tt>2d</tt>
register of the pair contains the low 32-bit of the operand.

<strong>RV64 Description</strong>:\n
For the <tt>SMALDS</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the bottom 16-bit content of the 32-bit elements of Rs2 and then subtracts the result from the
result of multiplying the top 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content
of the 32-bit elements of Rs2.
For the <tt>SMALDRS</tt> instruction, it multiplies the top 16-bit content of the 32-bit elements of Rs1 with
the top 16-bit content of the 32-bit elements of Rs2 and then subtracts the result from the result of
multiplying the bottom 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit content of
the 32-bit elements of Rs2.
For the <tt>SMALXDS</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the top 16-bit content of the 32-bit elements of Rs2 and then subtracts the result from the
result of multiplying the top 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit
content of the 32-bit elements of Rs2.
The subtraction results are then added to the 64-bit value of Rd. The 64-bit addition result is written
back to Rd. The 16-bit values of Rs1 and Rs2, and the 64-bit value of Rd are treated as signed
integers.

<strong>Operations</strong>:\n
@code
* RV32:
Mres[31:0] = (Rs1.H[1] * Rs2.H[1]) - (Rs1.H[0] * Rs2.H[0]); // SMALDS
Mres[31:0] = (Rs1.H[0] * Rs2.H[0]) - (Rs1.H[1] * Rs2.H[1]); // SMALDRS
Mres[31:0] = (Rs1.H[1] * Rs2.H[0]) - (Rs1.H[0] * Rs2.H[1]); // SMALXDS
Idx0 = CONCAT(Rd(4,1),1'b0); Idx1 = CONCAT(Rd(4,1),1'b1);
R[Idx1].R[Idx0] = R[Idx1].R[Idx0] + SE64(Mres[31:0]);
* RV64:
// SMALDS
Mres[0][31:0] = (Rs1.W[0].H[1] * Rs2.W[0].H[1]) - (Rs1.W[0].H[0] * Rs2.W[0].H[0]);
Mres[1][31:0] = (Rs1.W[1].H[1] * Rs2.W[0].H[1]) - (Rs1.W[1].H[0] * Rs2.W[1].H[0]);
// SMALDRS
Mres[0][31:0] = (Rs1.W[0].H[0] * Rs2.W[0].H[0]) - (Rs1.W[0].H[1] * Rs2.W[0].H[1]);
Mres[1][31:0] = (Rs1.W[1].H[0] * Rs2.W[0].H[0]) - (Rs1.W[1].H[1] * Rs2.W[1].H[1]);
// SMALXDS
Mres[0][31:0] = (Rs1.W[0].H[1] * Rs2.W[0].H[0]) - (Rs1.W[0].H[0] * Rs2.W[0].H[1]);
Mres[1][31:0] = (Rs1.W[1].H[1] * Rs2.W[0].H[0]) - (Rs1.W[1].H[0] * Rs2.W[1].H[1]);
Rd = Rd + SE64(Mres[0][31:0]) + SE64(Mres[1][31:0]);
@endcode

\param [in]  t    long long type of value stored in t
\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__64B__ADDSUB_1ga9e334955371767a38c1e7069a42025c8';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMALDRS';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '7992';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMALDRS (Signed Multiply Two Halfs & Reverse Subtract & Add 64- bit)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (64-bit Profile)

<strong>Syntax</strong>:\n
@code
SMALDS Rd, Rs1, Rs2
SMALDRS Rd, Rs1, Rs2
SMALXDS Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 16-bit multiplications from the 32-bit elements of two registers; and then
perform a subtraction operation between the two 32-bit results. Then add the subtraction result to
the 64-bit value of an even/odd pair of registers (RV32) or a register (RV64). The addition result is
written back to the register-pair.
* SMALDS: rt pair + (top*top - bottom*bottom) (all 32-bit elements)
* SMALDRS: rt pair + (bottom*bottom - top*top) (all 32-bit elements)
* SMALXDS: rt pair + (top*bottom - bottom*top) (all 32-bit elements)

<strong>RV32 Description</strong>:\n
For the <tt>SMALDS</tt> instruction, it multiplies the bottom 16-bit content of Rs1 with the bottom 16-bit
content of Rs2 and then subtracts the result from the result of multiplying the top 16-bit content of
Rs1 with the top 16-bit content of Rs2.
For the <tt>SMALDRS</tt> instruction, it multiplies the top 16-bit content of Rs1 with the top 16-bit content
of Rs2 and then subtracts the result from the result of multiplying the bottom 16-bit content of Rs1
with the bottom 16-bit content of Rs2.
For the <tt>SMALXDS</tt> instruction, it multiplies the bottom 16-bit content of Rs1 with the top 16-bit
content of Rs2 and then subtracts the result from the result of multiplying the top 16-bit content of
Rs1 with the bottom 16-bit content of Rs2.
The subtraction result is then added to the 64-bit value of an even/odd pair of registers specified by
Rd(4,1). The 64-bit addition result is written back to the register-pair. The 16-bit values of Rs1 and
Rs2, and the 64-bit value of the register-pair are treated as signed integers.
Rd(4,1), i.e., d, determines the even/odd pair group of the two registers. Specifically, the register pair
includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the high 32-bit of the operand and the even <tt>2d</tt>
register of the pair contains the low 32-bit of the operand.

<strong>RV64 Description</strong>:\n
For the <tt>SMALDS</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the bottom 16-bit content of the 32-bit elements of Rs2 and then subtracts the result from the
result of multiplying the top 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content
of the 32-bit elements of Rs2.
For the <tt>SMALDRS</tt> instruction, it multiplies the top 16-bit content of the 32-bit elements of Rs1 with
the top 16-bit content of the 32-bit elements of Rs2 and then subtracts the result from the result of
multiplying the bottom 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit content of
the 32-bit elements of Rs2.
For the <tt>SMALXDS</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the top 16-bit content of the 32-bit elements of Rs2 and then subtracts the result from the
result of multiplying the top 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit
content of the 32-bit elements of Rs2.
The subtraction results are then added to the 64-bit value of Rd. The 64-bit addition result is written
back to Rd. The 16-bit values of Rs1 and Rs2, and the 64-bit value of Rd are treated as signed
integers.

<strong>Operations</strong>:\n
@code
* RV32:
Mres[31:0] = (Rs1.H[1] * Rs2.H[1]) - (Rs1.H[0] * Rs2.H[0]); // SMALDS
Mres[31:0] = (Rs1.H[0] * Rs2.H[0]) - (Rs1.H[1] * Rs2.H[1]); // SMALDRS
Mres[31:0] = (Rs1.H[1] * Rs2.H[0]) - (Rs1.H[0] * Rs2.H[1]); // SMALXDS
Idx0 = CONCAT(Rd(4,1),1'b0); Idx1 = CONCAT(Rd(4,1),1'b1);
R[Idx1].R[Idx0] = R[Idx1].R[Idx0] + SE64(Mres[31:0]);
* RV64:
// SMALDS
Mres[0][31:0] = (Rs1.W[0].H[1] * Rs2.W[0].H[1]) - (Rs1.W[0].H[0] * Rs2.W[0].H[0]);
Mres[1][31:0] = (Rs1.W[1].H[1] * Rs2.W[0].H[1]) - (Rs1.W[1].H[0] * Rs2.W[1].H[0]);
// SMALDRS
Mres[0][31:0] = (Rs1.W[0].H[0] * Rs2.W[0].H[0]) - (Rs1.W[0].H[1] * Rs2.W[0].H[1]);
Mres[1][31:0] = (Rs1.W[1].H[0] * Rs2.W[0].H[0]) - (Rs1.W[1].H[1] * Rs2.W[1].H[1]);
// SMALXDS
Mres[0][31:0] = (Rs1.W[0].H[1] * Rs2.W[0].H[0]) - (Rs1.W[0].H[0] * Rs2.W[0].H[1]);
Mres[1][31:0] = (Rs1.W[1].H[1] * Rs2.W[0].H[0]) - (Rs1.W[1].H[0] * Rs2.W[1].H[1]);
Rd = Rd + SE64(Mres[0][31:0]) + SE64(Mres[1][31:0]);
@endcode

\param [in]  t    long long type of value stored in t
\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__64B__ADDSUB_1gaf31ec8bdff7f1f55254aaeb13979c70c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMALXDS';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '8083';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMALXDS (Signed Crossed Multiply Two Halfs & Subtract & Add 64- bit)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (64-bit Profile)

<strong>Syntax</strong>:\n
@code
SMALDS Rd, Rs1, Rs2
SMALDRS Rd, Rs1, Rs2
SMALXDS Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 16-bit multiplications from the 32-bit elements of two registers; and then
perform a subtraction operation between the two 32-bit results. Then add the subtraction result to
the 64-bit value of an even/odd pair of registers (RV32) or a register (RV64). The addition result is
written back to the register-pair.
* SMALDS: rt pair + (top*top - bottom*bottom) (all 32-bit elements)
* SMALDRS: rt pair + (bottom*bottom - top*top) (all 32-bit elements)
* SMALXDS: rt pair + (top*bottom - bottom*top) (all 32-bit elements)

<strong>RV32 Description</strong>:\n
For the <tt>SMALDS</tt> instruction, it multiplies the bottom 16-bit content of Rs1 with the bottom 16-bit
content of Rs2 and then subtracts the result from the result of multiplying the top 16-bit content of
Rs1 with the top 16-bit content of Rs2.
For the <tt>SMALDRS</tt> instruction, it multiplies the top 16-bit content of Rs1 with the top 16-bit content
of Rs2 and then subtracts the result from the result of multiplying the bottom 16-bit content of Rs1
with the bottom 16-bit content of Rs2.
For the <tt>SMALXDS</tt> instruction, it multiplies the bottom 16-bit content of Rs1 with the top 16-bit
content of Rs2 and then subtracts the result from the result of multiplying the top 16-bit content of
Rs1 with the bottom 16-bit content of Rs2.
The subtraction result is then added to the 64-bit value of an even/odd pair of registers specified by
Rd(4,1). The 64-bit addition result is written back to the register-pair. The 16-bit values of Rs1 and
Rs2, and the 64-bit value of the register-pair are treated as signed integers.
Rd(4,1), i.e., d, determines the even/odd pair group of the two registers. Specifically, the register pair
includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the high 32-bit of the operand and the even <tt>2d</tt>
register of the pair contains the low 32-bit of the operand.

<strong>RV64 Description</strong>:\n
For the <tt>SMALDS</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the bottom 16-bit content of the 32-bit elements of Rs2 and then subtracts the result from the
result of multiplying the top 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content
of the 32-bit elements of Rs2.
For the <tt>SMALDRS</tt> instruction, it multiplies the top 16-bit content of the 32-bit elements of Rs1 with
the top 16-bit content of the 32-bit elements of Rs2 and then subtracts the result from the result of
multiplying the bottom 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit content of
the 32-bit elements of Rs2.
For the <tt>SMALXDS</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the top 16-bit content of the 32-bit elements of Rs2 and then subtracts the result from the
result of multiplying the top 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit
content of the 32-bit elements of Rs2.
The subtraction results are then added to the 64-bit value of Rd. The 64-bit addition result is written
back to Rd. The 16-bit values of Rs1 and Rs2, and the 64-bit value of Rd are treated as signed
integers.

<strong>Operations</strong>:\n
@code
* RV32:
Mres[31:0] = (Rs1.H[1] * Rs2.H[1]) - (Rs1.H[0] * Rs2.H[0]); // SMALDS
Mres[31:0] = (Rs1.H[0] * Rs2.H[0]) - (Rs1.H[1] * Rs2.H[1]); // SMALDRS
Mres[31:0] = (Rs1.H[1] * Rs2.H[0]) - (Rs1.H[0] * Rs2.H[1]); // SMALXDS
Idx0 = CONCAT(Rd(4,1),1'b0); Idx1 = CONCAT(Rd(4,1),1'b1);
R[Idx1].R[Idx0] = R[Idx1].R[Idx0] + SE64(Mres[31:0]);
* RV64:
// SMALDS
Mres[0][31:0] = (Rs1.W[0].H[1] * Rs2.W[0].H[1]) - (Rs1.W[0].H[0] * Rs2.W[0].H[0]);
Mres[1][31:0] = (Rs1.W[1].H[1] * Rs2.W[0].H[1]) - (Rs1.W[1].H[0] * Rs2.W[1].H[0]);
// SMALDRS
Mres[0][31:0] = (Rs1.W[0].H[0] * Rs2.W[0].H[0]) - (Rs1.W[0].H[1] * Rs2.W[0].H[1]);
Mres[1][31:0] = (Rs1.W[1].H[0] * Rs2.W[0].H[0]) - (Rs1.W[1].H[1] * Rs2.W[1].H[1]);
// SMALXDS
Mres[0][31:0] = (Rs1.W[0].H[1] * Rs2.W[0].H[0]) - (Rs1.W[0].H[0] * Rs2.W[0].H[1]);
Mres[1][31:0] = (Rs1.W[1].H[1] * Rs2.W[0].H[0]) - (Rs1.W[1].H[0] * Rs2.W[1].H[1]);
Rd = Rd + SE64(Mres[0][31:0]) + SE64(Mres[1][31:0]);
@endcode

\param [in]  t    long long type of value stored in t
\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__32B__MULT__64B__ADDSUB_1ga89c1afcd9898226795ae2112d2fbea40';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMAR64';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '8135';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMAR64 (Signed Multiply and Add to 64-Bit Data)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (64-bit Profile)

<strong>Syntax</strong>:\n
@code
SMAR64 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the 32-bit signed elements in two registers and add the 64-bit multiplication
result to the 64-bit signed data of a pair of registers (RV32) or a register (RV64). The result is written
back to the pair of registers (RV32) or a register (RV64).

<strong>RV32 Description</strong>:\n
This instruction multiplies the 32-bit signed data of Rs1 with that of Rs2. It adds
the 64-bit multiplication result to the 64-bit signed data of an even/odd pair of registers specified by
Rd(4,1). The addition result is written back to the even/odd pair of registers specified by Rd(4,1).
Rx(4,1), i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair
includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the high 32-bit of the result and the even <tt>2d</tt> register
of the pair contains the low 32-bit of the result.

<strong>RV64 Description</strong>:\n
This instruction multiplies the 32-bit signed elements of Rs1 with that of Rs2. It
adds the 64-bit multiplication results to the 64-bit signed data of Rd. The addition result is written
back to Rd.

<strong>Operations</strong>:\n
@code
* RV32:
t_L = CONCAT(Rd(4,1),1'b0); t_H = CONCAT(Rd(4,1),1'b1);
R[t_H].R[t_L] = R[t_H].R[t_L] + (Rs1 * Rs2);
* RV64:
Rd = Rd + (Rs1.W[0] * Rs2.W[0]) + (Rs1.W[1] * Rs2.W[1]);
@endcode

\param [in]  t    long long type of value stored in t
\param [in]  a    long type of value stored in a
\param [in]  b    long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__8B__MULT__32B__ADD_1ga08927c1a80a7e90b4bf485ece9ff01f3';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMAQA';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '8179';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMAQA (Signed Multiply Four Bytes with 32-bit Adds)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: Partial-SIMD (Reduction)

<strong>Syntax</strong>:\n
@code
SMAQA Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do four signed 8-bit multiplications from 32-bit chunks of two registers; and then adds
the four 16-bit results and the content of corresponding 32-bit chunks of a third register together.

<strong>Description</strong>:\n
This instruction multiplies the four signed 8-bit elements of 32-bit chunks of Rs1 with the four
signed 8-bit elements of 32-bit chunks of Rs2 and then adds the four results together with the signed
content of the corresponding 32-bit chunks of Rd. The final results are written back to the
corresponding 32-bit chunks in Rd.

<strong>Operations</strong>:\n
@code
res[x] = Rd.W[x] +
   (Rs1.W[x].B[3] s* Rs2.W[x].B[3]) + (Rs1.W[x].B[2] s* Rs2.W[x].B[2]) +
   (Rs1.W[x].B[1] s* Rs2.W[x].B[1]) + (Rs1.W[x].B[0] s* Rs2.W[x].B[0]);
Rd.W[x] = res[x];
for RV32: x=0,
for RV64: x=1,0
@endcode

\param [in]  t    long type of value stored in t
\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__8B__MULT__32B__ADD_1ga7354acb478473376227c883968d8b78d';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMAQA_SU';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '8224';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMAQA.SU (Signed and Unsigned Multiply Four Bytes with 32-bit Adds)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: Partial-SIMD (Reduction)

<strong>Syntax</strong>:\n
@code
SMAQA.SU Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do four <tt>signed x unsigned</tt> 8-bit multiplications from 32-bit chunks of two registers; and
then adds the four 16-bit results and the content of corresponding 32-bit chunks of a third register
together.

<strong>Description</strong>:\n
This instruction multiplies the four signed 8-bit elements of 32-bit chunks of Rs1 with the four
unsigned 8-bit elements of 32-bit chunks of Rs2 and then adds the four results together with the
signed content of the corresponding 32-bit chunks of Rd. The final results are written back to the
corresponding 32-bit chunks in Rd.

<strong>Operations</strong>:\n
@code
res[x] = Rd.W[x] +
   (Rs1.W[x].B[3] su* Rs2.W[x].B[3]) + (Rs1.W[x].B[2] su* Rs2.W[x].B[2]) +
   (Rs1.W[x].B[1] su* Rs2.W[x].B[1]) + (Rs1.W[x].B[0] su* Rs2.W[x].B[0]);
Rd.W[x] = res[x];
for RV32: x=0,
for RV64: x=1...0
@endcode

\param [in]  t    long type of value stored in t
\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MISC_1gafc3ca4c25f1796c6c129b0a72fdb4ddc';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMAX8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '8262';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMAX8 (SIMD 8-bit Signed Maximum)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
SMAX8 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 8-bit signed integer elements finding maximum operations simultaneously.

<strong>Description</strong>:\n
This instruction compares the 8-bit signed integer elements in Rs1 with the 8-bit
signed integer elements in Rs2 and selects the numbers that is greater than the other one. The
selected results are written to Rd.

<strong>Operations</strong>:\n
@code
Rd.B[x] = (Rs1.B[x] > Rs2.B[x])? Rs1.B[x] : Rs2.B[x];
for RV32: x=3...0,
for RV64: x=7...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MISC_1ga9fefb44ce69dae8452a1f78462b36ace';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMAX16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '8301';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMAX16 (SIMD 16-bit Signed Maximum)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
SMAX16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit signed integer elements finding maximum operations simultaneously.

<strong>Description</strong>:\n
This instruction compares the 16-bit signed integer elements in Rs1 with the 16-bit
signed integer elements in Rs2 and selects the numbers that is greater than the other one. The
selected results are written to Rd.

<strong>Operations</strong>:\n
@code
Rd.H[x] = (Rs1.H[x] > Rs2.H[x])? Rs1.H[x] : Rs2.H[x];
for RV32: x=1...0,
for RV64: x=3...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga6078c3498de77bbaeabbf7017fa023ab';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMBB16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '8353';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMBB16 (SIMD Signed Multiply Bottom Half & Bottom Half)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
SMBB16 Rd, Rs1, Rs2
SMBT16 Rd, Rs1, Rs2
SMTT16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 16-bit content of the 32-bit elements of a register with the signed 16-
bit content of the 32-bit elements of another register and write the result to a third register.
* SMBB16: W[x].bottom*W[x].bottom
* SMBT16: W[x].bottom *W[x].top
* SMTT16: W[x].top * W[x].top

<strong>Description</strong>:\n
For the <tt>SMBB16</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the bottom 16-bit content of the 32-bit elements of Rs2.
For the <tt>SMBT16</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the top 16-bit content of the 32-bit elements of Rs2.
For the <tt>SMTT16</tt> instruction, it multiplies the top 16-bit content of the 32-bit elements of Rs1 with
the top 16-bit content of the 32-bit elements of Rs2.
The multiplication results are written to Rd. The 16-bit contents of Rs1 and Rs2 are treated as signed
integers.

<strong>Operations</strong>:\n
@code
Rd.W[x] = Rs1.W[x].H[0] * Rs2.W[x].H[0]; // SMBB16
Rd.W[x] = Rs1.W[x].H[0] * Rs2.W[x].H[1]; // SMBT16
Rd.W[x] = Rs1.W[x].H[1] * Rs2.W[x].H[1]; // SMTT16
for RV32: x=0,
for RV64: x=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga2f8364cbb057b9952017ad1bd3230a5e';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMBT16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '8405';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMBT16 (SIMD Signed Multiply Bottom Half & Top Half)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
SMBB16 Rd, Rs1, Rs2
SMBT16 Rd, Rs1, Rs2
SMTT16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 16-bit content of the 32-bit elements of a register with the signed 16-
bit content of the 32-bit elements of another register and write the result to a third register.
* SMBB16: W[x].bottom*W[x].bottom
* SMBT16: W[x].bottom *W[x].top
* SMTT16: W[x].top * W[x].top

<strong>Description</strong>:\n
For the <tt>SMBB16</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the bottom 16-bit content of the 32-bit elements of Rs2.
For the <tt>SMBT16</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the top 16-bit content of the 32-bit elements of Rs2.
For the <tt>SMTT16</tt> instruction, it multiplies the top 16-bit content of the 32-bit elements of Rs1 with
the top 16-bit content of the 32-bit elements of Rs2.
The multiplication results are written to Rd. The 16-bit contents of Rs1 and Rs2 are treated as signed
integers.

<strong>Operations</strong>:\n
@code
Rd.W[x] = Rs1.W[x].H[0] * Rs2.W[x].H[0]; // SMBB16
Rd.W[x] = Rs1.W[x].H[0] * Rs2.W[x].H[1]; // SMBT16
Rd.W[x] = Rs1.W[x].H[1] * Rs2.W[x].H[1]; // SMTT16
for RV32: x=0,
for RV64: x=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1gab253cabd0fb5ac51b6b897cd3e8d6e0f';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMTT16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '8457';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMTT16 (SIMD Signed Multiply Top Half & Top Half)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
SMBB16 Rd, Rs1, Rs2
SMBT16 Rd, Rs1, Rs2
SMTT16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 16-bit content of the 32-bit elements of a register with the signed 16-
bit content of the 32-bit elements of another register and write the result to a third register.
* SMBB16: W[x].bottom*W[x].bottom
* SMBT16: W[x].bottom *W[x].top
* SMTT16: W[x].top * W[x].top

<strong>Description</strong>:\n
For the <tt>SMBB16</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the bottom 16-bit content of the 32-bit elements of Rs2.
For the <tt>SMBT16</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the top 16-bit content of the 32-bit elements of Rs2.
For the <tt>SMTT16</tt> instruction, it multiplies the top 16-bit content of the 32-bit elements of Rs1 with
the top 16-bit content of the 32-bit elements of Rs2.
The multiplication results are written to Rd. The 16-bit contents of Rs1 and Rs2 are treated as signed
integers.

<strong>Operations</strong>:\n
@code
Rd.W[x] = Rs1.W[x].H[0] * Rs2.W[x].H[0]; // SMBB16
Rd.W[x] = Rs1.W[x].H[0] * Rs2.W[x].H[1]; // SMBT16
Rd.W[x] = Rs1.W[x].H[1] * Rs2.W[x].H[1]; // SMTT16
for RV32: x=0,
for RV64: x=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga056df0d47cc4dcef5739bb15f2a324ac';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMDS';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '8516';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMDS (SIMD Signed Multiply Two Halfs and Subtract)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
SMDS Rd, Rs1, Rs2
SMDRS Rd, Rs1, Rs2
SMXDS Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 16-bit multiplications from the 32-bit elements of two registers; and then
perform a subtraction operation between the two 32-bit results.
* SMDS: top*top - bottom*bottom (per 32-bit element)
* SMDRS: bottom*bottom - top*top (per 32-bit element)
* SMXDS: top*bottom - bottom*top (per 32-bit element)

<strong>Description</strong>:\n
For the <tt>SMDS</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1 with
the bottom 16-bit content of the 32-bit elements of Rs2 and then subtracts the result from the result
of multiplying the top 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the
32-bit elements of Rs2.
For the <tt>SMDRS</tt> instruction, it multiplies the top 16-bit content of the 32-bit elements of Rs1 with
the top 16-bit content of the 32-bit elements of Rs2 and then subtracts the result from the result of
multiplying the bottom 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit content of
the 32-bit elements of Rs2.
For the <tt>SMXDS</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the top 16-bit content of the 32-bit elements of Rs2 and then subtracts the result from the
result of multiplying the top 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit
content of the 32-bit elements of Rs2.
The subtraction result is written to the corresponding 32-bit element of Rd. The 16-bit contents of
multiplication are treated as signed integers.

<strong>Operations</strong>:\n
@code
* SMDS:
Rd.W[x] = (Rs1.W[x].H[1] * Rs2.W[x].H[1]) - (Rs1.W[x].H[0] * Rs2.W[x].H[0]);
* SMDRS:
Rd.W[x] = (Rs1.W[x].H[0] * Rs2.W[x].H[0]) - (Rs1.W[x].H[1] * Rs2.W[x].H[1]);
* SMXDS:
Rd.W[x] = (Rs1.W[x].H[1] * Rs2.W[x].H[0]) - (Rs1.W[x].H[0] * Rs2.W[x].H[1]);
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1gafab251aa9c5e64dc004c9dc3b8c7c0dd';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMDRS';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '8575';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMDRS (SIMD Signed Multiply Two Halfs and Reverse Subtract)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
SMDS Rd, Rs1, Rs2
SMDRS Rd, Rs1, Rs2
SMXDS Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 16-bit multiplications from the 32-bit elements of two registers; and then
perform a subtraction operation between the two 32-bit results.
* SMDS: top*top - bottom*bottom (per 32-bit element)
* SMDRS: bottom*bottom - top*top (per 32-bit element)
* SMXDS: top*bottom - bottom*top (per 32-bit element)

<strong>Description</strong>:\n
For the <tt>SMDS</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1 with
the bottom 16-bit content of the 32-bit elements of Rs2 and then subtracts the result from the result
of multiplying the top 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the
32-bit elements of Rs2.
For the <tt>SMDRS</tt> instruction, it multiplies the top 16-bit content of the 32-bit elements of Rs1 with
the top 16-bit content of the 32-bit elements of Rs2 and then subtracts the result from the result of
multiplying the bottom 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit content of
the 32-bit elements of Rs2.
For the <tt>SMXDS</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the top 16-bit content of the 32-bit elements of Rs2 and then subtracts the result from the
result of multiplying the top 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit
content of the 32-bit elements of Rs2.
The subtraction result is written to the corresponding 32-bit element of Rd. The 16-bit contents of
multiplication are treated as signed integers.

<strong>Operations</strong>:\n
@code
* SMDS:
Rd.W[x] = (Rs1.W[x].H[1] * Rs2.W[x].H[1]) - (Rs1.W[x].H[0] * Rs2.W[x].H[0]);
* SMDRS:
Rd.W[x] = (Rs1.W[x].H[0] * Rs2.W[x].H[0]) - (Rs1.W[x].H[1] * Rs2.W[x].H[1]);
* SMXDS:
Rd.W[x] = (Rs1.W[x].H[1] * Rs2.W[x].H[0]) - (Rs1.W[x].H[0] * Rs2.W[x].H[1]);
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
      func-mem-referenceby = {
        func-mem-ref-id = 'core__feature__dsp_8h_1ga6d8dce49013b778d0290cd057cf45dd0';
        func-mem-ref-line = '18530';
        func-mem-ref-name = '__RV_EXPD83';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga45c60f7cb5ae0e2ddaeca68e0a76283b';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMXDS';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '8634';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMXDS (SIMD Signed Crossed Multiply Two Halfs and Subtract)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
SMDS Rd, Rs1, Rs2
SMDRS Rd, Rs1, Rs2
SMXDS Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 16-bit multiplications from the 32-bit elements of two registers; and then
perform a subtraction operation between the two 32-bit results.
* SMDS: top*top - bottom*bottom (per 32-bit element)
* SMDRS: bottom*bottom - top*top (per 32-bit element)
* SMXDS: top*bottom - bottom*top (per 32-bit element)

<strong>Description</strong>:\n
For the <tt>SMDS</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1 with
the bottom 16-bit content of the 32-bit elements of Rs2 and then subtracts the result from the result
of multiplying the top 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the
32-bit elements of Rs2.
For the <tt>SMDRS</tt> instruction, it multiplies the top 16-bit content of the 32-bit elements of Rs1 with
the top 16-bit content of the 32-bit elements of Rs2 and then subtracts the result from the result of
multiplying the bottom 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit content of
the 32-bit elements of Rs2.
For the <tt>SMXDS</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the top 16-bit content of the 32-bit elements of Rs2 and then subtracts the result from the
result of multiplying the top 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit
content of the 32-bit elements of Rs2.
The subtraction result is written to the corresponding 32-bit element of Rd. The 16-bit contents of
multiplication are treated as signed integers.

<strong>Operations</strong>:\n
@code
* SMDS:
Rd.W[x] = (Rs1.W[x].H[1] * Rs2.W[x].H[1]) - (Rs1.W[x].H[0] * Rs2.W[x].H[0]);
* SMDRS:
Rd.W[x] = (Rs1.W[x].H[0] * Rs2.W[x].H[0]) - (Rs1.W[x].H[1] * Rs2.W[x].H[1]);
* SMXDS:
Rd.W[x] = (Rs1.W[x].H[1] * Rs2.W[x].H[0]) - (Rs1.W[x].H[0] * Rs2.W[x].H[1]);
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
      func-mem-referenceby = {
        func-mem-ref-id = 'core__feature__dsp_8h_1ga6d8dce49013b778d0290cd057cf45dd0';
        func-mem-ref-line = '18530';
        func-mem-ref-name = '__RV_EXPD83';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MISC_1ga3b9ace3565fb4cea93a55736046498e7';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMIN8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '8673';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMIN8 (SIMD 8-bit Signed Minimum)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
SMIN8 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 8-bit signed integer elements finding minimum operations simultaneously.

<strong>Description</strong>:\n
This instruction compares the 8-bit signed integer elements in Rs1 with the 8-bit
signed integer elements in Rs2 and selects the numbers that is less than the other one. The selected
results are written to Rd.

<strong>Operations</strong>:\n
@code
Rd.B[x] = (Rs1.B[x] < Rs2.B[x])? Rs1.B[x] : Rs2.B[x];
for RV32: x=3...0,
for RV64: x=7...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MISC_1ga5b8419c5f8c624d1a0e16c43efb798eb';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMIN16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '8712';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMIN16 (SIMD 16-bit Signed Minimum)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
SMIN16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit signed integer elements finding minimum operations simultaneously.

<strong>Description</strong>:\n
This instruction compares the 16-bit signed integer elements in Rs1 with the 16-bit
signed integer elements in Rs2 and selects the numbers that is less than the other one. The selected
results are written to Rd.

<strong>Operations</strong>:\n
@code
Rd.H[x] = (Rs1.H[x] < Rs2.H[x])? Rs1.H[x] : Rs2.H[x];
for RV32: x=1...0,
for RV64: x=3...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X32__MAC_1ga17b1cc8cce90ea3852050e9ec0b28795';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMMUL';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '8763';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMMUL (SIMD MSW Signed Multiply Word)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
SMMUL Rd, Rs1, Rs2
SMMUL.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the 32-bit signed integer elements of two registers and write the most significant
32-bit results to the corresponding 32-bit elements of a register. The <tt>.u</tt> form performs an
additional rounding up operation on the multiplication results before taking the most significant
32-bit part of the results.

<strong>Description</strong>:\n
This instruction multiplies the 32-bit elements of Rs1 with the 32-bit elements of Rs2 and writes the
most significant 32-bit multiplication results to the corresponding 32-bit elements of Rd. The 32-bit
elements of Rs1 and Rs2 are treated as signed integers. The <tt>.u</tt> form of the instruction rounds up
the most significant 32-bit of the 64-bit multiplication results by adding a 1 to bit 31 of the results.
* For <tt>smmul/RV32</tt> instruction, it is an alias to <tt>mulh/RV32</tt> instruction.

<strong>Operations</strong>:\n
@code
Mres[x][63:0] = Rs1.W[x] * Rs2.W[x];
if (`.u` form) {
  Round[x][32:0] = Mres[x][63:31] + 1;
  Rd.W[x] = Round[x][32:1];
} else {
  Rd.W[x] = Mres[x][63:32];
}
for RV32: x=0
for RV64: x=1...0
@endcode

\param [in]  a    long type of value stored in a
\param [in]  b    long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
      func-mem-referenceby = {
        func-mem-ref-id = 'core__feature__dsp_8h_1ga6d8dce49013b778d0290cd057cf45dd0';
        func-mem-ref-line = '18530';
        func-mem-ref-name = '__RV_EXPD83';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X32__MAC_1ga18c56b42dfb546e0a39ee1a0554e6e0b';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMMUL_U';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '8814';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMMUL.u (SIMD MSW Signed Multiply Word with Rounding)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
SMMUL Rd, Rs1, Rs2
SMMUL.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the 32-bit signed integer elements of two registers and write the most significant
32-bit results to the corresponding 32-bit elements of a register. The <tt>.u</tt> form performs an
additional rounding up operation on the multiplication results before taking the most significant
32-bit part of the results.

<strong>Description</strong>:\n
This instruction multiplies the 32-bit elements of Rs1 with the 32-bit elements of Rs2 and writes the
most significant 32-bit multiplication results to the corresponding 32-bit elements of Rd. The 32-bit
elements of Rs1 and Rs2 are treated as signed integers. The <tt>.u</tt> form of the instruction rounds up
the most significant 32-bit of the 64-bit multiplication results by adding a 1 to bit 31 of the results.
* For <tt>smmul/RV32</tt> instruction, it is an alias to <tt>mulh/RV32</tt> instruction.

<strong>Operations</strong>:\n
@code
Mres[x][63:0] = Rs1.W[x] * Rs2.W[x];
if (`.u` form) {
  Round[x][32:0] = Mres[x][63:31] + 1;
  Rd.W[x] = Round[x][32:1];
} else {
  Rd.W[x] = Mres[x][63:32];
}
for RV32: x=0
for RV64: x=1...0
@endcode

\param [in]  a    long type of value stored in a
\param [in]  b    long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1ga9842af8b6adf990ea70a5261e546a26c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMMWB';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '8864';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMMWB (SIMD MSW Signed Multiply Word and Bottom Half)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
SMMWB Rd, Rs1, Rs2
SMMWB.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit integer elements of one register and the bottom 16-bit of the
corresponding 32-bit elements of another register, and write the most significant 32-bit results to
the corresponding 32-bit elements of a register. The <tt>.u</tt> form rounds up the results from the most
significant discarded bit.

<strong>Description</strong>:\n
This instruction multiplies the signed 32-bit elements of Rs1 with the signed bottom 16-bit content
of the corresponding 32-bit elements of Rs2 and writes the most significant 32-bit multiplication
results to the corresponding 32-bit elements of Rd. The <tt>.u</tt> form of the instruction rounds up the
most significant 32-bit of the 48-bit multiplication results by adding a 1 to bit 15 of the results.

<strong>Operations</strong>:\n
@code
Mres[x][47:0] = Rs1.W[x] * Rs2.W[x].H[0];
if (`.u` form) {
  Round[x][32:0] = Mres[x][47:15] + 1;
  Rd.W[x] = Round[x][32:1];
} else {
  Rd.W[x] = Mres[x][47:16];
}
for RV32: x=0
for RV64: x=1...0
@endcode

\param [in]  a    long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1ga4b7617e39d73f38ac27a24644008aacd';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMMWB_U';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '8914';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMMWB.u (SIMD MSW Signed Multiply Word and Bottom Half with Rounding)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
SMMWB Rd, Rs1, Rs2
SMMWB.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit integer elements of one register and the bottom 16-bit of the
corresponding 32-bit elements of another register, and write the most significant 32-bit results to
the corresponding 32-bit elements of a register. The <tt>.u</tt> form rounds up the results from the most
significant discarded bit.

<strong>Description</strong>:\n
This instruction multiplies the signed 32-bit elements of Rs1 with the signed bottom 16-bit content
of the corresponding 32-bit elements of Rs2 and writes the most significant 32-bit multiplication
results to the corresponding 32-bit elements of Rd. The <tt>.u</tt> form of the instruction rounds up the
most significant 32-bit of the 48-bit multiplication results by adding a 1 to bit 15 of the results.

<strong>Operations</strong>:\n
@code
Mres[x][47:0] = Rs1.W[x] * Rs2.W[x].H[0];
if (`.u` form) {
  Round[x][32:0] = Mres[x][47:15] + 1;
  Rd.W[x] = Round[x][32:1];
} else {
  Rd.W[x] = Mres[x][47:16];
}
for RV32: x=0
for RV64: x=1...0
@endcode

\param [in]  a    long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1ga92298c74bc685e608de8c743f4348940';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMMWT';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '8964';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMMWT (SIMD MSW Signed Multiply Word and Top Half)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
SMMWT Rd, Rs1, Rs2
SMMWT.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit integer elements of one register and the top 16-bit of the
corresponding 32-bit elements of another register, and write the most significant 32-bit results to
the corresponding 32-bit elements of a register. The <tt>.u</tt> form rounds up the results from the most
significant discarded bit.

<strong>Description</strong>:\n
This instruction multiplies the signed 32-bit elements of Rs1 with the top signed 16-bit content of
the corresponding 32-bit elements of Rs2 and writes the most significant 32-bit multiplication
results to the corresponding 32-bit elements of Rd. The <tt>.u</tt> form of the instruction rounds up the
most significant 32-bit of the 48-bit multiplication results by adding a 1 to bit 15 of the results.

<strong>Operations</strong>:\n
@code
Mres[x][47:0] = Rs1.W[x] * Rs2.W[x].H[1];
if (`.u` form) {
  Round[x][32:0] = Mres[x][47:15] + 1;
  Rd.W[x] = Round[x][32:1];
} else {
  Rd.W[x] = Mres[x][47:16];
}
for RV32: x=0
for RV64: x=1...0
@endcode

\param [in]  a    long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1ga75f579bae285694b96c319bd0c0daffa';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMMWT_U';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '9014';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMMWT.u (SIMD MSW Signed Multiply Word and Top Half with Rounding)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
SMMWT Rd, Rs1, Rs2
SMMWT.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit integer elements of one register and the top 16-bit of the
corresponding 32-bit elements of another register, and write the most significant 32-bit results to
the corresponding 32-bit elements of a register. The <tt>.u</tt> form rounds up the results from the most
significant discarded bit.

<strong>Description</strong>:\n
This instruction multiplies the signed 32-bit elements of Rs1 with the top signed 16-bit content of
the corresponding 32-bit elements of Rs2 and writes the most significant 32-bit multiplication
results to the corresponding 32-bit elements of Rd. The <tt>.u</tt> form of the instruction rounds up the
most significant 32-bit of the 48-bit multiplication results by adding a 1 to bit 15 of the results.

<strong>Operations</strong>:\n
@code
Mres[x][47:0] = Rs1.W[x] * Rs2.W[x].H[1];
if (`.u` form) {
  Round[x][32:0] = Mres[x][47:15] + 1;
  Rd.W[x] = Round[x][32:1];
} else {
  Rd.W[x] = Mres[x][47:16];
}
for RV32: x=0
for RV64: x=1...0
@endcode

\param [in]  a    long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__64B__ADDSUB_1gac49482a84d29e662acb7438c5821cc8b';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMSLDA';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '9097';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMSLDA (Signed Multiply Two Halfs & Add & Subtract 64-bit)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (64-bit Profile)

<strong>Syntax</strong>:\n
@code
SMSLDA Rd, Rs1, Rs2
SMSLXDA Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 16-bit multiplications from the 32-bit elements of two registers; and then
subtracts the two 32-bit results from the 64-bit value of an even/odd pair of registers (RV32) or a
register (RV64). The subtraction result is written back to the register-pair.
* SMSLDA: rd pair - top*top - bottom*bottom (all 32-bit elements)
* SMSLXDA: rd pair - top*bottom - bottom*top (all 32-bit elements)

<strong>RV32 Description</strong>:\n
For the <tt>SMSLDA</tt> instruction, it multiplies the bottom 16-bit content of Rs1 with the bottom 16-bit
content Rs2 and multiplies the top 16-bit content of Rs1 with the top 16-bit content of Rs2.
For the <tt>SMSLXDA</tt> instruction, it multiplies the top 16-bit content of Rs1 with the bottom 16-bit
content of Rs2 and multiplies the bottom 16-bit content of Rs1 with the top 16-bit content of Rs2.
The two multiplication results are subtracted from the 64-bit value of an even/odd pair of registers
specified by Rd(4,1). The 64-bit subtraction result is written back to the register-pair. The 16-bit
values of Rs1 and Rs2, and the 64-bit value of the register-pair are treated as signed integers.
Rd(4,1), i.e., d, determines the even/odd pair group of the two registers. Specifically, the register pair
includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the high 32-bit of the result and the even <tt>2d</tt> register
of the pair contains the low 32-bit of the result.

<strong>RV64 Description</strong>:\n
For the <tt>SMSLDA</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the bottom 16-bit content of the 32-bit elements of Rs2 and multiplies the top 16-bit content of
the 32-bit elements of Rs1 with the top 16-bit content of the 32-bit elements of Rs2.
For the <tt>SMSLXDA</tt> instruction, it multiplies the top 16-bit content of the 32-bit elements of Rs1 with
the bottom 16-bit content of the 32-bit elements of Rs2 and multiplies the bottom 16-bit content of
the 32-bit elements of Rs1 with the top 16-bit content of the 32-bit elements of Rs2.
The four multiplication results are subtracted from the 64-bit value of Rd. The 64-bit subtraction
result is written back to Rd. The 16-bit values of Rs1 and Rs2, and the 64-bit value of Rd are treated
as signed integers.

<strong>Operations</strong>:\n
@code
* RV32:
// SMSLDA
Mres0[31:0] = (Rs1.H[0] * Rs2.H[0]);
Mres1[31:0] = (Rs1.H[1] * Rs2.H[1]);
// SMSLXDA
Mres0[31:0] = (Rs1.H[0] * Rs2.H[1]);
Mres1[31:0] = (Rs1.H[1] * Rs2.H[0]);
Idx0 = CONCAT(Rd(4,1),1'b0); Idx1 = CONCAT(Rd(4,1),1'b1);
R[Idx1].R[Idx0] = R[Idx1].R[Idx0] - SE64(Mres0[31:0]) - SE64(Mres1[31:0]);
* RV64:
// SMSLDA
Mres0[0][31:0] = (Rs1.W[0].H[0] * Rs2.W[0].H[0]);
Mres1[0][31:0] = (Rs1.W[0].H[1] * Rs2.W[0].H[1]);
Mres0[1][31:0] = (Rs1.W[1].H[0] * Rs2.W[1].H[0]);
Mres1[1][31:0] = (Rs1.W[1].H[1] * Rs2.W[1].H[1]);
// SMSLXDA
Mres0[0][31:0] = (Rs1.W[0].H[0] * Rs2.W[0].H[1]);
Mres1[0][31:0] = (Rs1.W[0].H[1] * Rs2.W[0].H[0]);
Mres0[1][31:0] = (Rs1.W[1].H[0] * Rs2.W[1].H[1]);
Mres1[1][31:0] = (Rs1.W[1].H[1] * Rs2.W[1].H[0]);
Rd = Rd - SE64(Mres0[0][31:0]) - SE64(Mres1[0][31:0]) - SE64(Mres0[1][31:0]) -
SE64(Mres1[1][31:0]);
@endcode

\param [in]  t    long long type of value stored in t
\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__64B__ADDSUB_1gad6cb1fab36698a107205e10b5ae71436';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMSLXDA';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '9179';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMSLXDA (Signed Crossed Multiply Two Halfs & Add & Subtract 64- bit)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (64-bit Profile)

<strong>Syntax</strong>:\n
@code
SMSLDA Rd, Rs1, Rs2
SMSLXDA Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 16-bit multiplications from the 32-bit elements of two registers; and then
subtracts the two 32-bit results from the 64-bit value of an even/odd pair of registers (RV32) or a
register (RV64). The subtraction result is written back to the register-pair.
* SMSLDA: rd pair - top*top - bottom*bottom (all 32-bit elements)
* SMSLXDA: rd pair - top*bottom - bottom*top (all 32-bit elements)

<strong>RV32 Description</strong>:\n
For the <tt>SMSLDA</tt> instruction, it multiplies the bottom 16-bit content of Rs1 with the bottom 16-bit
content Rs2 and multiplies the top 16-bit content of Rs1 with the top 16-bit content of Rs2.
For the <tt>SMSLXDA</tt> instruction, it multiplies the top 16-bit content of Rs1 with the bottom 16-bit
content of Rs2 and multiplies the bottom 16-bit content of Rs1 with the top 16-bit content of Rs2.
The two multiplication results are subtracted from the 64-bit value of an even/odd pair of registers
specified by Rd(4,1). The 64-bit subtraction result is written back to the register-pair. The 16-bit
values of Rs1 and Rs2, and the 64-bit value of the register-pair are treated as signed integers.
Rd(4,1), i.e., d, determines the even/odd pair group of the two registers. Specifically, the register pair
includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the high 32-bit of the result and the even <tt>2d</tt> register
of the pair contains the low 32-bit of the result.

<strong>RV64 Description</strong>:\n
For the <tt>SMSLDA</tt> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1
with the bottom 16-bit content of the 32-bit elements of Rs2 and multiplies the top 16-bit content of
the 32-bit elements of Rs1 with the top 16-bit content of the 32-bit elements of Rs2.
For the <tt>SMSLXDA</tt> instruction, it multiplies the top 16-bit content of the 32-bit elements of Rs1 with
the bottom 16-bit content of the 32-bit elements of Rs2 and multiplies the bottom 16-bit content of
the 32-bit elements of Rs1 with the top 16-bit content of the 32-bit elements of Rs2.
The four multiplication results are subtracted from the 64-bit value of Rd. The 64-bit subtraction
result is written back to Rd. The 16-bit values of Rs1 and Rs2, and the 64-bit value of Rd are treated
as signed integers.

<strong>Operations</strong>:\n
@code
* RV32:
// SMSLDA
Mres0[31:0] = (Rs1.H[0] * Rs2.H[0]);
Mres1[31:0] = (Rs1.H[1] * Rs2.H[1]);
// SMSLXDA
Mres0[31:0] = (Rs1.H[0] * Rs2.H[1]);
Mres1[31:0] = (Rs1.H[1] * Rs2.H[0]);
Idx0 = CONCAT(Rd(4,1),1'b0); Idx1 = CONCAT(Rd(4,1),1'b1);
R[Idx1].R[Idx0] = R[Idx1].R[Idx0] - SE64(Mres0[31:0]) - SE64(Mres1[31:0]);
* RV64:
// SMSLDA
Mres0[0][31:0] = (Rs1.W[0].H[0] * Rs2.W[0].H[0]);
Mres1[0][31:0] = (Rs1.W[0].H[1] * Rs2.W[0].H[1]);
Mres0[1][31:0] = (Rs1.W[1].H[0] * Rs2.W[1].H[0]);
Mres1[1][31:0] = (Rs1.W[1].H[1] * Rs2.W[1].H[1]);
// SMSLXDA
Mres0[0][31:0] = (Rs1.W[0].H[0] * Rs2.W[0].H[1]);
Mres1[0][31:0] = (Rs1.W[0].H[1] * Rs2.W[0].H[0]);
Mres0[1][31:0] = (Rs1.W[1].H[0] * Rs2.W[1].H[1]);
Mres1[1][31:0] = (Rs1.W[1].H[1] * Rs2.W[1].H[0]);
Rd = Rd - SE64(Mres0[0][31:0]) - SE64(Mres1[0][31:0]) - SE64(Mres0[1][31:0]) -
SE64(Mres1[1][31:0]);
@endcode

\param [in]  t    long long type of value stored in t
\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__32B__MULT__64B__ADDSUB_1ga97d5fc417db0b47d8ee805ef3eb9d8a2';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMSR64';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '9232';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMSR64 (Signed Multiply and Subtract from 64- Bit Data)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (64-bit Profile)

<strong>Syntax</strong>:\n
@code
SMSR64 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the 32-bit signed elements in two registers and subtract the 64-bit multiplication
results from the 64-bit signed data of a pair of registers (RV32) or a register (RV64). The result is
written back to the pair of registers (RV32) or a register (RV64).

<strong>RV32 Description</strong>:\n
This instruction multiplies the 32-bit signed data of Rs1 with that of Rs2. It
subtracts the 64-bit multiplication result from the 64-bit signed data of an even/odd pair of registers
specified by Rd(4,1). The subtraction result is written back to the even/odd pair of registers
specified by Rd(4,1).
Rx(4,1), i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair
includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the high 32-bit of the result and the even <tt>2d</tt> register
of the pair contains the low 32-bit of the result.

<strong>RV64 Description</strong>:\n
This instruction multiplies the 32-bit signed elements of Rs1 with that of Rs2. It
subtracts the 64-bit multiplication results from the 64-bit signed data of Rd. The subtraction result is
written back to Rd.

<strong>Operations</strong>:\n
@code
* RV32:
t_L = CONCAT(Rd(4,1),1'b0); t_H = CONCAT(Rd(4,1),1'b1);
R[t_H].R[t_L] = R[t_H].R[t_L] - (Rs1 * Rs2);
* RV64:
Rd = Rd - (Rs1.W[0] * Rs2.W[0]) - (Rs1.W[1] * Rs2.W[1]);
@endcode

\param [in]  t    long long type of value stored in t
\param [in]  a    long type of value stored in a
\param [in]  b    long type of value stored in b
\return value stored in long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MULTIPLY_1gaa89f0815a309bf7e0c79c8ac9030c209';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMUL8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '9314';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMUL8 (SIMD Signed 8-bit Multiply)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
SMUL8 Rd, Rs1, Rs2
SMULX8 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do signed 8-bit multiplications and generate four 16-bit results simultaneously.

<strong>RV32 Description</strong>:\n
For the <tt>SMUL8</tt> instruction, multiply the 8-bit data elements of Rs1 with the
corresponding 8-bit data elements of Rs2.
For the <tt>SMULX8</tt> instruction, multiply the first and second 8-bit data elements of Rs1 with the
second and first 8-bit data elements of Rs2. At the same time, multiply the third and fourth 8-bit data
elements of Rs1 with the fourth and third 8-bit data elements of Rs2.
The four 16-bit results are then written into an even/odd pair of registers specified by Rd(4,1).
Rd(4,1), i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair
includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the two 16-bit results calculated from the top part of
Rs1 and the even <tt>2d</tt> register of the pair contains the two 16-bit results calculated from the bottom
part of Rs1.

<strong>RV64 Description</strong>:\n
For the <tt>SMUL8</tt> instruction, multiply the 8-bit data elements of Rs1 with the
corresponding 8-bit data elements of Rs2.
For the <tt>SMULX8</tt> instruction, multiply the first and second 8-bit data elements of Rs1 with the
second and first 8-bit data elements of Rs2. At the same time, multiply the third and fourth 8-bit data
elements of Rs1 with the fourth and third 8-bit data elements of Rs2.
The four 16-bit results are then written into Rd. The Rd.W[1] contains the two 16-bit results
calculated from the top part of Rs1 and the Rd.W[0] contains the two 16-bit results calculated from
the bottom part of Rs1.

<strong>Operations</strong>:\n
@code
* RV32:
if (is `SMUL8`) {
  op1t[x/2] = Rs1.B[x+1]; op2t[x/2] = Rs2.B[x+1]; // top
  op1b[x/2] = Rs1.B[x]; op2b[x/2] = Rs2.B[x]; // bottom
} else if (is `SMULX8`) {
  op1t[x/2] = Rs1.B[x+1]; op2t[x/2] = Rs2.B[x]; // Rs1 top
  op1b[x/2] = Rs1.B[x]; op2b[x/2] = Rs2.B[x+1]; // Rs1 bottom
}
rest[x/2] = op1t[x/2] s* op2t[x/2];
resb[x/2] = op1b[x/2] s* op2b[x/2];
t_L = CONCAT(Rd(4,1),1'b0); t_H = CONCAT(Rd(4,1),1'b1);
R[t_H].H[1] = rest[1]; R[t_H].H[0] = resb[1];
R[t_L].H[1] = rest[0]; R[t_L].H[0] = resb[0];
x = 0 and 2
* RV64:
if (is `SMUL8`) {
  op1t[x/2] = Rs1.B[x+1]; op2t[x/2] = Rs2.B[x+1]; // top
  op1b[x/2] = Rs1.B[x]; op2b[x/2] = Rs2.B[x]; // bottom
} else if (is `SMULX8`) {
  op1t[x/2] = Rs1.B[x+1]; op2t[x/2] = Rs2.B[x]; // Rs1 top
  op1b[x/2] = Rs1.B[x]; op2b[x/2] = Rs2.B[x+1]; // Rs1 bottom
}
rest[x/2] = op1t[x/2] s* op2t[x/2];
resb[x/2] = op1b[x/2] s* op2b[x/2];
t_L = CONCAT(Rd(4,1),1'b0); t_H = CONCAT(Rd(4,1),1'b1);
Rd.W[1].H[1] = rest[1]; Rd.W[1].H[0] = resb[1];
Rd.W[0].H[1] = rest[0]; Rd.W[0].H[0] = resb[0];
x = 0 and 2
@endcode

\param [in]  a    unsigned int type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MULTIPLY_1ga6960884895453cad6b8ac126b66ee892';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMULX8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '9397';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMULX8 (SIMD Signed Crossed 8-bit Multiply)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
SMUL8 Rd, Rs1, Rs2
SMULX8 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do signed 8-bit multiplications and generate four 16-bit results simultaneously.

<strong>RV32 Description</strong>:\n
For the <tt>SMUL8</tt> instruction, multiply the 8-bit data elements of Rs1 with the
corresponding 8-bit data elements of Rs2.
For the <tt>SMULX8</tt> instruction, multiply the first and second 8-bit data elements of Rs1 with the
second and first 8-bit data elements of Rs2. At the same time, multiply the third and fourth 8-bit data
elements of Rs1 with the fourth and third 8-bit data elements of Rs2.
The four 16-bit results are then written into an even/odd pair of registers specified by Rd(4,1).
Rd(4,1), i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair
includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the two 16-bit results calculated from the top part of
Rs1 and the even <tt>2d</tt> register of the pair contains the two 16-bit results calculated from the bottom
part of Rs1.

<strong>RV64 Description</strong>:\n
For the <tt>SMUL8</tt> instruction, multiply the 8-bit data elements of Rs1 with the
corresponding 8-bit data elements of Rs2.
For the <tt>SMULX8</tt> instruction, multiply the first and second 8-bit data elements of Rs1 with the
second and first 8-bit data elements of Rs2. At the same time, multiply the third and fourth 8-bit data
elements of Rs1 with the fourth and third 8-bit data elements of Rs2.
The four 16-bit results are then written into Rd. The Rd.W[1] contains the two 16-bit results
calculated from the top part of Rs1 and the Rd.W[0] contains the two 16-bit results calculated from
the bottom part of Rs1.

<strong>Operations</strong>:\n
@code
* RV32:
if (is `SMUL8`) {
  op1t[x/2] = Rs1.B[x+1]; op2t[x/2] = Rs2.B[x+1]; // top
  op1b[x/2] = Rs1.B[x]; op2b[x/2] = Rs2.B[x]; // bottom
} else if (is `SMULX8`) {
  op1t[x/2] = Rs1.B[x+1]; op2t[x/2] = Rs2.B[x]; // Rs1 top
  op1b[x/2] = Rs1.B[x]; op2b[x/2] = Rs2.B[x+1]; // Rs1 bottom
}
rest[x/2] = op1t[x/2] s* op2t[x/2];
resb[x/2] = op1b[x/2] s* op2b[x/2];
t_L = CONCAT(Rd(4,1),1'b0); t_H = CONCAT(Rd(4,1),1'b1);
R[t_H].H[1] = rest[1]; R[t_H].H[0] = resb[1];
R[t_L].H[1] = rest[0]; R[t_L].H[0] = resb[0];
x = 0 and 2
* RV64:
if (is `SMUL8`) {
  op1t[x/2] = Rs1.B[x+1]; op2t[x/2] = Rs2.B[x+1]; // top
  op1b[x/2] = Rs1.B[x]; op2b[x/2] = Rs2.B[x]; // bottom
} else if (is `SMULX8`) {
  op1t[x/2] = Rs1.B[x+1]; op2t[x/2] = Rs2.B[x]; // Rs1 top
  op1b[x/2] = Rs1.B[x]; op2b[x/2] = Rs2.B[x+1]; // Rs1 bottom
}
rest[x/2] = op1t[x/2] s* op2t[x/2];
resb[x/2] = op1b[x/2] s* op2b[x/2];
t_L = CONCAT(Rd(4,1),1'b0); t_H = CONCAT(Rd(4,1),1'b1);
Rd.W[1].H[1] = rest[1]; Rd.W[1].H[0] = resb[1];
Rd.W[0].H[1] = rest[0]; Rd.W[0].H[0] = resb[0];
x = 0 and 2
@endcode

\param [in]  a    unsigned int type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MULTIPLY_1gad0ccc8d1d7b5b8c0c2b7133b7243dc91';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMUL16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '9482';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMUL16 (SIMD Signed 16-bit Multiply)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
SMUL16 Rd, Rs1, Rs2
SMULX16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do signed 16-bit multiplications and generate two 32-bit results simultaneously.

<strong>RV32 Description</strong>:\n
For the <tt>SMUL16</tt> instruction, multiply the top 16-bit Q15 content of Rs1 with
the top 16-bit Q15 content of Rs2. At the same time, multiply the bottom 16-bit Q15 content of Rs1
with the bottom 16-bit Q15 content of Rs2.
For the <tt>SMULX16</tt> instruction, multiply the top 16-bit Q15 content of Rs1 with the bottom 16-bit
Q15 content of Rs2. At the same time, multiply the bottom 16-bit Q15 content of Rs1 with the top 16-
bit Q15 content of Rs2.
The two Q30 results are then written into an even/odd pair of registers specified by Rd(4,1). Rd(4,1),
i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair includes
register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the 32-bit result calculated from the top part of Rs1 and
the even <tt>2d</tt> register of the pair contains the 32-bit result calculated from the bottom part of Rs1.

<strong>RV64 Description</strong>:\n
For the <tt>SMUL16</tt> instruction, multiply the top 16-bit Q15 content of the lower
32-bit word in Rs1 with the top 16-bit Q15 content of the lower 32-bit word in Rs2. At the same time,
multiply the bottom 16-bit Q15 content of the lower 32-bit word in Rs1 with the bottom 16-bit Q15
content of the lower 32-bit word in Rs2.
For the <tt>SMULX16</tt> instruction, multiply the top 16-bit Q15 content of the lower 32-bit word in Rs1
with the bottom 16-bit Q15 content of the lower 32-bit word in Rs2. At the same time, multiply the
bottom 16-bit Q15 content of the lower 32-bit word in Rs1 with the top 16-bit Q15 content of the
lower 32-bit word in Rs2.
The two 32-bit Q30 results are then written into Rd. The result calculated from the top 16-bit of the
lower 32-bit word in Rs1 is written to Rd.W[1]. And the result calculated from the bottom 16-bit of
the lower 32-bit word in Rs1 is written to Rd.W[0]

<strong>Operations</strong>:\n
@code
* RV32:
if (is `SMUL16`) {
  op1t = Rs1.H[1]; op2t = Rs2.H[1]; // top
  op1b = Rs1.H[0]; op2b = Rs2.H[0]; // bottom
} else if (is `SMULX16`) {
  op1t = Rs1.H[1]; op2t = Rs2.H[0]; // Rs1 top
  op1b = Rs1.H[0]; op2b = Rs2.H[1]; // Rs1 bottom
}
for ((aop,bop,res) in [(op1t,op2t,rest), (op1b,op2b,resb)]) {
  res = aop s* bop;
}
t_L = CONCAT(Rd(4,1),1'b0); t_H = CONCAT(Rd(4,1),1'b1);
R[t_H] = rest;
R[t_L] = resb;
* RV64:
if (is `SMUL16`) {
  op1t = Rs1.H[1]; op2t = Rs2.H[1]; // top
  op1b = Rs1.H[0]; op2b = Rs2.H[0]; // bottom
} else if (is `SMULX16`) {
  op1t = Rs1.H[1]; op2t = Rs2.H[0]; // Rs1 top
  op1b = Rs1.H[0]; op2b = Rs2.H[1]; // Rs1 bottom
}
for ((aop,bop,res) in [(op1t,op2t,rest), (op1b,op2b,resb)]) {
  res = aop s* bop;
}
Rd.W[1] = rest;
Rd.W[0] = resb;
@endcode

\param [in]  a    unsigned int type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MULTIPLY_1ga2eb023a945b38fad971202a788f3899c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMULX16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '9567';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMULX16 (SIMD Signed Crossed 16-bit Multiply)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
SMUL16 Rd, Rs1, Rs2
SMULX16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do signed 16-bit multiplications and generate two 32-bit results simultaneously.

<strong>RV32 Description</strong>:\n
For the <tt>SMUL16</tt> instruction, multiply the top 16-bit Q15 content of Rs1 with
the top 16-bit Q15 content of Rs2. At the same time, multiply the bottom 16-bit Q15 content of Rs1
with the bottom 16-bit Q15 content of Rs2.
For the <tt>SMULX16</tt> instruction, multiply the top 16-bit Q15 content of Rs1 with the bottom 16-bit
Q15 content of Rs2. At the same time, multiply the bottom 16-bit Q15 content of Rs1 with the top 16-
bit Q15 content of Rs2.
The two Q30 results are then written into an even/odd pair of registers specified by Rd(4,1). Rd(4,1),
i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair includes
register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the 32-bit result calculated from the top part of Rs1 and
the even <tt>2d</tt> register of the pair contains the 32-bit result calculated from the bottom part of Rs1.

<strong>RV64 Description</strong>:\n
For the <tt>SMUL16</tt> instruction, multiply the top 16-bit Q15 content of the lower
32-bit word in Rs1 with the top 16-bit Q15 content of the lower 32-bit word in Rs2. At the same time,
multiply the bottom 16-bit Q15 content of the lower 32-bit word in Rs1 with the bottom 16-bit Q15
content of the lower 32-bit word in Rs2.
For the <tt>SMULX16</tt> instruction, multiply the top 16-bit Q15 content of the lower 32-bit word in Rs1
with the bottom 16-bit Q15 content of the lower 32-bit word in Rs2. At the same time, multiply the
bottom 16-bit Q15 content of the lower 32-bit word in Rs1 with the top 16-bit Q15 content of the
lower 32-bit word in Rs2.
The two 32-bit Q30 results are then written into Rd. The result calculated from the top 16-bit of the
lower 32-bit word in Rs1 is written to Rd.W[1]. And the result calculated from the bottom 16-bit of
the lower 32-bit word in Rs1 is written to Rd.W[0]

<strong>Operations</strong>:\n
@code
* RV32:
if (is `SMUL16`) {
  op1t = Rs1.H[1]; op2t = Rs2.H[1]; // top
  op1b = Rs1.H[0]; op2b = Rs2.H[0]; // bottom
} else if (is `SMULX16`) {
  op1t = Rs1.H[1]; op2t = Rs2.H[0]; // Rs1 top
  op1b = Rs1.H[0]; op2b = Rs2.H[1]; // Rs1 bottom
}
for ((aop,bop,res) in [(op1t,op2t,rest), (op1b,op2b,resb)]) {
  res = aop s* bop;
}
t_L = CONCAT(Rd(4,1),1'b0); t_H = CONCAT(Rd(4,1),1'b1);
R[t_H] = rest;
R[t_L] = resb;
* RV64:
if (is `SMUL16`) {
  op1t = Rs1.H[1]; op2t = Rs2.H[1]; // top
  op1b = Rs1.H[0]; op2b = Rs2.H[0]; // bottom
} else if (is `SMULX16`) {
  op1t = Rs1.H[1]; op2t = Rs2.H[0]; // Rs1 top
  op1b = Rs1.H[0]; op2b = Rs2.H[1]; // Rs1 bottom
}
for ((aop,bop,res) in [(op1t,op2t,rest), (op1b,op2b,resb)]) {
  res = aop s* bop;
}
Rd.W[1] = rest;
Rd.W[0] = resb;
@endcode

\param [in]  a    unsigned int type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1gac34824012cfe56f0a6fb9baf2fb1ba33';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SRA_U';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '9621';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SRA.u (Rounding Shift Right Arithmetic)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
SRA.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Perform an arithmetic right shift operation with rounding. The shift amount is a variable
from a GPR.

<strong>Description</strong>:\n
This instruction right-shifts the content of Rs1 arithmetically. The shifted out bits are
filled with the sign-bit and the shift amount is specified by the low-order 5-bits (RV32) or 6-bits
(RV64) of the Rs2 register. For the rounding operation, a value of 1 is added to the most significant
discarded bit of the data to calculate the final result. And the result is written to Rd.

<strong>Operations</strong>:\n
@code
* RV32:
sa = Rs2[4:0];
if (sa > 0) {
  res[31:-1] = SE33(Rs1[31:(sa-1)]) + 1;
  Rd = res[31:0];
} else {
  Rd = Rs1;
}
* RV64:
sa = Rs2[5:0];
if (sa > 0) {
  res[63:-1] = SE65(Rs1[63:(sa-1)]) + 1;
  Rd = res[63:0];
} else {
  Rd = Rs1;
}
@endcode

\param [in]  a    long type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1ga60b24db284bacbf2ab9de45e0881b011';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SRA8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '9731';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SRA8 (SIMD 8-bit Shift Right Arithmetic)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
SRA8 Rd, Rs1, Rs2
SRA8.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 8-bit element arithmetic right shift operations simultaneously. The shift amount is a
variable from a GPR. The <tt>.u</tt> form performs additional rounding up operations on the shifted
results.

<strong>Description</strong>:\n
The 8-bit data elements in Rs1 are right-shifted arithmetically, that is, the shifted out
bits are filled with the sign-bit of the data elements. The shift amount is specified by the low-order
3-bits of the value in the Rs2 register. For the rounding operation of the <tt>.u</tt> form, a value of 1 is
added to the most significant discarded bit of each 8-bit data element to calculate the final results.
And the results are written to Rd.

<strong>Operations</strong>:\n
@code
sa = Rs2[2:0];
if (sa > 0) {
  if (`.u` form) { // SRA8.u
    res[7:-1] = SE9(Rs1.B[x][7:sa-1]) + 1;
    Rd.B[x] = res[7:0];
  } else { // SRA8
    Rd.B[x] = SE8(Rd.B[x][7:sa])
  }
} else {
  Rd = Rs1;
}
for RV32: x=3...0,
for RV64: x=7...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1gad6421547bda7f5c8b4ab42d0e771daf3';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SRA8_U';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '9785';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SRA8.u (SIMD 8-bit Rounding Shift Right Arithmetic)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
SRA8 Rd, Rs1, Rs2
SRA8.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 8-bit element arithmetic right shift operations simultaneously. The shift amount is a
variable from a GPR. The <tt>.u</tt> form performs additional rounding up operations on the shifted
results.

<strong>Description</strong>:\n
The 8-bit data elements in Rs1 are right-shifted arithmetically, that is, the shifted out
bits are filled with the sign-bit of the data elements. The shift amount is specified by the low-order
3-bits of the value in the Rs2 register. For the rounding operation of the <tt>.u</tt> form, a value of 1 is
added to the most significant discarded bit of each 8-bit data element to calculate the final results.
And the results are written to Rd.

<strong>Operations</strong>:\n
@code
sa = Rs2[2:0];
if (sa > 0) {
  if (`.u` form) { // SRA8.u
    res[7:-1] = SE9(Rs1.B[x][7:sa-1]) + 1;
    Rd.B[x] = res[7:0];
  } else { // SRA8
    Rd.B[x] = SE8(Rd.B[x][7:sa])
  }
} else {
  Rd = Rs1;
}
for RV32: x=3...0,
for RV64: x=7...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1gab98c44f440802e210dd48403997977fa';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SRA16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '9947';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SRA16 (SIMD 16-bit Shift Right Arithmetic)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
SRA16 Rd, Rs1, Rs2
SRA16.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit element arithmetic right shift operations simultaneously. The shift amount is a
variable from a GPR. The <tt>.u</tt> form performs additional rounding up operations on the shifted
results.

<strong>Description</strong>:\n
The 16-bit data elements in Rs1 are right-shifted arithmetically, that is, the shifted out
bits are filled with the sign-bit of the data elements. The shift amount is specified by the low-order
4-bits of the value in the Rs2 register. For the rounding operation of the <tt>.u</tt> form, a value of 1 is
added to the most significant discarded bit of each 16-bit data element to calculate the final results.
And the results are written to Rd.

<strong>Operations</strong>:\n
@code
sa = Rs2[3:0];
if (sa != 0) {
  if (`.u` form) { // SRA16.u
    res[15:-1] = SE17(Rs1.H[x][15:sa-1]) + 1;
    Rd.H[x] = res[15:0];
  } else { // SRA16
    Rd.H[x] = SE16(Rs1.H[x][15:sa])
  }
} else {
  Rd = Rs1;
}
for RV32: x=1...0,
for RV64: x=3...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1ga044ea66eee35c4d3ae3cb3d8e7aa3aa2';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SRA16_U';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '10001';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SRA16.u (SIMD 16-bit Rounding Shift Right Arithmetic)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
SRA16 Rd, Rs1, Rs2
SRA16.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit element arithmetic right shift operations simultaneously. The shift amount is a
variable from a GPR. The <tt>.u</tt> form performs additional rounding up operations on the shifted
results.

<strong>Description</strong>:\n
The 16-bit data elements in Rs1 are right-shifted arithmetically, that is, the shifted out
bits are filled with the sign-bit of the data elements. The shift amount is specified by the low-order
4-bits of the value in the Rs2 register. For the rounding operation of the <tt>.u</tt> form, a value of 1 is
added to the most significant discarded bit of each 16-bit data element to calculate the final results.
And the results are written to Rd.

<strong>Operations</strong>:\n
@code
sa = Rs2[3:0];
if (sa != 0) {
  if (`.u` form) { // SRA16.u
    res[15:-1] = SE17(Rs1.H[x][15:sa-1]) + 1;
    Rd.H[x] = res[15:0];
  } else { // SRA16
    Rd.H[x] = SE16(Rs1.H[x][15:sa])
  }
} else {
  Rd = Rs1;
}
for RV32: x=1...0,
for RV64: x=3...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1ga2aae7328ef4464ec4ee58147b4c3be26';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SRL8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '10164';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SRL8 (SIMD 8-bit Shift Right Logical)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
SRL8 Rt, Ra, Rb
SRL8.u Rt, Ra, Rb
@endcode

<strong>Purpose</strong>:\n
Do 8-bit elements logical right shift operations simultaneously. The shift amount is a
variable from a GPR. The <tt>.u</tt> form performs additional rounding up operations on the shifted
results.

<strong>Description</strong>:\n
The 8-bit data elements in Rs1 are right-shifted logically, that is, the shifted out bits are
filled with zero. The shift amount is specified by the low-order 3-bits of the value in the Rs2 register.
For the rounding operation of the <tt>.u</tt> form, a value of 1 is added to the most significant discarded
bit of each 8-bit data element to calculate the final results. And the results are written to Rd.

<strong>Operations</strong>:\n
@code
sa = Rs2[2:0];
if (sa > 0) {
  if (`.u` form) { // SRL8.u
    res[8:0] = ZE9(Rs1.B[x][7:sa-1]) + 1;
    Rd.B[x] = res[8:1];
  } else { // SRL8
    Rd.B[x] = ZE8(Rs1.B[x][7:sa]);
  }
} else {
  Rd = Rs1;
}
for RV32: x=3...0,
for RV64: x=7...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1ga60905852cd03af20f29f226cfe99b87c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SRL8_U';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '10217';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SRL8.u (SIMD 8-bit Rounding Shift Right Logical)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
SRL8 Rt, Ra, Rb
SRL8.u Rt, Ra, Rb
@endcode

<strong>Purpose</strong>:\n
Do 8-bit elements logical right shift operations simultaneously. The shift amount is a
variable from a GPR. The <tt>.u</tt> form performs additional rounding up operations on the shifted
results.

<strong>Description</strong>:\n
The 8-bit data elements in Rs1 are right-shifted logically, that is, the shifted out bits are
filled with zero. The shift amount is specified by the low-order 3-bits of the value in the Rs2 register.
For the rounding operation of the <tt>.u</tt> form, a value of 1 is added to the most significant discarded
bit of each 8-bit data element to calculate the final results. And the results are written to Rd.

<strong>Operations</strong>:\n
@code
sa = Rs2[2:0];
if (sa > 0) {
  if (`.u` form) { // SRL8.u
    res[8:0] = ZE9(Rs1.B[x][7:sa-1]) + 1;
    Rd.B[x] = res[8:1];
  } else { // SRL8
    Rd.B[x] = ZE8(Rs1.B[x][7:sa]);
  }
} else {
  Rd = Rs1;
}
for RV32: x=3...0,
for RV64: x=7...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1gad077385854832151e700839fb03cfcfe';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SRL16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '10375';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SRL16 (SIMD 16-bit Shift Right Logical)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
SRL16 Rt, Ra, Rb
 SRL16.u Rt, Ra, Rb
@endcode

<strong>Purpose</strong>:\n
Do 16-bit elements logical right shift operations simultaneously. The shift amount is a variable from a GPR. The <tt>.u</tt> form performs additional rounding upoperations on the shifted results.

<strong>Description</strong>:\n
The 16-bit data elements in Rs1 are right-shifted logically, that is, the shifted out bits
are filled with zero. The shift amount is specified by the low-order 4-bits of the value in the Rs2
register. For the rounding operation of the <tt>.u</tt> form, a value of 1 is added to the most significant
discarded bit of each 16-bit data element to calculate the final results. And the results are written to
Rd.

<strong>Operations</strong>:\n
@code
sa = Rs2[3:0];
if (sa > 0) {
  if (`.u` form) { // SRL16.u
    res[16:0] = ZE17(Rs1.H[x][15:sa-1]) + 1;
    Rd.H[x] = res[16:1];
  } else { // SRL16
    Rd.H[x] = ZE16(Rs1.H[x][15:sa]);
  }
} else {
  Rd = Rs1;
}
for RV32: x=1...0,
for RV64: x=3...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1ga9b9494b2d305f51510e789484cbfd60b';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SRL16_U';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '10427';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SRL16.u (SIMD 16-bit Rounding Shift Right Logical)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
SRL16 Rt, Ra, Rb
 SRL16.u Rt, Ra, Rb
@endcode

<strong>Purpose</strong>:\n
Do 16-bit elements logical right shift operations simultaneously. The shift amount is a variable from a GPR. The <tt>.u</tt> form performs additional rounding upoperations on the shifted results.

<strong>Description</strong>:\n
The 16-bit data elements in Rs1 are right-shifted logically, that is, the shifted out bits
are filled with zero. The shift amount is specified by the low-order 4-bits of the value in the Rs2
register. For the rounding operation of the <tt>.u</tt> form, a value of 1 is added to the most significant
discarded bit of each 16-bit data element to calculate the final results. And the results are written to
Rd.

<strong>Operations</strong>:\n
@code
sa = Rs2[3:0];
if (sa > 0) {
  if (`.u` form) { // SRL16.u
    res[16:0] = ZE17(Rs1.H[x][15:sa-1]) + 1;
    Rd.H[x] = res[16:1];
  } else { // SRL16
    Rd.H[x] = ZE16(Rs1.H[x][15:sa]);
  }
} else {
  Rd = Rs1;
}
for RV32: x=1...0,
for RV64: x=3...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1gafdb722620fddf1c66759a8f46cd34a16';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_STAS16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '10579';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
STAS16 (SIMD 16-bit Straight Addition & Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
STAS16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit integer element addition and 16-bit integer element subtraction in a 32-bit
chunk simultaneously. Operands are from corresponding positions in 32-bit chunks.

<strong>Description</strong>:\n
This instruction adds the 16-bit integer element in [31:16] of 32-bit chunks in Rs1 with
the 16-bit integer element in [31:16] of 32-bit chunks in Rs2, and writes the result to [31:16] of 32-bit
chunks in Rd; at the same time, it subtracts the 16-bit integer element in [15:0] of 32-bit chunks in
Rs2 from the 16-bit integer element in [15:0] of 32-bit chunks, and writes the result to [15:0] of 32-
bit chunks in Rd.

<strong>Note</strong>:\n
This instruction can be used for either signed or unsigned operations.

<strong>Operations</strong>:\n
@code
Rd.W[x][31:16] = Rs1.W[x][31:16] + Rs2.W[x][31:16];
Rd.W[x][15:0] = Rs1.W[x][15:0] - Rs2.W[x][15:0];
for RV32, x=0
for RV64, x=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga4c4ac88f3a4a3db0834b880ad8548543';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_STSA16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '10625';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
STSA16 (SIMD 16-bit Straight Subtraction & Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
STSA16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit integer element subtraction and 16-bit integer element addition in a 32-bit
chunk simultaneously. Operands are from corresponding positions in 32-bit chunks.

<strong>Description</strong>:\n
This instruction subtracts the 16-bit integer element in [31:16] of 32-bit chunks in Rs2
from the 16-bit integer element in [31:16] of 32-bit chunks in Rs1, and writes the result to [31:16] of
32-bit chunks in Rd; at the same time, it adds the 16-bit integer element in [15:0] of 32-bit chunks in
Rs2 with the 16-bit integer element in [15:0] of 32-bit chunks in Rs1, and writes the result to [15:0] of
32-bit chunks in Rd.

<strong>Note</strong>:\n
This instruction can be used for either signed or unsigned operations.

<strong>Operations</strong>:\n
@code
Rd.W[x][31:16] = Rs1.W[x][31:16] - Rs2.W[x][31:16];
Rd.W[x][15:0] = Rs1.W[x][15:0] + Rs2.W[x][15:0];
for RV32, x=0
for RV64, x=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__ADDSUB_1ga9c75e931e8703babf9e8d29f6dfcf280';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SUB8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '10666';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SUB8 (SIMD 8-bit Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
SUB8 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 8-bit integer element subtractions simultaneously.

<strong>Description</strong>:\n
This instruction subtracts the 8-bit integer elements in Rs2 from the 8-bit integer
elements in Rs1, and then writes the result to Rd.

<strong>Note</strong>:\n
This instruction can be used for either signed or unsigned subtraction.

<strong>Operations</strong>:\n
@code
Rd.B[x] = Rs1.B[x] - Rs2.B[x];
for RV32: x=3...0,
for RV64: x=7...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga2ba13d5be91378558bac3add7c314a44';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SUB16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '10707';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SUB16 (SIMD 16-bit Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
SUB16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit integer element subtractions simultaneously.

<strong>Description</strong>:\n
This instruction subtracts the 16-bit integer elements in Rs2 from the 16-bit integer
elements in Rs1, and then writes the result to Rd.

<strong>Note</strong>:\n
This instruction can be used for either signed or unsigned subtraction.

<strong>Operations</strong>:\n
@code
Rd.H[x] = Rs1.H[x] - Rs2.H[x];
for RV32: x=1...0,
for RV64: x=3...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__64B__ADDSUB_1ga02ed3c841b85e58d5a40d78fa2f5519f';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SUB64';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '10761';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SUB64 (64-bit Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (64-bit Profile)

<strong>Syntax</strong>:\n
@code
SUB64 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Perform a 64-bit signed or unsigned integer subtraction.

<strong>RV32 Description</strong>:\n
This instruction subtracts the 64-bit integer of an even/odd pair of registers
specified by Rs2(4,1) from the 64-bit integer of an even/odd pair of registers specified by Rs1(4,1),
and then writes the 64-bit result to an even/odd pair of registers specified by Rd(4,1).
Rx(4,1), i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair
includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the high 32-bit of the operand and the even <tt>2d</tt>
register of the pair contains the low 32-bit of the operand.

<strong>RV64 Description</strong>:\n
This instruction subtracts the 64-bit integer of Rs2 from the 64-bit integer of Rs1,
and then writes the 64-bit result to Rd.

<strong>Note</strong>:\n
This instruction can be used for either signed or unsigned subtraction.

<strong>Operations</strong>:\n
@code
* RV32:
t_L = CONCAT(Rd(4,1),1'b0); t_H = CONCAT(Rd(4,1),1'b1);
a_L = CONCAT(Rs1(4,1),1'b0); a_H = CONCAT(Rs1(4,1),1'b1);
b_L = CONCAT(Rs2(4,1),1'b0); b_H = CONCAT(Rs2(4,1),1'b1);
R[t_H].R[t_L] = R[a_H].R[a_L] - R[b_H].R[b_L];
* RV64:
Rd = Rs1 - Rs2;
@endcode

\param [in]  a    unsigned long long type of value stored in a
\param [in]  b    unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__UNPACK_1gaecdd51db17293a1d12d85a6bb0cd4abe';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SUNPKD810';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '10807';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SUNPKD810 (Signed Unpacking Bytes 1 & 0)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
SUNPKD8xy Rd, Rs1
xy = {10, 20, 30, 31, 32}
@endcode

<strong>Purpose</strong>:\n
Unpack byte <em>x and byte y</em> of 32-bit chunks in a register into two 16-bit signed halfwords
of 32-bit chunks in a register.

<strong>Description</strong>:\n
For the <tt>SUNPKD8(x)(*y*)</tt> instruction, it unpacks byte <em>x and byte y</em> of 32-bit chunks in Rs1 into
two 16-bit signed halfwords and writes the results to the top part and the bottom part of 32-bit
chunks in Rd.

<strong>Operations</strong>:\n
@code
Rd.W[m].H[1] = SE16(Rs1.W[m].B[x])
Rd.W[m].H[0] = SE16(Rs1.W[m].B[y])
// SUNPKD810, x=1,y=0
// SUNPKD820, x=2,y=0
// SUNPKD830, x=3,y=0
// SUNPKD831, x=3,y=1
// SUNPKD832, x=3,y=2
for RV32: m=0,
for RV64: m=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__UNPACK_1ga922f7523e4d512fe391795edd7a81239';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SUNPKD820';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '10853';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SUNPKD820 (Signed Unpacking Bytes 2 & 0)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
SUNPKD8xy Rd, Rs1
xy = {10, 20, 30, 31, 32}
@endcode

<strong>Purpose</strong>:\n
Unpack byte <em>x and byte y</em> of 32-bit chunks in a register into two 16-bit signed halfwords
of 32-bit chunks in a register.

<strong>Description</strong>:\n
For the <tt>SUNPKD8(x)(*y*)</tt> instruction, it unpacks byte <em>x and byte y</em> of 32-bit chunks in Rs1 into
two 16-bit signed halfwords and writes the results to the top part and the bottom part of 32-bit
chunks in Rd.

<strong>Operations</strong>:\n
@code
Rd.W[m].H[1] = SE16(Rs1.W[m].B[x])
Rd.W[m].H[0] = SE16(Rs1.W[m].B[y])
// SUNPKD810, x=1,y=0
// SUNPKD820, x=2,y=0
// SUNPKD830, x=3,y=0
// SUNPKD831, x=3,y=1
// SUNPKD832, x=3,y=2
for RV32: m=0,
for RV64: m=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
      func-mem-referenceby = {
        func-mem-ref-id = 'core__feature__dsp_8h_1ga6d8dce49013b778d0290cd057cf45dd0';
        func-mem-ref-line = '18530';
        func-mem-ref-name = '__RV_EXPD83';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__UNPACK_1ga8d213189a39651f3bcad77da2eb1f530';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SUNPKD830';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '10899';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SUNPKD830 (Signed Unpacking Bytes 3 & 0)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
SUNPKD8xy Rd, Rs1
xy = {10, 20, 30, 31, 32}
@endcode

<strong>Purpose</strong>:\n
Unpack byte <em>x and byte y</em> of 32-bit chunks in a register into two 16-bit signed halfwords
of 32-bit chunks in a register.

<strong>Description</strong>:\n
For the <tt>SUNPKD8(x)(*y*)</tt> instruction, it unpacks byte <em>x and byte y</em> of 32-bit chunks in Rs1 into
two 16-bit signed halfwords and writes the results to the top part and the bottom part of 32-bit
chunks in Rd.

<strong>Operations</strong>:\n
@code
Rd.W[m].H[1] = SE16(Rs1.W[m].B[x])
Rd.W[m].H[0] = SE16(Rs1.W[m].B[y])
// SUNPKD810, x=1,y=0
// SUNPKD820, x=2,y=0
// SUNPKD830, x=3,y=0
// SUNPKD831, x=3,y=1
// SUNPKD832, x=3,y=2
for RV32: m=0,
for RV64: m=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__UNPACK_1gad3da1a88ec99f6c5733a3035d26b3bbf';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SUNPKD831';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '10945';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SUNPKD831 (Signed Unpacking Bytes 3 & 1)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
SUNPKD8xy Rd, Rs1
xy = {10, 20, 30, 31, 32}
@endcode

<strong>Purpose</strong>:\n
Unpack byte <em>x and byte y</em> of 32-bit chunks in a register into two 16-bit signed halfwords
of 32-bit chunks in a register.

<strong>Description</strong>:\n
For the <tt>SUNPKD8(x)(*y*)</tt> instruction, it unpacks byte <em>x and byte y</em> of 32-bit chunks in Rs1 into
two 16-bit signed halfwords and writes the results to the top part and the bottom part of 32-bit
chunks in Rd.

<strong>Operations</strong>:\n
@code
Rd.W[m].H[1] = SE16(Rs1.W[m].B[x])
Rd.W[m].H[0] = SE16(Rs1.W[m].B[y])
// SUNPKD810, x=1,y=0
// SUNPKD820, x=2,y=0
// SUNPKD830, x=3,y=0
// SUNPKD831, x=3,y=1
// SUNPKD832, x=3,y=2
for RV32: m=0,
for RV64: m=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__UNPACK_1ga869283b10c6656ef6b529487d244449c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SUNPKD832';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '10991';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SUNPKD832 (Signed Unpacking Bytes 3 & 2)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
SUNPKD8xy Rd, Rs1
xy = {10, 20, 30, 31, 32}
@endcode

<strong>Purpose</strong>:\n
Unpack byte <em>x and byte y</em> of 32-bit chunks in a register into two 16-bit signed halfwords
of 32-bit chunks in a register.

<strong>Description</strong>:\n
For the <tt>SUNPKD8(x)(*y*)</tt> instruction, it unpacks byte <em>x and byte y</em> of 32-bit chunks in Rs1 into
two 16-bit signed halfwords and writes the results to the top part and the bottom part of 32-bit
chunks in Rd.

<strong>Operations</strong>:\n
@code
Rd.W[m].H[1] = SE16(Rs1.W[m].B[x])
Rd.W[m].H[0] = SE16(Rs1.W[m].B[y])
// SUNPKD810, x=1,y=0
// SUNPKD820, x=2,y=0
// SUNPKD830, x=3,y=0
// SUNPKD831, x=3,y=1
// SUNPKD832, x=3,y=2
for RV32: m=0,
for RV64: m=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1gaaea4771a7ac766be7bfec89c7bf6cda8';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SWAP8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '11028';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SWAP8 (Swap Byte within Halfword)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
SWAP8 Rd, Rs1
@endcode

<strong>Purpose</strong>:\n
Swap the bytes within each halfword of a register.

<strong>Description</strong>:\n
This instruction swaps the bytes within each halfword of Rs1 and writes the result to
Rd.

<strong>Operations</strong>:\n
@code
Rd.H[x] = CONCAT(Rs1.H[x][7:0],Rs1.H[x][15:8]);
for RV32: x=1...0,
for RV64: x=3...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1gadab9655b01398363507f94180fd41ba4';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SWAP16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '11065';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SWAP16 (Swap Halfword within Word)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
SWAP16 Rd, Rs1
@endcode

<strong>Purpose</strong>:\n
Swap the 16-bit halfwords within each word of a register.

<strong>Description</strong>:\n
This instruction swaps the 16-bit halfwords within each word of Rs1 and writes the
result to Rd.

<strong>Operations</strong>:\n
@code
Rd.W[x] = CONCAT(Rs1.W[x][15:0],Rs1.H[x][31:16]);
for RV32: x=0,
for RV64: x=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__CMP_1ga7bb0f1ec7077c679107517472935145d';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UCMPLE8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '11252';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UCMPLE8 (SIMD 8-bit Unsigned Compare Less Than & Equal)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
UCMPLE8 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 8-bit unsigned integer elements less than & equal comparisons simultaneously.

<strong>Description</strong>:\n
This instruction compares the 8-bit unsigned integer elements in Rs1 with the 8-bit
unsigned integer elements in Rs2 to see if the one in Rs1 is less than or equal to the one in Rs2. If it
is true, the result is 0xFF; otherwise, the result is 0x0. The four comparison results are written to
Rd.

<strong>Operations</strong>:\n
@code
Rd.B[x] = (Rs1.B[x] <=u Rs2.B[x])? 0xff : 0x0;
for RV32: x=3...0,
for RV64: x=7...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__CMP_1ga1c90d69f90f54607d8b137b8efafdc88';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UCMPLE16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '11292';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UCMPLE16 (SIMD 16-bit Unsigned Compare Less Than & Equal)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
UCMPLE16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit unsigned integer elements less than & equal comparisons simultaneously.

<strong>Description</strong>:\n
This instruction compares the 16-bit unsigned integer elements in Rs1 with the 16-bit
unsigned integer elements in Rs2 to see if the one in Rs1 is less than or equal to the one in Rs2. If it
is true, the result is 0xFFFF; otherwise, the result is 0x0. The element comparison results are
written to Rd.

<strong>Operations</strong>:\n
@code
Rd.H[x] = (Rs1.H[x] <=u Rs2.H[x])? 0xffff : 0x0;
for RV32: x=1...0,
for RV64: x=3...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__CMP_1ga6d69bc358f1d79a21f67027a3fcf2320';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UCMPLT8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '11331';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UCMPLT8 (SIMD 8-bit Unsigned Compare Less Than)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
UCMPLT8 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 8-bit unsigned integer elements less than comparisons simultaneously.

<strong>Description</strong>:\n
This instruction compares the 8-bit unsigned integer elements in Rs1 with the 8-bit
unsigned integer elements in Rs2 to see if the one in Rs1 is less than the one in Rs2. If it is true, the
result is 0xFF; otherwise, the result is 0x0. The element comparison results are written to Rd.

<strong>Operations</strong>:\n
@code
Rd.B[x] = (Rs1.B[x] <u Rs2.B[x])? 0xff : 0x0;
for RV32: x=3...0,
for RV64: x=7...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__CMP_1ga566fff4ed2e21cc7e247ecb8b2258bd2';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UCMPLT16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '11370';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UCMPLT16 (SIMD 16-bit Unsigned Compare Less Than)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
UCMPLT16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit unsigned integer elements less than comparisons simultaneously.

<strong>Description</strong>:\n
This instruction compares the 16-bit unsigned integer elements in Rs1 with the 16-bit
unsigned integer elements in Rs2 to see if the one in Rs1 is less than the one in Rs2. If it is true, the
result is 0xFFFF; otherwise, the result is 0x0. The element comparison results are written to Rd.

<strong>Operations</strong>:\n
@code
Rd.H[x] = (Rs1.H[x] <u Rs2.H[x])? 0xffff : 0x0;
for RV32: x=1...0,
for RV64: x=3...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__ADDSUB_1ga4b8d09eb6958b8eabea15a82ab8edef7';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UKADD8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '11415';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UKADD8 (SIMD 8-bit Unsigned Saturating Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
UKADD8 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 8-bit unsigned integer element saturating additions simultaneously.

<strong>Description</strong>:\n
This instruction adds the 8-bit unsigned integer elements in Rs1 with the 8-bit
unsigned integer elements in Rs2. If any of the results are beyond the 8-bit unsigned number range
(0 <= RES <= 28-1), they are saturated to the range and the OV bit is set to 1. The saturated results are
written to Rd.

<strong>Operations</strong>:\n
@code
res[x] = Rs1.B[x] + Rs2.B[x];
if (res[x] > (2^8)-1) {
  res[x] = (2^8)-1;
  OV = 1;
}
Rd.B[x] = res[x];
for RV32: x=3...0,
for RV64: x=7...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga5ab8ad2484f1d4b0ffbbd48443be73d0';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UKADD16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '11460';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UKADD16 (SIMD 16-bit Unsigned Saturating Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
UKADD16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit unsigned integer element saturating additions simultaneously.

<strong>Description</strong>:\n
This instruction adds the 16-bit unsigned integer elements in Rs1 with the 16-bit
unsigned integer elements in Rs2. If any of the results are beyond the 16-bit unsigned number
range (0 <= RES <= 2^16-1), they are saturated to the range and the OV bit is set to 1. The saturated
results are written to Rd.

<strong>Operations</strong>:\n
@code
res[x] = Rs1.H[x] + Rs2.H[x];
if (res[x] > (2^16)-1) {
  res[x] = (2^16)-1;
  OV = 1;
}
Rd.H[x] = res[x];
for RV32: x=1...0,
for RV64: x=3...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__64B__ADDSUB_1ga8f5a5ff9c41c49dfe0d7981c2e5ab139';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UKADD64';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '11522';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UKADD64 (64-bit Unsigned Saturating Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (64-bit Profile)

<strong>Syntax</strong>:\n
@code
UKADD64 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Add two 64-bit unsigned integers. The result is saturated to the U64 range.

<strong>RV32 Description</strong>:\n
This instruction adds the 64-bit unsigned integer of an even/odd pair of registers
specified by Rs1(4,1) with the 64-bit unsigned integer of an even/odd pair of registers specified by
Rs2(4,1). If the 64-bit result is beyond the U64 number range (0 <= U64 <= 2^64-1), it is saturated to the
range and the OV bit is set to 1. The saturated result is written to an even/odd pair of registers
specified by Rd(4,1).
Rx(4,1), i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair
includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the high 32-bit of the result and the even <tt>2d</tt> register
of the pair contains the low 32-bit of the result.

<strong>RV64 Description</strong>:\n
This instruction adds the 64-bit unsigned integer in Rs1 with the 64-bit unsigned
integer in Rs2. If the 64-bit result is beyond the U64 number range (0 <= U64 <= 2^64-1), it is saturated to
the range and the OV bit is set to 1. The saturated result is written to Rd.

<strong>Operations</strong>:\n
@code
* RV32:
t_L = CONCAT(Rt(4,1),1'b0); t_H = CONCAT(Rt(4,1),1'b1);
a_L = CONCAT(Ra(4,1),1'b0); a_H = CONCAT(Ra(4,1),1'b1);
b_L = CONCAT(Rb(4,1),1'b0); b_H = CONCAT(Rb(4,1),1'b1);
result = R[a_H].R[a_L] + R[b_H].R[b_L];
if (result > (2^64)-1) {
  result = (2^64)-1; OV = 1;
}
R[t_H].R[t_L] = result;
* RV64:
result = Rs1 + Rs2;
if (result > (2^64)-1) {
  result = (2^64)-1; OV = 1;
}
Rd = result;
@endcode

\param [in]  a    unsigned long long type of value stored in a
\param [in]  b    unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q15__SAT__ALU_1gaf5a82ca7a98ea1c06cd7a468d035abcd';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UKADDH';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '11564';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UKADDH (Unsigned Addition with U16 Saturation)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
UKADDH Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Add the unsigned lower 32-bit content of two registers with U16 saturation.

<strong>Description</strong>:\n
The unsigned lower 32-bit content of Rs1 is added with the unsigned lower 32-bit
content of Rs2. And the result is saturated to the 16-bit unsigned integer range of [0, 2^16-1] and then
sign-extended and written to Rd. If saturation happens, this instruction sets the OV flag.

<strong>Operations</strong>:\n
@code
tmp = Rs1.W[0] + Rs2.W[0];
if (tmp > (2^16)-1) {
  tmp = (2^16)-1;
  OV = 1;
}
Rd = SE(tmp[15:0]);
@endcode

\param [in]  a    unsigned int type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1ga836b1f78407443c88b5958a7cfb3361f';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UKADDW';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '11607';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UKADDW (Unsigned Addition with U32 Saturation)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
UKADDW Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Add the unsigned lower 32-bit content of two registers with U32 saturation.

<strong>Description</strong>:\n
The unsigned lower 32-bit content of Rs1 is added with the unsigned lower 32-bit
content of Rs2. And the result is saturated to the 32-bit unsigned integer range of [0, 2^32-1] and then
sign-extended and written to Rd. If saturation happens, this instruction sets the OV flag.

<strong>Operations</strong>:\n
@code
tmp = Rs1.W[0] + Rs2.W[0];
if (tmp > (2^32)-1) {
  tmp[31:0] = (2^32)-1;
  OV = 1;
}
Rd = tmp[31:0]; // RV32
Rd = SE(tmp[31:0]); // RV64
@endcode

\param [in]  a    unsigned int type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga3d8ee80d3beca9f62d44d96a52037f92';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UKCRAS16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '11663';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UKCRAS16 (SIMD 16-bit Unsigned Saturating Cross Addition & Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
UKCRAS16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do one 16-bit unsigned integer element saturating addition and one 16-bit unsigned
integer element saturating subtraction in a 32-bit chunk simultaneously. Operands are from crossed
positions in 32-bit chunks.

<strong>Description</strong>:\n
This instruction adds the 16-bit unsigned integer element in [31:16] of 32-bit chunks in
Rs1 with the 16-bit unsigned integer element in [15:0] of 32-bit chunks in Rs2; at the same time, it
subtracts the 16-bit unsigned integer element in [31:16] of 32-bit chunks in Rs2 from the 16-bit
unsigned integer element in [15:0] of 32-bit chunks in Rs1. If any of the results are beyond the 16-bit
unsigned number range (0 <= RES <= 2^16-1), they are saturated to the range and the OV bit is set to 1.
The saturated results are written to [31:16] of 32-bit chunks in Rd for addition and [15:0] of 32-bit
chunks in Rd for subtraction.

<strong>Operations</strong>:\n
@code
res1 = Rs1.W[x][31:16] + Rs2.W[x][15:0];
res2 = Rs1.W[x][15:0] - Rs2.W[x][31:16];
if (res1 > (2^16)-1) {
  res1 = (2^16)-1;
  OV = 1;
}
if (res2 < 0) {
  res2 = 0;
  OV = 1;
}
Rd.W[x][31:16] = res1;
Rd.W[x][15:0] = res2;
for RV32, x=0
for RV64, x=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga469a05a9449e9ec44d89d5f37df09d04';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UKCRSA16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '11718';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UKCRSA16 (SIMD 16-bit Unsigned Saturating Cross Subtraction & Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
UKCRSA16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do one 16-bit unsigned integer element saturating subtraction and one 16-bit unsigned
integer element saturating addition in a 32-bit chunk simultaneously. Operands are from crossed
positions in 32-bit chunks.

<strong>Description</strong>:\n
This instruction subtracts the 16-bit unsigned integer element in [15:0] of 32-bit
chunks in Rs2 from the 16-bit unsigned integer element in [31:16] of 32-bit chunks in Rs1; at the
same time, it adds the 16-bit unsigned integer element in [31:16] of 32-bit chunks in Rs2 with the 16-
bit unsigned integer element in [15:0] of 32-bit chunks in Rs1. If any of the results are beyond the
16-bit unsigned number range (0 <= RES <= 2^16-1), they are saturated to the range and the OV bit is set
to 1. The saturated results are written to [31:16] of 32-bit chunks in Rd for subtraction and [15:0] of
32-bit chunks in Rd for addition.

<strong>Operations</strong>:\n
@code
res1 = Rs1.W[x][31:16] - Rs2.W[x][15:0];
res2 = Rs1.W[x][15:0] + Rs2.W[x][31:16];
if (res1 < 0) {
  res1 = 0;
  OV = 1;
} else if (res2 > (2^16)-1) {
  res2 = (2^16)-1;
  OV = 1;
}
Rd.W[x][31:16] = res1;
Rd.W[x][15:0] = res2;
for RV32, x=0
for RV64, x=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__32B__MULT__64B__ADDSUB_1gac196974cb320c6111c4708989d0e1e49';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UKMAR64';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '11783';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UKMAR64 (Unsigned Multiply and Saturating Add to 64-Bit Data)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (64-bit Profile)

<strong>Syntax</strong>:\n
@code
UKMAR64 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the 32-bit unsigned elements in two registers and add the 64-bit multiplication
results to the 64-bit unsigned data of a pair of registers (RV32) or a register (RV64). The result is
saturated to the U64 range and written back to the pair of registers (RV32) or the register (RV64).

<strong>RV32 Description</strong>:\n
This instruction multiplies the 32-bit unsigned data of Rs1 with that of Rs2. It
adds the 64-bit multiplication result to the 64-bit unsigned data of an even/odd pair of registers
specified by Rd(4,1) with unlimited precision. If the 64-bit addition result is beyond the U64 number
range (0 <= U64 <= 2^64-1), it is saturated to the range and the OV bit is set to 1. The saturated result is
written back to the even/odd pair of registers specified by Rd(4,1).
Rx(4,1), i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair
includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the high 32-bit of the result and the even <tt>2d</tt> register
of the pair contains the low 32-bit of the result.

<strong>RV64 Description</strong>:\n
This instruction multiplies the 32-bit unsigned elements of Rs1 with that of Rs2.
It adds the 64-bit multiplication results to the 64-bit unsigned data in Rd with unlimited precision. If
the 64-bit addition result is beyond the U64 number range (0 <= U64 <= 2^64-1), it is saturated to the
range and the OV bit is set to 1. The saturated result is written back to Rd.

<strong>Operations</strong>:\n
@code
* RV32:
t_L = CONCAT(Rd(4,1),1'b0); t_H = CONCAT(Rd(4,1),1'b1);
result = R[t_H].R[t_L] + (Rs1 * Rs2);
if (result > (2^64)-1) {
  result = (2^64)-1; OV = 1;
}
R[t_H].R[t_L] = result;
* RV64:
// `result` has unlimited precision
result = Rd + (Rs1.W[0] u* Rs2.W[0]) + (Rs1.W[1] u* Rs2.W[1]);
if (result > (2^64)-1) {
  result = (2^64)-1; OV = 1;
}
Rd = result;
@endcode

\param [in]  t    unsigned long long type of value stored in t
\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__32B__MULT__64B__ADDSUB_1ga7feff7a2f338e3730f0af2f054cfdd71';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UKMSR64';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '11848';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UKMSR64 (Unsigned Multiply and Saturating Subtract from 64-Bit Data)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (64-bit Profile)

<strong>Syntax</strong>:\n
@code
UKMSR64 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the 32-bit unsigned elements in two registers and subtract the 64-bit
multiplication results from the 64-bit unsigned data of a pair of registers (RV32) or a register (RV64).
The result is saturated to the U64 range and written back to the pair of registers (RV32) or a register
(RV64).

<strong>RV32 Description</strong>:\n
This instruction multiplies the 32-bit unsigned data of Rs1 with that of Rs2. It
subtracts the 64-bit multiplication result from the 64-bit unsigned data of an even/odd pair of
registers specified by Rd(4,1) with unlimited precision. If the 64-bit subtraction result is beyond the
U64 number range (0 <= U64 <= 2^64-1), it is saturated to the range and the OV bit is set to 1. The
saturated result is written back to the even/odd pair of registers specified by Rd(4,1).
Rx(4,1), i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair
includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the high 32-bit of the result and the even <tt>2d</tt> register
of the pair contains the low 32-bit of the result.

<strong>RV64 Description</strong>:\n
This instruction multiplies the 32-bit unsigned elements of Rs1 with that of Rs2.
It subtracts the 64-bit multiplication results from the 64-bit unsigned data of Rd with unlimited
precision. If the 64-bit subtraction result is beyond the U64 number range (0 <= U64 <= 2^64-1), it is
saturated to the range and the OV bit is set to 1. The saturated result is written back to Rd.

<strong>Operations</strong>:\n
@code
* RV32:
t_L = CONCAT(Rd(4,1),1'b0); t_H = CONCAT(Rd(4,1),1'b1);
result = R[t_H].R[t_L] - (Rs1 u* Rs2);
if (result < 0) {
  result = 0; OV = 1;
}
R[t_H].R[t_L] = result;
* RV64:
// `result` has unlimited precision
result = Rd - (Rs1.W[0] u* Rs2.W[0]) - (Rs1.W[1] u* Rs2.W[1]);
if (result < 0) {
  result = 0; OV = 1;
}
Rd = result;
@endcode

\param [in]  t    unsigned long long type of value stored in t
\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1gac5ee1051a7643e3ed68a807f61665e7c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UKSTAS16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '11903';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UKSTAS16 (SIMD 16-bit Unsigned Saturating Straight Addition & Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
UKSTAS16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do one 16-bit unsigned integer element saturating addition and one 16-bit unsigned
integer element saturating subtraction in a 32-bit chunk simultaneously. Operands are from
corresponding positions in 32-bit chunks.

<strong>Description</strong>:\n
This instruction adds the 16-bit unsigned integer element in [31:16] of 32-bit chunks in
Rs1 with the 16-bit unsigned integer element in [31:16] of 32-bit chunks in Rs2; at the same time, it
subtracts the 16-bit unsigned integer element in [15:0] of 32-bit chunks in Rs2 from the 16-bit
unsigned integer element in [15:0] of 32-bit chunks in Rs1. If any of the results are beyond the 16-bit
unsigned number range (0 <= RES <= 2^16-1), they are saturated to the range and the OV bit is set to 1.
The saturated results are written to [31:16] of 32-bit chunks in Rd for addition and [15:0] of 32-bit
chunks in Rd for subtraction.

<strong>Operations</strong>:\n
@code
res1 = Rs1.W[x][31:16] + Rs2.W[x][31:16];
res2 = Rs1.W[x][15:0] - Rs2.W[x][15:0];
if (res1 > (2^16)-1) {
  res1 = (2^16)-1;
  OV = 1;
}
if (res2 < 0) {
  res2 = 0;
  OV = 1;
}
Rd.W[x][31:16] = res1;
Rd.W[x][15:0] = res2;
for RV32, x=0
for RV64, x=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1gaed116dce964990e1d8f0905a607b9541';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UKSTSA16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '11958';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UKSTSA16 (SIMD 16-bit Unsigned Saturating Straight Subtraction & Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
UKSTSA16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do one 16-bit unsigned integer element saturating subtraction and one 16-bit unsigned
integer element saturating addition in a 32-bit chunk simultaneously. Operands are from
corresponding positions in 32-bit chunks.

<strong>Description</strong>:\n
This instruction subtracts the 16-bit unsigned integer element in [31:16] of 32-bit
chunks in Rs2 from the 16-bit unsigned integer element in [31:16] of 32-bit chunks in Rs1; at the
same time, it adds the 16-bit unsigned integer element in [15:0] of 32-bit chunks in Rs2 with the 16-
bit unsigned integer element in [15:0] of 32-bit chunks in Rs1. If any of the results are beyond the
16-bit unsigned number range (0 <= RES <= 2^16-1), they are saturated to the range and the OV bit is set
to 1. The saturated results are written to [31:16] of 32-bit chunks in Rd for subtraction and [15:0] of
32-bit chunks in Rd for addition.

<strong>Operations</strong>:\n
@code
res1 = Rs1.W[x][31:16] - Rs2.W[x][31:16];
res2 = Rs1.W[x][15:0] + Rs2.W[x][15:0];
if (res1 < 0) {
  res1 = 0;
  OV = 1;
} else if (res2 > (2^16)-1) {
  res2 = (2^16)-1;
  OV = 1;
}
Rd.W[x][31:16] = res1;
Rd.W[x][15:0] = res2;
for RV32, x=0
for RV64, x=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__ADDSUB_1ga28d53441b9c0106fb6caed6dc77f89ad';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UKSUB8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '12003';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UKSUB8 (SIMD 8-bit Unsigned Saturating Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
UKSUB8 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 8-bit unsigned integer elements saturating subtractions simultaneously.

<strong>Description</strong>:\n
This instruction subtracts the 8-bit unsigned integer elements in Rs2 from the 8-bit
unsigned integer elements in Rs1. If any of the results are beyond the 8-bit unsigned number range
(0 <= RES <= 28-1), they are saturated to the range and the OV bit is set to 1. The saturated results are
written to Rd.

<strong>Operations</strong>:\n
@code
res[x] = Rs1.B[x] - Rs2.B[x];
if (res[x] < 0) {
  res[x] = 0;
  OV = 1;
}
Rd.B[x] = res[x];
for RV32: x=3...0,
for RV64: x=7...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1gae159a5930299163247cc7704d2903c73';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UKSUB16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '12048';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UKSUB16 (SIMD 16-bit Unsigned Saturating Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
UKSUB16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit unsigned integer elements saturating subtractions simultaneously.

<strong>Description</strong>:\n
This instruction subtracts the 16-bit unsigned integer elements in Rs2 from the 16-bit
unsigned integer elements in Rs1. If any of the results are beyond the 16-bit unsigned number
range (0 <= RES <= 2^16-1), they are saturated to the range and the OV bit is set to 1. The saturated
results are written to Rd.

<strong>Operations</strong>:\n
@code
res[x] = Rs1.H[x] - Rs2.H[x];
if (res[x] < 0) {
  res[x] = 0;
  OV = 1;
}
Rd.H[x] = res[x];
for RV32: x=1...0,
for RV64: x=3...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__64B__ADDSUB_1ga8c38b38409eba3d05396b9d09c1b8382';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UKSUB64';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '12111';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UKSUB64 (64-bit Unsigned Saturating Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (64-bit Profile)

<strong>Syntax</strong>:\n
@code
UKSUB64 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Perform a 64-bit signed integer subtraction. The result is saturated to the U64 range.

<strong>RV32 Description</strong>:\n
This instruction subtracts the 64-bit unsigned integer of an even/odd pair of
registers specified by Rs2(4,1) from the 64-bit unsigned integer of an even/odd pair of registers
specified by Rs1(4,1). If the 64-bit result is beyond the U64 number range (0 <= U64 <= 2^64-1), it is
saturated to the range and the OV bit is set to 1. The saturated result is then written to an even/odd
pair of registers specified by Rd(4,1).
Rx(4,1), i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair
includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the high 32-bit of the operand and the even <tt>2d</tt>
register of the pair contains the low 32-bit of the operand.

<strong>RV64 Description</strong>:\n
This instruction subtracts the 64-bit unsigned integer of Rs2 from the 64-bit
unsigned integer of an even/odd pair of Rs1. If the 64-bit result is beyond the U64 number range (0 <=
U64 <= 2^64-1), it is saturated to the range and the OV bit is set to 1. The saturated result is then written
to Rd.

<strong>Operations</strong>:\n
@code
* RV32:
t_L = CONCAT(Rd(4,1),1'b0); t_H = CONCAT(Rd(4,1),1'b1);
a_L = CONCAT(Rs1(4,1),1'b0); a_H = CONCAT(Rs1(4,1),1'b1);
b_L = CONCAT(Rs2(4,1),1'b0); b_H = CONCAT(Rs2(4,1),1'b1);
result = R[a_H].R[a_L] - R[b_H].R[b_L];
if (result < 0) {
  result = 0; OV = 1;
}
R[t_H].R[t_L] = result;
* RV64
result = Rs1 - Rs2;
if (result < 0) {
  result = 0; OV = 1;
}
Rd = result;
@endcode

\param [in]  a    unsigned long long type of value stored in a
\param [in]  b    unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q15__SAT__ALU_1ga8f7265e350aad977038169d60af14e55';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UKSUBH';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '12157';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UKSUBH (Unsigned Subtraction with U16 Saturation)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
UKSUBH Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Subtract the unsigned lower 32-bit content of two registers with U16 saturation.

<strong>Description</strong>:\n
The unsigned lower 32-bit content of Rs2 is subtracted from the unsigned lower 32-bit
content of Rs1. And the result is saturated to the 16-bit unsigned integer range of [0, 2^16-1] and then
sign-extended and written to Rd. If saturation happens, this instruction sets the OV flag.

<strong>Operations</strong>:\n
@code
tmp = Rs1.W[0] - Rs2.W[0];
if (tmp > (2^16)-1) {
  tmp = (2^16)-1;
  OV = 1;
}
else if (tmp < 0) {
  tmp = 0;
  OV = 1;
}
Rd = SE(tmp[15:0]);
@endcode

\param [in]  a    unsigned int type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1gae102902e2e1e3a606807064ab3ea763f';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UKSUBW';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '12201';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UKSUBW (Unsigned Subtraction with U32 Saturation)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
UKSUBW Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Subtract the unsigned lower 32-bit content of two registers with unsigned 32-bit
saturation.

<strong>Description</strong>:\n
The unsigned lower 32-bit content of Rs2 is subtracted from the unsigned lower 32-bit
content of Rs1. And the result is saturated to the 32-bit unsigned integer range of [0, 2^32-1] and then
sign-extended and written to Rd. If saturation happens, this instruction sets the OV flag.

<strong>Operations</strong>:\n
@code
tmp = Rs1.W[0] - Rs2.W[0];
if (tmp < 0) {
  tmp[31:0] = 0;
  OV = 1;
}
Rd = tmp[31:0]; // RV32
Rd = SE(tmp[31:0]); // RV64
@endcode

\param [in]  a    unsigned int type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__32B__MULT__64B__ADDSUB_1gadfcd132e9036eac41fbe56909d8acaa4';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UMAR64';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '12255';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UMAR64 (Unsigned Multiply and Add to 64-Bit Data)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (64-bit Profile)

<strong>Syntax</strong>:\n
@code
UMAR64 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the 32-bit unsigned elements in two registers and add the 64-bit multiplication
results to the 64-bit unsigned data of a pair of registers (RV32) or a register (RV64). The result is
written back to the pair of registers (RV32) or a register (RV64).

<strong>RV32 Description</strong>:\n
This instruction multiplies the 32-bit unsigned data of Rs1 with that of Rs2. It
adds the 64-bit multiplication result to the 64-bit unsigned data of an even/odd pair of registers
specified by Rd(4,1). The addition result is written back to the even/odd pair of registers specified by
Rd(4,1).
Rx(4,1), i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair
includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the high 32-bit of the result and the even <tt>2d</tt> register
of the pair contains the low 32-bit of the result.

<strong>RV64 Description</strong>:\n
This instruction multiplies the 32-bit unsigned elements of Rs1 with that of Rs2.
It adds the 64-bit multiplication results to the 64-bit unsigned data of Rd. The addition result is
written back to Rd.

<strong>Operations</strong>:\n
@code
* RV32:
t_L = CONCAT(Rd(4,1),1'b0); t_H = CONCAT(Rd(4,1),1'b1);
R[t_H].R[t_L] = R[t_H].R[t_L] + (Rs1 * Rs2);
* RV64:
Rd = Rd + (Rs1.W[0] u* Rs2.W[0]) + (Rs1.W[1] u* Rs2.W[1]);
@endcode

\param [in]  t    unsigned long long type of value stored in t
\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__8B__MULT__32B__ADD_1ga86598a907350dc26b358e7660f721482';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UMAQA';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '12299';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UMAQA (Unsigned Multiply Four Bytes with 32- bit Adds)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
UMAQA Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do four unsigned 8-bit multiplications from 32-bit chunks of two registers; and then adds
the four 16-bit results and the content of corresponding 32-bit chunks of a third register together.

<strong>Description</strong>:\n
This instruction multiplies the four unsigned 8-bit elements of 32-bit chunks of Rs1 with the four
unsigned 8-bit elements of 32-bit chunks of Rs2 and then adds the four results together with the
unsigned content of the corresponding 32-bit chunks of Rd. The final results are written back to the
corresponding 32-bit chunks in Rd.

<strong>Operations</strong>:\n
@code
res[x] = Rd.W[x] + (Rs1.W[x].B[3] u* Rs2.W[x].B[3]) +
         (Rs1.W[x].B[2] u* Rs2.W[x].B[2]) + (Rs1.W[x].B[1] u* Rs2.W[x].B[1]) +
         (Rs1.W[x].B[0] u* Rs2.W[x].B[0]);
Rd.W[x] = res[x];
for RV32: x=0,
for RV64: x=1...0
@endcode

\param [in]  t    unsigned long type of value stored in t
\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MISC_1ga83c4e6f30012da45ea00703d8aafccbe';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UMAX8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '12337';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UMAX8 (SIMD 8-bit Unsigned Maximum)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
UMAX8 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 8-bit unsigned integer elements finding maximum operations simultaneously.

<strong>Description</strong>:\n
This instruction compares the 8-bit unsigned integer elements in Rs1 with the four 8-
bit unsigned integer elements in Rs2 and selects the numbers that is greater than the other one. The
two selected results are written to Rd.

<strong>Operations</strong>:\n
@code
Rd.B[x] = (Rs1.B[x] >u Rs2.B[x])? Rs1.B[x] : Rs2.B[x];
for RV32: x=3...0,
for RV64: x=7...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MISC_1gaa75623ba7f5f23a440782f47f62f1f6f';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UMAX16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '12376';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UMAX16 (SIMD 16-bit Unsigned Maximum)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
UMAX16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit unsigned integer elements finding maximum operations simultaneously.

<strong>Description</strong>:\n
This instruction compares the 16-bit unsigned integer elements in Rs1 with the 16-bit
unsigned integer elements in Rs2 and selects the numbers that is greater than the other one. The
selected results are written to Rd.

<strong>Operations</strong>:\n
@code
Rd.H[x] = (Rs1.H[x] >u Rs2.H[x])? Rs1.H[x] : Rs2.H[x];
for RV32: x=1...0,
for RV64: x=3...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MISC_1gaea0e139e2e2392c423aaf9f7f18056f2';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UMIN8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '12415';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UMIN8 (SIMD 8-bit Unsigned Minimum)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
UMIN8 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 8-bit unsigned integer elements finding minimum operations simultaneously.

<strong>Description</strong>:\n
This instruction compares the 8-bit unsigned integer elements in Rs1 with the 8-bit
unsigned integer elements in Rs2 and selects the numbers that is less than the other one. The
selected results are written to Rd.

<strong>Operations</strong>:\n
@code
Rd.B[x] = (Rs1.B[x] <u Rs2.B[x])? Rs1.B[x] : Rs2.B[x];
for RV32: x=3...0,
for RV64: x=7...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MISC_1gaa7c689ce557d35cb4847d43846579a40';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UMIN16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '12454';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UMIN16 (SIMD 16-bit Unsigned Minimum)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
UMIN16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit unsigned integer elements finding minimum operations simultaneously.

<strong>Description</strong>:\n
This instruction compares the 16-bit unsigned integer elements in Rs1 with the 16-bit
unsigned integer elements in Rs2 and selects the numbers that is less than the other one. The
selected results are written to Rd.

<strong>Operations</strong>:\n
@code
Rd.H[x] = (Rs1.H[x] <u Rs2.H[x])? Rs1.H[x] : Rs2.H[x];
for RV32: x=1...0,
for RV64: x=3...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__32B__MULT__64B__ADDSUB_1ga6011dd7028a2a50e4fac5a3a1da22d54';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UMSR64';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '12508';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UMSR64 (Unsigned Multiply and Subtract from 64-Bit Data)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (64-bit Profile)

<strong>Syntax</strong>:\n
@code
UMSR64 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the 32-bit unsigned elements in two registers and subtract the 64-bit
multiplication results from the 64-bit unsigned data of a pair of registers (RV32) or a register (RV64).
The result is written back to the pair of registers (RV32) or a register (RV64).

<strong>RV32 Description</strong>:\n
This instruction multiplies the 32-bit unsigned data of Rs1 with that of Rs2. It
subtracts the 64-bit multiplication result from the 64-bit unsigned data of an even/odd pair of
registers specified by Rd(4,1). The subtraction result is written back to the even/odd pair of registers
specified by Rd(4,1).
Rx(4,1), i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair
includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the high 32-bit of the result and the even <tt>2d</tt> register
of the pair contains the low 32-bit of the result.

<strong>RV64 Description</strong>:\n
This instruction multiplies the 32-bit unsigned elements of Rs1 with that of Rs2.
It subtracts the 64-bit multiplication results from the 64-bit unsigned data of Rd. The subtraction
result is written back to Rd.

<strong>Operations</strong>:\n
@code
* RV32:
t_L = CONCAT(Rd(4,1),1'b0); t_H = CONCAT(Rd(4,1),1'b1);
R[t_H].R[t_L] = R[t_H].R[t_L] - (Rs1 * Rs2);
* RV64:
Rd = Rd - (Rs1.W[0] u* Rs2.W[0]) - (Rs1.W[1] u* Rs2.W[1]);
@endcode

\param [in]  t    unsigned long long type of value stored in t
\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MULTIPLY_1ga119cf7edda88230d8d62fd642fff046b';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UMUL8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '12591';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UMUL8 (SIMD Unsigned 8-bit Multiply)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
UMUL8 Rd, Rs1, Rs2
UMULX8 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do unsigned 8-bit multiplications and generate four 16-bit results simultaneously.

<strong>RV32 Description</strong>:\n
For the <tt>UMUL8</tt> instruction, multiply the unsigned 8-bit data elements of Rs1
with the corresponding unsigned 8-bit data elements of Rs2.
For the <tt>UMULX8</tt> instruction, multiply the first and second unsigned 8-bit data elements of Rs1
with the second and first unsigned 8-bit data elements of Rs2. At the same time, multiply the third
and fourth unsigned 8-bit data elements of Rs1 with the fourth and third unsigned 8-bit data
elements of Rs2.
The four 16-bit results are then written into an even/odd pair of registers specified by Rd(4,1).
Rd(4,1), i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair
includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the two 16-bit results calculated from the top part of
Rs1 and the even <tt>2d</tt> register of the pair contains the two 16-bit results calculated from the bottom
part of Rs1.

<strong>RV64 Description</strong>:\n
For the <tt>UMUL8</tt> instruction, multiply the unsigned 8-bit data elements of Rs1
with the corresponding unsigned 8-bit data elements of Rs2.
For the <tt>UMULX8</tt> instruction, multiply the first and second unsigned 8-bit data elements of Rs1
with the second and first unsigned 8-bit data elements of Rs2. At the same time, multiply the third
and fourth unsigned 8-bit data elements of Rs1 with the fourth and third unsigned 8-bit data
elements of Rs2.
The four 16-bit results are then written into Rd. The Rd.W[1] contains the two 16-bit results
calculated from the top part of Rs1 and the Rd.W[0] contains the two 16-bit results calculated from
the bottom part of Rs1.

<strong>Operations</strong>:\n
@code
* RV32:
if (is `UMUL8`) {
  op1t[x/2] = Rs1.B[x+1]; op2t[x/2] = Rs2.B[x+1]; // top
  op1b[x/2] = Rs1.B[x]; op2b[x/2] = Rs2.B[x]; // bottom
} else if (is `UMULX8`) {
  op1t[x/2] = Rs1.B[x+1]; op2t[x/2] = Rs2.B[x]; // Rs1 top
  op1b[x/2] = Rs1.B[x]; op2b[x/2] = Rs2.B[x+1]; // Rs1 bottom
}
rest[x/2] = op1t[x/2] u* op2t[x/2];
resb[x/2] = op1b[x/2] u* op2b[x/2];
t_L = CONCAT(Rd(4,1),1'b0); t_H = CONCAT(Rd(4,1),1'b1);
R[t_H].H[1] = rest[1]; R[t_H].H[0] = resb[1];
R[t_L].H[1] = rest[0]; R[t_L].H[0] = resb[0];
x = 0 and 2
* RV64:
if (is `UMUL8`) {
    op1t[x/2] = Rs1.B[x+1]; op2t[x/2] = Rs2.B[x+1]; // top
    op1b[x/2] = Rs1.B[x]; op2b[x/2] = Rs2.B[x]; // bottom
} else if (is `UMULX8`) {
    op1t[x/2] = Rs1.B[x+1]; op2t[x/2] = Rs2.B[x]; // Rs1 top
    op1b[x/2]  =  Rs1.B[x]; op2b[x/2]  =  Rs2.B[x+1];  //  Rs1  bottom
}
rest[x/2]  =  op1t[x/2]  u*  op2t[x/2];
resb[x/2]  =  op1b[x/2]  u*  op2b[x/2];
t_L  =  CONCAT(Rd(4,1),1'b0); t_H  =  CONCAT(Rd(4,1),1'b1);
Rd.W[1].H[1] = rest[1]; Rd.W[1].H[0] = resb[1];
Rd.W[0].H[1] = rest[0]; Rd.W[0].H[0] = resb[0]; x = 0 and 2
@endcode

\param [in]  a    unsigned int type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MULTIPLY_1gab655cbf1d89adb8bc28a1600d6e770aa';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UMULX8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '12675';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UMULX8 (SIMD Unsigned Crossed 8-bit Multiply)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
UMUL8 Rd, Rs1, Rs2
UMULX8 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do unsigned 8-bit multiplications and generate four 16-bit results simultaneously.

<strong>RV32 Description</strong>:\n
For the <tt>UMUL8</tt> instruction, multiply the unsigned 8-bit data elements of Rs1
with the corresponding unsigned 8-bit data elements of Rs2.
For the <tt>UMULX8</tt> instruction, multiply the first and second unsigned 8-bit data elements of Rs1
with the second and first unsigned 8-bit data elements of Rs2. At the same time, multiply the third
and fourth unsigned 8-bit data elements of Rs1 with the fourth and third unsigned 8-bit data
elements of Rs2.
The four 16-bit results are then written into an even/odd pair of registers specified by Rd(4,1).
Rd(4,1), i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair
includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the two 16-bit results calculated from the top part of
Rs1 and the even <tt>2d</tt> register of the pair contains the two 16-bit results calculated from the bottom
part of Rs1.

<strong>RV64 Description</strong>:\n
For the <tt>UMUL8</tt> instruction, multiply the unsigned 8-bit data elements of Rs1
with the corresponding unsigned 8-bit data elements of Rs2.
For the <tt>UMULX8</tt> instruction, multiply the first and second unsigned 8-bit data elements of Rs1
with the second and first unsigned 8-bit data elements of Rs2. At the same time, multiply the third
and fourth unsigned 8-bit data elements of Rs1 with the fourth and third unsigned 8-bit data
elements of Rs2.
The four 16-bit results are then written into Rd. The Rd.W[1] contains the two 16-bit results
calculated from the top part of Rs1 and the Rd.W[0] contains the two 16-bit results calculated from
the bottom part of Rs1.

<strong>Operations</strong>:\n
@code
* RV32:
if (is `UMUL8`) {
  op1t[x/2] = Rs1.B[x+1]; op2t[x/2] = Rs2.B[x+1]; // top
  op1b[x/2] = Rs1.B[x]; op2b[x/2] = Rs2.B[x]; // bottom
} else if (is `UMULX8`) {
  op1t[x/2] = Rs1.B[x+1]; op2t[x/2] = Rs2.B[x]; // Rs1 top
  op1b[x/2] = Rs1.B[x]; op2b[x/2] = Rs2.B[x+1]; // Rs1 bottom
}
rest[x/2] = op1t[x/2] u* op2t[x/2];
resb[x/2] = op1b[x/2] u* op2b[x/2];
t_L = CONCAT(Rd(4,1),1'b0); t_H = CONCAT(Rd(4,1),1'b1);
R[t_H].H[1] = rest[1]; R[t_H].H[0] = resb[1];
R[t_L].H[1] = rest[0]; R[t_L].H[0] = resb[0];
x = 0 and 2
* RV64:
if (is `UMUL8`) {
    op1t[x/2] = Rs1.B[x+1]; op2t[x/2] = Rs2.B[x+1]; // top
    op1b[x/2] = Rs1.B[x]; op2b[x/2] = Rs2.B[x]; // bottom
} else if (is `UMULX8`) {
    op1t[x/2] = Rs1.B[x+1]; op2t[x/2] = Rs2.B[x]; // Rs1 top
    op1b[x/2]  =  Rs1.B[x]; op2b[x/2]  =  Rs2.B[x+1];  //  Rs1  bottom
}
rest[x/2]  =  op1t[x/2]  u*  op2t[x/2];
resb[x/2]  =  op1b[x/2]  u*  op2b[x/2];
t_L  =  CONCAT(Rd(4,1),1'b0); t_H  =  CONCAT(Rd(4,1),1'b1);
Rd.W[1].H[1] = rest[1]; Rd.W[1].H[0] = resb[1];
Rd.W[0].H[1] = rest[0]; Rd.W[0].H[0] = resb[0]; x = 0 and 2
@endcode

\param [in]  a    unsigned int type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MULTIPLY_1ga0b8735b23131378b6bcad1dd67255513';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UMUL16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '12760';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UMUL16 (SIMD Unsigned 16-bit Multiply)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
UMUL16 Rd, Rs1, Rs2
UMULX16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do unsigned 16-bit multiplications and generate two 32-bit results simultaneously.

<strong>RV32 Description</strong>:\n
For the <tt>UMUL16</tt> instruction, multiply the top 16-bit U16 content of Rs1 with
the top 16-bit U16 content of Rs2. At the same time, multiply the bottom 16-bit U16 content of Rs1
with the bottom 16-bit U16 content of Rs2.
For the <tt>UMULX16</tt> instruction, multiply the top 16-bit U16 content of Rs1 with the bottom 16-bit
U16 content of Rs2. At the same time, multiply the bottom 16-bit U16 content of Rs1 with the top 16-
bit U16 content of Rs2.
The two U32 results are then written into an even/odd pair of registers specified by Rd(4,1). Rd(4,1),
i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair includes
register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the 32-bit result calculated from the top part of Rs1 and
the even <tt>2d</tt> register of the pair contains the 32-bit result calculated from the bottom part of Rs1.

<strong>RV64 Description</strong>:\n
For the <tt>UMUL16</tt> instruction, multiply the top 16-bit U16 content of the lower
32-bit word in Rs1 with the top 16-bit U16 content of the lower 32-bit word in Rs2. At the same time,
multiply the bottom 16-bit U16 content of the lower 32-bit word in Rs1 with the bottom 16-bit U16
content of the lower 32-bit word in Rs2.
For the <tt>UMULX16</tt> instruction, multiply the top 16-bit U16 content of the lower 32-bit word in Rs1
with the bottom 16-bit U16 content of the lower 32-bit word in Rs2. At the same time, multiply the
bottom 16-bit U16 content of the lower 32-bit word in Rs1 with the top 16-bit U16 content of the
lower 32-bit word in Rs2.
The two 32-bit U32 results are then written into Rd. The result calculated from the top 16-bit of the
lower 32-bit word in Rs1 is written to Rd.W[1]. And the result calculated from the bottom 16-bit of
the lower 32-bit word in Rs1 is written to Rd.W[0]

<strong>Operations</strong>:\n
@code
* RV32:
if (is `UMUL16`) {
  op1t = Rs1.H[1]; op2t = Rs2.H[1]; // top
  op1b = Rs1.H[0]; op2b = Rs2.H[0]; // bottom
} else if (is `UMULX16`) {
  op1t = Rs1.H[1]; op2t = Rs2.H[0]; // Rs1 top
  op1b = Rs1.H[0]; op2b = Rs2.H[1]; // Rs1 bottom
}
for ((aop,bop,res) in [(op1t,op2t,rest), (op1b,op2b,resb)]) {
  res = aop u* bop;
}
t_L = CONCAT(Rd(4,1),1'b0); t_H = CONCAT(Rd(4,1),1'b1);
R[t_H] = rest;
R[t_L] = resb;
* RV64:
if (is `UMUL16`) {
  op1t = Rs1.H[1]; op2t = Rs2.H[1]; // top
  op1b = Rs1.H[0]; op2b = Rs2.H[0]; // bottom
} else if (is `UMULX16`) {
  op1t = Rs1.H[1]; op2t = Rs2.H[0]; // Rs1 top
  op1b = Rs1.H[0]; op2b = Rs2.H[1]; // Rs1 bottom
}
for ((aop,bop,res) in [(op1t,op2t,rest), (op1b,op2b,resb)]) {
  res = aop u* bop;
}
Rd.W[1] = rest;
Rd.W[0] = resb;
@endcode

\param [in]  a    unsigned int type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MULTIPLY_1ga32ff52a5adf2d53a6d661c48ba6e58c4';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UMULX16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '12845';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UMULX16 (SIMD Unsigned Crossed 16-bit Multiply)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
UMUL16 Rd, Rs1, Rs2
UMULX16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do unsigned 16-bit multiplications and generate two 32-bit results simultaneously.

<strong>RV32 Description</strong>:\n
For the <tt>UMUL16</tt> instruction, multiply the top 16-bit U16 content of Rs1 with
the top 16-bit U16 content of Rs2. At the same time, multiply the bottom 16-bit U16 content of Rs1
with the bottom 16-bit U16 content of Rs2.
For the <tt>UMULX16</tt> instruction, multiply the top 16-bit U16 content of Rs1 with the bottom 16-bit
U16 content of Rs2. At the same time, multiply the bottom 16-bit U16 content of Rs1 with the top 16-
bit U16 content of Rs2.
The two U32 results are then written into an even/odd pair of registers specified by Rd(4,1). Rd(4,1),
i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair includes
register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the 32-bit result calculated from the top part of Rs1 and
the even <tt>2d</tt> register of the pair contains the 32-bit result calculated from the bottom part of Rs1.

<strong>RV64 Description</strong>:\n
For the <tt>UMUL16</tt> instruction, multiply the top 16-bit U16 content of the lower
32-bit word in Rs1 with the top 16-bit U16 content of the lower 32-bit word in Rs2. At the same time,
multiply the bottom 16-bit U16 content of the lower 32-bit word in Rs1 with the bottom 16-bit U16
content of the lower 32-bit word in Rs2.
For the <tt>UMULX16</tt> instruction, multiply the top 16-bit U16 content of the lower 32-bit word in Rs1
with the bottom 16-bit U16 content of the lower 32-bit word in Rs2. At the same time, multiply the
bottom 16-bit U16 content of the lower 32-bit word in Rs1 with the top 16-bit U16 content of the
lower 32-bit word in Rs2.
The two 32-bit U32 results are then written into Rd. The result calculated from the top 16-bit of the
lower 32-bit word in Rs1 is written to Rd.W[1]. And the result calculated from the bottom 16-bit of
the lower 32-bit word in Rs1 is written to Rd.W[0]

<strong>Operations</strong>:\n
@code
* RV32:
if (is `UMUL16`) {
  op1t = Rs1.H[1]; op2t = Rs2.H[1]; // top
  op1b = Rs1.H[0]; op2b = Rs2.H[0]; // bottom
} else if (is `UMULX16`) {
  op1t = Rs1.H[1]; op2t = Rs2.H[0]; // Rs1 top
  op1b = Rs1.H[0]; op2b = Rs2.H[1]; // Rs1 bottom
}
for ((aop,bop,res) in [(op1t,op2t,rest), (op1b,op2b,resb)]) {
  res = aop u* bop;
}
t_L = CONCAT(Rd(4,1),1'b0); t_H = CONCAT(Rd(4,1),1'b1);
R[t_H] = rest;
R[t_L] = resb;
* RV64:
if (is `UMUL16`) {
  op1t = Rs1.H[1]; op2t = Rs2.H[1]; // top
  op1b = Rs1.H[0]; op2b = Rs2.H[0]; // bottom
} else if (is `UMULX16`) {
  op1t = Rs1.H[1]; op2t = Rs2.H[0]; // Rs1 top
  op1b = Rs1.H[0]; op2b = Rs2.H[1]; // Rs1 bottom
}
for ((aop,bop,res) in [(op1t,op2t,rest), (op1b,op2b,resb)]) {
  res = aop u* bop;
}
Rd.W[1] = rest;
Rd.W[0] = resb;
@endcode

\param [in]  a    unsigned int type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__ADDSUB_1ga3024b858bfff004934d319dfa6b73102';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_URADD8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '12892';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
URADD8 (SIMD 8-bit Unsigned Halving Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
URADD8 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 8-bit unsigned integer element additions simultaneously. The results are halved to
avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction adds the 8-bit unsigned integer elements in Rs1 with the 8-bit
unsigned integer elements in Rs2. The results are first logically right-shifted by 1 bit and then
written to Rd.

<strong>Examples</strong>:\n
@code
* Ra = 0x7F, Rb = 0x7F, Rt = 0x7F
* Ra = 0x80, Rb = 0x80, Rt = 0x80
* Ra = 0x40, Rb = 0x80, Rt = 0x60
@endcode

<strong>Operations</strong>:\n
@code
Rd.B[x] = (Rs1.B[x] + Rs2.B[x]) u>> 1;
for RV32: x=3...0,
for RV64: x=7...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga4bb70d87c28d883e2c4cdd71671076e4';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_URADD16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '12939';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
URADD16 (SIMD 16-bit Unsigned Halving Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
URADD16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit unsigned integer element additions simultaneously. The results are halved to
avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction adds the 16-bit unsigned integer elements in Rs1 with the 16-bit
unsigned integer elements in Rs2. The results are first logically right-shifted by 1 bit and then
written to Rd.

<strong>Examples</strong>:\n
@code
* Ra = 0x7FFF, Rb = 0x7FFF Rt = 0x7FFF
* Ra = 0x8000, Rb = 0x8000 Rt = 0x8000
* Ra = 0x4000, Rb = 0x8000 Rt = 0x6000
@endcode

<strong>Operations</strong>:\n
@code
Rd.H[x] = (Rs1.H[x] + Rs2.H[x]) u>> 1;
for RV32: x=1...0,
for RV64: x=3...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__64B__ADDSUB_1ga8458d1a5a3564b122ebe6b84115877e1';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_URADD64';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '12991';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
URADD64 (64-bit Unsigned Halving Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (64-bit Profile)

<strong>Syntax</strong>:\n
@code
URADD64 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Add two 64-bit unsigned integers. The result is halved to avoid overflow or saturation.

<strong>RV32 Description</strong>:\n
This instruction adds the 64-bit unsigned integer of an even/odd pair of registers
specified by Rs1(4,1) with the 64-bit unsigned integer of an even/odd pair of registers specified by
Rs2(4,1). The 64-bit addition result is first logically right-shifted by 1 bit and then written to an
even/odd pair of registers specified by Rd(4,1).
Rx(4,1), i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair
includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the high 32-bit of the result and the even <tt>2d</tt> register
of the pair contains the low 32-bit of the result.

<strong>RV64 Description</strong>:\n
This instruction adds the 64-bit unsigned integer in Rs1 with the 64-bit unsigned
integer Rs2. The 64-bit addition result is first logically right-shifted by 1 bit and then written to Rd.

<strong>Operations</strong>:\n
@code
* RV32:
t_L = CONCAT(Rt(4,1),1'b0); t_H = CONCAT(Rt(4,1),1'b1);
a_L = CONCAT(Ra(4,1),1'b0); a_H = CONCAT(Ra(4,1),1'b1);
b_L = CONCAT(Rb(4,1),1'b0); b_H = CONCAT(Rb(4,1),1'b1);
R[t_H].R[t_L] = (R[a_H].R[a_L] + R[b_H].R[b_L]) u>> 1;
* RV64:
Rd = (Rs1 + Rs2) u>> 1;
@endcode

\param [in]  a    unsigned long long type of value stored in a
\param [in]  b    unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__32B__COMPUTATION_1gad8c7e0a31ab014db941c83a0a704da8d';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_URADDW';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '13039';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
URADDW (32-bit Unsigned Halving Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
URADDW Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Add 32-bit unsigned integers and the results are halved to avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction adds the first 32-bit unsigned integer in Rs1 with the first 32-bit
unsigned integer in Rs2. The result is first logically right-shifted by 1 bit and then sign-extended and
written to Rd.

<strong>Examples</strong>:\n
@code
* Ra = 0x7FFFFFFF, Rb = 0x7FFFFFFF Rt = 0x7FFFFFFF
* Ra = 0x80000000, Rb = 0x80000000 Rt = 0x80000000
* Ra = 0x40000000, Rb = 0x80000000 Rt = 0x60000000
@endcode

<strong>Operations</strong>:\n
@code
* RV32:
Rd[31:0] = (Rs1[31:0] + Rs2[31:0]) u>> 1;
* RV64:
resw[31:0] = (Rs1[31:0] + Rs2[31:0]) u>> 1;
Rd[63:0] = SE(resw[31:0]);
@endcode

\param [in]  a    unsigned int type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga50231b389038f448ea1eb29b45c90b9e';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_URCRAS16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '13088';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
URCRAS16 (SIMD 16-bit Unsigned Halving Cross Addition & Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
URCRAS16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit unsigned integer element addition and 16-bit unsigned integer element
subtraction in a 32-bit chunk simultaneously. Operands are from crossed positions in 32-bit chunks.
The results are halved to avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction adds the 16-bit unsigned integer in [31:16] of 32-bit chunks in Rs1
with the 16-bit unsigned integer in [15:0] of 32-bit chunks in Rs2, and subtracts the 16-bit unsigned
integer in [31:16] of 32-bit chunks in Rs2 from the 16-bit unsigned integer in [15:0] of 32-bit chunks
in Rs1. The element results are first logically right-shifted by 1 bit and then written to [31:16] of 32-
bit chunks in Rd and [15:0] of 32-bit chunks in Rd.

<strong>Examples</strong>:\n
@code
Please see `URADD16` and `URSUB16` instructions.
@endcode

<strong>Operations</strong>:\n
@code
Rd.W[x][31:16] = (Rs1.W[x][31:16] + Rs2.W[x][15:0]) u>> 1;
Rd.W[x][15:0] = (Rs1.W[x][15:0] - Rs2.W[x][31:16]) u>> 1;
for RV32, x=0
for RV64, x=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1gad4abe7a167aebc8b921be0e901c59f8d';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_URCRSA16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '13137';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
URCRSA16 (SIMD 16-bit Unsigned Halving Cross Subtraction & Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
URCRSA16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit unsigned integer element subtraction and 16-bit unsigned integer element
addition in a 32-bit chunk simultaneously. Operands are from crossed positions in 32-bit chunks.
The results are halved to avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction subtracts the 16-bit unsigned integer in [15:0] of 32-bit chunks in Rs2
from the 16-bit unsigned integer in [31:16] of 32-bit chunks in Rs1, and adds the 16-bit unsigned
integer in [15:0] of 32-bit chunks in Rs1 with the 16-bit unsigned integer in [31:16] of 32-bit chunks
in Rs2. The two results are first logically right-shifted by 1 bit and then written to [31:16] of 32-bit
chunks in Rd and [15:0] of 32-bit chunks in Rd.

<strong>Examples</strong>:\n
@code
Please see `URADD16` and `URSUB16` instructions.
@endcode

<strong>Operations</strong>:\n
@code
Rd.W[x][31:16] = (Rs1.W[x][31:16] - Rs2.W[x][15:0]) u>> 1;
Rd.W[x][15:0] = (Rs1.W[x][15:0] + Rs2.W[x][31:16]) u>> 1;
for RV32, x=0
for RV64, x=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga972d51a1eebdd2a479b549286a2d8d92';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_URSTAS16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '13186';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
URSTAS16 (SIMD 16-bit Unsigned Halving Straight Addition & Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
URSTAS16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit unsigned integer element addition and 16-bit unsigned integer element
subtraction in a 32-bit chunk simultaneously. Operands are from corresponding positions in 32-bit
chunks. The results are halved to avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction adds the 16-bit unsigned integer in [31:16] of 32-bit chunks in Rs1
with the 16-bit unsigned integer in [31:16] of 32-bit chunks in Rs2, and subtracts the 16-bit unsigned
integer in [15:0] of 32-bit chunks in Rs2 from the 16-bit unsigned integer in [15:0] of 32-bit chunks
in Rs1. The element results are first logically right-shifted by 1 bit and then written to [31:16] of 32-
bit chunks in Rd and [15:0] of 32-bit chunks in Rd.

<strong>Examples</strong>:\n
@code
Please see `URADD16` and `URSUB16` instructions.
@endcode

<strong>Operations</strong>:\n
@code
Rd.W[x][31:16] = (Rs1.W[x][31:16] + Rs2.W[x][31:16]) u>> 1;
Rd.W[x][15:0] = (Rs1.W[x][15:0] - Rs2.W[x][15:0]) u>> 1;
for RV32, x=0
for RV64, x=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1gadacb909a5ebc2d520bec4f86c0467a2c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_URSTSA16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '13235';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
URSTSA16 (SIMD 16-bit Unsigned Halving Straight Subtraction & Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
URCRSA16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit unsigned integer element subtraction and 16-bit unsigned integer element
addition in a 32-bit chunk simultaneously. Operands are from corresponding positions in 32-bit
chunks. The results are halved to avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction subtracts the 16-bit unsigned integer in [31:16] of 32-bit chunks in Rs2
from the 16-bit unsigned integer in [31:16] of 32-bit chunks in Rs1, and adds the 16-bit unsigned
integer in [15:0] of 32-bit chunks in Rs1 with the 16-bit unsigned integer in [15:0] of 32-bit chunks in
Rs2. The two results are first logically right-shifted by 1 bit and then written to [31:16] of 32-bit
chunks in Rd and [15:0] of 32-bit chunks in Rd.

<strong>Examples</strong>:\n
@code
Please see `URADD16` and `URSUB16` instructions.
@endcode

<strong>Operations</strong>:\n
@code
Rd.W[x][31:16] = (Rs1.W[x][31:16] - Rs2.W[x][31:16]) u>> 1;
Rd.W[x][15:0] = (Rs1.W[x][15:0] + Rs2.W[x][15:0]) u>> 1;
for RV32, x=0
for RV64, x=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__ADDSUB_1gae016aa9f76f26a0e5ce7d3a0120e8afd';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_URSUB8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '13282';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
URSUB8 (SIMD 8-bit Unsigned Halving Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
URSUB8 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 8-bit unsigned integer element subtractions simultaneously. The results are halved to
avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction subtracts the 8-bit unsigned integer elements in Rs2 from the 8-bit
unsigned integer elements in Rs1. The results are first logically right-shifted by 1 bit and then
written to Rd.

<strong>Examples</strong>:\n
@code
* Ra = 0x7F, Rb = 0x80 Rt = 0xFF
* Ra = 0x80, Rb = 0x7F Rt = 0x00
* Ra = 0x80, Rb = 0x40 Rt = 0x20
@endcode

<strong>Operations</strong>:\n
@code
Rd.B[x] = (Rs1.B[x] - Rs2.B[x]) u>> 1;
for RV32: x=3...0,
for RV64: x=7...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga34716b9076a8f42d4001047705447f1d';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_URSUB16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '13329';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
URSUB16 (SIMD 16-bit Unsigned Halving Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
URSUB16 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 16-bit unsigned integer element subtractions simultaneously. The results are halved to
avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction subtracts the 16-bit unsigned integer elements in Rs2 from the 16-bit
unsigned integer elements in Rs1. The results are first logically right-shifted by 1 bit and then
written to Rd.

<strong>Examples</strong>:\n
@code
* Ra = 0x7FFF, Rb = 0x8000 Rt = 0xFFFF
* Ra = 0x8000, Rb = 0x7FFF Rt = 0x0000
* Ra = 0x8000, Rb = 0x4000 Rt = 0x2000
@endcode

<strong>Operations</strong>:\n
@code
Rd.H[x] = (Rs1.H[x] - Rs2.H[x]) u>> 1;
for RV32: x=1...0,
for RV64: x=3...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__64B__ADDSUB_1gabe20856e2f82d33c17ce4963ee2db286';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_URSUB64';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '13383';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
URSUB64 (64-bit Unsigned Halving Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (64-bit Profile)

<strong>Syntax</strong>:\n
@code
URSUB64 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Perform a 64-bit unsigned integer subtraction. The result is halved to avoid overflow or
saturation.

<strong>RV32 Description</strong>:\n
This instruction subtracts the 64-bit unsigned integer of an even/odd pair of
registers specified by Rs2(4,1) from the 64-bit unsigned integer of an even/odd pair of registers
specified by Rs1(4,1). The subtraction result is first logically right-shifted by 1 bit and then written
to an even/odd pair of registers specified by Rd(4,1).
Rx(4,1), i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair
includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the high 32-bit of the result and the even <tt>2d</tt> register
of the pair contains the low 32-bit of the result.

<strong>RV64 Description</strong>:\n
This instruction subtracts the 64-bit unsigned integer in Rs2 from the 64-bit
unsigned integer in Rs1. The subtraction result is first logically right-shifted by 1 bit and then
written to Rd.

<strong>Operations</strong>:\n
@code
* RV32:
t_L = CONCAT(Rt(4,1),1'b0); t_H = CONCAT(Rt(4,1),1'b1);
a_L = CONCAT(Ra(4,1),1'b0); a_H = CONCAT(Ra(4,1),1'b1);
b_L = CONCAT(Rb(4,1),1'b0); b_H = CONCAT(Rb(4,1),1'b1);
R[t_H].R[t_L] = (R[a_H].R[a_L] - R[b_H].R[b_L]) u>> 1;
* RV64:
Rd = (Rs1 - Rs2) u>> 1;
@endcode

\param [in]  a    unsigned long long type of value stored in a
\param [in]  b    unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__32B__COMPUTATION_1gaf80c041da49050e0469a6e945f5df1fd';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_URSUBW';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '13431';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
URSUBW (32-bit Unsigned Halving Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
URSUBW Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Subtract 32-bit unsigned integers and the result is halved to avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction subtracts the first 32-bit signed integer in Rs2 from the first 32-bit
signed integer in Rs1. The result is first logically right-shifted by 1 bit and then sign-extended and
written to Rd.

<strong>Examples</strong>:\n
@code
* Ra = 0x7FFFFFFF, Rb = 0x80000000 Rt = 0xFFFFFFFF
* Ra = 0x80000000, Rb = 0x7FFFFFFF Rt = 0x00000000
* Ra = 0x80000000, Rb = 0x40000000 Rt = 0x20000000
@endcode

<strong>Operations</strong>:\n
@code
* RV32:
Rd[31:0] = (Rs1[31:0] - Rs2[31:0]) u>> 1;
* RV64:
resw[31:0] = (Rs1[31:0] - Rs2[31:0]) u>> 1;
Rd[63:0] = SE(resw[31:0]);
@endcode

\param [in]  a    unsigned int type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1ga92ce02b48c9b1f373c8b7e602c6bcc5f';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_WEXT';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '13535';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
WEXT (Extract Word from 64-bit)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
WEXT Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Extract a 32-bit word from a 64-bit value stored in an even/odd pair of registers (RV32) or
a register (RV64) starting from a specified LSB bit position in a register.

<strong>RV32 Description</strong>:\n
This instruction extracts a 32-bit word from a 64-bit value of an even/odd pair of registers specified
by Rs1(4,1) starting from a specified LSB bit position, specified in Rs2[4:0]. The extracted word is
written to Rd.
Rs1(4,1), i.e., d, determines the even/odd pair group of the two registers. Specifically, the register
pair includes register 2d and 2d+1.
The odd <tt>2d+1</tt> register of the pair contains the high 32-bit of the 64-bit value and the even <tt>2d</tt>
register of the pair contains the low 32-bit of the 64-bit value.

<strong>Operations</strong>:\n
@code
* RV32:
Idx0 = CONCAT(Rs1(4,1),1'b0); Idx1 = CONCAT(Rs1(4,1),1'b1);
src[63:0] = Concat(R[Idx1], R[Idx0]);
LSBloc = Rs2[4:0];
Rd = src[31+LSBloc:LSBloc];
* RV64:
LSBloc = Rs2[4:0];
ExtractW = Rs1[31+LSBloc:LSBloc];
Rd = SE(ExtractW)
@endcode

\param [in]  a    long long type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__UNPACK_1ga0deca77382416530ac829ea0a18d36a5';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_ZUNPKD810';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '13581';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
ZUNPKD810 (Unsigned Unpacking Bytes 1 & 0)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
ZUNPKD8xy Rd, Rs1
xy = {10, 20, 30, 31, 32}
@endcode

<strong>Purpose</strong>:\n
Unpack byte x and byte y of 32-bit chunks in a register into two 16-bit unsigned
halfwords of 32-bit chunks in a register.

<strong>Description</strong>:\n
For the <tt>ZUNPKD8(x)(*y*)</tt> instruction, it unpacks byte <em>x and byte y</em> of 32-bit chunks in Rs1 into
two 16-bit unsigned halfwords and writes the results to the top part and the bottom part of 32-bit
chunks in Rd.

<strong>Operations</strong>:\n
@code
Rd.W[m].H[1] = ZE16(Rs1.W[m].B[x])
Rd.W[m].H[0] = ZE16(Rs1.W[m].B[y])
// ZUNPKD810, x=1,y=0
// ZUNPKD820, x=2,y=0
// ZUNPKD830, x=3,y=0
// ZUNPKD831, x=3,y=1
// ZUNPKD832, x=3,y=2
for RV32: m=0,
for RV64: m=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__UNPACK_1ga0a124400d7a60b3f860c73b2ef10f753';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_ZUNPKD820';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '13627';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
ZUNPKD820 (Unsigned Unpacking Bytes 2 & 0)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
ZUNPKD8xy Rd, Rs1
xy = {10, 20, 30, 31, 32}
@endcode

<strong>Purpose</strong>:\n
Unpack byte x and byte y of 32-bit chunks in a register into two 16-bit unsigned
halfwords of 32-bit chunks in a register.

<strong>Description</strong>:\n
For the <tt>ZUNPKD8(x)(*y*)</tt> instruction, it unpacks byte <em>x and byte y</em> of 32-bit chunks in Rs1 into
two 16-bit unsigned halfwords and writes the results to the top part and the bottom part of 32-bit
chunks in Rd.

<strong>Operations</strong>:\n
@code
Rd.W[m].H[1] = ZE16(Rs1.W[m].B[x])
Rd.W[m].H[0] = ZE16(Rs1.W[m].B[y])
// ZUNPKD810, x=1,y=0
// ZUNPKD820, x=2,y=0
// ZUNPKD830, x=3,y=0
// ZUNPKD831, x=3,y=1
// ZUNPKD832, x=3,y=2
for RV32: m=0,
for RV64: m=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__UNPACK_1ga2ffff9289e72fb5163731af36b82bd96';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_ZUNPKD830';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '13673';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
ZUNPKD830 (Unsigned Unpacking Bytes 3 & 0)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
ZUNPKD8xy Rd, Rs1
xy = {10, 20, 30, 31, 32}
@endcode

<strong>Purpose</strong>:\n
Unpack byte x and byte y of 32-bit chunks in a register into two 16-bit unsigned
halfwords of 32-bit chunks in a register.

<strong>Description</strong>:\n
For the <tt>ZUNPKD8(x)(*y*)</tt> instruction, it unpacks byte <em>x and byte y</em> of 32-bit chunks in Rs1 into
two 16-bit unsigned halfwords and writes the results to the top part and the bottom part of 32-bit
chunks in Rd.

<strong>Operations</strong>:\n
@code
Rd.W[m].H[1] = ZE16(Rs1.W[m].B[x])
Rd.W[m].H[0] = ZE16(Rs1.W[m].B[y])
// ZUNPKD810, x=1,y=0
// ZUNPKD820, x=2,y=0
// ZUNPKD830, x=3,y=0
// ZUNPKD831, x=3,y=1
// ZUNPKD832, x=3,y=2
for RV32: m=0,
for RV64: m=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__UNPACK_1ga833374dc8db34294d48e728512a2068f';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_ZUNPKD831';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '13719';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
ZUNPKD831 (Unsigned Unpacking Bytes 3 & 1)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
ZUNPKD8xy Rd, Rs1
xy = {10, 20, 30, 31, 32}
@endcode

<strong>Purpose</strong>:\n
Unpack byte x and byte y of 32-bit chunks in a register into two 16-bit unsigned
halfwords of 32-bit chunks in a register.

<strong>Description</strong>:\n
For the <tt>ZUNPKD8(x)(*y*)</tt> instruction, it unpacks byte <em>x and byte y</em> of 32-bit chunks in Rs1 into
two 16-bit unsigned halfwords and writes the results to the top part and the bottom part of 32-bit
chunks in Rd.

<strong>Operations</strong>:\n
@code
Rd.W[m].H[1] = ZE16(Rs1.W[m].B[x])
Rd.W[m].H[0] = ZE16(Rs1.W[m].B[y])
// ZUNPKD810, x=1,y=0
// ZUNPKD820, x=2,y=0
// ZUNPKD830, x=3,y=0
// ZUNPKD831, x=3,y=1
// ZUNPKD832, x=3,y=2
for RV32: m=0,
for RV64: m=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__UNPACK_1ga7fdf5939f3c0be0a64c2659b930a9faa';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_ZUNPKD832';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '13765';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
ZUNPKD832 (Unsigned Unpacking Bytes 3 & 2)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
ZUNPKD8xy Rd, Rs1
xy = {10, 20, 30, 31, 32}
@endcode

<strong>Purpose</strong>:\n
Unpack byte x and byte y of 32-bit chunks in a register into two 16-bit unsigned
halfwords of 32-bit chunks in a register.

<strong>Description</strong>:\n
For the <tt>ZUNPKD8(x)(*y*)</tt> instruction, it unpacks byte <em>x and byte y</em> of 32-bit chunks in Rs1 into
two 16-bit unsigned halfwords and writes the results to the top part and the bottom part of 32-bit
chunks in Rd.

<strong>Operations</strong>:\n
@code
Rd.W[m].H[1] = ZE16(Rs1.W[m].B[x])
Rd.W[m].H[0] = ZE16(Rs1.W[m].B[y])
// ZUNPKD810, x=1,y=0
// ZUNPKD820, x=2,y=0
// ZUNPKD830, x=3,y=0
// ZUNPKD831, x=3,y=1
// ZUNPKD832, x=3,y=2
for RV32: m=0,
for RV64: m=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__ADDSUB_1gac67bdd2881a8f2c648cf191c9279ffa2';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_ADD32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '13807';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
ADD32 (SIMD 32-bit Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code
ADD32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit integer element additions simultaneously.

<strong>Description</strong>:\n
This instruction adds the 32-bit integer elements in Rs1 with the 32-bit integer
elements in Rs2, and then writes the 32-bit element results to Rd.

<strong>Note</strong>:\n
This instruction can be used for either signed or unsigned addition.

<strong>Operations</strong>:\n
@code
Rd.W[x] = Rs1.W[x] + Rs2.W[x];
for RV64: x=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__ADDSUB_1ga3b9b82077d31deb6b0f88d434d6d3e0a';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_CRAS32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '13850';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CRAS32 (SIMD 32-bit Cross Addition & Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code
CRAS32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit integer element addition and 32-bit integer element subtraction in a 64-bit
chunk simultaneously. Operands are from crossed 32-bit elements.

<strong>Description</strong>:\n
This instruction adds the 32-bit integer element in [63:32] of Rs1 with the 32-bit
integer element in [31:0] of Rs2, and writes the result to [63:32] of Rd; at the same time, it subtracts
the 32-bit integer element in [63:32] of Rs2 from the 32-bit integer element in [31:0] of Rs1, and
writes the result to [31:0] of Rd.

<strong>Note</strong>:\n
This instruction can be used for either signed or unsigned operations.

<strong>Operations</strong>:\n
@code
Rd.W[1] = Rs1.W[1] + Rs2.W[0];
Rd.W[0] = Rs1.W[0] - Rs2.W[1];
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__ADDSUB_1ga1d6af7d28c27dd44d2742cd873505a3c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_CRSA32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '13892';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CRSA32 (SIMD 32-bit Cross Subtraction & Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code
CRSA32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit integer element subtraction and 32-bit integer element addition in a 64-bit
chunk simultaneously. Operands are from crossed 32-bit elements.
*Description: *
This instruction subtracts the 32-bit integer element in [31:0] of Rs2 from the 32-bit integer element
in [63:32] of Rs1, and writes the result to [63:32] of Rd; at the same time, it adds the 32-bit integer
element in [31:0] of Rs1 with the 32-bit integer element in [63:32] of Rs2, and writes the result to
[31:0] of Rd

<strong>Note</strong>:\n
This instruction can be used for either signed or unsigned operations.

<strong>Operations</strong>:\n
@code
Rd.W[1] = Rs1.W[1] - Rs2.W[0];
Rd.W[0] = Rs1.W[0] + Rs2.W[1];
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__MISC_1gadf701d97707e23112985581dc96763e3';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KABS32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '13952';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KABS32 (Scalar 32-bit Absolute Value with Saturation)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
   <strong>Type</strong>: DSP (RV64 Only)
24    20
19    15
14    12
11    7
KABS32
10010
Rs1
000
Rd
6    0
GE80B
1111111

   <strong>Syntax</strong>:\n
@code
   KABS32 Rd, Rs1
  
@endcode

   <strong>Purpose</strong>:\n
   Get the absolute value of signed 32-bit integer elements in a general register.

   <strong>Description</strong>:\n
   This instruction calculates the absolute value of signed 32-bit integer elements stored
   in Rs1. The results are written to Rd. This instruction with the minimum negative integer input of
   0x80000000 will produce a saturated output of maximum positive integer of 0x7fffffff and the OV
   flag will be set to 1.

   <strong>Operations</strong>:\n
@code
   if (Rs1.W[x] >= 0) {
     res[x] = Rs1.W[x];
   } else {
     If (Rs1.W[x] == 0x80000000) {
       res[x] = 0x7fffffff;
       OV = 1;
     } else {
       res[x] = -Rs1.W[x];
     }
   }
   Rd.W[x] = res[x];
   for RV64: x=1...0
  
@endcode

   \param [in]  a    unsigned long type of value stored in a
   \return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__ADDSUB_1gaa25d2d07545bb75c2d64a81c4c5115a3';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KADD32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '13998';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KADD32 (SIMD 32-bit Signed Saturating Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code
KADD32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit signed integer element saturating additions simultaneously.

<strong>Description</strong>:\n
This instruction adds the 32-bit signed integer elements in Rs1 with the 32-bit signed
integer elements in Rs2. If any of the results are beyond the Q31 number range (-2^31 <= Q31 <= 2^31-1),
they are saturated to the range and the OV bit is set to 1. The saturated results are written to Rd.

<strong>Operations</strong>:\n
@code
res[x] = Rs1.W[x] + Rs2.W[x];
if (res[x] > (2^31)-1) {
  res[x] = (2^31)-1;
  OV = 1;
} else if (res[x] < -2^31) {
  res[x] = -2^31;
  OV = 1;
}
Rd.W[x] = res[x];
for RV64: x=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__ADDSUB_1ga5e004a2f68b21b6cd06a5506b3752a23';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KCRAS32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '14049';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KCRAS32 (SIMD 32-bit Signed Saturating Cross Addition & Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIM (RV64 Only)

<strong>Syntax</strong>:\n
@code
KCRAS32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit signed integer element saturating addition and 32-bit signed integer element
saturating subtraction in a 64-bit chunk simultaneously. Operands are from crossed 32-bit elements.

<strong>Description</strong>:\n
This instruction adds the 32-bit integer element in [63:32] of Rs1 with the 32-bit
integer element in [31:0] of Rs2; at the same time, it subtracts the 32-bit integer element in [63:32] of
Rs2 from the 32-bit integer element in [31:0] of Rs1. If any of the results are beyond the Q31 number
range (-2^31 <= Q31 <= 2^31-1), they are saturated to the range and the OV bit is set to 1. The saturated
results are written to [63:32] of Rd for addition and [31:0] of Rd for subtraction.

<strong>Operations</strong>:\n
@code
res[1] = Rs1.W[1] + Rs2.W[0];
res[0] = Rs1.W[0] - Rs2.W[1];
if (res[x] > (2^31)-1) {
  res[x] = (2^31)-1;
  OV = 1;
} else if (res < -2^31) {
  res[x] = -2^31;
  OV = 1;
}
Rd.W[1] = res[1];
Rd.W[0] = res[0];
for RV64, x=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__ADDSUB_1ga4e558d37a01694248417454240fdd58c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KCRSA32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '14099';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KCRSA32 (SIMD 32-bit Signed Saturating Cross Subtraction & Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code
KCRSA32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit signed integer element saturating subtraction and 32-bit signed integer element
saturating addition in a 64-bit chunk simultaneously. Operands are from crossed 32-bit elements.
*Description: *
This instruction subtracts the 32-bit integer element in [31:0] of Rs2 from the 32-bit integer element
in [63:32] of Rs1; at the same time, it adds the 32-bit integer element in [31:0] of Rs1 with the 32-bit
integer element in [63:32] of Rs2. If any of the results are beyond the Q31 number range (-2^31 <= Q31
<= 2^31-1), they are saturated to the range and the OV bit is set to 1. The saturated results are written to
[63:32] of Rd for subtraction and [31:0] of Rd for addition.

<strong>Operations</strong>:\n
@code
res[1] = Rs1.W[1] - Rs2.W[0];
res[0] = Rs1.W[0] + Rs2.W[1];
if (res[x] > (2^31)-1) {
  res[x] = (2^31)-1;
  OV = 1;
} else if (res < -2^31) {
  res[x] = -2^31;
  OV = 1;
}
Rd.W[1] = res[1];
Rd.W[0] = res[0];
for RV64, x=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__Q15__SAT__MULT_1ga2ef54e3c36ac953d6b0c5505bcb82fa7';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KDMBB16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '14151';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KDMBB16 (SIMD Signed Saturating Double Multiply B16 x B16)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 only)

<strong>Syntax</strong>:\n
@code
KDMxy16 Rd, Rs1, Rs2 (xy = BB, BT, TT)
@endcode

<strong>Purpose</strong>:\n
Multiply the signed Q15 integer contents of two 16-bit data in the corresponding portion
of the 32-bit chunks in registers and then double and saturate the Q31 results into the 32-bit chunks
in the destination register. If saturation happens, an overflow flag OV will be set.

<strong>Description</strong>:\n
Multiply the top or bottom 16-bit Q15 content of the 32-bit portions in Rs1 with the top
or bottom 16-bit Q15 content of the 32-bit portions in Rs2. The Q30 results are then doubled and
saturated into Q31 values. The Q31 values are then written into the 32-bit chunks in Rd. When both
the two Q15 inputs are 0x8000, saturation will happen. The result will be saturated to 0x7FFFFFFF
and the overflow flag OV will be set.

<strong>Operations</strong>:\n
@code
// KDMBB16: (x,y,z)=(0,0,0),(2,2,1)
// KDMBT16: (x,y,z)=(0,1,0),(2,3,1)
// KDMTT16: (x,y,z)=(1,1,0),(3,3,1)
aop[z] = Rs1.H[x]; bop[z] = Rs2.H[y];
If (0x8000 != aop[z] | 0x8000 != bop[z]) {
  Mresult[z] = aop[z] * bop[z];
  resQ31[z] = Mresult[z] << 1;
} else {
  resQ31[z] = 0x7FFFFFFF;
  OV = 1;
}
Rd.W[z] = resQ31[z];
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__Q15__SAT__MULT_1gaabd178e790fb3e2f172efe367869982e';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KDMBT16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '14203';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KDMBT16 (SIMD Signed Saturating Double Multiply B16 x T16)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 only)

<strong>Syntax</strong>:\n
@code
KDMxy16 Rd, Rs1, Rs2 (xy = BB, BT, TT)
@endcode

<strong>Purpose</strong>:\n
Multiply the signed Q15 integer contents of two 16-bit data in the corresponding portion
of the 32-bit chunks in registers and then double and saturate the Q31 results into the 32-bit chunks
in the destination register. If saturation happens, an overflow flag OV will be set.

<strong>Description</strong>:\n
Multiply the top or bottom 16-bit Q15 content of the 32-bit portions in Rs1 with the top
or bottom 16-bit Q15 content of the 32-bit portions in Rs2. The Q30 results are then doubled and
saturated into Q31 values. The Q31 values are then written into the 32-bit chunks in Rd. When both
the two Q15 inputs are 0x8000, saturation will happen. The result will be saturated to 0x7FFFFFFF
and the overflow flag OV will be set.

<strong>Operations</strong>:\n
@code
// KDMBB16: (x,y,z)=(0,0,0),(2,2,1)
// KDMBT16: (x,y,z)=(0,1,0),(2,3,1)
// KDMTT16: (x,y,z)=(1,1,0),(3,3,1)
aop[z] = Rs1.H[x]; bop[z] = Rs2.H[y];
If (0x8000 != aop[z] | 0x8000 != bop[z]) {
  Mresult[z] = aop[z] * bop[z];
  resQ31[z] = Mresult[z] << 1;
} else {
  resQ31[z] = 0x7FFFFFFF;
  OV = 1;
}
Rd.W[z] = resQ31[z];
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__Q15__SAT__MULT_1ga05495c1787257dcc91b826929f7185c7';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KDMTT16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '14255';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KDMTT16 (SIMD Signed Saturating Double Multiply T16 x T16)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 only)

<strong>Syntax</strong>:\n
@code
KDMxy16 Rd, Rs1, Rs2 (xy = BB, BT, TT)
@endcode

<strong>Purpose</strong>:\n
Multiply the signed Q15 integer contents of two 16-bit data in the corresponding portion
of the 32-bit chunks in registers and then double and saturate the Q31 results into the 32-bit chunks
in the destination register. If saturation happens, an overflow flag OV will be set.

<strong>Description</strong>:\n
Multiply the top or bottom 16-bit Q15 content of the 32-bit portions in Rs1 with the top
or bottom 16-bit Q15 content of the 32-bit portions in Rs2. The Q30 results are then doubled and
saturated into Q31 values. The Q31 values are then written into the 32-bit chunks in Rd. When both
the two Q15 inputs are 0x8000, saturation will happen. The result will be saturated to 0x7FFFFFFF
and the overflow flag OV will be set.

<strong>Operations</strong>:\n
@code
// KDMBB16: (x,y,z)=(0,0,0),(2,2,1)
// KDMBT16: (x,y,z)=(0,1,0),(2,3,1)
// KDMTT16: (x,y,z)=(1,1,0),(3,3,1)
aop[z] = Rs1.H[x]; bop[z] = Rs2.H[y];
If (0x8000 != aop[z] | 0x8000 != bop[z]) {
  Mresult[z] = aop[z] * bop[z];
  resQ31[z] = Mresult[z] << 1;
} else {
  resQ31[z] = 0x7FFFFFFF;
  OV = 1;
}
Rd.W[z] = resQ31[z];
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__Q15__SAT__MULT_1ga2ac7979002270bfa658be6a6e041c5f9';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KDMABB16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '14321';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KDMABB16 (SIMD Signed Saturating Double Multiply Addition B16 x B16)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 only)

<strong>Syntax</strong>:\n
@code
KDMAxy16 Rd, Rs1, Rs2 (xy = BB, BT, TT)
@endcode

<strong>Purpose</strong>:\n
Multiply the signed Q15 integer contents of two 16-bit data in the corresponding portion
of the 32-bit chunks in registers and then double and saturate the Q31 results, add the results with
the values of the corresponding 32-bit chunks from the destination register and write the saturated
addition results back into the corresponding 32-bit chunks of the destination register. If saturation
happens, an overflow flag OV will be set.

<strong>Description</strong>:\n
Multiply the top or bottom 16-bit Q15 content of the 32-bit portions in Rs1 with the top
or bottom 16-bit Q15 content of the corresponding 32-bit portions in Rs2. The Q30 results are then
doubled and saturated into Q31 values. The Q31 values are then added with the content of the
corresponding 32-bit portions of Rd. If the addition results are beyond the Q31 number range (-2^31 <=
Q31 <= 2^31-1), they are saturated to the range and the OV flag is set to 1. The results after saturation
are written back to Rd.
When both the two Q15 inputs are 0x8000, saturation will happen and the overflow flag OV will be
set.

<strong>Operations</strong>:\n
@code
// KDMABB16: (x,y,z)=(0,0,0),(2,2,1)
// KDMABT16: (x,y,z)=(0,1,0),(2,3,1)
// KDMATT16: (x,y,z)=(1,1,0),(3,3,1)
aop[z] = Rs1.H[x]; bop[z] = Rs2.H[y];
If (0x8000 != aop[z] | 0x8000 != bop[z]) {
  Mresult[z] = aop[z] * bop[z];
  resQ31[z] = Mresult[z] << 1;
} else {
  resQ31[z] = 0x7FFFFFFF;
  OV = 1;
}
resadd[z] = Rd.W[z] + resQ31[z];
if (resadd[z] > (2^31)-1) {
  resadd[z] = (2^31)-1;
  OV = 1;
} else if (resadd[z] < -2^31) {
  resadd[z] = -2^31;
  OV = 1;
}
Rd.W[z] = resadd[z];
@endcode

\param [in]  t    unsigned long type of value stored in t
\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__Q15__SAT__MULT_1ga180a49b034ce67949bc0db6bfbdce058';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KDMABT16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '14386';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KDMABT16 (SIMD Signed Saturating Double Multiply Addition B16 x T16)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 only)

<strong>Syntax</strong>:\n
@code
KDMAxy16 Rd, Rs1, Rs2 (xy = BB, BT, TT)
@endcode

<strong>Purpose</strong>:\n
Multiply the signed Q15 integer contents of two 16-bit data in the corresponding portion
of the 32-bit chunks in registers and then double and saturate the Q31 results, add the results with
the values of the corresponding 32-bit chunks from the destination register and write the saturated
addition results back into the corresponding 32-bit chunks of the destination register. If saturation
happens, an overflow flag OV will be set.

<strong>Description</strong>:\n
Multiply the top or bottom 16-bit Q15 content of the 32-bit portions in Rs1 with the top
or bottom 16-bit Q15 content of the corresponding 32-bit portions in Rs2. The Q30 results are then
doubled and saturated into Q31 values. The Q31 values are then added with the content of the
corresponding 32-bit portions of Rd. If the addition results are beyond the Q31 number range (-2^31 <=
Q31 <= 2^31-1), they are saturated to the range and the OV flag is set to 1. The results after saturation
are written back to Rd.
When both the two Q15 inputs are 0x8000, saturation will happen and the overflow flag OV will be
set.

<strong>Operations</strong>:\n
@code
// KDMABB16: (x,y,z)=(0,0,0),(2,2,1)
// KDMABT16: (x,y,z)=(0,1,0),(2,3,1)
// KDMATT16: (x,y,z)=(1,1,0),(3,3,1)
aop[z] = Rs1.H[x]; bop[z] = Rs2.H[y];
If (0x8000 != aop[z] | 0x8000 != bop[z]) {
  Mresult[z] = aop[z] * bop[z];
  resQ31[z] = Mresult[z] << 1;
} else {
  resQ31[z] = 0x7FFFFFFF;
  OV = 1;
}
resadd[z] = Rd.W[z] + resQ31[z];
if (resadd[z] > (2^31)-1) {
  resadd[z] = (2^31)-1;
  OV = 1;
} else if (resadd[z] < -2^31) {
  resadd[z] = -2^31;
  OV = 1;
}
Rd.W[z] = resadd[z];
@endcode

\param [in]  t    unsigned long type of value stored in t
\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__Q15__SAT__MULT_1ga952ad06fdf63f05d19c3bc4a2a8cc9b8';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KDMATT16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '14451';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KDMATT16 (SIMD Signed Saturating Double Multiply Addition T16 x T16)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 only)

<strong>Syntax</strong>:\n
@code
KDMAxy16 Rd, Rs1, Rs2 (xy = BB, BT, TT)
@endcode

<strong>Purpose</strong>:\n
Multiply the signed Q15 integer contents of two 16-bit data in the corresponding portion
of the 32-bit chunks in registers and then double and saturate the Q31 results, add the results with
the values of the corresponding 32-bit chunks from the destination register and write the saturated
addition results back into the corresponding 32-bit chunks of the destination register. If saturation
happens, an overflow flag OV will be set.

<strong>Description</strong>:\n
Multiply the top or bottom 16-bit Q15 content of the 32-bit portions in Rs1 with the top
or bottom 16-bit Q15 content of the corresponding 32-bit portions in Rs2. The Q30 results are then
doubled and saturated into Q31 values. The Q31 values are then added with the content of the
corresponding 32-bit portions of Rd. If the addition results are beyond the Q31 number range (-2^31 <=
Q31 <= 2^31-1), they are saturated to the range and the OV flag is set to 1. The results after saturation
are written back to Rd.
When both the two Q15 inputs are 0x8000, saturation will happen and the overflow flag OV will be
set.

<strong>Operations</strong>:\n
@code
// KDMABB16: (x,y,z)=(0,0,0),(2,2,1)
// KDMABT16: (x,y,z)=(0,1,0),(2,3,1)
// KDMATT16: (x,y,z)=(1,1,0),(3,3,1)
aop[z] = Rs1.H[x]; bop[z] = Rs2.H[y];
If (0x8000 != aop[z] | 0x8000 != bop[z]) {
  Mresult[z] = aop[z] * bop[z];
  resQ31[z] = Mresult[z] << 1;
} else {
  resQ31[z] = 0x7FFFFFFF;
  OV = 1;
}
resadd[z] = Rd.W[z] + resQ31[z];
if (resadd[z] > (2^31)-1) {
  resadd[z] = (2^31)-1;
  OV = 1;
} else if (resadd[z] < -2^31) {
  resadd[z] = -2^31;
  OV = 1;
}
Rd.W[z] = resadd[z];
@endcode

\param [in]  t    unsigned long type of value stored in t
\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__Q15__SAT__MULT_1ga58ec69e4c58f7cb34556ef4f4a153615';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KHMBB16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '14503';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KHMBB16 (SIMD Signed Saturating Half Multiply B16 x B16)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code
KHMxy16 Rd, Rs1, Rs2 (xy = BB, BT, TT)
@endcode

<strong>Purpose</strong>:\n
Multiply the signed Q15 integer contents of two 16-bit data in the corresponding portion
of the 32-bit chunks in registers and then right-shift 15 bits to turn the Q30 results into Q15
numbers again and saturate the Q15 results into the destination register. If saturation happens, an
overflow flag OV will be set.

<strong>Description</strong>:\n
Multiply the top or bottom 16-bit Q15 content of the 32-bit portions in Rs1 with the top
or bottom 16-bit Q15 content of the 32-bit portion in Rs2. The Q30 results are then right-shifted 15-
bits and saturated into Q15 values. The 32-bit Q15 values are then written into the 32-bit chunks in
Rd. When both the two Q15 inputs are 0x8000, saturation will happen. The result will be saturated
to 0x7FFF and the overflow flag OV will be set.

<strong>Operations</strong>:\n
@code
// KHMBB16: (x,y,z)=(0,0,0),(2,2,1)
// KHMBT16: (x,y,z)=(0,1,0),(2,3,1)
// KHMTT16: (x,y,z)=(1,1,0),(3,3,1)
aop = Rs1.H[x]; bop = Rs2.H[y];
If (0x8000 != aop | 0x8000 != bop) {
  Mresult[31:0] = aop * bop;
  res[15:0] = Mresult[30:15];
} else {
  res[15:0] = 0x7FFF;
  OV = 1;
}
Rd.W[z] = SE32(res[15:0]);
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__Q15__SAT__MULT_1ga30da509f228f12e85fccc10646cebc28';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KHMBT16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '14556';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KHMBT16 (SIMD Signed Saturating Half Multiply B16 x T16)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code
KHMxy16 Rd, Rs1, Rs2 (xy = BB, BT, TT)
@endcode

<strong>Purpose</strong>:\n
Multiply the signed Q15 integer contents of two 16-bit data in the corresponding portion
of the 32-bit chunks in registers and then right-shift 15 bits to turn the Q30 results into Q15
numbers again and saturate the Q15 results into the destination register. If saturation happens, an
overflow flag OV will be set.

<strong>Description</strong>:\n
Multiply the top or bottom 16-bit Q15 content of the 32-bit portions in Rs1 with the top
or bottom 16-bit Q15 content of the 32-bit portion in Rs2. The Q30 results are then right-shifted 15-
bits and saturated into Q15 values. The 32-bit Q15 values are then written into the 32-bit chunks in
Rd. When both the two Q15 inputs are 0x8000, saturation will happen. The result will be saturated
to 0x7FFF and the overflow flag OV will be set.

<strong>Operations</strong>:\n
@code
// KHMBB16: (x,y,z)=(0,0,0),(2,2,1)
// KHMBT16: (x,y,z)=(0,1,0),(2,3,1)
// KHMTT16: (x,y,z)=(1,1,0),(3,3,1)
aop = Rs1.H[x]; bop = Rs2.H[y];
If (0x8000 != aop | 0x8000 != bop) {
  Mresult[31:0] = aop * bop;
  res[15:0] = Mresult[30:15];
} else {
  res[15:0] = 0x7FFF;
  OV = 1;
}
Rd.W[z] = SE32(res[15:0]);
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__Q15__SAT__MULT_1ga93e865bc3f39a52053267fdce080a7a1';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KHMTT16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '14609';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KHMTT16 (SIMD Signed Saturating Half Multiply T16 x T16)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code
KHMxy16 Rd, Rs1, Rs2 (xy = BB, BT, TT)
@endcode

<strong>Purpose</strong>:\n
Multiply the signed Q15 integer contents of two 16-bit data in the corresponding portion
of the 32-bit chunks in registers and then right-shift 15 bits to turn the Q30 results into Q15
numbers again and saturate the Q15 results into the destination register. If saturation happens, an
overflow flag OV will be set.

<strong>Description</strong>:\n
Multiply the top or bottom 16-bit Q15 content of the 32-bit portions in Rs1 with the top
or bottom 16-bit Q15 content of the 32-bit portion in Rs2. The Q30 results are then right-shifted 15-
bits and saturated into Q15 values. The 32-bit Q15 values are then written into the 32-bit chunks in
Rd. When both the two Q15 inputs are 0x8000, saturation will happen. The result will be saturated
to 0x7FFF and the overflow flag OV will be set.

<strong>Operations</strong>:\n
@code
// KHMBB16: (x,y,z)=(0,0,0),(2,2,1)
// KHMBT16: (x,y,z)=(0,1,0),(2,3,1)
// KHMTT16: (x,y,z)=(1,1,0),(3,3,1)
aop = Rs1.H[x]; bop = Rs2.H[y];
If (0x8000 != aop | 0x8000 != bop) {
  Mresult[31:0] = aop * bop;
  res[15:0] = Mresult[30:15];
} else {
  res[15:0] = 0x7FFF;
  OV = 1;
}
Rd.W[z] = SE32(res[15:0]);
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__32B__MULT__ADD_1ga085a8ed11950722dbf0822387c6624c2';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMABB32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '14672';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMABB32 (Saturating Signed Multiply Bottom Words & Add)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (RV64 Only)

<strong>Syntax</strong>:\n
@code
KMABB32 Rd, Rs1, Rs2
KMABT32 Rd, Rs1, Rs2
KMATT32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit element in a register with the 32-bit element in another register
and add the result to the content of 64-bit data in the third register. The addition result may be
saturated and is written to the third register.
* KMABB32: rd + bottom*bottom
* KMABT32: rd + bottom*top
* KMATT32: rd + top*top

<strong>Description</strong>:\n
For the <tt>KMABB32</tt> instruction, it multiplies the bottom 32-bit element in Rs1 with the bottom 32-bit
element in Rs2.
For the <tt>KMABT32</tt> instruction, it multiplies the bottom 32-bit element in Rs1 with the top 32-bit
element in Rs2.
For the <tt>KMATT32</tt> instruction, it multiplies the top 32-bit element in Rs1 with the top 32-bit
element in Rs2.
The multiplication result is added to the content of 64-bit data in Rd. If the addition result is beyond
the Q63 number range (-2^63 <= Q63 <= 2^63-1), it is saturated to the range and the OV bit is set to 1. The
result after saturation is written to Rd. The 32-bit contents of Rs1 and Rs2 are treated as signed
integers.

<strong>Operations</strong>:\n
@code
res = Rd + (Rs1.W[0] * Rs2.W[0]); // KMABB32
 res = Rd + (Rs1.W[0] * Rs2.W[1]); // KMABT32
 res = Rd + (Rs1.W[1] * Rs2.W[1]); // KMATT32
 if (res > (2^63)-1) {
   res = (2^63)-1;
   OV = 1;
 } else if (res < -2^63) {
   res = -2^63;
   OV = 1;
 }
 Rd = res;
*Exceptions:* None
@endcode

\param [in]  t    long type of value stored in t
\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__32B__MULT__ADD_1ga04b5c41f73199a8722cae46a4d8ed12c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMABT32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '14734';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMABT32 (Saturating Signed Multiply Bottom & Top Words & Add)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (RV64 Only)

<strong>Syntax</strong>:\n
@code
KMABB32 Rd, Rs1, Rs2
KMABT32 Rd, Rs1, Rs2
KMATT32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit element in a register with the 32-bit element in another register
and add the result to the content of 64-bit data in the third register. The addition result may be
saturated and is written to the third register.
* KMABB32: rd + bottom*bottom
* KMABT32: rd + bottom*top
* KMATT32: rd + top*top

<strong>Description</strong>:\n
For the <tt>KMABB32</tt> instruction, it multiplies the bottom 32-bit element in Rs1 with the bottom 32-bit
element in Rs2.
For the <tt>KMABT32</tt> instruction, it multiplies the bottom 32-bit element in Rs1 with the top 32-bit
element in Rs2.
For the <tt>KMATT32</tt> instruction, it multiplies the top 32-bit element in Rs1 with the top 32-bit
element in Rs2.
The multiplication result is added to the content of 64-bit data in Rd. If the addition result is beyond
the Q63 number range (-2^63 <= Q63 <= 2^63-1), it is saturated to the range and the OV bit is set to 1. The
result after saturation is written to Rd. The 32-bit contents of Rs1 and Rs2 are treated as signed
integers.

<strong>Operations</strong>:\n
@code
res = Rd + (Rs1.W[0] * Rs2.W[0]); // KMABB32
 res = Rd + (Rs1.W[0] * Rs2.W[1]); // KMABT32
 res = Rd + (Rs1.W[1] * Rs2.W[1]); // KMATT32
 if (res > (2^63)-1) {
   res = (2^63)-1;
   OV = 1;
 } else if (res < -2^63) {
   res = -2^63;
   OV = 1;
 }
 Rd = res;
*Exceptions:* None
@endcode

\param [in]  t    long type of value stored in t
\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__32B__MULT__ADD_1ga0dd16ba83a434e451bbe33110acd8bf5';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMATT32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '14796';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMATT32 (Saturating Signed Multiply Top Words & Add)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (RV64 Only)

<strong>Syntax</strong>:\n
@code
KMABB32 Rd, Rs1, Rs2
KMABT32 Rd, Rs1, Rs2
KMATT32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit element in a register with the 32-bit element in another register
and add the result to the content of 64-bit data in the third register. The addition result may be
saturated and is written to the third register.
* KMABB32: rd + bottom*bottom
* KMABT32: rd + bottom*top
* KMATT32: rd + top*top

<strong>Description</strong>:\n
For the <tt>KMABB32</tt> instruction, it multiplies the bottom 32-bit element in Rs1 with the bottom 32-bit
element in Rs2.
For the <tt>KMABT32</tt> instruction, it multiplies the bottom 32-bit element in Rs1 with the top 32-bit
element in Rs2.
For the <tt>KMATT32</tt> instruction, it multiplies the top 32-bit element in Rs1 with the top 32-bit
element in Rs2.
The multiplication result is added to the content of 64-bit data in Rd. If the addition result is beyond
the Q63 number range (-2^63 <= Q63 <= 2^63-1), it is saturated to the range and the OV bit is set to 1. The
result after saturation is written to Rd. The 32-bit contents of Rs1 and Rs2 are treated as signed
integers.

<strong>Operations</strong>:\n
@code
res = Rd + (Rs1.W[0] * Rs2.W[0]); // KMABB32
 res = Rd + (Rs1.W[0] * Rs2.W[1]); // KMABT32
 res = Rd + (Rs1.W[1] * Rs2.W[1]); // KMATT32
 if (res > (2^63)-1) {
   res = (2^63)-1;
   OV = 1;
 } else if (res < -2^63) {
   res = -2^63;
   OV = 1;
 }
 Rd = res;
*Exceptions:* None
@endcode

\param [in]  t    long type of value stored in t
\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__32B__PARALLEL__MAC_1ga11979b97e4c9c39a6207a233773ab2c6';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMADA32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '14852';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMADA32 (Saturating Signed Multiply Two Words and Two Adds)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (RV64 Only)

<strong>Syntax</strong>:\n
@code
KMADA32 Rd, Rs1, Rs2
KMAXDA32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 32-bit multiplications from 32-bit data in two registers; and then adds the
two 64-bit results and 64-bit data in a third register together. The addition result may be saturated.
* KMADA32: rd + top*top + bottom*bottom
* KMAXDA32: rd + top*bottom + bottom*top

<strong>Description</strong>:\n
For the <tt>KMADA32</tt> instruction, it multiplies the bottom 32-bit element in Rs1 with the bottom 32-
bit element in Rs2 and then adds the result to the result of multiplying the top 32-bit element in Rs1
with the top 32-bit element in Rs2. It is actually an alias of the <tt>KMAR64</tt> instruction.
For the <tt>KMAXDA32</tt> instruction, it multiplies the top 32-bit element in Rs1 with the bottom 32-bit
element in Rs2 and then adds the result to the result of multiplying the bottom 32-bit element in Rs1
with the top 32-bit element in Rs2.
The result is added to the content of 64-bit data in Rd. If the addition result is beyond the Q63
number range (-2^63 <= Q63 <= 2^63-1), it is saturated to the range and the OV bit is set to 1. The 64-bit
result is written to Rd. The 32-bit contents of Rs1 and Rs2 are treated as signed integers.

<strong>Operations</strong>:\n
@code
res = Rd + (Rs1.W[1] * Rs2.w[1]) + (Rs1.W[0] * Rs2.W[0]); // KMADA32
res = Rd + (Rs1.W[1] * Rs2.W[0]) + (Rs1.W[0] * Rs2.W[1]); // KMAXDA32
if (res > (2^63)-1) {
  res = (2^63)-1;
  OV = 1;
} else if (res < -2^63) {
  res = -2^63;
  OV = 1;
}
Rd = res;
@endcode

\param [in]  t    long type of value stored in t
\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__32B__PARALLEL__MAC_1gad15b341acf9f631a3cf1bc188846bd3f';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMAXDA32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '14908';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMAXDA32 (Saturating Signed Crossed Multiply Two Words and Two Adds)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (RV64 Only)

<strong>Syntax</strong>:\n
@code
KMADA32 Rd, Rs1, Rs2
KMAXDA32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 32-bit multiplications from 32-bit data in two registers; and then adds the
two 64-bit results and 64-bit data in a third register together. The addition result may be saturated.
* KMADA32: rd + top*top + bottom*bottom
* KMAXDA32: rd + top*bottom + bottom*top

<strong>Description</strong>:\n
For the <tt>KMADA32</tt> instruction, it multiplies the bottom 32-bit element in Rs1 with the bottom 32-
bit element in Rs2 and then adds the result to the result of multiplying the top 32-bit element in Rs1
with the top 32-bit element in Rs2. It is actually an alias of the <tt>KMAR64</tt> instruction.
For the <tt>KMAXDA32</tt> instruction, it multiplies the top 32-bit element in Rs1 with the bottom 32-bit
element in Rs2 and then adds the result to the result of multiplying the bottom 32-bit element in Rs1
with the top 32-bit element in Rs2.
The result is added to the content of 64-bit data in Rd. If the addition result is beyond the Q63
number range (-2^63 <= Q63 <= 2^63-1), it is saturated to the range and the OV bit is set to 1. The 64-bit
result is written to Rd. The 32-bit contents of Rs1 and Rs2 are treated as signed integers.

<strong>Operations</strong>:\n
@code
res = Rd + (Rs1.W[1] * Rs2.w[1]) + (Rs1.W[0] * Rs2.W[0]); // KMADA32
res = Rd + (Rs1.W[1] * Rs2.W[0]) + (Rs1.W[0] * Rs2.W[1]); // KMAXDA32
if (res > (2^63)-1) {
  res = (2^63)-1;
  OV = 1;
} else if (res < -2^63) {
  res = -2^63;
  OV = 1;
}
Rd = res;
@endcode

\param [in]  t    long type of value stored in t
\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__32B__PARALLEL__MAC_1ga02b187fe2c874439b89f7e4aaf1cfbd2';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMDA32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '14959';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMDA32 (Signed Multiply Two Words and Add)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (RV64 Only)

<strong>Syntax</strong>:\n
@code
KMDA32 Rd, Rs1, Rs2
KMXDA32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 32-bit multiplications from the 32-bit element of two registers; and then
adds the two 64-bit results together. The addition result may be saturated.
* KMDA32: top*top + bottom*bottom
* KMXDA32: top*bottom + bottom*top

<strong>Description</strong>:\n
For the <tt>KMDA32</tt> instruction, it multiplies the bottom 32-bit element of Rs1 with the bottom 32-bit
element of Rs2 and then adds the result to the result of multiplying the top 32-bit element of Rs1
with the top 32-bit element of Rs2.
For the <tt>KMXDA32</tt> instruction, it multiplies the bottom 32-bit element of Rs1 with the top 32-bit
element of Rs2 and then adds the result to the result of multiplying the top 32-bit element of Rs1
with the bottom 32-bit element of Rs2.
The addition result is checked for saturation. If saturation happens, the result is saturated to 2^63-1.
The final result is written to Rd. The 32-bit contents are treated as signed integers.

<strong>Operations</strong>:\n
@code
if ((Rs1 != 0x8000000080000000) or (Rs2 != 0x8000000080000000)) {
  Rd = (Rs1.W[1] * Rs2.W[1]) + (Rs1.W[0] * Rs2.W[0]); // KMDA32
  Rd = (Rs1.W[1] * Rs2.W[0]) + (Rs1.W[0] * Rs2.W[1]); // KMXDA32
} else {
  Rd = 0x7fffffffffffffff;
  OV = 1;
}
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__32B__PARALLEL__MAC_1ga708d857b175929adb849e6c7318bec61';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMXDA32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '15011';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMXDA32 (Signed Crossed Multiply Two Words and Add)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (RV64 Only)

<strong>Syntax</strong>:\n
@code
KMDA32 Rd, Rs1, Rs2
KMXDA32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 32-bit multiplications from the 32-bit element of two registers; and then
adds the two 64-bit results together. The addition result may be saturated.
* KMDA32: top*top + bottom*bottom
* KMXDA32: top*bottom + bottom*top

<strong>Description</strong>:\n
For the <tt>KMDA32</tt> instruction, it multiplies the bottom 32-bit element of Rs1 with the bottom 32-bit
element of Rs2 and then adds the result to the result of multiplying the top 32-bit element of Rs1
with the top 32-bit element of Rs2.
For the <tt>KMXDA32</tt> instruction, it multiplies the bottom 32-bit element of Rs1 with the top 32-bit
element of Rs2 and then adds the result to the result of multiplying the top 32-bit element of Rs1
with the bottom 32-bit element of Rs2.
The addition result is checked for saturation. If saturation happens, the result is saturated to 2^63-1.
The final result is written to Rd. The 32-bit contents are treated as signed integers.

<strong>Operations</strong>:\n
@code
if ((Rs1 != 0x8000000080000000) or (Rs2 != 0x8000000080000000)) {
  Rd = (Rs1.W[1] * Rs2.W[1]) + (Rs1.W[0] * Rs2.W[0]); // KMDA32
  Rd = (Rs1.W[1] * Rs2.W[0]) + (Rs1.W[0] * Rs2.W[1]); // KMXDA32
} else {
  Rd = 0x7fffffffffffffff;
  OV = 1;
}
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__32B__PARALLEL__MAC_1ga03f7197d2d11120ff89858efb9a15781';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMADS32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '15076';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMADS32 (Saturating Signed Multiply Two Words & Subtract & Add)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (RV64 Only)

<strong>Syntax</strong>:\n
@code
KMADS32 Rd, Rs1, Rs2
KMADRS32 Rd, Rs1, Rs2
KMAXDS32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 32-bit multiplications from 32-bit elements in two registers; and then
perform a subtraction operation between the two 64-bit results. Then add the subtraction result to
64-bit data in a third register. The addition result may be saturated.
* KMADS32: rd + (top*top - bottom*bottom)
* KMADRS32: rd + (bottom*bottom - top*top)
* KMAXDS32: rd + (top*bottom - bottom*top)

<strong>Description</strong>:\n
For the <tt>KMADS32</tt> instruction, it multiplies the bottom 32-bit element in Rs1 with the bottom 32-bit
element in Rs2 and then subtracts the result from the result of multiplying the top 32-bit element in
Rs1 with the top 32-bit element in Rs2.
For the <tt>KMADRS32</tt> instruction, it multiplies the top 32-bit element in Rs1 with the top 32-bit
element in Rs2 and then subtracts the result from the result of multiplying the bottom 32-bit
element in Rs1 with the bottom 32-bit element in Rs2.
For the <tt>KMAXDS32</tt> instruction, it multiplies the bottom 32-bit element in Rs1 with the top 32-bit
element in Rs2 and then subtracts the result from the result of multiplying the top 32-bit element in
Rs1 with the bottom 32-bit element in Rs2.
The subtraction result is then added to the content of 64-bit data in Rd. If the addition result is
beyond the Q63 number range (-2^63 <= Q63 <= 2^63-1), it is saturated to the range and the OV bit is set to
1. The 64-bit result after saturation is written to Rd. The 32-bit contents of Rs1 and Rs2 are treated
as signed integers.

<strong>Operations</strong>:\n
@code
res = Rd + (Rs1.W[1] * Rs2.W[1]) - (Rs1.W[0] * Rs2.W[0]); // KMADS32
res = Rd + (Rs1.W[0] * Rs2.W[0]) - (Rs1.W[1] * Rs2.W[1]); // KMADRS32
res = Rd + (Rs1.W[1] * Rs2.W[0]) - (Rs1.W[0] * Rs2.W[1]); // KMAXDS32
if (res > (2^63)-1) {
  res = (2^63)-1;
  OV = 1;
} else if (res < -2^63) {
  res = -2^63;
  OV = 1;
}
Rd = res;
@endcode

\param [in]  t    long type of value stored in t
\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__32B__PARALLEL__MAC_1ga0e378131d68d54303123bd67263ac732';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMADRS32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '15140';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMADRS32 (Saturating Signed Multiply Two Words & Reverse Subtract & Add)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (RV64 Only)

<strong>Syntax</strong>:\n
@code
KMADS32 Rd, Rs1, Rs2
KMADRS32 Rd, Rs1, Rs2
KMAXDS32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 32-bit multiplications from 32-bit elements in two registers; and then
perform a subtraction operation between the two 64-bit results. Then add the subtraction result to
64-bit data in a third register. The addition result may be saturated.
* KMADS32: rd + (top*top - bottom*bottom)
* KMADRS32: rd + (bottom*bottom - top*top)
* KMAXDS32: rd + (top*bottom - bottom*top)

<strong>Description</strong>:\n
For the <tt>KMADS32</tt> instruction, it multiplies the bottom 32-bit element in Rs1 with the bottom 32-bit
element in Rs2 and then subtracts the result from the result of multiplying the top 32-bit element in
Rs1 with the top 32-bit element in Rs2.
For the <tt>KMADRS32</tt> instruction, it multiplies the top 32-bit element in Rs1 with the top 32-bit
element in Rs2 and then subtracts the result from the result of multiplying the bottom 32-bit
element in Rs1 with the bottom 32-bit element in Rs2.
For the <tt>KMAXDS32</tt> instruction, it multiplies the bottom 32-bit element in Rs1 with the top 32-bit
element in Rs2 and then subtracts the result from the result of multiplying the top 32-bit element in
Rs1 with the bottom 32-bit element in Rs2.
The subtraction result is then added to the content of 64-bit data in Rd. If the addition result is
beyond the Q63 number range (-2^63 <= Q63 <= 2^63-1), it is saturated to the range and the OV bit is set to
1. The 64-bit result after saturation is written to Rd. The 32-bit contents of Rs1 and Rs2 are treated
as signed integers.

<strong>Operations</strong>:\n
@code
res = Rd + (Rs1.W[1] * Rs2.W[1]) - (Rs1.W[0] * Rs2.W[0]); // KMADS32
res = Rd + (Rs1.W[0] * Rs2.W[0]) - (Rs1.W[1] * Rs2.W[1]); // KMADRS32
res = Rd + (Rs1.W[1] * Rs2.W[0]) - (Rs1.W[0] * Rs2.W[1]); // KMAXDS32
if (res > (2^63)-1) {
  res = (2^63)-1;
  OV = 1;
} else if (res < -2^63) {
  res = -2^63;
  OV = 1;
}
Rd = res;
@endcode

\param [in]  t    long type of value stored in t
\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__32B__PARALLEL__MAC_1ga9e65096c66f1b9d4137ffa769c8fd0f8';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMAXDS32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '15204';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMAXDS32 (Saturating Signed Crossed Multiply Two Words & Subtract & Add)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (RV64 Only)

<strong>Syntax</strong>:\n
@code
KMADS32 Rd, Rs1, Rs2
KMADRS32 Rd, Rs1, Rs2
KMAXDS32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 32-bit multiplications from 32-bit elements in two registers; and then
perform a subtraction operation between the two 64-bit results. Then add the subtraction result to
64-bit data in a third register. The addition result may be saturated.
* KMADS32: rd + (top*top - bottom*bottom)
* KMADRS32: rd + (bottom*bottom - top*top)
* KMAXDS32: rd + (top*bottom - bottom*top)

<strong>Description</strong>:\n
For the <tt>KMADS32</tt> instruction, it multiplies the bottom 32-bit element in Rs1 with the bottom 32-bit
element in Rs2 and then subtracts the result from the result of multiplying the top 32-bit element in
Rs1 with the top 32-bit element in Rs2.
For the <tt>KMADRS32</tt> instruction, it multiplies the top 32-bit element in Rs1 with the top 32-bit
element in Rs2 and then subtracts the result from the result of multiplying the bottom 32-bit
element in Rs1 with the bottom 32-bit element in Rs2.
For the <tt>KMAXDS32</tt> instruction, it multiplies the bottom 32-bit element in Rs1 with the top 32-bit
element in Rs2 and then subtracts the result from the result of multiplying the top 32-bit element in
Rs1 with the bottom 32-bit element in Rs2.
The subtraction result is then added to the content of 64-bit data in Rd. If the addition result is
beyond the Q63 number range (-2^63 <= Q63 <= 2^63-1), it is saturated to the range and the OV bit is set to
1. The 64-bit result after saturation is written to Rd. The 32-bit contents of Rs1 and Rs2 are treated
as signed integers.

<strong>Operations</strong>:\n
@code
res = Rd + (Rs1.W[1] * Rs2.W[1]) - (Rs1.W[0] * Rs2.W[0]); // KMADS32
res = Rd + (Rs1.W[0] * Rs2.W[0]) - (Rs1.W[1] * Rs2.W[1]); // KMADRS32
res = Rd + (Rs1.W[1] * Rs2.W[0]) - (Rs1.W[0] * Rs2.W[1]); // KMAXDS32
if (res > (2^63)-1) {
  res = (2^63)-1;
  OV = 1;
} else if (res < -2^63) {
  res = -2^63;
  OV = 1;
}
Rd = res;
@endcode

\param [in]  t    long type of value stored in t
\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__32B__PARALLEL__MAC_1ga13d8c47ce9716d7ca5af629d0a81c0c7';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMSDA32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '15259';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMSDA32 (Saturating Signed Multiply Two Words & Add & Subtract)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (RV64 Only)

<strong>Syntax</strong>:\n
@code
KMSDA32 Rd, Rs1, Rs2
KMSXDA32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 32-bit multiplications from the 32-bit element of two registers; and then
subtracts the two 64-bit results from a third register. The subtraction result may be saturated.
* KMSDA: rd - top*top - bottom*bottom
* KMSXDA: rd - top*bottom - bottom*top

<strong>Description</strong>:\n
For the <tt>KMSDA32</tt> instruction, it multiplies the bottom 32-bit element of Rs1 with the bottom 32-bit
element of Rs2 and multiplies the top 32-bit element of Rs1 with the top 32-bit element of Rs2.
For the <tt>KMSXDA32</tt> instruction, it multiplies the bottom 32-bit element of Rs1 with the top 32-bit
element of Rs2 and multiplies the top 32-bit element of Rs1 with the bottom 32-bit element of Rs2.
The two 64-bit multiplication results are then subtracted from the content of Rd. If the subtraction
result is beyond the Q63 number range (-2^63 <= Q63 <= 2^63-1), it is saturated to the range and the OV bit
is set to 1. The result after saturation is written to Rd. The 32-bit contents are treated as signed
integers.

<strong>Operations</strong>:\n
@code
res = Rd - (Rs1.W[1] * Rs2.W[1]) - (Rs1.W[0] * Rs2.W[0]); // KMSDA32
res = Rd - (Rs1.W[1] * Rs2.W[0]) - (Rs1.W[0] * Rs2.W[1]); // KMSXDA32
if (res > (2^63)-1) {
  res = (2^63)-1;
  OV = 1;
} else if (res < -2^63) {
  res = -2^63;
  OV = 1;
}
Rd = res;
@endcode

\param [in]  t    long type of value stored in t
\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__32B__PARALLEL__MAC_1gaf92365cb63eca2c56201f0a0c054664b';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KMSXDA32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 't';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '15314';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KMSXDA32 (Saturating Signed Crossed Multiply Two Words & Add & Subtract)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (RV64 Only)

<strong>Syntax</strong>:\n
@code
KMSDA32 Rd, Rs1, Rs2
KMSXDA32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 32-bit multiplications from the 32-bit element of two registers; and then
subtracts the two 64-bit results from a third register. The subtraction result may be saturated.
* KMSDA: rd - top*top - bottom*bottom
* KMSXDA: rd - top*bottom - bottom*top

<strong>Description</strong>:\n
For the <tt>KMSDA32</tt> instruction, it multiplies the bottom 32-bit element of Rs1 with the bottom 32-bit
element of Rs2 and multiplies the top 32-bit element of Rs1 with the top 32-bit element of Rs2.
For the <tt>KMSXDA32</tt> instruction, it multiplies the bottom 32-bit element of Rs1 with the top 32-bit
element of Rs2 and multiplies the top 32-bit element of Rs1 with the bottom 32-bit element of Rs2.
The two 64-bit multiplication results are then subtracted from the content of Rd. If the subtraction
result is beyond the Q63 number range (-2^63 <= Q63 <= 2^63-1), it is saturated to the range and the OV bit
is set to 1. The result after saturation is written to Rd. The 32-bit contents are treated as signed
integers.

<strong>Operations</strong>:\n
@code
res = Rd - (Rs1.W[1] * Rs2.W[1]) - (Rs1.W[0] * Rs2.W[0]); // KMSDA32
res = Rd - (Rs1.W[1] * Rs2.W[0]) - (Rs1.W[0] * Rs2.W[1]); // KMSXDA32
if (res > (2^63)-1) {
  res = (2^63)-1;
  OV = 1;
} else if (res < -2^63) {
  res = -2^63;
  OV = 1;
}
Rd = res;
@endcode

\param [in]  t    long type of value stored in t
\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__SHIFT_1ga4f3e9c4c72aaa40f0fb4b143933178ce';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KSLL32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '15365';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KSLL32 (SIMD 32-bit Saturating Shift Left Logical)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code
KSLL32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit elements logical left shift operations with saturation simultaneously. The shift
amount is a variable from a GPR.

<strong>Description</strong>:\n
The 32-bit data elements in Rs1 are left-shifted logically. The shifted out bits are filled
with zero and the shift amount is specified by the low-order 5-bits of the value in the Rs2 register.
Any shifted value greater than 2^31-1 is saturated to 2^31-1. Any shifted value smaller than -2^31 is
saturated to -2^31. And the saturated results are written to Rd. If any saturation is performed, set OV
bit to 1.

<strong>Operations</strong>:\n
@code
sa = Rs2[4:0];
if (sa != 0) {
  res[(31+sa):0] = Rs1.W[x] << sa;
  if (res > (2^31)-1) {
    res = 0x7fffffff; OV = 1;
  } else if (res < -2^31) {
    res = 0x80000000; OV = 1;
  }
  Rd.W[x] = res[31:0];
} else {
  Rd = Rs1;
}
for RV64: x=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__SHIFT_1ga44edf9b602fc9cdd1d679dccf979ee92';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KSLLI32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '15416';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KSLLI32 (SIMD 32-bit Saturating Shift Left Logical Immediate)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code
KSLLI32 Rd, Rs1, imm5u
@endcode

<strong>Purpose</strong>:\n
Do 32-bit elements logical left shift operations with saturation simultaneously. The shift
amount is an immediate value.

<strong>Description</strong>:\n
The 32-bit data elements in Rs1 are left-shifted logically. The shifted out bits are filled
with zero and the shift amount is specified by the imm5u constant. Any shifted value greater than
2^31-1 is saturated to 2^31-1. Any shifted value smaller than -2^31 is saturated to -2^31. And the saturated
results are written to Rd. If any saturation is performed, set OV bit to 1.

<strong>Operations</strong>:\n
@code
sa = imm5u[4:0];
if (sa != 0) {
  res[(31+sa):0] = Rs1.W[x] << sa;
  if (res > (2^31)-1) {
    res = 0x7fffffff; OV = 1;
  } else if (res < -2^31) {
    res = 0x80000000; OV = 1;
  }
  Rd.W[x] = res[31:0];
} else {
  Rd = Rs1;
}
for RV64: x=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__SHIFT_1gaac9d8fddae94b97c09f59f93f01b81c9';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KSLRA32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '15482';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KSLRA32 (SIMD 32-bit Shift Left Logical with Saturation or Shift Right Arithmetic)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code
KSLRA32 Rd, Rs1, Rs2
KSLRA32.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit elements logical left (positive) or arithmetic right (negative) shift operation with
Q31 saturation for the left shift. The <tt>.u</tt> form performs additional rounding up operations for the
right shift.

<strong>Description</strong>:\n
The 32-bit data elements of Rs1 are left-shifted logically or right-shifted arithmetically
based on the value of Rs2[5:0]. Rs2[5:0] is in the signed range of [-25, 25-1]. A positive Rs2[5:0] means
logical left shift and a negative Rs2[5:0] means arithmetic right shift. The shift amount is the
absolute value of Rs2[5:0]. However, the behavior of <tt>Rs2[5:0]==-25 (0x20)</tt> is defined to be
equivalent to the behavior of <tt>Rs2[5:0]==-(25-1) (0x21)</tt>.
The left-shifted results are saturated to the 32-bit signed integer range of [-2^31, 2^31-1]. For the <tt>.u</tt>
form of the instruction, the right-shifted results are added a 1 to the most significant discarded bit
position for rounding effect. After the shift, saturation, or rounding, the final results are written to
Rd. If any saturation happens, this instruction sets the OV flag. The value of Rs2[31:6] will not affect
this instruction.

<strong>Operations</strong>:\n
@code
if (Rs2[5:0] < 0) {
  sa = -Rs2[5:0];
  sa = (sa == 32)? 31 : sa;
  if (`.u` form) {
    res[31:-1] = SE33(Rs1.W[x][31:sa-1]) + 1;
    Rd.W[x] = res[31:0];
  } else {
    Rd.W[x] = SE32(Rs1.W[x][31:sa]);
  }
} else {
  sa = Rs2[4:0];
  res[(31+sa):0] = Rs1.W[x] <<(logic) sa;
  if (res > (2^31)-1) {
    res[31:0] = 0x7fffffff; OV = 1;
  } else if (res < -2^31) {
    res[31:0] = 0x80000000; OV = 1;
  }
  Rd.W[x] = res[31:0];
}
for RV64: x=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__SHIFT_1gaf432cd440b93dcd519459b4107691173';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KSLRA32_U';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '15548';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KSLRA32.u (SIMD 32-bit Shift Left Logical with Saturation or Rounding Shift Right Arithmetic)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code
KSLRA32 Rd, Rs1, Rs2
KSLRA32.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit elements logical left (positive) or arithmetic right (negative) shift operation with
Q31 saturation for the left shift. The <tt>.u</tt> form performs additional rounding up operations for the
right shift.

<strong>Description</strong>:\n
The 32-bit data elements of Rs1 are left-shifted logically or right-shifted arithmetically
based on the value of Rs2[5:0]. Rs2[5:0] is in the signed range of [-25, 25-1]. A positive Rs2[5:0] means
logical left shift and a negative Rs2[5:0] means arithmetic right shift. The shift amount is the
absolute value of Rs2[5:0]. However, the behavior of <tt>Rs2[5:0]==-25 (0x20)</tt> is defined to be
equivalent to the behavior of <tt>Rs2[5:0]==-(25-1) (0x21)</tt>.
The left-shifted results are saturated to the 32-bit signed integer range of [-2^31, 2^31-1]. For the <tt>.u</tt>
form of the instruction, the right-shifted results are added a 1 to the most significant discarded bit
position for rounding effect. After the shift, saturation, or rounding, the final results are written to
Rd. If any saturation happens, this instruction sets the OV flag. The value of Rs2[31:6] will not affect
this instruction.

<strong>Operations</strong>:\n
@code
if (Rs2[5:0] < 0) {
  sa = -Rs2[5:0];
  sa = (sa == 32)? 31 : sa;
  if (`.u` form) {
    res[31:-1] = SE33(Rs1.W[x][31:sa-1]) + 1;
    Rd.W[x] = res[31:0];
  } else {
    Rd.W[x] = SE32(Rs1.W[x][31:sa]);
  }
} else {
  sa = Rs2[4:0];
  res[(31+sa):0] = Rs1.W[x] <<(logic) sa;
  if (res > (2^31)-1) {
    res[31:0] = 0x7fffffff; OV = 1;
  } else if (res < -2^31) {
    res[31:0] = 0x80000000; OV = 1;
  }
  Rd.W[x] = res[31:0];
}
for RV64: x=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__ADDSUB_1gabfa35c8c4da10b658fc4f9f295945c40';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KSTAS32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '15600';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KSTAS32 (SIMD 32-bit Signed Saturating Straight Addition & Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code
KSTAS32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit signed integer element saturating addition and 32-bit signed integer element
saturating subtraction in a 64-bit chunk simultaneously. Operands are from corresponding 32-bit
elements.

<strong>Description</strong>:\n
This instruction adds the 32-bit integer element in [63:32] of Rs1 with the 32-bit
integer element in [63:32] of Rs2; at the same time, it subtracts the 32-bit integer element in [31:0] of
Rs2 from the 32-bit integer element in [31:0] of Rs1. If any of the results are beyond the Q31 number
range (-2^31 <= Q31 <= 2^31-1), they are saturated to the range and the OV bit is set to 1. The saturated
results are written to [63:32] of Rd for addition and [31:0] of Rd for subtraction.

<strong>Operations</strong>:\n
@code
res[1] = Rs1.W[1] + Rs2.W[1];
res[0] = Rs1.W[0] - Rs2.W[0];
if (res[x] > (2^31)-1) {
  res[x] = (2^31)-1;
  OV = 1;
} else if (res < -2^31) {
  res[x] = -2^31;
  OV = 1;
}
Rd.W[1] = res[1];
Rd.W[0] = res[0];
for RV64, x=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__ADDSUB_1gafcc677fb6b75c7ae82abbec436bf5ae1';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KSTSA32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '15651';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KSTSA32 (SIMD 32-bit Signed Saturating Straight Subtraction & Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIM (RV64 Only)

<strong>Syntax</strong>:\n
@code
KSTSA32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit signed integer element saturating subtraction and 32-bit signed integer element
saturating addition in a 64-bit chunk simultaneously. Operands are from corresponding 32-bit
elements.
*Description: *
This instruction subtracts the 32-bit integer element in [63:32] of Rs2 from the 32-bit integer
element in [63:32] of Rs1; at the same time, it adds the 32-bit integer element in [31:0] of Rs1 with
the 32-bit integer element in [31:0] of Rs2. If any of the results are beyond the Q31 number range (-
231 <= Q31 <= 2^31-1), they are saturated to the range and the OV bit is set to 1. The saturated results are
written to [63:32] of Rd for subtraction and [31:0] of Rd for addition.

<strong>Operations</strong>:\n
@code
res[1] = Rs1.W[1] - Rs2.W[1];
res[0] = Rs1.W[0] + Rs2.W[0];
if (res[x] > (2^31)-1) {
  res[x] = (2^31)-1;
  OV = 1;
} else if (res < -2^31) {
  res[x] = -2^31;
  OV = 1;
}
Rd.W[1] = res[1];
Rd.W[0] = res[0];
for RV64, x=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__ADDSUB_1ga2c48127c84b6c0ec441cab1d048d2082';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_KSUB32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '15698';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
KSUB32 (SIMD 32-bit Signed Saturating Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code
KSUB32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit signed integer elements saturating subtractions simultaneously.

<strong>Description</strong>:\n
This instruction subtracts the 32-bit signed integer elements in Rs2 from the 32-bit
signed integer elements in Rs1. If any of the results are beyond the Q31 number range (-2^31 <= Q31 <=
2^31-1), they are saturated to the range and the OV bit is set to 1. The saturated results are written to
Rd.

<strong>Operations</strong>:\n
@code
res[x] = Rs1.W[x] - Rs2.W[x];
if (res[x] > (2^31)-1) {
  res[x] = (2^31)-1;
  OV = 1;
} else if (res[x] < -2^31) {
  res[x] = -2^31;
  OV = 1;
}
Rd.W[x] = res[x];
for RV64: x=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__32B__PACK_1ga56dff3ebca8b83c5b6fafc649a564fe9';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_PKBB32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '15746';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
PKBB32 (Pack Two 32-bit Data from Both Bottom Half)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (RV64 Only)

<strong>Syntax</strong>:\n
@code
PKBB32 Rd, Rs1, Rs2
PKBT32 Rd, Rs1, Rs2
PKTT32 Rd, Rs1, Rs2
PKTB32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Pack 32-bit data from 64-bit chunks in two registers.
* PKBB32: bottom.bottom
* PKBT32: bottom.top
* PKTT32: top.top
* PKTB32: top.bottom

<strong>Description</strong>:\n
(PKBB32) moves Rs1.W[0] to Rd.W[1] and moves Rs2.W[0] to Rd.W[0].
(PKBT32) moves Rs1.W[0] to Rd.W[1] and moves Rs2.W[1] to Rd.W[0].
(PKTT32) moves Rs1.W[1] to Rd.W[1] and moves Rs2.W[1] to Rd.W[0].
(PKTB32) moves Rs1.W[1] to Rd.W[1] and moves Rs2.W[0] to Rd.W[0].

<strong>Operations</strong>:\n
@code
Rd = CONCAT(Rs1.W[_*0*_], Rs2.W[_*0*_]); // PKBB32
Rd = CONCAT(Rs1.W[_*0*_], Rs2.W[_*1*_]); // PKBT32
Rd = CONCAT(Rs1.W[_*1*_], Rs2.W[_*1*_]); // PKTT32
Rd = CONCAT(Rs1.W[_*1*_], Rs2.W[_*0*_]); // PKTB32
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__32B__PACK_1ga469c59f0918b6427ce1e84834969f975';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_PKBT32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '15794';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
PKBT32 (Pack Two 32-bit Data from Bottom and Top Half)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (RV64 Only)

<strong>Syntax</strong>:\n
@code
PKBB32 Rd, Rs1, Rs2
PKBT32 Rd, Rs1, Rs2
PKTT32 Rd, Rs1, Rs2
PKTB32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Pack 32-bit data from 64-bit chunks in two registers.
* PKBB32: bottom.bottom
* PKBT32: bottom.top
* PKTT32: top.top
* PKTB32: top.bottom

<strong>Description</strong>:\n
(PKBB32) moves Rs1.W[0] to Rd.W[1] and moves Rs2.W[0] to Rd.W[0].
(PKBT32) moves Rs1.W[0] to Rd.W[1] and moves Rs2.W[1] to Rd.W[0].
(PKTT32) moves Rs1.W[1] to Rd.W[1] and moves Rs2.W[1] to Rd.W[0].
(PKTB32) moves Rs1.W[1] to Rd.W[1] and moves Rs2.W[0] to Rd.W[0].

<strong>Operations</strong>:\n
@code
Rd = CONCAT(Rs1.W[_*0*_], Rs2.W[_*0*_]); // PKBB32
Rd = CONCAT(Rs1.W[_*0*_], Rs2.W[_*1*_]); // PKBT32
Rd = CONCAT(Rs1.W[_*1*_], Rs2.W[_*1*_]); // PKTT32
Rd = CONCAT(Rs1.W[_*1*_], Rs2.W[_*0*_]); // PKTB32
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__32B__PACK_1ga89607536fe1c8fca11131ea66b909507';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_PKTT32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '15842';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
PKTT32 (Pack Two 32-bit Data from Both Top Half)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (RV64 Only)

<strong>Syntax</strong>:\n
@code
PKBB32 Rd, Rs1, Rs2
PKBT32 Rd, Rs1, Rs2
PKTT32 Rd, Rs1, Rs2
PKTB32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Pack 32-bit data from 64-bit chunks in two registers.
* PKBB32: bottom.bottom
* PKBT32: bottom.top
* PKTT32: top.top
* PKTB32: top.bottom

<strong>Description</strong>:\n
(PKBB32) moves Rs1.W[0] to Rd.W[1] and moves Rs2.W[0] to Rd.W[0].
(PKBT32) moves Rs1.W[0] to Rd.W[1] and moves Rs2.W[1] to Rd.W[0].
(PKTT32) moves Rs1.W[1] to Rd.W[1] and moves Rs2.W[1] to Rd.W[0].
(PKTB32) moves Rs1.W[1] to Rd.W[1] and moves Rs2.W[0] to Rd.W[0].

<strong>Operations</strong>:\n
@code
Rd = CONCAT(Rs1.W[_*0*_], Rs2.W[_*0*_]); // PKBB32
Rd = CONCAT(Rs1.W[_*0*_], Rs2.W[_*1*_]); // PKBT32
Rd = CONCAT(Rs1.W[_*1*_], Rs2.W[_*1*_]); // PKTT32
Rd = CONCAT(Rs1.W[_*1*_], Rs2.W[_*0*_]); // PKTB32
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__32B__PACK_1gaf8183f498b9d4e3f7cc20e3452f6d194';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_PKTB32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '15890';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
PKTB32 (Pack Two 32-bit Data from Top and Bottom Half)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (RV64 Only)

<strong>Syntax</strong>:\n
@code
PKBB32 Rd, Rs1, Rs2
PKBT32 Rd, Rs1, Rs2
PKTT32 Rd, Rs1, Rs2
PKTB32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Pack 32-bit data from 64-bit chunks in two registers.
* PKBB32: bottom.bottom
* PKBT32: bottom.top
* PKTT32: top.top
* PKTB32: top.bottom

<strong>Description</strong>:\n
(PKBB32) moves Rs1.W[0] to Rd.W[1] and moves Rs2.W[0] to Rd.W[0].
(PKBT32) moves Rs1.W[0] to Rd.W[1] and moves Rs2.W[1] to Rd.W[0].
(PKTT32) moves Rs1.W[1] to Rd.W[1] and moves Rs2.W[1] to Rd.W[0].
(PKTB32) moves Rs1.W[1] to Rd.W[1] and moves Rs2.W[0] to Rd.W[0].

<strong>Operations</strong>:\n
@code
Rd = CONCAT(Rs1.W[_*0*_], Rs2.W[_*0*_]); // PKBB32
Rd = CONCAT(Rs1.W[_*0*_], Rs2.W[_*1*_]); // PKBT32
Rd = CONCAT(Rs1.W[_*1*_], Rs2.W[_*1*_]); // PKTT32
Rd = CONCAT(Rs1.W[_*1*_], Rs2.W[_*0*_]); // PKTB32
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__ADDSUB_1gae5b48cbde9950674461afbfb0037943c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_RADD32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '15936';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RADD32 (SIMD 32-bit Signed Halving Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code
RADD32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit signed integer element additions simultaneously. The results are halved to avoid
overflow or saturation.

<strong>Description</strong>:\n
This instruction adds the 32-bit signed integer elements in Rs1 with the 32-bit signed
integer elements in Rs2. The results are first arithmetically right-shifted by 1 bit and then written to
Rd.

<strong>Examples</strong>:\n
@code
* Rs1 = 0x7FFFFFFF, Rs2 = 0x7FFFFFFF Rd = 0x7FFFFFFF
* Rs1 = 0x80000000, Rs2 = 0x80000000 Rd = 0x80000000
* Rs1 = 0x40000000, Rs2 = 0x80000000 Rd = 0xE0000000
@endcode

<strong>Operations</strong>:\n
@code
Rd.W[x] = (Rs1.W[x] + Rs2.W[x]) s>> 1;
for RV64: x=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__ADDSUB_1ga2ec462dcdc30cdad71726efe43ee34b0';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_RCRAS32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '15983';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RCRAS32 (SIMD 32-bit Signed Halving Cross Addition & Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code
RCRAS32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit signed integer element addition and 32-bit signed integer element subtraction in
a 64-bit chunk simultaneously. Operands are from crossed 32-bit elements. The results are halved to
avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction adds the 32-bit signed integer element in [63:32] of Rs1 with the 32-bit
signed integer element in [31:0] of Rs2, and subtracts the 32-bit signed integer element in [63:32] of
Rs2 from the 32-bit signed integer element in [31:0] of Rs1. The element results are first
arithmetically right-shifted by 1 bit and then written to [63:32] of Rd for addition and [31:0] of Rd
for subtraction.

<strong>Examples</strong>:\n
@code
Please see `RADD32` and `RSUB32` instructions.
@endcode

<strong>Operations</strong>:\n
@code
Rd.W[1] = (Rs1.W[1] + Rs2.W[0]) s>> 1;
Rd.W[0] = (Rs1.W[0] - Rs2.W[1]) s>> 1;
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__ADDSUB_1ga33061b2476bd16965e249987b8ccf74b';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_RCRSA32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '16030';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RCRSA32 (SIMD 32-bit Signed Halving Cross Subtraction & Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code
RCRSA32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit signed integer element subtraction and 32-bit signed integer element addition in
a 64-bit chunk simultaneously. Operands are from crossed 32-bit elements. The results are halved to
avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction subtracts the 32-bit signed integer element in [31:0] of Rs2 from the
32-bit signed integer element in [63:32] of Rs1, and adds the 32-bit signed element integer in [31:0]
of Rs1 with the 32-bit signed integer element in [63:32] of Rs2. The two results are first
arithmetically right-shifted by 1 bit and then written to [63:32] of Rd for subtraction and [31:0] of
Rd for addition.

<strong>Examples</strong>:\n
@code
Please see `RADD32` and `RSUB32` instructions.
@endcode

<strong>Operations</strong>:\n
@code
Rd.W[1] = (Rs1.W[1] - Rs2.W[0]) s>> 1;
Rd.W[0] = (Rs1.W[0] + Rs2.W[1]) s>> 1;
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__ADDSUB_1gaced91aec5bed74368de805e174999475';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_RSTAS32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '16077';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RSTAS32 (SIMD 32-bit Signed Halving Straight Addition & Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code
RSTAS32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit signed integer element addition and 32-bit signed integer element subtraction in
a 64-bit chunk simultaneously. Operands are from corresponding 32-bit elements. The results are
halved to avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction adds the 32-bit signed integer element in [63:32] of Rs1 with the 32-bit
signed integer element in [63:32] of Rs2, and subtracts the 32-bit signed integer element in [31:0] of
Rs2 from the 32-bit signed integer element in [31:0] of Rs1. The element results are first
arithmetically right-shifted by 1 bit and then written to [63:32] of Rd for addition and [31:0] of Rd
for subtraction.

<strong>Examples</strong>:\n
@code
Please see `RADD32` and `RSUB32` instructions.
@endcode

<strong>Operations</strong>:\n
@code
Rd.W[1] = (Rs1.W[1] + Rs2.W[1]) s>> 1;
Rd.W[0] = (Rs1.W[0] - Rs2.W[0]) s>> 1;
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__ADDSUB_1ga93aba0996a17d19ad3cc1e67288b3270';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_RSTSA32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '16123';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RSTSA32 (SIMD 32-bit Signed Halving Straight Subtraction & Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code
RSTSA32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit signed integer element subtraction and 32-bit signed integer element addition in
a 64-bit chunk simultaneously. Operands are from corresponding 32-bit elements. The results are
halved to avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction subtracts the 32-bit signed integer element in [63:32] of Rs2 from the
32-bit signed integer element in [63:32] of Rs1, and adds the 32-bit signed element integer in [31:0]
of Rs1 with the 32-bit signed integer element in [31:0] of Rs2. The two results are first arithmetically
right-shifted by 1 bit and then written to [63:32] of Rd for subtraction and [31:0] of Rd for addition.

<strong>Examples</strong>:\n
@code
Please see `RADD32` and `RSUB32` instructions.
@endcode

<strong>Operations</strong>:\n
@code
Rd.W[1] = (Rs1.W[1] - Rs2.W[1]) s>> 1;
Rd.W[0] = (Rs1.W[0] + Rs2.W[0]) s>> 1;
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__ADDSUB_1ga816e85e762afdbbbf6073ccdd84dab9d';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_RSUB32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '16169';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
RSUB32 (SIMD 32-bit Signed Halving Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code
RSUB32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit signed integer element subtractions simultaneously. The results are halved to
avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction subtracts the 32-bit signed integer elements in Rs2 from the 32-bit
signed integer elements in Rs1. The results are first arithmetically right-shifted by 1 bit and then
written to Rd.

<strong>Examples</strong>:\n
@code
* Ra = 0x7FFFFFFF, Rb = 0x80000000 Rt = 0x7FFFFFFF
* Ra = 0x80000000, Rb = 0x7FFFFFFF Rt = 0x80000000
* Ra = 0x80000000, Rb = 0x40000000 Rt = 0xA0000000
@endcode

<strong>Operations</strong>:\n
@code
Rd.W[x] = (Rs1.W[x] - Rs2.W[x]) s>> 1;
for RV64: x=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__SHIFT_1gada1903a81ca0df7a3c28c169a85a1dab';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SLL32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '16209';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SLL32 (SIMD 32-bit Shift Left Logical)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code
SLL32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit elements logical left shift operations simultaneously. The shift amount is a
variable from a GPR.

<strong>Description</strong>:\n
The 32-bit elements in Rs1 are left-shifted logically. And the results are written to Rd.
The shifted out bits are filled with zero and the shift amount is specified by the low-order 5-bits of
the value in the Rs2 register.

<strong>Operations</strong>:\n
@code
sa = Rs2[4:0];
Rd.W[x] = Rs1.W[x] << sa;
for RV64: x=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__SHIFT_1ga989aaff6c47185a5239f55519b28e8bb';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SLLI32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '16248';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SLLI32 (SIMD 32-bit Shift Left Logical Immediate)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code
SLLI32 Rd, Rs1, imm5u[4:0]
@endcode

<strong>Purpose</strong>:\n
Do 32-bit element logical left shift operations simultaneously. The shift amount is an
immediate value.

<strong>Description</strong>:\n
The 32-bit elements in Rs1 are left-shifted logically. The shifted out bits are filled with
zero and the shift amount is specified by the imm5u[4:0] constant. And the results are written to Rd.

<strong>Operations</strong>:\n
@code
sa = imm5u[4:0];
Rd.W[x] = Rs1.W[x] << sa;
for RV64: x=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__MISC_1ga7ebc0969cd46664712766e7acd3cba73';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMAX32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '16286';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMAX32 (SIMD 32-bit Signed Maximum)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code
SMAX32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit signed integer elements finding maximum operations simultaneously.

<strong>Description</strong>:\n
This instruction compares the 32-bit signed integer elements in Rs1 with the 32-bit
signed integer elements in Rs2 and selects the numbers that is greater than the other one. The
selected results are written to Rd.

<strong>Operations</strong>:\n
@code
Rd.W[x] = (Rs1.W[x] > Rs2.W[x])? Rs1.W[x] : Rs2.W[x];
for RV64: x=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__32B__MULT_1ga67f3972b5510e84004471785925aa25b';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMBB32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '16335';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMBB32 (Signed Multiply Bottom Word & Bottom Word)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (RV64 Only)

<strong>Syntax</strong>:\n
@code
SMBB32 Rd, Rs1, Rs2
SMBT32 Rd, Rs1, Rs2
SMTT32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit element of a register with the signed 32-bit element of another
register and write the 64-bit result to a third register.
* SMBB32: bottom*bottom
* SMBT32: bottom*top
* SMTT32: top*top

<strong>Description</strong>:\n
For the <tt>SMBB32</tt> instruction, it multiplies the bottom 32-bit element of Rs1 with the bottom 32-bit
element of Rs2. It is actually an alias of <tt>MULSR64</tt> instruction.
For the <tt>SMBT32</tt> instruction, it multiplies the bottom 32-bit element of Rs1 with the top 32-bit
element of Rs2.
For the <tt>SMTT32</tt> instruction, it multiplies the top 32-bit element of Rs1 with the top 32-bit element
of Rs2.
The 64-bit multiplication result is written to Rd. The 32-bit contents of Rs1 and Rs2 are treated as
signed integers.

<strong>Operations</strong>:\n
@code
res = Rs1.W[0] * Rs2.W[0]; // SMBB32 res = Rs1.W[0] * Rs2.w[1]; // SMBT32 res = Rs1.W[1] * Rs2.W[1];
// SMTT32 Rd = res;
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__32B__MULT_1gaba92f1975a35bbd2d6dd3d4c684a0e88';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMBT32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '16384';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMBT32 (Signed Multiply Bottom Word & Top Word)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (RV64 Only)

<strong>Syntax</strong>:\n
@code
SMBB32 Rd, Rs1, Rs2
SMBT32 Rd, Rs1, Rs2
SMTT32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit element of a register with the signed 32-bit element of another
register and write the 64-bit result to a third register.
* SMBB32: bottom*bottom
* SMBT32: bottom*top
* SMTT32: top*top

<strong>Description</strong>:\n
For the <tt>SMBB32</tt> instruction, it multiplies the bottom 32-bit element of Rs1 with the bottom 32-bit
element of Rs2. It is actually an alias of <tt>MULSR64</tt> instruction.
For the <tt>SMBT32</tt> instruction, it multiplies the bottom 32-bit element of Rs1 with the top 32-bit
element of Rs2.
For the <tt>SMTT32</tt> instruction, it multiplies the top 32-bit element of Rs1 with the top 32-bit element
of Rs2.
The 64-bit multiplication result is written to Rd. The 32-bit contents of Rs1 and Rs2 are treated as
signed integers.

<strong>Operations</strong>:\n
@code
res = Rs1.W[0] * Rs2.W[0]; // SMBB32 res = Rs1.W[0] * Rs2.w[1]; // SMBT32 res = Rs1.W[1] * Rs2.W[1];
// SMTT32 Rd = res;
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__32B__MULT_1ga655719f1d3c7ef9ac168ef81838feaee';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMTT32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '16433';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMTT32 (Signed Multiply Top Word & Top Word)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (RV64 Only)

<strong>Syntax</strong>:\n
@code
SMBB32 Rd, Rs1, Rs2
SMBT32 Rd, Rs1, Rs2
SMTT32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Multiply the signed 32-bit element of a register with the signed 32-bit element of another
register and write the 64-bit result to a third register.
* SMBB32: bottom*bottom
* SMBT32: bottom*top
* SMTT32: top*top

<strong>Description</strong>:\n
For the <tt>SMBB32</tt> instruction, it multiplies the bottom 32-bit element of Rs1 with the bottom 32-bit
element of Rs2. It is actually an alias of <tt>MULSR64</tt> instruction.
For the <tt>SMBT32</tt> instruction, it multiplies the bottom 32-bit element of Rs1 with the top 32-bit
element of Rs2.
For the <tt>SMTT32</tt> instruction, it multiplies the top 32-bit element of Rs1 with the top 32-bit element
of Rs2.
The 64-bit multiplication result is written to Rd. The 32-bit contents of Rs1 and Rs2 are treated as
signed integers.

<strong>Operations</strong>:\n
@code
res = Rs1.W[0] * Rs2.W[0]; // SMBB32 res = Rs1.W[0] * Rs2.w[1]; // SMBT32 res = Rs1.W[1] * Rs2.W[1];
// SMTT32 Rd = res;
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__32B__PARALLEL__MAC_1ga10d42564124518365b51ba8fc999e42d';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMDS32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '16486';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMDS32 (Signed Multiply Two Words and Subtract)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (RV64 Only)

<strong>Syntax</strong>:\n
@code
SMDS32 Rd, Rs1, Rs2
SMDRS32 Rd, Rs1, Rs2
SMXDS32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 32-bit multiplications from the l 32-bit element of two registers; and then
perform a subtraction operation between the two 64-bit results.
* SMDS32: top*top - bottom*bottom
* SMDRS32: bottom*bottom - top*top
* SMXDS32: top*bottom - bottom*top

<strong>Description</strong>:\n
For the <tt>SMDS32</tt> instruction, it multiplies the bottom 32-bit element of Rs1 with the bottom 32-bit
element of Rs2 and then subtracts the result from the result of multiplying the top 32-bit element of
Rs1 with the top 32-bit element of Rs2.
For the <tt>SMDRS32</tt> instruction, it multiplies the top 32-bit element of Rs1 with the top 32-bit
element of Rs2 and then subtracts the result from the result of multiplying the bottom 32-bit
element of Rs1 with the bottom 32-bit element of Rs2.
For the <tt>SMXDS32</tt> instruction, it multiplies the bottom 32-bit element of Rs1 with the top 32-bit
element of Rs2 and then subtracts the result from the result of multiplying the top 32-bit element of
Rs1 with the bottom 32-bit element of Rs2.
The subtraction result is written to Rd. The 32-bit contents of Rs1 and Rs2 are treated as signed
integers.

<strong>Operations</strong>:\n
@code
Rt = (Rs1.W[1] * Rs2.W[1]) - (Rs1.W[0] * Rs2.W[0]); // SMDS32
Rt = (Rs1.W[0] * Rs2.W[0]) - (Rs1.W[1] * Rs2.W[1]); // SMDRS32
Rt = (Rs1.W[1] * Rs2.W[0]) - (Rs1.W[0] * Rs2.W[1]); // SMXDS32
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__32B__PARALLEL__MAC_1ga211678cfa93e9cc7155746a699a457ba';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMDRS32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '16539';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMDRS32 (Signed Multiply Two Words and Reverse Subtract)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (RV64 Only)

<strong>Syntax</strong>:\n
@code
SMDS32 Rd, Rs1, Rs2
SMDRS32 Rd, Rs1, Rs2
SMXDS32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 32-bit multiplications from the l 32-bit element of two registers; and then
perform a subtraction operation between the two 64-bit results.
* SMDS32: top*top - bottom*bottom
* SMDRS32: bottom*bottom - top*top
* SMXDS32: top*bottom - bottom*top

<strong>Description</strong>:\n
For the <tt>SMDS32</tt> instruction, it multiplies the bottom 32-bit element of Rs1 with the bottom 32-bit
element of Rs2 and then subtracts the result from the result of multiplying the top 32-bit element of
Rs1 with the top 32-bit element of Rs2.
For the <tt>SMDRS32</tt> instruction, it multiplies the top 32-bit element of Rs1 with the top 32-bit
element of Rs2 and then subtracts the result from the result of multiplying the bottom 32-bit
element of Rs1 with the bottom 32-bit element of Rs2.
For the <tt>SMXDS32</tt> instruction, it multiplies the bottom 32-bit element of Rs1 with the top 32-bit
element of Rs2 and then subtracts the result from the result of multiplying the top 32-bit element of
Rs1 with the bottom 32-bit element of Rs2.
The subtraction result is written to Rd. The 32-bit contents of Rs1 and Rs2 are treated as signed
integers.

<strong>Operations</strong>:\n
@code
Rt = (Rs1.W[1] * Rs2.W[1]) - (Rs1.W[0] * Rs2.W[0]); // SMDS32
Rt = (Rs1.W[0] * Rs2.W[0]) - (Rs1.W[1] * Rs2.W[1]); // SMDRS32
Rt = (Rs1.W[1] * Rs2.W[0]) - (Rs1.W[0] * Rs2.W[1]); // SMXDS32
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__32B__PARALLEL__MAC_1ga1f2c26b1da4fb4329ecde53421e18c78';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMXDS32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '16592';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMXDS32 (Signed Crossed Multiply Two Words and Subtract)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (RV64 Only)

<strong>Syntax</strong>:\n
@code
SMDS32 Rd, Rs1, Rs2
SMDRS32 Rd, Rs1, Rs2
SMXDS32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do two signed 32-bit multiplications from the l 32-bit element of two registers; and then
perform a subtraction operation between the two 64-bit results.
* SMDS32: top*top - bottom*bottom
* SMDRS32: bottom*bottom - top*top
* SMXDS32: top*bottom - bottom*top

<strong>Description</strong>:\n
For the <tt>SMDS32</tt> instruction, it multiplies the bottom 32-bit element of Rs1 with the bottom 32-bit
element of Rs2 and then subtracts the result from the result of multiplying the top 32-bit element of
Rs1 with the top 32-bit element of Rs2.
For the <tt>SMDRS32</tt> instruction, it multiplies the top 32-bit element of Rs1 with the top 32-bit
element of Rs2 and then subtracts the result from the result of multiplying the bottom 32-bit
element of Rs1 with the bottom 32-bit element of Rs2.
For the <tt>SMXDS32</tt> instruction, it multiplies the bottom 32-bit element of Rs1 with the top 32-bit
element of Rs2 and then subtracts the result from the result of multiplying the top 32-bit element of
Rs1 with the bottom 32-bit element of Rs2.
The subtraction result is written to Rd. The 32-bit contents of Rs1 and Rs2 are treated as signed
integers.

<strong>Operations</strong>:\n
@code
Rt = (Rs1.W[1] * Rs2.W[1]) - (Rs1.W[0] * Rs2.W[0]); // SMDS32
Rt = (Rs1.W[0] * Rs2.W[0]) - (Rs1.W[1] * Rs2.W[1]); // SMDRS32
Rt = (Rs1.W[1] * Rs2.W[0]) - (Rs1.W[0] * Rs2.W[1]); // SMXDS32
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__MISC_1gaeef74d8a0d235bffb4e1a05204d90494';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SMIN32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '16630';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SMIN32 (SIMD 32-bit Signed Minimum)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code
SMIN32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit signed integer elements finding minimum operations simultaneously.

<strong>Description</strong>:\n
This instruction compares the 32-bit signed integer elements in Rs1 with the 32-bit
signed integer elements in Rs2 and selects the numbers that is less than the other one. The selected
results are written to Rd.

<strong>Operations</strong>:\n
@code
Rd.W[x] = (Rs1.W[x] < Rs2.W[x])? Rs1.W[x] : Rs2.W[x];
for RV64: x=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__SHIFT_1ga0de6fada321c089b1d6eb655a5b5085d';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SRA32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '16683';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SRA32 (SIMD 32-bit Shift Right Arithmetic)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code
SRA32 Rd, Rs1, Rs2
SRA32.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit element arithmetic right shift operations simultaneously. The shift amount is a
variable from a GPR. The <tt>.u</tt> form performs additional rounding up operations on the shifted
results.

<strong>Description</strong>:\n
The 32-bit data elements in Rs1 are right-shifted arithmetically, that is, the shifted out
bits are filled with the sign-bit of the data elements. The shift amount is specified by the low-order
5-bits of the value in the Rs2 register. For the rounding operation of the <tt>.u</tt> form, a value of 1 is
added to the most significant discarded bit of each 32-bit data element to calculate the final results.
And the results are written to Rd.

<strong>Operations</strong>:\n
@code
sa = Rs2[4:0];
if (sa > 0) {
  if (`.u` form) { // SRA32.u
    res[31:-1] = SE33(Rs1.W[x][31:sa-1]) + 1;
    Rd.W[x] = res[31:0];
  else { // SRA32
    Rd.W[x] = SE32(Rs1.W[x][31:sa])
  }
} else {
  Rd = Rs1;
}
for RV64: x=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__SHIFT_1gaedf16a534575de0f435869923c6b536a';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SRA32_U';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '16736';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SRA32.u (SIMD 32-bit Rounding Shift Right Arithmetic)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code
SRA32 Rd, Rs1, Rs2
SRA32.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit element arithmetic right shift operations simultaneously. The shift amount is a
variable from a GPR. The <tt>.u</tt> form performs additional rounding up operations on the shifted
results.

<strong>Description</strong>:\n
The 32-bit data elements in Rs1 are right-shifted arithmetically, that is, the shifted out
bits are filled with the sign-bit of the data elements. The shift amount is specified by the low-order
5-bits of the value in the Rs2 register. For the rounding operation of the <tt>.u</tt> form, a value of 1 is
added to the most significant discarded bit of each 32-bit data element to calculate the final results.
And the results are written to Rd.

<strong>Operations</strong>:\n
@code
sa = Rs2[4:0];
if (sa > 0) {
  if (`.u` form) { // SRA32.u
    res[31:-1] = SE33(Rs1.W[x][31:sa-1]) + 1;
    Rd.W[x] = res[31:0];
  else { // SRA32
    Rd.W[x] = SE32(Rs1.W[x][31:sa])
  }
} else {
  Rd = Rs1;
}
for RV64: x=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__SHIFT_1ga1339130e1d377a8ed99ca71e2fe4d1d9';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SRAI32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '16789';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SRAI32 (SIMD 32-bit Shift Right Arithmetic Immediate)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (RV64 Only)

<strong>Syntax</strong>:\n
@code
SRAI32 Rd, Rs1, imm5u
SRAI32.u Rd, Rs1, imm5u
@endcode

<strong>Purpose</strong>:\n
Do 32-bit elements arithmetic right shift operations simultaneously. The shift amount is
an immediate value. The <tt>.u</tt> form performs additional rounding up operations on the shifted
results.

<strong>Description</strong>:\n
The 32-bit data elements in Rs1 are right-shifted arithmetically, that is, the shifted out
bits are filled with the sign-bit of the 32-bit data elements. The shift amount is specified by the
imm5u constant. For the rounding operation of the <tt>.u</tt> form, a value of 1 is added to the most
significant discarded bit of each 32-bit data to calculate the final results. And the results are written
to Rd.

<strong>Operations</strong>:\n
@code
sa = imm5u[4:0];
  if (sa > 0) {
  if (`.u` form) { // SRAI32.u
    res[31:-1] = SE33(Rs1.W[x][31:sa-1]) + 1;
    Rd.W[x] = res[31:0];
  else { // SRAI32
    Rd.W[x] = SE32(Rs1.W[x][31:sa]);
  }
} else {
  Rd = Rs1;
}
for RV64: x=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__SHIFT_1ga0ef645ccad1604a6ce8f2ab0747293c3';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SRAI32_U';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '16842';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SRAI32.u (SIMD 32-bit Rounding Shift Right Arithmetic Immediate)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (RV64 Only)

<strong>Syntax</strong>:\n
@code
SRAI32 Rd, Rs1, imm5u
SRAI32.u Rd, Rs1, imm5u
@endcode

<strong>Purpose</strong>:\n
Do 32-bit elements arithmetic right shift operations simultaneously. The shift amount is
an immediate value. The <tt>.u</tt> form performs additional rounding up operations on the shifted
results.

<strong>Description</strong>:\n
The 32-bit data elements in Rs1 are right-shifted arithmetically, that is, the shifted out
bits are filled with the sign-bit of the 32-bit data elements. The shift amount is specified by the
imm5u constant. For the rounding operation of the <tt>.u</tt> form, a value of 1 is added to the most
significant discarded bit of each 32-bit data to calculate the final results. And the results are written
to Rd.

<strong>Operations</strong>:\n
@code
sa = imm5u[4:0];
  if (sa > 0) {
  if (`.u` form) { // SRAI32.u
    res[31:-1] = SE33(Rs1.W[x][31:sa-1]) + 1;
    Rd.W[x] = res[31:0];
  else { // SRAI32
    Rd.W[x] = SE32(Rs1.W[x][31:sa]);
  }
} else {
  Rd = Rs1;
}
for RV64: x=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__NON__SIMD__32B__SHIFT_1ga1aceb08da08096a9affa783aa9f54dcf';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SRAIW_U';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '16887';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SRAIW.u (Rounding Shift Right Arithmetic Immediate Word)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (RV64 only)

<strong>Syntax</strong>:\n
@code
SRAIW.u Rd, Rs1, imm5u
@endcode

<strong>Purpose</strong>:\n
Perform a 32-bit arithmetic right shift operation with rounding. The shift amount is an
immediate value.

<strong>Description</strong>:\n
This instruction right-shifts the lower 32-bit content of Rs1 arithmetically. The shifted
out bits are filled with the sign-bit Rs1(31) and the shift amount is specified by the imm5u constant.
For the rounding operation, a value of 1 is added to the most significant discarded bit of the data to
calculate the final result. And the result is sign-extended and written to Rd.

<strong>Operations</strong>:\n
@code
sa = imm5u;
if (sa != 0) {
  res[31:-1] = SE33(Rs1[31:(sa-1)]) + 1;
  Rd = SE32(res[31:0]);
} else {
  Rd = SE32(Rs1.W[0]);
}
@endcode

\param [in]  a    int type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__SHIFT_1gaa527b5f65f359f77a0d667fb5e99cf73';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SRL32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '16940';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SRL32 (SIMD 32-bit Shift Right Logical)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code
SRL32 Rd, Rs1, Rs2
SRL32.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit element logical right shift operations simultaneously. The shift amount is a
variable from a GPR. The <tt>.u</tt> form performs additional rounding up operations on the shifted
results.

<strong>Description</strong>:\n
The 32-bit data elements in Rs1 are right-shifted logically, that is, the shifted out bits
are filled with zero. The shift amount is specified by the low-order 5-bits of the value in the Rs2
register. For the rounding operation of the <tt>.u</tt> form, a value of 1 is added to the most significant
discarded bit of each 32-bit data element to calculate the final results. And the results are written to
Rd.

<strong>Operations</strong>:\n
@code
sa = Rs2[4:0];
if (sa > 0) {
  if (`.u` form) { // SRA32.u
    res[31:-1] = ZE33(Rs1.W[x][31:sa-1]) + 1;
    Rd.W[x] = res[31:0];
  else { // SRA32
    Rd.W[x] = ZE32(Rs1.W[x][31:sa])
  }
} else {
  Rd = Rs1;
}
for RV64: x=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__SHIFT_1ga1f6513e3a91fab5673495cdb5cdd0a1b';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SRL32_U';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '16993';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SRL32.u (SIMD 32-bit Rounding Shift Right Logical)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code
SRL32 Rd, Rs1, Rs2
SRL32.u Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit element logical right shift operations simultaneously. The shift amount is a
variable from a GPR. The <tt>.u</tt> form performs additional rounding up operations on the shifted
results.

<strong>Description</strong>:\n
The 32-bit data elements in Rs1 are right-shifted logically, that is, the shifted out bits
are filled with zero. The shift amount is specified by the low-order 5-bits of the value in the Rs2
register. For the rounding operation of the <tt>.u</tt> form, a value of 1 is added to the most significant
discarded bit of each 32-bit data element to calculate the final results. And the results are written to
Rd.

<strong>Operations</strong>:\n
@code
sa = Rs2[4:0];
if (sa > 0) {
  if (`.u` form) { // SRA32.u
    res[31:-1] = ZE33(Rs1.W[x][31:sa-1]) + 1;
    Rd.W[x] = res[31:0];
  else { // SRA32
    Rd.W[x] = ZE32(Rs1.W[x][31:sa])
  }
} else {
  Rd = Rs1;
}
for RV64: x=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__SHIFT_1gae9dfa0e06789bbdccc6147d120392239';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SRLI32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '17044';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SRLI32 (SIMD 32-bit Shift Right Logical Immediate)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code
SRLI32 Rd, Rs1, imm5u
SRLI32.u Rd, Rs1, imm5u
@endcode

<strong>Purpose</strong>:\n
Do 32-bit elements logical right shift operations simultaneously. The shift amount is an
immediate value. The <tt>.u</tt> form performs additional rounding up operations on the shifted results.

<strong>Description</strong>:\n
The 32-bit data elements in Rs1 are right-shifted logically, that is, the shifted out bits
are filled with zero. The shift amount is specified by the imm5u constant. For the rounding
operation of the <tt>.u</tt> form, a value of 1 is added to the most significant discarded bit of each 32-bit
data to calculate the final results. And the results are written to Rd.

<strong>Operations</strong>:\n
@code
sa = imm5u[4:0];
if (sa > 0) {
  if (`.u` form) { // SRLI32.u
    res[31:-1] = ZE33(Rs1.W[x][31:sa-1]) + 1;
    Rd.W[x] = res[31:0];
  else { // SRLI32
    Rd.W[x] = ZE32(Rs1.W[x][31:sa]);
  }
} else {
  Rd = Rs1;
}
for RV64: x=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__SHIFT_1gace93ecbca53aa585ef4b05b41cb11b0c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SRLI32_U';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '17095';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SRLI32.u (SIMD 32-bit Rounding Shift Right Logical Immediate)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code
SRLI32 Rd, Rs1, imm5u
SRLI32.u Rd, Rs1, imm5u
@endcode

<strong>Purpose</strong>:\n
Do 32-bit elements logical right shift operations simultaneously. The shift amount is an
immediate value. The <tt>.u</tt> form performs additional rounding up operations on the shifted results.

<strong>Description</strong>:\n
The 32-bit data elements in Rs1 are right-shifted logically, that is, the shifted out bits
are filled with zero. The shift amount is specified by the imm5u constant. For the rounding
operation of the <tt>.u</tt> form, a value of 1 is added to the most significant discarded bit of each 32-bit
data to calculate the final results. And the results are written to Rd.

<strong>Operations</strong>:\n
@code
sa = imm5u[4:0];
if (sa > 0) {
  if (`.u` form) { // SRLI32.u
    res[31:-1] = ZE33(Rs1.W[x][31:sa-1]) + 1;
    Rd.W[x] = res[31:0];
  else { // SRLI32
    Rd.W[x] = ZE32(Rs1.W[x][31:sa]);
  }
} else {
  Rd = Rs1;
}
for RV64: x=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned int type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__ADDSUB_1gadd4e3651aa97d430e2eed42cbcb61c3f';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_STAS32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '17138';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
STAS32 (SIMD 32-bit Straight Addition & Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code
STAS32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit integer element addition and 32-bit integer element subtraction in a 64-bit
chunk simultaneously. Operands are from corresponding 32-bit elements.

<strong>Description</strong>:\n
This instruction adds the 32-bit integer element in [63:32] of Rs1 with the 32-bit
integer element in [63:32] of Rs2, and writes the result to [63:32] of Rd; at the same time, it subtracts
the 32-bit integer element in [31:0] of Rs2 from the 32-bit integer element in [31:0] of Rs1, and
writes the result to [31:0] of Rd.

<strong>Note</strong>:\n
This instruction can be used for either signed or unsigned operations.

<strong>Operations</strong>:\n
@code
Rd.W[1] = Rs1.W[1] + Rs2.W[1];
Rd.W[0] = Rs1.W[0] - Rs2.W[0];
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__ADDSUB_1ga8f25a6df3979e6e3ced2876ad7aee194';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_STSA32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '17180';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
STSA32 (SIMD 32-bit Straight Subtraction & Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code
STSA32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit integer element subtraction and 32-bit integer element addition in a 64-bit
chunk simultaneously. Operands are from corresponding 32-bit elements.
*Description: *
This instruction subtracts the 32-bit integer element in [63:32] of Rs2 from the 32-bit integer
element in [63:32] of Rs1, and writes the result to [63:32] of Rd; at the same time, it adds the 32-bit
integer element in [31:0] of Rs1 with the 32-bit integer element in [31:0] of Rs2, and writes the result
to [31:0] of Rd

<strong>Note</strong>:\n
This instruction can be used for either signed or unsigned operations.

<strong>Operations</strong>:\n
@code
Rd.W[1] = Rs1.W[1] - Rs2.W[1];
Rd.W[0] = Rs1.W[0] + Rs2.W[0];
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__ADDSUB_1ga6ce1575be07d2858f589016578743160';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_SUB32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '17220';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SUB32 (SIMD 32-bit Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP (RV64 Only)

<strong>Syntax</strong>:\n
@code
SUB32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit integer element subtractions simultaneously.

<strong>Description</strong>:\n
This instruction subtracts the 32-bit integer elements in Rs2 from the 32-bit integer
elements in Rs1, and then writes the results to Rd.

<strong>Note</strong>:\n
This instruction can be used for either signed or unsigned subtraction.

<strong>Operations</strong>:\n
@code
Rd.W[x] = Rs1.W[x] - Rs2.W[x];
for RV64: x=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__ADDSUB_1ga0ae6b98529fa5176cb906a4add123778';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UKADD32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '17264';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UKADD32 (SIMD 32-bit Unsigned Saturating Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code
UKADD32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit unsigned integer element saturating additions simultaneously.

<strong>Description</strong>:\n
This instruction adds the 32-bit unsigned integer elements in Rs1 with the 32-bit
unsigned integer elements in Rs2. If any of the results are beyond the 32-bit unsigned number
range (0 <= RES <= 2^32-1), they are saturated to the range and the OV bit is set to 1. The saturated
results are written to Rd.

<strong>Operations</strong>:\n
@code
res[x] = Rs1.W[x] + Rs2.W[x];
if (res[x] > (2^32)-1) {
  res[x] = (2^32)-1;
  OV = 1;
}
Rd.W[x] = res[x];
for RV64: x=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__ADDSUB_1gadb9440a09e140829a1b0295b4171fa0b';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UKCRAS32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '17317';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UKCRAS32 (SIMD 32-bit Unsigned Saturating Cross Addition & Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code
UKCRAS32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do one 32-bit unsigned integer element saturating addition and one 32-bit unsigned
integer element saturating subtraction in a 64-bit chunk simultaneously. Operands are from crossed
32-bit elements.

<strong>Description</strong>:\n
This instruction adds the 32-bit unsigned integer element in [63:32] of Rs1 with the 32-
bit unsigned integer element in [31:0] of Rs2; at the same time, it subtracts the 32-bit unsigned
integer element in [63:32] of Rs2 from the 32-bit unsigned integer element in [31:0] Rs1. If any of the
results are beyond the 32-bit unsigned number range (0 <= RES <= 2^32-1), they are saturated to the
range and the OV bit is set to 1. The saturated results are written to [63:32] of Rd for addition and
[31:0] of Rd for subtraction.

<strong>Operations</strong>:\n
@code
res1 = Rs1.W[1] + Rs2.W[0];
res2 = Rs1.W[0] - Rs2.W[1];
if (res1 > (2^32)-1) {
  res1 = (2^32)-1;
  OV = 1;
}
if (res2 < 0) {
  res2 = 0;
  OV = 1;
}
Rd.W[1] = res1;
Rd.W[0] = res2;
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__ADDSUB_1ga32c3976c47a200878be3bbaaf28de26c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UKCRSA32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '17369';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UKCRSA32 (SIMD 32-bit Unsigned Saturating Cross Subtraction & Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code
UKCRSA32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do one 32-bit unsigned integer element saturating subtraction and one 32-bit unsigned
integer element saturating addition in a 64-bit chunk simultaneously. Operands are from crossed
32-bit elements.

<strong>Description</strong>:\n
This instruction subtracts the 32-bit unsigned integer element in [31:0] of Rs2 from the
32-bit unsigned integer element in [63:32] of Rs1; at the same time, it adds the 32-bit unsigned
integer element in [63:32] of Rs2 with the 32-bit unsigned integer element in [31:0] Rs1. If any of the
results are beyond the 32-bit unsigned number range (0 <= RES <= 2^32-1), they are saturated to the
range and the OV bit is set to 1. The saturated results are written to [63:32] of Rd for subtraction and
[31:0] of Rd for addition.

<strong>Operations</strong>:\n
@code
res1 = Rs1.W[1] - Rs2.W[0];
res2 = Rs1.W[0] + Rs2.W[1];
if (res1 < 0) {
  res1 = 0;
  OV = 1;
} else if (res2 > (2^32)-1) {
  res2 = (2^32)-1;
  OV = 1;
}
Rd.W[1] = res1;
Rd.W[0] = res2;
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__ADDSUB_1ga042afa2a6b552b4ef0c5258d8bf02461';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UKSTAS32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '17422';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UKSTAS32 (SIMD 32-bit Unsigned Saturating Straight Addition & Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code
UKSTAS32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do one 32-bit unsigned integer element saturating addition and one 32-bit unsigned
integer element saturating subtraction in a 64-bit chunk simultaneously. Operands are from
corresponding 32-bit elements.

<strong>Description</strong>:\n
This instruction adds the 32-bit unsigned integer element in [63:32] of Rs1 with the 32-
bit unsigned integer element in [63:32] of Rs2; at the same time, it subtracts the 32-bit unsigned
integer element in [31:0] of Rs2 from the 32-bit unsigned integer element in [31:0] Rs1. If any of the
results are beyond the 32-bit unsigned number range (0 <= RES <= 2^32-1), they are saturated to the
range and the OV bit is set to 1. The saturated results are written to [63:32] of Rd for addition and
[31:0] of Rd for subtraction.

<strong>Operations</strong>:\n
@code
res1 = Rs1.W[1] + Rs2.W[1];
res2 = Rs1.W[0] - Rs2.W[0];
if (res1 > (2^32)-1) {
  res1 = (2^32)-1;
  OV = 1;
}
if (res2 < 0) {
  res2 = 0;
  OV = 1;
}
Rd.W[1] = res1;
Rd.W[0] = res2;
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__ADDSUB_1gaea266bb7b2d939d5cc49c50dca75be65';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UKSTSA32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '17474';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UKSTSA32 (SIMD 32-bit Unsigned Saturating Straight Subtraction & Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code
UKSTSA32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do one 32-bit unsigned integer element saturating subtraction and one 32-bit unsigned
integer element saturating addition in a 64-bit chunk simultaneously. Operands are from
corresponding 32-bit elements.

<strong>Description</strong>:\n
This instruction subtracts the 32-bit unsigned integer element in [63:32] of Rs2 from
the 32-bit unsigned integer element in [63:32] of Rs1; at the same time, it adds the 32-bit unsigned
integer element in [31:0] of Rs2 with the 32-bit unsigned integer element in [31:0] Rs1. If any of the
results are beyond the 32-bit unsigned number range (0 <= RES <= 2^32-1), they are saturated to the
range and the OV bit is set to 1. The saturated results are written to [63:32] of Rd for subtraction and
[31:0] of Rd for addition.

<strong>Operations</strong>:\n
@code
res1 = Rs1.W[1] - Rs2.W[1];
res2 = Rs1.W[0] + Rs2.W[0];
if (res1 < 0) {
  res1 = 0;
  OV = 1;
} else if (res2 > (2^32)-1) {
  res2 = (2^32)-1;
  OV = 1;
}
Rd.W[1] = res1;
Rd.W[0] = res2;
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__ADDSUB_1ga169028d26efc2ec4eb0914a2da5354a6';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UKSUB32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '17518';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UKSUB32 (SIMD 32-bit Unsigned Saturating Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code
UKSUB32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit unsigned integer elements saturating subtractions simultaneously.

<strong>Description</strong>:\n
This instruction subtracts the 32-bit unsigned integer elements in Rs2 from the 32-bit
unsigned integer elements in Rs1. If any of the results are beyond the 32-bit unsigned number
range (0 <= RES <= 2^32-1), they are saturated to the range and the OV bit is set to 1. The saturated
results are written to Rd.

<strong>Operations</strong>:\n
@code
res[x] = Rs1.W[x] - Rs2.W[x];
if (res[x] < 0) {
  res[x] = 0;
  OV = 1;
}
Rd.W[x] = res[x];
for RV64: x=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__MISC_1ga298ea777bdb92725501538d9db8c9364';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UMAX32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '17556';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UMAX32 (SIMD 32-bit Unsigned Maximum)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code
UMAX32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit unsigned integer elements finding maximum operations simultaneously.

<strong>Description</strong>:\n
This instruction compares the 32-bit unsigned integer elements in Rs1 with the 32-bit
unsigned integer elements in Rs2 and selects the numbers that is greater than the other one. The
selected results are written to Rd.

<strong>Operations</strong>:\n
@code
Rd.W[x] = (Rs1.W[x] u> Rs2.W[x])? Rs1.W[x] : Rs2.W[x];
for RV64: x=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__MISC_1ga65104f0f5fabadc6c8c2777571a66d74';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_UMIN32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '17594';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
UMIN32 (SIMD 32-bit Unsigned Minimum)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code
UMIN32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit unsigned integer elements finding minimum operations simultaneously.

<strong>Description</strong>:\n
This instruction compares the 32-bit unsigned integer elements in Rs1 with the 32-bit
unsigned integer elements in Rs2 and selects the numbers that is less than the other one. The
selected results are written to Rd.

<strong>Operations</strong>:\n
@code
Rd.W[x] = (Rs1.W[x] <u Rs2.W[x])? Rs1.W[x] : Rs2.W[x];
for RV64: x=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__ADDSUB_1ga70ed498e86037d80ebe470cfb6591a57';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_URADD32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '17640';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
URADD32 (SIMD 32-bit Unsigned Halving Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code
URADD32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit unsigned integer element additions simultaneously. The results are halved to
avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction adds the 32-bit unsigned integer elements in Rs1 with the 32-bit
unsigned integer elements in Rs2. The results are first logically right-shifted by 1 bit and then
written to Rd.

<strong>Examples</strong>:\n
@code
* Ra = 0x7FFFFFFF, Rb = 0x7FFFFFFF Rt = 0x7FFFFFFF
* Ra = 0x80000000, Rb = 0x80000000 Rt = 0x80000000
* Ra = 0x40000000, Rb = 0x80000000 Rt = 0x60000000
@endcode

<strong>Operations</strong>:\n
@code
Rd.W[x] = (Rs1.W[x] + Rs2.W[x]) u>> 1;
for RV64: x=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__ADDSUB_1gadb3203c272e4d13e1f6b0df92f575da7';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_URCRAS32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '17687';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
URCRAS32 (SIMD 32-bit Unsigned Halving Cross Addition & Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code
URCRAS32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit unsigned integer element addition and 32-bit unsigned integer element
subtraction in a 64-bit chunk simultaneously. Operands are from crossed 32-bit elements. The
results are halved to avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction adds the 32-bit unsigned integer element in [63:32] of Rs1 with the 32-
bit unsigned integer element in [31:0] of Rs2, and subtracts the 32-bit unsigned integer element in
[63:32] of Rs2 from the 32-bit unsigned integer element in [31:0] of Rs1. The element results are first
logically right-shifted by 1 bit and then written to [63:32] of Rd for addition and [31:0] of Rd for
subtraction.

<strong>Examples</strong>:\n
@code
Please see `URADD32` and `URSUB32` instructions.
@endcode

<strong>Operations</strong>:\n
@code
Rd.W[1] = (Rs1.W[1] + Rs2.W[0]) u>> 1;
Rd.W[0] = (Rs1.W[0] - Rs2.W[1]) u>> 1;
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__ADDSUB_1gab4e8e05c30ec9907dce962832329817e';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_URCRSA32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '17734';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
URCRSA32 (SIMD 32-bit Unsigned Halving Cross Subtraction & Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code
URCRSA32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit unsigned integer element subtraction and 32-bit unsigned integer element
addition in a 64-bit chunk simultaneously. Operands are from crossed 32-bit elements. The results
are halved to avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction subtracts the 32-bit unsigned integer element in [31:0] of Rs2 from the
32-bit unsigned integer element in [63:32] of Rs1, and adds the 32-bit unsigned element integer in
[31:0] of Rs1 with the 32-bit unsigned integer element in [63:32] of Rs2. The two results are first
logically right-shifted by 1 bit and then written to [63:32] of Rd for subtraction and [31:0] of Rd for
addition.

<strong>Examples</strong>:\n
@code
Please see `URADD32` and `URSUB32` instructions.
@endcode

<strong>Operations</strong>:\n
@code
Rd.W[1] = (Rs1.W[1] - Rs2.W[0]) u>> 1;
Rd.W[0] = (Rs1.W[0] + Rs2.W[1]) u>> 1;
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__ADDSUB_1ga651311ceca6fb06dcdecc5a67b15a683';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_URSTAS32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '17781';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
URSTAS32 (SIMD 32-bit Unsigned Halving Straight Addition & Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code
URSTAS32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit unsigned integer element addition and 32-bit unsigned integer element
subtraction in a 64-bit chunk simultaneously. Operands are from corresponding 32-bit elements.
The results are halved to avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction adds the 32-bit unsigned integer element in [63:32] of Rs1 with the 32-
bit unsigned integer element in [63:32] of Rs2, and subtracts the 32-bit unsigned integer element in
[31:0] of Rs2 from the 32-bit unsigned integer element in [31:0] of Rs1. The element results are first
logically right-shifted by 1 bit and then written to [63:32] of Rd for addition and [31:0] of Rd for
subtraction.

<strong>Examples</strong>:\n
@code
Please see `URADD32` and `URSUB32` instructions.
@endcode

<strong>Operations</strong>:\n
@code
Rd.W[1] = (Rs1.W[1] + Rs2.W[1]) u>> 1;
Rd.W[0] = (Rs1.W[0] - Rs2.W[0]) u>> 1;
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__ADDSUB_1ga97737cc391f6eafc760c002866dc7ead';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_URSTSA32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '17828';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
URSTSA32 (SIMD 32-bit Unsigned Halving Straight Subtraction & Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code
URSTSA32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit unsigned integer element subtraction and 32-bit unsigned integer element
addition in a 64-bit chunk simultaneously. Operands are from corresponding 32-bit elements. The
results are halved to avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction subtracts the 32-bit unsigned integer element in [63:32] of Rs2 from
the 32-bit unsigned integer element in [63:32] of Rs1, and adds the 32-bit unsigned element integer
in [31:0] of Rs1 with the 32-bit unsigned integer element in [31:0] of Rs2. The two results are first
logically right-shifted by 1 bit and then written to [63:32] of Rd for subtraction and [31:0] of Rd for
addition.

<strong>Examples</strong>:\n
@code
Please see `URADD32` and `URSUB32` instructions.
@endcode

<strong>Operations</strong>:\n
@code
Rd.W[1] = (Rs1.W[1] - Rs2.W[1]) u>> 1;
Rd.W[0] = (Rs1.W[0] + Rs2.W[0]) u>> 1;
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__RV64__SIMD__32B__ADDSUB_1gaba8b5c1a6f91c0b19cdea558a76968d3';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_URSUB32';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '17874';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
URSUB32 (SIMD 32-bit Unsigned Halving Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD (RV64 Only)

<strong>Syntax</strong>:\n
@code
URSUB32 Rd, Rs1, Rs2
@endcode

<strong>Purpose</strong>:\n
Do 32-bit unsigned integer element subtractions simultaneously. The results are halved to
avoid overflow or saturation.

<strong>Description</strong>:\n
This instruction subtracts the 32-bit unsigned integer elements in Rs2 from the 32-bit
unsigned integer elements in Rs1. The results are first logically right-shifted by 1 bit and then
written to Rd.

<strong>Examples</strong>:\n
@code
* Ra = 0x7FFFFFFF, Rb = 0x80000000, Rt = 0xFFFFFFFF
* Ra = 0x80000000, Rb = 0x7FFFFFFF, Rt = 0x00000000
* Ra = 0x80000000, Rb = 0x40000000, Rt = 0x20000000
@endcode

<strong>Operations</strong>:\n
@code
Rd.W[x] = (Rs1.W[x] - Rs2.W[x]) u>> 1;
for RV64: x=1...0
@endcode

\param [in]  a    unsigned long type of value stored in a
\param [in]  b    unsigned long type of value stored in b
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1ga036660946bc3f379a731983caffca53b';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DKHM8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '17939';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DKHM8 (64-bit SIMD Signed Saturating Q7 Multiply)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
DKHM8 Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Do Q7xQ7 element multiplications simultaneously. The Q14 results are then reduced to Q7
numbers again.

<strong>Description</strong>:\n
For the <tt>DKHM8</tt> instruction, multiply the top 8-bit Q7 content of 16-bit chunks in Rs1
with the top 8-bit Q7 content of 16-bit chunks in Rs2. At the same time, multiply the bottom 8-bit Q7
content of 16-bit chunks in Rs1 with the bottom 8-bit Q7 content of 16-bit chunks in Rs2.

The Q14 results are then right-shifted 7-bits and saturated into Q7 values. The Q7 results are then
written into Rd. When both the two Q7 inputs of a multiplication are 0x80, saturation will happen.
The result will be saturated to 0x7F and the overflow flag OV will be set.

<strong>Operations</strong>:\n
@code
op1t = Rs1.B[x+1]; op2t = Rs2.B[x+1]; // top
op1b = Rs1.B[x]; op2b = Rs2.B[x]; // bottom
for ((aop,bop,res) in [(op1t,op2t,rest), (op1b,op2b,resb)]) {
  if (0x80 != aop | 0x80 != bop) {
    res = (aop s* bop) >> 7;
  } else {
    res= 0x7F;
    OV = 1;
  }
}
Rd.H[x/2] = concat(rest, resb);
for RV32, x=0,2,4,6
@endcode

\param [in]  a unsigned long long type of value stored in a
\param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1gae39257eb12a014d3059394217135b9fb';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DKHM16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '17994';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DKHM16 (64-bit SIMD Signed Saturating Q15 Multiply)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
DKHM16 Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Do Q15xQ15 element multiplications simultaneously. The Q30 results are then reduced to
Q15 numbers again.

<strong>Description</strong>:\n
For the <tt>DKHM16</tt> instruction, multiply the top 16-bit Q15 content of 32-bit chunks in
Rs1 with the top 16-bit Q15 content of 32-bit chunks in Rs2. At the same time, multiply the bottom
16-bit Q15 content of 32-bit chunks in Rs1 with the bottom 16-bit Q15 content of 32-bit chunks in
Rs2.

The Q30 results are then right-shifted 15-bits and saturated into Q15 values. The Q15 results are
then written into Rd. When both the two Q15 inputs of a multiplication are 0x8000, saturation will
happen. The result will be saturated to 0x7FFF and the overflow flag OV will be set.

<strong>Operations</strong>:\n
@code
op1t = Rs1.H[x+1]; op2t = Rs2.H[x+1]; // top
op1b = Rs1.H[x]; op2b = Rs2.H[x]; // bottom
for ((aop,bop,res) in [(op1t,op2t,rest), (op1b,op2b,resb)]) {
  if (0x8000 != aop | 0x8000 != bop) {
    res = (aop s* bop) >> 15;
  } else {
    res= 0x7FFF;
    OV = 1;
  }
}
Rd.W[x/2] = concat(rest, resb);
for RV32: x=0, 2
@endcode

\param [in]  a unsigned long long type of value stored in a
\param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1ga7279c1730c173384063a9bef9c986010';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DKABS8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '18039';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DKABS8 (64-bit SIMD 8-bit Saturating Absolute)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
DKABS8 Rd, Rs1
# Rd, Rs1 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Get the absolute value of 8-bit signed integer elements simultaneously.

<strong>Description</strong>:\n
This instruction calculates the absolute value of 8-bit signed integer elements stored
in Rs1 and writes the element results to Rd. If the input number is 0x80, this instruction generates
0x7f as the output and sets the OV bit to 1.

<strong>Operations</strong>:\n
@code
src = Rs1.B[x];
if (src == 0x80) {
  src = 0x7f;
  OV = 1;
} else if (src[7] == 1)
  src = -src;
}
Rd.B[x] = src;
for RV32: x=7...0,
@endcode

\param [in]  a unsigned long long type of value stored in a
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1ga7d5691b06128c42939278415561c2dc4';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DKABS16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '18084';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DKABS16 (64-bit SIMD 16-bit Saturating Absolute)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
DKABS16 Rd, Rs1
# Rd, Rs1 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Get the absolute value of 16-bit signed integer elements simultaneously.

<strong>Description</strong>:\n
This instruction calculates the absolute value of 16-bit signed integer elements stored
in Rs1 and writes the element results to Rd. If the input number is 0x8000, this instruction
generates 0x7fff as the output and sets the OV bit to 1.

<strong>Operations</strong>:\n
@code
src = Rs1.H[x];
if (src == 0x8000) {
  src = 0x7fff;
  OV = 1;
} else if (src[15] == 1)
  src = -src;
}
Rd.H[x] = src;
for RV32: x=3...0,
@endcode

\param [in]  a unsigned long long type of value stored in a
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1ga0f7b1184bde378bc5ae6e23f155ecb89';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DKSLRA8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '18142';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DKSLRA8 (64-bit SIMD 8-bit Shift Left Logical with Saturation or Shift Right Arithmetic)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
DKSLRA8 Rd, Rs1, Rs2
# Rd, Rs1 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Do 8-bit elements logical left (positive) or arithmetic right (negative) shift operation with
Q7 saturation for the left shift.

<strong>Description</strong>:\n
The 8-bit data elements of Rs1 are left-shifted logically or right-shifted arithmetically
based on the value of Rs2[3:0]. Rs2[3:0] is in the signed range of [-2^3, 2^3-1]. A positive Rs2[3:0] means
logical left shift and a negative Rs2[3:0] means arithmetic right shift. The shift amount is the
absolute value of Rs2[3:0]. However, the behavior of <tt>Rs2[3:0]==-2^3 (0x8)</tt> is defined to be
equivalent to the behavior of <tt>Rs2[3:0]==-(2^3-1) (0x9)</tt>.
The left-shifted results are saturated to the 8-bit signed integer range of [-2^7, 2^7-1].
If any saturation happens, this instruction sets the OV flag. The value of Rs2[31:4] will not affect
this instruction.

<strong>Operations</strong>:\n
@code
if (Rs2[3:0] < 0) {
  sa = -Rs2[3:0];
  sa = (sa == 8)? 7 : sa;
  Rd.B[x] = SE8(Rs1.B[x][7:sa]);
} else {
  sa = Rs2[2:0];
  res[(7+sa):0] = Rs1.B[x] <<(logic) sa;
  if (res > (2^7)-1) {
    res[7:0] = 0x7f; OV = 1;
  } else if (res < -2^7) {
    res[7:0] = 0x80; OV = 1;
  }
  Rd.B[x] = res[7:0];
}
for RV32: x=7...0,
@endcode

\param [in]  a unsigned long long type of value stored in a
\param [in]  b int type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1ga1b02a9f2e52abd456bfdadc1dac9e188';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DKSLRA16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '18201';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DKSLRA16 (64-bit SIMD 16-bit Shift Left Logical with Saturation or Shift Right Arithmetic)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
DKSLRA16 Rd, Rs1, Rs2
# Rd, Rs1 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Do 16-bit elements logical left (positive) or arithmetic right (negative) shift operation with
Q15 saturation for the left shift.

<strong>Description</strong>:\n
The 16-bit data elements of Rs1 are left-shifted logically or right-shifted arithmetically
based on the value of Rs2[4:0]. Rs2[4:0] is in the signed range of [-2^4, 2^4-1]. A positive Rs2[4:0] means
logical left shift and a negative Rs2[4:0] means arithmetic right shift. The shift amount is the
absolute value of Rs2[4:0]. However, the behavior of <tt>Rs2[4:0]==-2^4 (0x10)</tt> is defined to be
equivalent to the behavior of <tt>Rs2[4:0]==-(2^4-1) (0x11)</tt>.
The left-shifted results are saturated to the 16-bit signed integer range of [-2^15, 2^15-1].
After the shift, saturation, or rounding, the final results are written to
Rd. If any saturation happens, this instruction sets the OV flag. The value of Rs2[31:5] will not affect
this instruction.

<strong>Operations</strong>:\n
@code
if (Rs2[4:0] < 0) {
  sa = -Rs2[4:0];
  sa = (sa == 16)? 15 : sa;
  Rd.H[x] = SE16(Rs1.H[x][15:sa]);
} else {
  sa = Rs2[3:0];
  res[(15+sa):0] = Rs1.H[x] <<(logic) sa;
  if (res > (2^15)-1) {
    res[15:0] = 0x7fff; OV = 1;
  } else if (res < -2^15) {
    res[15:0] = 0x8000; OV = 1;
  }
  d.H[x] = res[15:0];
}
for RV32: x=3...0,
@endcode

\param [in]  a unsigned long long type of value stored in a
\param [in]  b int type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1ga7f2598c19678a959960b6c6d3379e465';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DKADD8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '18248';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DKADD8 (64-bit SIMD 8-bit Signed Saturating Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
DKADD8 Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Do 8-bit signed integer element saturating additions simultaneously.

<strong>Description</strong>:\n
This instruction adds the 8-bit signed integer elements in Rs1 with the 8-bit signed
integer elements in Rs2. If any of the results are beyond the Q7 number range (-2^7 <= Q7 <= 2^7-1), they
are saturated to the range and the OV bit is set to 1. The saturated results are written to Rd.

<strong>Operations</strong>:\n
@code
res[x] = Rs1.B[x] + Rs2.B[x];
if (res[x] > 127) {
  res[x] = 127;
  OV = 1;
} else if (res[x] < -128) {
  res[x] = -128;
  OV = 1;
}
Rd.B[x] = res[x];
for RV32: x=7...0,
@endcode

\param [in]  a unsigned long long type of value stored in a
\param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1gaeb50cbc43674d8dd32e7455b6c25b394';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DKADD16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '18295';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DKADD16 (64-bit SIMD 16-bit Signed Saturating Addition)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
DKADD16 Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Do 16-bit signed integer element saturating additions simultaneously.

<strong>Description</strong>:\n
This instruction adds the 16-bit signed integer elements in Rs1 with the 16-bit signed
integer elements in Rs2. If any of the results are beyond the Q15 number range (-2^15 <= Q15 <= 2^15-1),
they are saturated to the range and the OV bit is set to 1. The saturated results are written to Rd.

<strong>Operations</strong>:\n
@code
res[x] = Rs1.H[x] + Rs2.H[x];
if (res[x] > 32767) {
  res[x] = 32767;
  OV = 1;
} else if (res[x] < -32768) {
  res[x] = -32768;
  OV = 1;
}
Rd.H[x] = res[x];
for RV32: x=3...0,
@endcode

\param [in]  a unsigned long long type of value stored in a
\param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1ga5dbe06f7b351ff1477851894d6d0c927';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DKSUB8';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '18342';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DKSUB8 (64-bit SIMD 8-bit Signed Saturating Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
DKSUB8 Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Do 8-bit signed elements saturating subtractions simultaneously.

<strong>Description</strong>:\n
This instruction subtracts the 8-bit signed integer elements in Rs2 from the 8-bit
signed integer elements in Rs1. If any of the results are beyond the Q7 number range (-2^7 <= Q7 <= 2^7-1),
they are saturated to the range and the OV bit is set to 1. The saturated results are written to Rd.

<strong>Operations</strong>:\n
@code
res[x] = Rs1.B[x] - Rs2.B[x];
if (res[x] > (2^7)-1) {
  res[x] = (2^7)-1;
  OV = 1;
} else if (res[x] < -2^7) {
  res[x] = -2^7;
  OV = 1;
}
Rd.B[x] = res[x];
for RV32: x=7...0,
@endcode

\param [in]  a unsigned long long type of value stored in a
\param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1gaa5dfb634a380181e51e0636cb216fbb1';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_DKSUB16';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'b';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '18390';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
DKSUB16 (64-bit SIMD 16-bit Signed Saturating Subtraction)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: SIMD

<strong>Syntax</strong>:\n
@code
DKSUB16 Rd, Rs1, Rs2
# Rd, Rs1, Rs2 are all even/odd pair of registers
@endcode

<strong>Purpose</strong>:\n
Do 16-bit signed integer elements saturating subtractions simultaneously.

<strong>Description</strong>:\n
This instruction subtracts the 16-bit signed integer elements in Rs2 from the 16-bit
signed integer elements in Rs1. If any of the results are beyond the Q15 number range (-2^15 <= Q15 <=
2^15-1), they are saturated to the range and the OV bit is set to 1. The saturated results are written to
Rd.

<strong>Operations</strong>:\n
@code
res[x] = Rs1.H[x] - Rs2.H[x];
if (res[x] > (2^15)-1) {
  res[x] = (2^15)-1;
  OV = 1;
} else if (res[x] < -2^15) {
  res[x] = -2^15;
  OV = 1;
}
Rd.H[x] = res[x];
for RV32: x=3...0,
@endcode

\param [in]  a unsigned long long type of value stored in a
\param [in]  b unsigned long long type of value stored in b
\return value stored in unsigned long long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1ga1bdbaa4714d2052c162a076e676f4ea4';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_EXPD80';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '18425';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
EXPD80 (Expand and Copy Byte 0 to 32bit)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
EXPD80 Rd, Rs1
@endcode

<strong>Purpose</strong>:\n
Copy 8-bit data from 32-bit chunks into 4 bytes in a register.

<strong>Description</strong>:\n
Moves Rs1.B[0][7:0] to Rd.[0][7:0], Rd.[1][7:0], Rd.[2][7:0], Rd.[3][7:0]

<strong>Operations</strong>:\n
@code
Rd.W[x][31:0] = CONCAT(Rs1.B[0][7:0], Rs1.B[0][7:0], Rs1.B[0][7:0], Rs1.B[0][7:0]);
for RV32: x=0
@endcode

\param [in]  a unsigned long type of value stored in a
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1gad690c697580b52820282c03d6a6567c5';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_EXPD81';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '18460';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
EXPD81 (Expand and Copy Byte 1 to 32bit)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
EXPD81 Rd, Rs1
@endcode

<strong>Purpose</strong>:\n
Copy 8-bit data from 32-bit chunks into 4 bytes in a register.

<strong>Description</strong>:\n
Moves Rs1.B[1][7:0] to Rd.[0][7:0], Rd.[1][7:0], Rd.[2][7:0], Rd.[3][7:0]

<strong>Operations</strong>:\n
@code
Rd.W[x][31:0] = CONCAT(Rs1.B[1][7:0], Rs1.B[1][7:0], Rs1.B[1][7:0], Rs1.B[1][7:0]);
for RV32: x=0
@endcode

\param [in]  a unsigned long type of value stored in a
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1gafc4a523cfa64150d691bdc5d7d038810';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_EXPD82';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '18495';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
EXPD82 (Expand and Copy Byte 2 to 32bit)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
EXPD82 Rd, Rs1
@endcode

<strong>Purpose</strong>:\n
Copy 8-bit data from 32-bit chunks into 4 bytes in a register.

<strong>Description</strong>:\n
Moves Rs1.B[2][7:0] to Rd.[0][7:0], Rd.[1][7:0], Rd.[2][7:0], Rd.[3][7:0]

<strong>Operations</strong>:\n
@code
Rd.W[x][31:0] = CONCAT(Rs1.B[2][7:0], Rs1.B[2][7:0], Rs1.B[2][7:0], Rs1.B[2][7:0]);
for RV32: x=0
@endcode

\param [in]  a unsigned long type of value stored in a
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1ga6d8dce49013b778d0290cd057cf45dd0';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__RV_EXPD83';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'a';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
      func-mem-desc-line = '18530';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
EXPD83 (Expand and Copy Byte 3 to 32bit)
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
<strong>Type</strong>: DSP

<strong>Syntax</strong>:\n
@code
EXPD83 Rd, Rs1
@endcode

<strong>Purpose</strong>:\n
Copy 8-bit data from 32-bit chunks into 4 bytes in a register.

<strong>Description</strong>:\n
Moves Rs1.B[3][7:0] to Rd.[0][7:0], Rd.[1][7:0], Rd.[2][7:0], Rd.[3][7:0]

<strong>Operations</strong>:\n
@code
Rd.W[x][31:0] = CONCAT(Rs1.B[3][7:0], Rs1.B[3][7:0], Rs1.B[3][7:0], Rs1.B[3][7:0]);
for RV32: x=0
@endcode

\param [in]  a unsigned long type of value stored in a
\return value stored in unsigned long type
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga1378040bcf22428955c6e3ce9c2053cd';
        func-mem-ref-line = '55';
        func-mem-ref-name = '__ASM';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__dsp_8h_1gacacca4e304ad42fc68a96c785f2a0b69';
        func-mem-ref-line = '488';
        func-mem-ref-name = '__RV_ADD16';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__dsp_8h_1ga84ab72987eeee69e2392965d8d8944f4';
        func-mem-ref-line = '2893';
        func-mem-ref-name = '__RV_KMADA';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__dsp_8h_1ga1cab84ebee0378b9c1069e17efdbfd69';
        func-mem-ref-line = '2957';
        func-mem-ref-name = '__RV_KMAXDA';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__dsp_8h_1ga2de43c62af85225d40c1ac4210640925';
        func-mem-ref-line = '3291';
        func-mem-ref-name = '__RV_KMDA';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__dsp_8h_1ga37c752d6151fb29b43b01b2dd8af55d6';
        func-mem-ref-line = '3342';
        func-mem-ref-name = '__RV_KMXDA';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__dsp_8h_1ga8320e2679cb96ee46fcaf761925b8708';
        func-mem-ref-line = '7726';
        func-mem-ref-name = '__RV_SMALDA';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__dsp_8h_1ga18e89f90f0b3e3d8c34ceb33b671a61b';
        func-mem-ref-line = '7810';
        func-mem-ref-name = '__RV_SMALXDA';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__dsp_8h_1gafab251aa9c5e64dc004c9dc3b8c7c0dd';
        func-mem-ref-line = '8575';
        func-mem-ref-name = '__RV_SMDRS';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__dsp_8h_1ga17b1cc8cce90ea3852050e9ec0b28795';
        func-mem-ref-line = '8763';
        func-mem-ref-name = '__RV_SMMUL';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__dsp_8h_1ga45c60f7cb5ae0e2ddaeca68e0a76283b';
        func-mem-ref-line = '8634';
        func-mem-ref-name = '__RV_SMXDS';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__dsp_8h_1ga922f7523e4d512fe391795edd7a81239';
        func-mem-ref-line = '10853';
        func-mem-ref-name = '__RV_SUNPKD820';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1gab904513442afdf77d4f8c74f23cbb040';
        func-mem-ref-line = '70';
        func-mem-ref-name = '__STATIC_FORCEINLINE';
    };
    }; /* func-member */
    };
  file-full-name  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_dsp.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
DSP feature API header file for Nuclei N/NX Core.
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_



_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'core__feature__eclic_8h';
  file-name = 'core_feature_eclic.h';
    define = {
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ECLIC__Registers_1ga0ee0922b5a83b6ff92fed6c9dea63da3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CLIC_CLICCFG_NLBIT_Pos';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
1U
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '97';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CLIC CLICCFG: NLBIT Position.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1ga1dce18ecc4a504cc128c62596d25f3ab';
        define-mem-ref-line = '276';
        define-mem-ref-name = '__ECLIC_GetCfgNlbits';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1ga38900ce869dd78e9b432ac90d8006082';
        define-mem-ref-line = '260';
        define-mem-ref-name = '__ECLIC_SetCfgNlbits';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ECLIC__Registers_1ga6c31823bbd3bd593dcecd6d7d5f0afbb';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CLIC_CLICCFG_NLBIT_Msk';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0xFUL << CLIC_CLICCFG_NLBIT_Pos)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '98';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CLIC CLICCFG: NLBIT Mask.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1ga1dce18ecc4a504cc128c62596d25f3ab';
        define-mem-ref-line = '276';
        define-mem-ref-name = '__ECLIC_GetCfgNlbits';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1ga38900ce869dd78e9b432ac90d8006082';
        define-mem-ref-line = '260';
        define-mem-ref-name = '__ECLIC_SetCfgNlbits';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ECLIC__Registers_1gac63632ddf28ed47570b441f003ba5c5f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CLIC_CLICINFO_CTLBIT_Pos';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
21U
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '100';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CLIC INTINFO: __ECLIC_GetInfoCtlbits() Position.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1ga6db42f6efa6f57690930a78b35c64b40';
        define-mem-ref-line = '309';
        define-mem-ref-name = '__ECLIC_GetInfoCtlbits';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ECLIC__Registers_1ga146a1208d7982a0ec073f9c3bb77528f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CLIC_CLICINFO_CTLBIT_Msk';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0xFUL << CLIC_CLICINFO_CTLBIT_Pos)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '101';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CLIC INTINFO: __ECLIC_GetInfoCtlbits() Mask.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1ga6db42f6efa6f57690930a78b35c64b40';
        define-mem-ref-line = '309';
        define-mem-ref-name = '__ECLIC_GetInfoCtlbits';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ECLIC__Registers_1ga3047dd362f08b827b4f3595fdee555e1';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CLIC_CLICINFO_VER_Pos';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
13U
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '103';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CLIC CLICINFO: VERSION Position.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1ga062b7c1b16828b4dbc502a303648dbb1';
        define-mem-ref-line = '292';
        define-mem-ref-name = '__ECLIC_GetInfoVer';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ECLIC__Registers_1ga2b40a58247f1ae1eb207ebfd224a6519';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CLIC_CLICINFO_VER_Msk';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0xFFUL << CLIC_CLICCFG_NLBIT_Pos)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '104';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CLIC CLICINFO: VERSION Mask.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1ga062b7c1b16828b4dbc502a303648dbb1';
        define-mem-ref-line = '292';
        define-mem-ref-name = '__ECLIC_GetInfoVer';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ECLIC__Registers_1ga39c37a90e1445851aede44b002a83a99';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CLIC_CLICINFO_NUM_Pos';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0U
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '106';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CLIC CLICINFO: NUM Position.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1ga2875bb0f9e3ceb6c750dcd5396d099b7';
        define-mem-ref-line = '325';
        define-mem-ref-name = '__ECLIC_GetInfoNum';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ECLIC__Registers_1ga7f3148e774c092b06d81b400ac6c80bb';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CLIC_CLICINFO_NUM_Msk';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0xFFFUL << CLIC_CLICINFO_NUM_Pos)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '107';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CLIC CLICINFO: NUM Mask.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1ga2875bb0f9e3ceb6c750dcd5396d099b7';
        define-mem-ref-line = '325';
        define-mem-ref-name = '__ECLIC_GetInfoNum';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ECLIC__Registers_1gab0047e9c230189453f8bca9bf0fa7061';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CLIC_INTIP_IP_Pos';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0U
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '109';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CLIC INTIP: IP Position.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ECLIC__Registers_1gad7395594207c3fa20c423a1c9ae26cb7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CLIC_INTIP_IP_Msk';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x1UL << CLIC_INTIP_IP_Pos)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '110';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CLIC INTIP: IP Mask.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1ga79f14465b1588b3c970efd8d55422638';
        define-mem-ref-line = '453';
        define-mem-ref-name = '__ECLIC_ClearPendingIRQ';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1gaa20c0e2158dbe29f589468de10abde12';
        define-mem-ref-line = '420';
        define-mem-ref-name = '__ECLIC_GetPendingIRQ';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1gadadcfda306ae9024c5e7a5a79c3d49de';
        define-mem-ref-line = '436';
        define-mem-ref-name = '__ECLIC_SetPendingIRQ';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ECLIC__Registers_1gaa6ea033a4802f0fd1354894436706cbd';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CLIC_INTIE_IE_Pos';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0U
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '112';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CLIC INTIE: IE Position.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ECLIC__Registers_1ga70aa615d81bc48ea8ed2b64c09c2d63f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CLIC_INTIE_IE_Msk';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x1UL << CLIC_INTIE_IE_Pos)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '113';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CLIC INTIE: IE Mask.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1gaa34edbcf50501a1ef4ebe1e2fbfae2b5';
        define-mem-ref-line = '401';
        define-mem-ref-name = '__ECLIC_DisableIRQ';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1gae081f15804b168a9573aca186c6176aa';
        define-mem-ref-line = '367';
        define-mem-ref-name = '__ECLIC_EnableIRQ';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1gad91c17c202ac4f466a9501c88d23e825';
        define-mem-ref-line = '386';
        define-mem-ref-name = '__ECLIC_GetEnableIRQ';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ECLIC__Registers_1gac4ec4063ec15f49408130b8a095a2a91';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CLIC_INTATTR_TRIG_Pos';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
1U
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '115';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CLIC INTATTR: TRIG Position.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1gabe634783ac950552cb51588e78ff2a57';
        define-mem-ref-line = '495';
        define-mem-ref-name = '__ECLIC_GetTrigIRQ';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1gaecf87e71c0c4a2ee711f0c292c3ebd8a';
        define-mem-ref-line = '474';
        define-mem-ref-name = '__ECLIC_SetTrigIRQ';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ECLIC__Registers_1ga476263a60ffcbb45417ab2b6864d47b4';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CLIC_INTATTR_TRIG_Msk';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x3UL << CLIC_INTATTR_TRIG_Pos)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '116';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CLIC INTATTR: TRIG Mask.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1gabe634783ac950552cb51588e78ff2a57';
        define-mem-ref-line = '495';
        define-mem-ref-name = '__ECLIC_GetTrigIRQ';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1gaecf87e71c0c4a2ee711f0c292c3ebd8a';
        define-mem-ref-line = '474';
        define-mem-ref-name = '__ECLIC_SetTrigIRQ';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ECLIC__Registers_1ga49ea87f8a0207a2622f0ce467b7158dc';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CLIC_INTATTR_SHV_Pos';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0U
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '118';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CLIC INTATTR: SHV Position.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1gad7d7238a79c39c226a8289d027266cc0';
        define-mem-ref-line = '532';
        define-mem-ref-name = '__ECLIC_GetShvIRQ';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1ga226570d14c924615a955e07b9883e415';
        define-mem-ref-line = '513';
        define-mem-ref-name = '__ECLIC_SetShvIRQ';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ECLIC__Registers_1ga2b6efddec2286b358747be5985110b3a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CLIC_INTATTR_SHV_Msk';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x1UL << CLIC_INTATTR_SHV_Pos)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '119';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CLIC INTATTR: SHV Mask.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1gad7d7238a79c39c226a8289d027266cc0';
        define-mem-ref-line = '532';
        define-mem-ref-name = '__ECLIC_GetShvIRQ';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1ga226570d14c924615a955e07b9883e415';
        define-mem-ref-line = '513';
        define-mem-ref-name = '__ECLIC_SetShvIRQ';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ECLIC__Registers_1ga34443f8b2b2935d099e6a0119b96c712';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_MAX_NLBITS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
8U
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '121';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Max nlbit of the CLICINTCTLBITS.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1ga1ccefb6dd64211176683848ef52e5b8f';
        define-mem-ref-line = '618';
        define-mem-ref-name = '__ECLIC_GetLevelIRQ';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1ga5e47fae9a66b286f1d0df6799e5a244c';
        define-mem-ref-line = '679';
        define-mem-ref-name = '__ECLIC_GetPriorityIRQ';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1gae1d0b0d592b55bc57be6704ceeb314b1';
        define-mem-ref-line = '584';
        define-mem-ref-name = '__ECLIC_SetLevelIRQ';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1gaafd7870e3de2a0831a5ba0fec6795207';
        define-mem-ref-line = '649';
        define-mem-ref-name = '__ECLIC_SetPriorityIRQ';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ECLIC__Registers_1ga2bcc1789c000ec72b06b7d7e736aa1c3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_MODE_MTVEC_Msk';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
3U
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '122';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
ECLIC Mode mask for MTVT CSR Register.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1ga05bee6a5e41963ef1845c8a7e5a09c89';
        define-mem-ref-line = '782';
        define-mem-ref-name = '__get_exc_entry';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1ga2fe20dcdecc453c6709448944b1f5350';
        define-mem-ref-line = '821';
        define-mem-ref-name = '__get_nonvec_entry';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1gaec014abd3940e642f652b97b70d7ac8e';
        define-mem-ref-line = '764';
        define-mem-ref-name = '__set_exc_entry';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1gadbe0f14f32c5989304fd05faf0cff648';
        define-mem-ref-line = '799';
        define-mem-ref-name = '__set_nonvec_entry';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ECLIC__Registers_1ga6a01697e0ba89c691f98fee801f4a25c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_NON_VECTOR_INTERRUPT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '124';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Non-Vector Interrupt Mode of ECLIC.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__timer_8h_1ga349805c25d9aa753c6fd69b3c0151126';
        define-mem-ref-line = '426';
        define-mem-ref-name = 'SysTick_Config';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ECLIC__Registers_1ga915384ab6567d38315e8cf5a566f4840';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_VECTOR_INTERRUPT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '125';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Vector Interrupt Mode of ECLIC.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ECLIC__Registers_1gabc9b9f3a2d7717c1b174432bd462f33f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_BASE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_BASEADDR
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '146';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
ECLIC Base Address.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__ECLIC__Registers_1gab5a72455ad01a7caea954a82c907256d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
((CLIC_Type *) ECLIC_BASE)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '147';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
CLIC configuration struct.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1ga79f14465b1588b3c970efd8d55422638';
        define-mem-ref-line = '453';
        define-mem-ref-name = '__ECLIC_ClearPendingIRQ';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1gaa34edbcf50501a1ef4ebe1e2fbfae2b5';
        define-mem-ref-line = '401';
        define-mem-ref-name = '__ECLIC_DisableIRQ';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1gae081f15804b168a9573aca186c6176aa';
        define-mem-ref-line = '367';
        define-mem-ref-name = '__ECLIC_EnableIRQ';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1ga1dce18ecc4a504cc128c62596d25f3ab';
        define-mem-ref-line = '276';
        define-mem-ref-name = '__ECLIC_GetCfgNlbits';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1ga0c552df637ed3e5830ae27fc712593da';
        define-mem-ref-line = '564';
        define-mem-ref-name = '__ECLIC_GetCtrlIRQ';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1gad91c17c202ac4f466a9501c88d23e825';
        define-mem-ref-line = '386';
        define-mem-ref-name = '__ECLIC_GetEnableIRQ';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1ga6db42f6efa6f57690930a78b35c64b40';
        define-mem-ref-line = '309';
        define-mem-ref-name = '__ECLIC_GetInfoCtlbits';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1ga2875bb0f9e3ceb6c750dcd5396d099b7';
        define-mem-ref-line = '325';
        define-mem-ref-name = '__ECLIC_GetInfoNum';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1ga062b7c1b16828b4dbc502a303648dbb1';
        define-mem-ref-line = '292';
        define-mem-ref-name = '__ECLIC_GetInfoVer';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1ga36108f1b6b9e2545727701d856a63c6e';
        define-mem-ref-line = '351';
        define-mem-ref-name = '__ECLIC_GetMth';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1gaa20c0e2158dbe29f589468de10abde12';
        define-mem-ref-line = '420';
        define-mem-ref-name = '__ECLIC_GetPendingIRQ';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1gad7d7238a79c39c226a8289d027266cc0';
        define-mem-ref-line = '532';
        define-mem-ref-name = '__ECLIC_GetShvIRQ';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1gabe634783ac950552cb51588e78ff2a57';
        define-mem-ref-line = '495';
        define-mem-ref-name = '__ECLIC_GetTrigIRQ';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1ga38900ce869dd78e9b432ac90d8006082';
        define-mem-ref-line = '260';
        define-mem-ref-name = '__ECLIC_SetCfgNlbits';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1ga2c72ee40cad78719f6d60767b75f6dcd';
        define-mem-ref-line = '548';
        define-mem-ref-name = '__ECLIC_SetCtrlIRQ';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1gaf4be616cd91685175abee3f2af47b342';
        define-mem-ref-line = '338';
        define-mem-ref-name = '__ECLIC_SetMth';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1gadadcfda306ae9024c5e7a5a79c3d49de';
        define-mem-ref-line = '436';
        define-mem-ref-name = '__ECLIC_SetPendingIRQ';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1ga226570d14c924615a955e07b9883e415';
        define-mem-ref-line = '513';
        define-mem-ref-name = '__ECLIC_SetShvIRQ';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1gaecf87e71c0c4a2ee711f0c292c3ebd8a';
        define-mem-ref-line = '474';
        define-mem-ref-name = '__ECLIC_SetTrigIRQ';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1gad35a05a1e8fb89332d59c7db2904756b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_SetCfgNlbits';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_SetCfgNlbits
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '214';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1ga47f628da4dcf09a2fc43bfb7c8de1528';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_GetCfgNlbits';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_GetCfgNlbits
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '215';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1ga5d8158db12cd1bdfe0bfc82667eeffc5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_GetInfoVer';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_GetInfoVer
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '216';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1ga2b075534f2e421549ebe16b9c97a496f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_GetInfoCtlbits';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_GetInfoCtlbits
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '217';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1ga6308d1600c92e3f9dc67c7837c68f854';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_GetInfoNum';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_GetInfoNum
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '218';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1ga59e29ad3023110a58eb9163d976f44c6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_SetMth';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_SetMth
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '219';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1gaf52f1885d59864d30dd5da7681f5985b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_GetMth';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_GetMth
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '220';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1gaef478ada8e8906c9fe8d4dc2311a39e1';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_EnableIRQ';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_EnableIRQ
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '221';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__timer_8h_1ga349805c25d9aa753c6fd69b3c0151126';
        define-mem-ref-line = '426';
        define-mem-ref-name = 'SysTick_Config';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1gacc2434143882fd815f46f546ecaf1371';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_GetEnableIRQ';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_GetEnableIRQ
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '222';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1ga2fd91a5d186fe3fb4ca3bed07df78813';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_DisableIRQ';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_DisableIRQ
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '223';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1ga2776c309447ab5f7258266299df2f6aa';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_SetPendingIRQ';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_SetPendingIRQ
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '224';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1gaf5a8f8a271f159769eac14959748ec92';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_GetPendingIRQ';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_GetPendingIRQ
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '225';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1ga2006752b49d78e3247b2b355652a429a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_ClearPendingIRQ';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_ClearPendingIRQ
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '226';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1gac0681d16f62ce0b08e48e89131995a05';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_SetTrigIRQ';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_SetTrigIRQ
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '227';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1gadaaf360694309accdc74c0808161755c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_GetTrigIRQ';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_GetTrigIRQ
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '228';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1ga0bd2875fbd02a00bec78735940704c13';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_SetShvIRQ';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_SetShvIRQ
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '229';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__timer_8h_1ga349805c25d9aa753c6fd69b3c0151126';
        define-mem-ref-line = '426';
        define-mem-ref-name = 'SysTick_Config';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1gaa8dc0e0203d692a0cc565e59906fb706';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_GetShvIRQ';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_GetShvIRQ
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '230';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1ga44797af8a09e6b798cc7cb2bc3b9602b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_SetCtrlIRQ';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_SetCtrlIRQ
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '231';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1ga32d7fe236e9b906bfee340fb42a1a644';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_GetCtrlIRQ';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_GetCtrlIRQ
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '232';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1gad6f35a2f69908b97b083c5e31c1c5aad';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_SetLevelIRQ';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_SetLevelIRQ
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '233';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__timer_8h_1ga349805c25d9aa753c6fd69b3c0151126';
        define-mem-ref-line = '426';
        define-mem-ref-name = 'SysTick_Config';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1gaf323b6babdd4236644d84057332e7533';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_GetLevelIRQ';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_GetLevelIRQ
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '234';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1ga721375660a030d16e429a9718c1271c8';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_SetPriorityIRQ';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_SetPriorityIRQ
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '235';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1ga0fe4f3d20b099c74db7dfef3eea81817';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_GetPriorityIRQ';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_GetPriorityIRQ
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '236';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1gaa7cacacc369af014a0008fe3b5705b77';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_SetVector';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_SetVector
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '246';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1ga76b3769badcf8362e1cb6a058f65c65e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ECLIC_GetVector';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ECLIC_GetVector
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '247';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1gab7b083edd7a39c7aa7b17b5f43f13452';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SAVE_IRQ_CSR_CONTEXT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
rv_csr_t __mcause = __RV_CSR_READ(CSR_MCAUSE);                      \
        rv_csr_t __mepc = __RV_CSR_READ(CSR_MEPC);                          \
        rv_csr_t __msubm = __RV_CSR_READ(CSR_MSUBM);                        \
        __enable_irq();
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '876';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Save necessary CSRs into variables for vector interrupt nesting.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
This macro is used to declare variables which are used for saving
CSRs(MCAUSE, MEPC, MSUB), and it will read these CSR content into
these variables, it need to be used in a vector-interrupt if nesting
is required.
\remarks
- Interrupt will be enabled after this macro is called
- It need to be used together with \ref RESTORE_IRQ_CSR_CONTEXT
- Don't use variable names __mcause, __mpec, __msubm in your ISR code
- If you want to enable interrupt nesting feature for vector interrupt,
you can do it like this:
@code 
// __INTERRUPT attribute will generates function entry and exit sequences suitable
// for use in an interrupt handler when this attribute is present
__INTERRUPT void eclic_mtip_handler(void)
{
    // Must call this to save CSRs
    SAVE_IRQ_CSR_CONTEXT();
    // !!!Interrupt is enabled here!!!
    // !!!Higher priority interrupt could nest it!!!

    // put you own interrupt handling code here

    // Must call this to restore CSRs
    RESTORE_IRQ_CSR_CONTEXT();
}
\endcode
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExc_1gaefefc59dbf6bd6ef8cd0a9b58b2bbeaf';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'RESTORE_IRQ_CSR_CONTEXT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__disable_irq();                                                    \
        __RV_CSR_WRITE(CSR_MSUBM, __msubm);                                 \
        __RV_CSR_WRITE(CSR_MEPC, __mepc);                                   \
        __RV_CSR_WRITE(CSR_MCAUSE, __mcause);
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      define-mem-desc-line = '891';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Restore necessary CSRs from variables for vector interrupt nesting.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
This macro is used restore CSRs(MCAUSE, MEPC, MSUB) from pre-defined variables
in \ref SAVE_IRQ_CSR_CONTEXT macro.
\remarks
- Interrupt will be disabled after this macro is called
- It need to be used together with \ref SAVE_IRQ_CSR_CONTEXT
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    };
    enum = {
    enum-member = {
      enum-mem-kind = 'enum';
      enum-mem-id   = 'group__NMSIS__Core__ECLIC__Registers_1ga35f79c25d5118ccfde82872bc5946ecf';
      enum-mem-virt = normal;
      enum-mem-prot = public;
      enum-mem-name = 'ECLIC_TRIGGER_Type';
      enum-mem-enum = { enum-name = ECLIC_LEVEL_TRIGGER; enum-value = '= 0x0'; };
      enum-mem-enum = { enum-name = ECLIC_POSTIVE_EDGE_TRIGGER; enum-value = '= 0x1'; };
      enum-mem-enum = { enum-name = ECLIC_NEGTIVE_EDGE_TRIGGER; enum-value = '= 0x3'; };
      enum-mem-enum = { enum-name = ECLIC_MAX_TRIGGER; enum-value = '= 0x3'; };
      enum-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      enum-mem-desc-line = '128';
      enum-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
ECLIC Trigger Enum for different Trigger Type.
_EnD_oF_dEf_TeXt_;
      enum-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* enum-member */
    enum-member = {
      enum-mem-kind = 'enum';
      enum-mem-id   = 'group__NMSIS__Core__IntExc_1ga7e1129cd8a196f4284d41db3e82ad5c8';
      enum-mem-virt = normal;
      enum-mem-prot = public;
      enum-mem-name = 'IRQn_Type';
      enum-mem-enum = { enum-name = Reserved0_IRQn; enum-value = '=   0'; };
      enum-mem-enum = { enum-name = Reserved1_IRQn; enum-value = '=   1'; };
      enum-mem-enum = { enum-name = Reserved2_IRQn; enum-value = '=   2'; };
      enum-mem-enum = { enum-name = SysTimerSW_IRQn; enum-value = '=   3'; };
      enum-mem-enum = { enum-name = Reserved3_IRQn; enum-value = '=   4'; };
      enum-mem-enum = { enum-name = Reserved4_IRQn; enum-value = '=   5'; };
      enum-mem-enum = { enum-name = Reserved5_IRQn; enum-value = '=   6'; };
      enum-mem-enum = { enum-name = SysTimer_IRQn; enum-value = '=   7'; };
      enum-mem-enum = { enum-name = Reserved6_IRQn; enum-value = '=   8'; };
      enum-mem-enum = { enum-name = Reserved7_IRQn; enum-value = '=   9'; };
      enum-mem-enum = { enum-name = Reserved8_IRQn; enum-value = '=  10'; };
      enum-mem-enum = { enum-name = Reserved9_IRQn; enum-value = '=  11'; };
      enum-mem-enum = { enum-name = Reserved10_IRQn; enum-value = '=  12'; };
      enum-mem-enum = { enum-name = Reserved11_IRQn; enum-value = '=  13'; };
      enum-mem-enum = { enum-name = Reserved12_IRQn; enum-value = '=  14'; };
      enum-mem-enum = { enum-name = Reserved13_IRQn; enum-value = '=  15'; };
      enum-mem-enum = { enum-name = Reserved14_IRQn; enum-value = '=  16'; };
      enum-mem-enum = { enum-name = Reserved15_IRQn; enum-value = '=  17'; };
      enum-mem-enum = { enum-name = Reserved16_IRQn; enum-value = '=  18'; };
      enum-mem-enum = { enum-name = FirstDeviceSpecificInterrupt_IRQn; enum-value = '= 19'; };
      enum-mem-enum = { enum-name = SOC_INT_MAX; };
      enum-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      enum-mem-desc-line = '174';
      enum-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Definition of IRQn numbers.
_EnD_oF_dEf_TeXt_;
      enum-mem-documentation = <<_EnD_oF_dEf_TeXt_
The core interrupt enumeration names for IRQn values are defined in the file <b><Device>.h</b>.
- Interrupt ID(IRQn) from 0 to 18 are reserved for core internal interrupts.
- Interrupt ID(IRQn) start from 19 represent device-specific external interrupts.
- The first device-specific interrupt has the IRQn value 19.

The table below describes the core interrupt names and their availability in various Nuclei Cores.
_EnD_oF_dEf_TeXt_;
    }; /* enum-member */
    };
    func = {
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1ga38900ce869dd78e9b432ac90d8006082';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_SetCfgNlbits';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'nlbits';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '260';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set nlbits value.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function set the nlbits value of CLICCFG register.
\param [in]    nlbits    nlbits value
\remarks
- nlbits is used to set the width of level in the CLICINTCTL[i].
\sa
- \ref ECLIC_GetCfgNlbits
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga6c31823bbd3bd593dcecd6d7d5f0afbb';
        func-mem-ref-line = '98';
        func-mem-ref-name = 'CLIC_CLICCFG_NLBIT_Msk';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga0ee0922b5a83b6ff92fed6c9dea63da3';
        func-mem-ref-line = '97';
        func-mem-ref-name = 'CLIC_CLICCFG_NLBIT_Pos';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gab5a72455ad01a7caea954a82c907256d';
        func-mem-ref-line = '147';
        func-mem-ref-name = 'ECLIC';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1ga1dce18ecc4a504cc128c62596d25f3ab';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_GetCfgNlbits';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '276';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get nlbits value.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function get the nlbits value of CLICCFG register.
\return   nlbits value of CLICCFG register
\remarks
- nlbits is used to set the width of level in the CLICINTCTL[i].
\sa
- \ref ECLIC_SetCfgNlbits
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga6c31823bbd3bd593dcecd6d7d5f0afbb';
        func-mem-ref-line = '98';
        func-mem-ref-name = 'CLIC_CLICCFG_NLBIT_Msk';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga0ee0922b5a83b6ff92fed6c9dea63da3';
        func-mem-ref-line = '97';
        func-mem-ref-name = 'CLIC_CLICCFG_NLBIT_Pos';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gab5a72455ad01a7caea954a82c907256d';
        func-mem-ref-line = '147';
        func-mem-ref-name = 'ECLIC';
    };
      func-mem-referenceby = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga1ccefb6dd64211176683848ef52e5b8f';
        func-mem-ref-line = '618';
        func-mem-ref-name = '__ECLIC_GetLevelIRQ';
    };
      func-mem-referenceby = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga5e47fae9a66b286f1d0df6799e5a244c';
        func-mem-ref-line = '679';
        func-mem-ref-name = '__ECLIC_GetPriorityIRQ';
    };
      func-mem-referenceby = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gae1d0b0d592b55bc57be6704ceeb314b1';
        func-mem-ref-line = '584';
        func-mem-ref-name = '__ECLIC_SetLevelIRQ';
    };
      func-mem-referenceby = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gaafd7870e3de2a0831a5ba0fec6795207';
        func-mem-ref-line = '649';
        func-mem-ref-name = '__ECLIC_SetPriorityIRQ';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1ga062b7c1b16828b4dbc502a303648dbb1';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_GetInfoVer';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '292';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get the ECLIC version number.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function gets the hardware version information from CLICINFO register.
\return   hardware version number in CLICINFO register.
\remarks
- This function gets harware version information from CLICINFO register.
- Bit 20:17 for architecture version, bit 16:13 for implementation version.
\sa
- \ref ECLIC_GetInfoNum
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga2b40a58247f1ae1eb207ebfd224a6519';
        func-mem-ref-line = '104';
        func-mem-ref-name = 'CLIC_CLICINFO_VER_Msk';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga3047dd362f08b827b4f3595fdee555e1';
        func-mem-ref-line = '103';
        func-mem-ref-name = 'CLIC_CLICINFO_VER_Pos';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gab5a72455ad01a7caea954a82c907256d';
        func-mem-ref-line = '147';
        func-mem-ref-name = 'ECLIC';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1ga6db42f6efa6f57690930a78b35c64b40';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_GetInfoCtlbits';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '309';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get CLICINTCTLBITS.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function gets CLICINTCTLBITS from CLICINFO register.
\return  CLICINTCTLBITS from CLICINFO register.
\remarks
- In the CLICINTCTL[i] registers, with 2 <= CLICINTCTLBITS <= 8.
- The implemented bits are kept left-justified in the most-significant bits of each 8-bit
  CLICINTCTL[I] register, with the lower unimplemented bits treated as hardwired to 1.
\sa
- \ref ECLIC_GetInfoNum
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga146a1208d7982a0ec073f9c3bb77528f';
        func-mem-ref-line = '101';
        func-mem-ref-name = 'CLIC_CLICINFO_CTLBIT_Msk';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gac63632ddf28ed47570b441f003ba5c5f';
        func-mem-ref-line = '100';
        func-mem-ref-name = 'CLIC_CLICINFO_CTLBIT_Pos';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gab5a72455ad01a7caea954a82c907256d';
        func-mem-ref-line = '147';
        func-mem-ref-name = 'ECLIC';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1ga2875bb0f9e3ceb6c750dcd5396d099b7';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_GetInfoNum';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '325';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get number of maximum interrupt inputs supported.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function gets number of maximum interrupt inputs supported from CLICINFO register.
\return  number of maximum interrupt inputs supported from CLICINFO register.
\remarks
- This function gets number of maximum interrupt inputs supported from CLICINFO register.
- The num_interrupt field specifies the actual number of maximum interrupt inputs supported in this implementation.
\sa
- \ref ECLIC_GetInfoCtlbits
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga7f3148e774c092b06d81b400ac6c80bb';
        func-mem-ref-line = '107';
        func-mem-ref-name = 'CLIC_CLICINFO_NUM_Msk';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga39c37a90e1445851aede44b002a83a99';
        func-mem-ref-line = '106';
        func-mem-ref-name = 'CLIC_CLICINFO_NUM_Pos';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gab5a72455ad01a7caea954a82c907256d';
        func-mem-ref-line = '147';
        func-mem-ref-name = 'ECLIC';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1gaf4be616cd91685175abee3f2af47b342';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_SetMth';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'mth';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '338';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set Machine Mode Interrupt Level Threshold.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function sets machine mode interrupt level threshold.
\param [in]  mth       Interrupt Level Threshold.
\sa
- \ref ECLIC_GetMth
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gab5a72455ad01a7caea954a82c907256d';
        func-mem-ref-line = '147';
        func-mem-ref-name = 'ECLIC';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1ga36108f1b6b9e2545727701d856a63c6e';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint8_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_GetMth';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '351';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get Machine Mode Interrupt Level Threshold.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function gets machine mode interrupt level threshold.
\return       Interrupt Level Threshold.
\sa
- \ref ECLIC_SetMth
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gab5a72455ad01a7caea954a82c907256d';
        func-mem-ref-line = '147';
        func-mem-ref-name = 'ECLIC';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1gae081f15804b168a9573aca186c6176aa';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_EnableIRQ';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
IRQn_Type
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'IRQn';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '367';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Enable a specific interrupt.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function enables the specific interrupt \em IRQn.
\param [in]  IRQn  Interrupt number
\remarks
- IRQn must not be negative.
\sa
- \ref ECLIC_DisableIRQ
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga70aa615d81bc48ea8ed2b64c09c2d63f';
        func-mem-ref-line = '113';
        func-mem-ref-name = 'CLIC_INTIE_IE_Msk';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gab5a72455ad01a7caea954a82c907256d';
        func-mem-ref-line = '147';
        func-mem-ref-name = 'ECLIC';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1gad91c17c202ac4f466a9501c88d23e825';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_GetEnableIRQ';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
IRQn_Type
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'IRQn';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '386';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get a specific interrupt enable status.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function returns the interrupt enable status for the specific interrupt \em IRQn.
\param [in]  IRQn  Interrupt number
\returns
- 0  Interrupt is not enabled
- 1  Interrupt is pending
\remarks
- IRQn must not be negative.
\sa
- \ref ECLIC_EnableIRQ
- \ref ECLIC_DisableIRQ
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga70aa615d81bc48ea8ed2b64c09c2d63f';
        func-mem-ref-line = '113';
        func-mem-ref-name = 'CLIC_INTIE_IE_Msk';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gab5a72455ad01a7caea954a82c907256d';
        func-mem-ref-line = '147';
        func-mem-ref-name = 'ECLIC';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1gaa34edbcf50501a1ef4ebe1e2fbfae2b5';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_DisableIRQ';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
IRQn_Type
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'IRQn';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '401';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Disable a specific interrupt.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function disables the specific interrupt \em IRQn.
\param [in]  IRQn  Number of the external interrupt to disable
\remarks
- IRQn must not be negative.
\sa
- \ref ECLIC_EnableIRQ
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga70aa615d81bc48ea8ed2b64c09c2d63f';
        func-mem-ref-line = '113';
        func-mem-ref-name = 'CLIC_INTIE_IE_Msk';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gab5a72455ad01a7caea954a82c907256d';
        func-mem-ref-line = '147';
        func-mem-ref-name = 'ECLIC';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1gaa20c0e2158dbe29f589468de10abde12';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE int32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_GetPendingIRQ';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
IRQn_Type
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'IRQn';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '420';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get the pending specific interrupt.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function returns the pending status of the specific interrupt \em IRQn.
\param [in]      IRQn  Interrupt number
\returns
- 0  Interrupt is not pending
- 1  Interrupt is pending
\remarks
- IRQn must not be negative.
\sa
- \ref ECLIC_SetPendingIRQ
- \ref ECLIC_ClearPendingIRQ
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gad7395594207c3fa20c423a1c9ae26cb7';
        func-mem-ref-line = '110';
        func-mem-ref-name = 'CLIC_INTIP_IP_Msk';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gab5a72455ad01a7caea954a82c907256d';
        func-mem-ref-line = '147';
        func-mem-ref-name = 'ECLIC';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1gadadcfda306ae9024c5e7a5a79c3d49de';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_SetPendingIRQ';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
IRQn_Type
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'IRQn';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '436';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set a specific interrupt to pending.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function sets the pending bit for the specific interrupt \em IRQn.
\param [in]      IRQn  Interrupt number
\remarks
- IRQn must not be negative.
\sa
- \ref ECLIC_GetPendingIRQ
- \ref ECLIC_ClearPendingIRQ
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gad7395594207c3fa20c423a1c9ae26cb7';
        func-mem-ref-line = '110';
        func-mem-ref-name = 'CLIC_INTIP_IP_Msk';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gab5a72455ad01a7caea954a82c907256d';
        func-mem-ref-line = '147';
        func-mem-ref-name = 'ECLIC';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1ga79f14465b1588b3c970efd8d55422638';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_ClearPendingIRQ';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
IRQn_Type
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'IRQn';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '453';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Clear a specific interrupt from pending.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function removes the pending state of the specific interrupt \em IRQn.
\em IRQn cannot be a negative number.
\param [in]      IRQn  Interrupt number
\remarks
- IRQn must not be negative.
\sa
- \ref ECLIC_SetPendingIRQ
- \ref ECLIC_GetPendingIRQ
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gad7395594207c3fa20c423a1c9ae26cb7';
        func-mem-ref-line = '110';
        func-mem-ref-name = 'CLIC_INTIP_IP_Msk';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gab5a72455ad01a7caea954a82c907256d';
        func-mem-ref-line = '147';
        func-mem-ref-name = 'ECLIC';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1gaecf87e71c0c4a2ee711f0c292c3ebd8a';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_SetTrigIRQ';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
IRQn_Type
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'IRQn';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'trig';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '474';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set trigger mode and polarity for a specific interrupt.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function set trigger mode and polarity of the specific interrupt \em IRQn.
\param [in]      IRQn  Interrupt number
\param [in]      trig
                  - 00  level trigger, \ref ECLIC_LEVEL_TRIGGER
                  - 01  positive edge trigger, \ref ECLIC_POSTIVE_EDGE_TRIGGER
                  - 02  level trigger, \ref ECLIC_LEVEL_TRIGGER
                  - 03  negative edge trigger, \ref ECLIC_NEGTIVE_EDGE_TRIGGER
\remarks
- IRQn must not be negative.

\sa
- \ref ECLIC_GetTrigIRQ
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga476263a60ffcbb45417ab2b6864d47b4';
        func-mem-ref-line = '116';
        func-mem-ref-name = 'CLIC_INTATTR_TRIG_Msk';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gac4ec4063ec15f49408130b8a095a2a91';
        func-mem-ref-line = '115';
        func-mem-ref-name = 'CLIC_INTATTR_TRIG_Pos';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gab5a72455ad01a7caea954a82c907256d';
        func-mem-ref-line = '147';
        func-mem-ref-name = 'ECLIC';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1gabe634783ac950552cb51588e78ff2a57';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_GetTrigIRQ';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
IRQn_Type
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'IRQn';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '495';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get trigger mode and polarity for a specific interrupt.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function get trigger mode and polarity of the specific interrupt \em IRQn.
\param [in]      IRQn  Interrupt number
\return
                - 00  level trigger, \ref ECLIC_LEVEL_TRIGGER
                - 01  positive edge trigger, \ref ECLIC_POSTIVE_EDGE_TRIGGER
                - 02  level trigger, \ref ECLIC_LEVEL_TRIGGER
                - 03  negative edge trigger, \ref ECLIC_NEGTIVE_EDGE_TRIGGER
\remarks
    - IRQn must not be negative.
\sa
    - \ref ECLIC_SetTrigIRQ
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga476263a60ffcbb45417ab2b6864d47b4';
        func-mem-ref-line = '116';
        func-mem-ref-name = 'CLIC_INTATTR_TRIG_Msk';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gac4ec4063ec15f49408130b8a095a2a91';
        func-mem-ref-line = '115';
        func-mem-ref-name = 'CLIC_INTATTR_TRIG_Pos';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gab5a72455ad01a7caea954a82c907256d';
        func-mem-ref-line = '147';
        func-mem-ref-name = 'ECLIC';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1ga226570d14c924615a955e07b9883e415';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_SetShvIRQ';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
IRQn_Type
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'IRQn';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'shv';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '513';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set interrupt working mode for a specific interrupt.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function set selective hardware vector or non-vector working mode of the specific interrupt \em IRQn.
\param [in]      IRQn  Interrupt number
\param [in]      shv
                       - 0  non-vector mode, \ref ECLIC_NON_VECTOR_INTERRUPT
                       - 1  vector mode, \ref ECLIC_VECTOR_INTERRUPT
\remarks
- IRQn must not be negative.
\sa
- \ref ECLIC_GetShvIRQ
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga2b6efddec2286b358747be5985110b3a';
        func-mem-ref-line = '119';
        func-mem-ref-name = 'CLIC_INTATTR_SHV_Msk';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga49ea87f8a0207a2622f0ce467b7158dc';
        func-mem-ref-line = '118';
        func-mem-ref-name = 'CLIC_INTATTR_SHV_Pos';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gab5a72455ad01a7caea954a82c907256d';
        func-mem-ref-line = '147';
        func-mem-ref-name = 'ECLIC';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1gad7d7238a79c39c226a8289d027266cc0';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_GetShvIRQ';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
IRQn_Type
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'IRQn';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '532';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get interrupt working mode for a specific interrupt.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function get selective hardware vector or non-vector working mode of the specific interrupt \em IRQn.
\param [in]      IRQn  Interrupt number
\return       shv
                       - 0  non-vector mode, \ref ECLIC_NON_VECTOR_INTERRUPT
                       - 1  vector mode, \ref ECLIC_VECTOR_INTERRUPT
\remarks
- IRQn must not be negative.
\sa
- \ref ECLIC_SetShvIRQ
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga2b6efddec2286b358747be5985110b3a';
        func-mem-ref-line = '119';
        func-mem-ref-name = 'CLIC_INTATTR_SHV_Msk';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga49ea87f8a0207a2622f0ce467b7158dc';
        func-mem-ref-line = '118';
        func-mem-ref-name = 'CLIC_INTATTR_SHV_Pos';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gab5a72455ad01a7caea954a82c907256d';
        func-mem-ref-line = '147';
        func-mem-ref-name = 'ECLIC';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1ga2c72ee40cad78719f6d60767b75f6dcd';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_SetCtrlIRQ';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
IRQn_Type
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'IRQn';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'intctrl';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '548';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Modify ECLIC Interrupt Input Control Register for a specific interrupt.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function modify ECLIC Interrupt Input Control(CLICINTCTL[i]) register of the specific interrupt \em IRQn.
\param [in]      IRQn  Interrupt number
\param [in]      intctrl  Set value for CLICINTCTL[i] register
\remarks
- IRQn must not be negative.
\sa
- \ref ECLIC_GetCtrlIRQ
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gab5a72455ad01a7caea954a82c907256d';
        func-mem-ref-line = '147';
        func-mem-ref-name = 'ECLIC';
    };
      func-mem-referenceby = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gae1d0b0d592b55bc57be6704ceeb314b1';
        func-mem-ref-line = '584';
        func-mem-ref-name = '__ECLIC_SetLevelIRQ';
    };
      func-mem-referenceby = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gaafd7870e3de2a0831a5ba0fec6795207';
        func-mem-ref-line = '649';
        func-mem-ref-name = '__ECLIC_SetPriorityIRQ';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1ga0c552df637ed3e5830ae27fc712593da';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint8_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_GetCtrlIRQ';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
IRQn_Type
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'IRQn';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '564';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get ECLIC Interrupt Input Control Register value for a specific interrupt.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function modify ECLIC Interrupt Input Control register of the specific interrupt \em IRQn.
\param [in]      IRQn  Interrupt number
\return       value of ECLIC Interrupt Input Control register
\remarks
- IRQn must not be negative.
\sa
- \ref ECLIC_SetCtrlIRQ
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gab5a72455ad01a7caea954a82c907256d';
        func-mem-ref-line = '147';
        func-mem-ref-name = 'ECLIC';
    };
      func-mem-referenceby = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga1ccefb6dd64211176683848ef52e5b8f';
        func-mem-ref-line = '618';
        func-mem-ref-name = '__ECLIC_GetLevelIRQ';
    };
      func-mem-referenceby = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga5e47fae9a66b286f1d0df6799e5a244c';
        func-mem-ref-line = '679';
        func-mem-ref-name = '__ECLIC_GetPriorityIRQ';
    };
      func-mem-referenceby = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gae1d0b0d592b55bc57be6704ceeb314b1';
        func-mem-ref-line = '584';
        func-mem-ref-name = '__ECLIC_SetLevelIRQ';
    };
      func-mem-referenceby = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gaafd7870e3de2a0831a5ba0fec6795207';
        func-mem-ref-line = '649';
        func-mem-ref-name = '__ECLIC_SetPriorityIRQ';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1gae1d0b0d592b55bc57be6704ceeb314b1';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_SetLevelIRQ';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
IRQn_Type
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'IRQn';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'lvl_abs';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '584';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set ECLIC Interrupt level of a specific interrupt.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function set interrupt level of the specific interrupt \em IRQn.
\param [in]      IRQn  Interrupt number
\param [in]      lvl_abs   Interrupt level
\remarks
- IRQn must not be negative.
- If lvl_abs to be set is larger than the max level allowed, it will be force to be max level.
- When you set level value you need use clciinfo.nlbits to get the width of level.
  Then we could know the maximum of level. CLICINTCTLBITS is how many total bits are
  present in the CLICINTCTL register.
\sa
- \ref ECLIC_GetLevelIRQ
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga1dce18ecc4a504cc128c62596d25f3ab';
        func-mem-ref-line = '276';
        func-mem-ref-name = '__ECLIC_GetCfgNlbits';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga0c552df637ed3e5830ae27fc712593da';
        func-mem-ref-line = '564';
        func-mem-ref-name = '__ECLIC_GetCtrlIRQ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga2c72ee40cad78719f6d60767b75f6dcd';
        func-mem-ref-line = '548';
        func-mem-ref-name = '__ECLIC_SetCtrlIRQ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga34443f8b2b2935d099e6a0119b96c712';
        func-mem-ref-line = '121';
        func-mem-ref-name = 'ECLIC_MAX_NLBITS';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1ga1ccefb6dd64211176683848ef52e5b8f';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint8_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_GetLevelIRQ';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
IRQn_Type
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'IRQn';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '618';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get ECLIC Interrupt level of a specific interrupt.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function get interrupt level of the specific interrupt \em IRQn.
\param [in]      IRQn  Interrupt number
\return         Interrupt level
\remarks
- IRQn must not be negative.
\sa
- \ref ECLIC_SetLevelIRQ
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga1dce18ecc4a504cc128c62596d25f3ab';
        func-mem-ref-line = '276';
        func-mem-ref-name = '__ECLIC_GetCfgNlbits';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga0c552df637ed3e5830ae27fc712593da';
        func-mem-ref-line = '564';
        func-mem-ref-name = '__ECLIC_GetCtrlIRQ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga34443f8b2b2935d099e6a0119b96c712';
        func-mem-ref-line = '121';
        func-mem-ref-name = 'ECLIC_MAX_NLBITS';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1gaafd7870e3de2a0831a5ba0fec6795207';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_SetPriorityIRQ';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
IRQn_Type
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'IRQn';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'pri';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '649';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get ECLIC Interrupt priority of a specific interrupt.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function get interrupt priority of the specific interrupt \em IRQn.
\param [in]      IRQn  Interrupt number
\param [in]      pri   Interrupt priority
\remarks
- IRQn must not be negative.
- If pri to be set is larger than the max priority allowed, it will be force to be max priority.
- Priority width is CLICINTCTLBITS minus clciinfo.nlbits if clciinfo.nlbits
  is less than CLICINTCTLBITS. Otherwise priority width is 0.
\sa
- \ref ECLIC_GetPriorityIRQ
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga1dce18ecc4a504cc128c62596d25f3ab';
        func-mem-ref-line = '276';
        func-mem-ref-name = '__ECLIC_GetCfgNlbits';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga0c552df637ed3e5830ae27fc712593da';
        func-mem-ref-line = '564';
        func-mem-ref-name = '__ECLIC_GetCtrlIRQ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga2c72ee40cad78719f6d60767b75f6dcd';
        func-mem-ref-line = '548';
        func-mem-ref-name = '__ECLIC_SetCtrlIRQ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga34443f8b2b2935d099e6a0119b96c712';
        func-mem-ref-line = '121';
        func-mem-ref-name = 'ECLIC_MAX_NLBITS';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1ga5e47fae9a66b286f1d0df6799e5a244c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint8_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_GetPriorityIRQ';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
IRQn_Type
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'IRQn';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '679';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get ECLIC Interrupt priority of a specific interrupt.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function get interrupt priority of the specific interrupt \em IRQn.
\param [in]      IRQn  Interrupt number
\return   Interrupt priority
\remarks
- IRQn must not be negative.
\sa
- \ref ECLIC_SetPriorityIRQ
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga1dce18ecc4a504cc128c62596d25f3ab';
        func-mem-ref-line = '276';
        func-mem-ref-name = '__ECLIC_GetCfgNlbits';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga0c552df637ed3e5830ae27fc712593da';
        func-mem-ref-line = '564';
        func-mem-ref-name = '__ECLIC_GetCtrlIRQ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga34443f8b2b2935d099e6a0119b96c712';
        func-mem-ref-line = '121';
        func-mem-ref-name = 'ECLIC_MAX_NLBITS';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1ga2e80049df57b285d4dd43454377c0845';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_SetVector';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
IRQn_Type
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'IRQn';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'vector';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '710';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set Interrupt Vector of a specific interrupt.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function set interrupt handler address of the specific interrupt \em IRQn.
\param [in]      IRQn  Interrupt number
\param [in]      vector   Interrupt handler address
\remarks
- IRQn must not be negative.
- You can set the \ref CSR_CSR_MTVT to set interrupt vector table entry address.
- If your vector table is placed in readonly section, the vector for IRQn will not be modified.
  For this case, you need to use the correct irq handler name defined in your vector table as
  your irq handler function name.
- This function will only work correctly when the vector table is placed in an read-write enabled section.
\sa
- \ref ECLIC_GetVector
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga5b4c34e720fb0c9e939540333dd640e6';
        func-mem-ref-line = '869';
        func-mem-ref-name = '__FENCE_I';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '478';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga5e44edb3f3d95986c92f8efad5db0c2c';
        func-mem-ref-line = '594';
        func-mem-ref-name = 'CSR_MTVT';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1ga7b8025dd8eac9993066d730cee6475a0';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE rv_csr_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__ECLIC_GetVector';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
IRQn_Type
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'IRQn';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '742';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get Interrupt Vector of a specific interrupt.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function get interrupt handler address of the specific interrupt \em IRQn.
\param [in]      IRQn  Interrupt number
\return        Interrupt handler address
\remarks
- IRQn must not be negative.
- You can read \ref CSR_CSR_MTVT to get interrupt vector table entry address.
\sa
    - \ref ECLIC_SetVector
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '478';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga5e44edb3f3d95986c92f8efad5db0c2c';
        func-mem-ref-line = '594';
        func-mem-ref-name = 'CSR_MTVT';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1gaec014abd3940e642f652b97b70d7ac8e';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__set_exc_entry';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '764';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set Exception entry address.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function set exception handler address to 'CSR_MTVEC'.
\param [in]      addr  Exception handler address
\remarks
- This function use to set exception handler address to 'CSR_MTVEC'.
  Address need to be aligned to 64 bytes.
\sa
- \ref __get_exc_entry
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '496';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga22f5cd17199a966b4b840dd56d151216';
        func-mem-ref-line = '406';
        func-mem-ref-name = 'CSR_MTVEC';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga2bcc1789c000ec72b06b7d7e736aa1c3';
        func-mem-ref-line = '122';
        func-mem-ref-name = 'ECLIC_MODE_MTVEC_Msk';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1ga05bee6a5e41963ef1845c8a7e5a09c89';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE rv_csr_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__get_exc_entry';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '782';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get Exception entry address.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function get exception handler address from 'CSR_MTVEC'.
\return       Exception handler address
\remarks
- This function use to get exception handler address from 'CSR_MTVEC'.
  Address need to be aligned to 64 bytes.
\sa
- \ref __set_exc_entry
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '478';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga22f5cd17199a966b4b840dd56d151216';
        func-mem-ref-line = '406';
        func-mem-ref-name = 'CSR_MTVEC';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga2bcc1789c000ec72b06b7d7e736aa1c3';
        func-mem-ref-line = '122';
        func-mem-ref-name = 'ECLIC_MODE_MTVEC_Msk';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1gadbe0f14f32c5989304fd05faf0cff648';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__set_nonvec_entry';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'addr';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '799';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set Non-vector interrupt entry address.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function set Non-vector interrupt address.
\param [in]      addr  Non-vector interrupt entry address
\remarks
- This function use to set non-vector interrupt entry address to 'CSR_MTVT2' if
- CSR_MTVT2 bit0 is 1. If 'CSR_MTVT2' bit0 is 0 then set address to 'CSR_MTVEC'
\sa
- \ref __get_nonvec_entry
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '478';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '496';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga22f5cd17199a966b4b840dd56d151216';
        func-mem-ref-line = '406';
        func-mem-ref-name = 'CSR_MTVEC';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga7d9dcb2dd7d7c764aab4b68033b383f2';
        func-mem-ref-line = '626';
        func-mem-ref-name = 'CSR_MTVT2';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga2bcc1789c000ec72b06b7d7e736aa1c3';
        func-mem-ref-line = '122';
        func-mem-ref-name = 'ECLIC_MODE_MTVEC_Msk';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1ga2fe20dcdecc453c6709448944b1f5350';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE rv_csr_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__get_nonvec_entry';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '821';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get Non-vector interrupt entry address.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function get Non-vector interrupt address.
\return      Non-vector interrupt handler address
\remarks
- This function use to get non-vector interrupt entry address from 'CSR_MTVT2' if
- CSR_MTVT2 bit0 is 1. If 'CSR_MTVT2' bit0 is 0 then get address from 'CSR_MTVEC'.
\sa
- \ref __set_nonvec_entry
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '478';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga22f5cd17199a966b4b840dd56d151216';
        func-mem-ref-line = '406';
        func-mem-ref-name = 'CSR_MTVEC';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga7d9dcb2dd7d7c764aab4b68033b383f2';
        func-mem-ref-line = '626';
        func-mem-ref-name = 'CSR_MTVT2';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga2bcc1789c000ec72b06b7d7e736aa1c3';
        func-mem-ref-line = '122';
        func-mem-ref-name = 'ECLIC_MODE_MTVEC_Msk';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExc_1gac5b9521ea1bd5260330714b8032d04d5';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE rv_csr_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__get_nmi_entry';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
      func-mem-desc-line = '841';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get NMI interrupt entry from 'CSR_MNVEC'.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function get NMI interrupt address from 'CSR_MNVEC'.
\return      NMI interrupt handler address
\remarks
- This function use to get NMI interrupt handler address from 'CSR_MNVEC'. If CSR_MMISC_CTL[9] = 1 'CSR_MNVEC'
- will be equal as mtvec. If CSR_MMISC_CTL[9] = 0 'CSR_MNVEC' will be equal as reset vector.
- NMI entry is defined via \ref CSR_MMISC_CTL, writing to \ref CSR_MNVEC will be ignored.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '478';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga13df3ff8aec804cae346b61b2643c589';
        func-mem-ref-line = '609';
        func-mem-ref-name = 'CSR_MNVEC';
    };
    }; /* func-member */
    };
  file-full-name  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_eclic.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
ECLIC feature API header file for Nuclei N/NX Core.
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_



_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'core__feature__fpu_8h';
  file-name = 'core_feature_fpu.h';
    define = {
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__FPU__Functions_1gafa83f561b446add5c453e0feb255d2e6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RISCV_FLEN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
64
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_fpu.h';
      define-mem-desc-line = '61';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__FPU__Functions_1ga8cc990586c8cd66746a89ea04a952306';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__get_FCSR';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_CSR_READ(CSR_FCSR)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_fpu.h';
      define-mem-desc-line = '67';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get FCSR CSR Register.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__FPU__Functions_1ga2a5b820d47fe120ac23382db72f6cbb8';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__set_FCSR';
      define-mem-param  = {
        define-mem-def-name = 'val';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_CSR_WRITE(CSR_FCSR, (val))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_fpu.h';
      define-mem-desc-line = '69';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set FCSR CSR Register with val.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__FPU__Functions_1gaa6595ca9d101dda1feb9826d0905bd60';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__get_FRM';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_CSR_READ(CSR_FRM)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_fpu.h';
      define-mem-desc-line = '71';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get FRM CSR Register.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__FPU__Functions_1gaae42d30f7a65effccb13210406c69f6a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__set_FRM';
      define-mem-param  = {
        define-mem-def-name = 'val';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_CSR_WRITE(CSR_FRM, (val))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_fpu.h';
      define-mem-desc-line = '73';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set FRM CSR Register with val.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__FPU__Functions_1gaa679e9260657efa33c5340841e8a6aff';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__get_FFLAGS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_CSR_READ(CSR_FFLAGS)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_fpu.h';
      define-mem-desc-line = '75';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get FFLAGS CSR Register.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__FPU__Functions_1ga5c875e72325d398dc16301eec09eec0d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__set_FFLAGS';
      define-mem-param  = {
        define-mem-def-name = 'val';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_CSR_WRITE(CSR_FFLAGS, (val))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_fpu.h';
      define-mem-desc-line = '77';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set FFLAGS CSR Register with val.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__FPU__Functions_1ga56907288398563598c7ed6c203bde07c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__enable_FPU';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_CSR_SET(CSR_MSTATUS, MSTATUS_FS)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_fpu.h';
      define-mem-desc-line = '80';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Enable FPU Unit.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__FPU__Functions_1ga3cb1d30a444036111b1e83853315e11a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__disable_FPU';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_CSR_CLEAR(CSR_MSTATUS, MSTATUS_FS)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_fpu.h';
      define-mem-desc-line = '88';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Disable FPU Unit.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
* We can save power by disable FPU Unit.
* When FPU Unit is disabled, any access to FPU related CSR registers
and FPU instructions will cause illegal Instuction Exception.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__FPU__Functions_1gada7714c5b13faee62cd17c11b33099bc';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_FLW';
      define-mem-param  = {
        define-mem-def-name = 'freg';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'addr';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'ofs';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
({                                                         \
        register rv_csr_t __addr = (rv_csr_t)(addr);           \
        __ASM volatile("flw " STRINGIFY(freg) ", %0(%1)  "     \
                     : : "I"(ofs), "r"(__addr)                 \
                     : "memory");                              \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_fpu.h';
      define-mem-desc-line = '105';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Load a single-precision value from memory into float point register freg using flw instruction.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
The FLW instruction loads a single-precision floating point value from memory
address (addr + ofs) into floating point register freg(f0-f31)
\param [in]    freg   The floating point register, eg. FREG(0), f0
\param [in]    addr   The memory base address, 4 byte aligned required
\param [in]    ofs    a 12-bit immediate signed byte offset value, should be an const value
\remarks
* FLW and FSW operations need to make sure the address is 4 bytes aligned,
  otherwise it will cause exception code 4(Load address misaligned) or 6 (Store/AMO address misaligned)
* FLW and FSW do not modify the bits being transferred; in particular, the payloads of non-canonical
NaNs are preserved
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__FPU__Functions_1ga8589da14b8ba3b8370752efc3e71f060';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_FSW';
      define-mem-param  = {
        define-mem-def-name = 'freg';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'addr';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'ofs';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
({                                                         \
        register rv_csr_t __addr = (rv_csr_t)(addr);           \
        __ASM volatile("fsw " STRINGIFY(freg) ", %0(%1)  "     \
                     : : "I"(ofs), "r"(__addr)                 \
                     : "memory");                              \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_fpu.h';
      define-mem-desc-line = '126';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Store a single-precision value from float point freg into memory using fsw instruction.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
The FSW instruction stores a single-precision value from floating point register to memory
\param [in]    freg   The floating point register(f0-f31), eg. FREG(0), f0
\param [in]    addr   The memory base address, 4 byte aligned required
\param [in]    ofs    a 12-bit immediate signed byte offset value, should be an const value
\remarks
* FLW and FSW operations need to make sure the address is 4 bytes aligned,
  otherwise it will cause exception code 4(Load address misaligned) or 6 (Store/AMO address misaligned)
* FLW and FSW do not modify the bits being transferred; in particular, the payloads of non-canonical
NaNs are preserved
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__FPU__Functions_1gad4c739198e28d81dc036a4ceafeaaa14';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_FLD';
      define-mem-param  = {
        define-mem-def-name = 'freg';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'addr';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'ofs';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
({                                                         \
        register rv_csr_t __addr = (rv_csr_t)(addr);           \
        __ASM volatile("fld " STRINGIFY(freg) ", %0(%1)  "     \
                     : : "I"(ofs), "r"(__addr)                 \
                     : "memory");                              \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_fpu.h';
      define-mem-desc-line = '149';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Load a double-precision value from memory into float point register freg using fld instruction.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
The FLD instruction loads a double-precision floating point value from memory
address (addr + ofs) into floating point register freg(f0-f31)
\param [in]    freg   The floating point register, eg. FREG(0), f0
\param [in]    addr   The memory base address, 8 byte aligned required
\param [in]    ofs    a 12-bit immediate signed byte offset value, should be an const value
\attention
* Function only available for double precision floating point unit, FLEN = 64
\remarks
* FLD and FSD operations need to make sure the address is 8 bytes aligned,
  otherwise it will cause exception code 4(Load address misaligned) or 6 (Store/AMO address misaligned)
* FLD and FSD do not modify the bits being transferred; in particular, the payloads of non-canonical
NaNs are preserved.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__FPU__Functions_1gacabdf0d10c9c364361d498887d2a31ee';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_FSD';
      define-mem-param  = {
        define-mem-def-name = 'freg';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'addr';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'ofs';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
({                                                         \
        register rv_csr_t __addr = (rv_csr_t)(addr);           \
        __ASM volatile("fsd " STRINGIFY(freg) ", %0(%1)  "     \
                     : : "I"(ofs), "r"(__addr)                 \
                     : "memory");                              \
    })
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_fpu.h';
      define-mem-desc-line = '172';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Store a double-precision value from float point freg into memory using fsd instruction.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
The FSD instruction stores double-precision value from floating point register to memory
\param [in]    freg   The floating point register(f0-f31), eg. FREG(0), f0
\param [in]    addr   The memory base address, 8 byte aligned required
\param [in]    ofs    a 12-bit immediate signed byte offset value, should be an const value
\attention
* Function only available for double precision floating point unit, FLEN = 64
\remarks
* FLD and FSD operations need to make sure the address is 8 bytes aligned,
  otherwise it will cause exception code 4(Load address misaligned) or 6 (Store/AMO address misaligned)
* FLD and FSD do not modify the bits being transferred; in particular, the payloads of non-canonical
NaNs are preserved.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__FPU__Functions_1ga7284e0420eb63c1858739f326695c3d7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_FLOAD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_FLD
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_fpu.h';
      define-mem-desc-line = '210';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Load a float point value from memory into float point register freg using flw/fld instruction.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
* For Single-Precison Floating-Point Mode(__FPU_PRESENT == 1, __RISCV_FLEN == 32):
  It will call \ref __RV_FLW to load a single-precision floating point value from memory to floating point register
* For Double-Precison Floating-Point Mode(__FPU_PRESENT == 2, __RISCV_FLEN == 64):
  It will call \ref __RV_FLD to load a double-precision floating point value from memory to floating point register

\attention
Function behaviour is different for __FPU_PRESENT = 1 or 2, please see the real function this macro represent
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__FPU__Functions_1gafeca0b04cdcb27f77b10f2ece682e4a3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_FSTORE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_FSD
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_fpu.h';
      define-mem-desc-line = '211';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Store a float value from float point freg into memory using fsw/fsd instruction.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
* For Single-Precison Floating-Point Mode(__FPU_PRESENT == 1, __RISCV_FLEN == 32):
  It will call \ref __RV_FSW to store floating point register into memory
* For Double-Precison Floating-Point Mode(__FPU_PRESENT == 2, __RISCV_FLEN == 64):
  It will call \ref __RV_FSD to store floating point register into memory

\attention
Function behaviour is different for __FPU_PRESENT = 1 or 2, please see the real function this macro represent
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__FPU__Functions_1ga84c57d7bc6ecc4dcb457283e84636cb0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SAVE_FPU_CONTEXT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
rv_fpu_t __fpu_context[20];                                         \
        __RV_FSTORE(FREG(0),  __fpu_context, 0  << LOG_FPREGBYTES);         \
        __RV_FSTORE(FREG(1),  __fpu_context, 1  << LOG_FPREGBYTES);         \
        __RV_FSTORE(FREG(2),  __fpu_context, 2  << LOG_FPREGBYTES);         \
        __RV_FSTORE(FREG(3),  __fpu_context, 3  << LOG_FPREGBYTES);         \
        __RV_FSTORE(FREG(4),  __fpu_context, 4  << LOG_FPREGBYTES);         \
        __RV_FSTORE(FREG(5),  __fpu_context, 5  << LOG_FPREGBYTES);         \
        __RV_FSTORE(FREG(6),  __fpu_context, 6  << LOG_FPREGBYTES);         \
        __RV_FSTORE(FREG(7),  __fpu_context, 7  << LOG_FPREGBYTES);         \
        __RV_FSTORE(FREG(10), __fpu_context, 8  << LOG_FPREGBYTES);         \
        __RV_FSTORE(FREG(11), __fpu_context, 9  << LOG_FPREGBYTES);         \
        __RV_FSTORE(FREG(12), __fpu_context, 10 << LOG_FPREGBYTES);         \
        __RV_FSTORE(FREG(13), __fpu_context, 11 << LOG_FPREGBYTES);         \
        __RV_FSTORE(FREG(14), __fpu_context, 12 << LOG_FPREGBYTES);         \
        __RV_FSTORE(FREG(15), __fpu_context, 13 << LOG_FPREGBYTES);         \
        __RV_FSTORE(FREG(16), __fpu_context, 14 << LOG_FPREGBYTES);         \
        __RV_FSTORE(FREG(17), __fpu_context, 15 << LOG_FPREGBYTES);         \
        __RV_FSTORE(FREG(28), __fpu_context, 16 << LOG_FPREGBYTES);         \
        __RV_FSTORE(FREG(29), __fpu_context, 17 << LOG_FPREGBYTES);         \
        __RV_FSTORE(FREG(30), __fpu_context, 18 << LOG_FPREGBYTES);         \
        __RV_FSTORE(FREG(31), __fpu_context, 19 << LOG_FPREGBYTES);
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_fpu.h';
      define-mem-desc-line = '245';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Save FPU context into variables for interrupt nesting.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
This macro is used to declare variables which are used for saving
FPU context, and it will store the nessary fpu registers into
these variables, it need to be used in a interrupt when in this
interrupt fpu registers are used.
\remarks
- It need to be used together with \ref RESTORE_FPU_CONTEXT
- Don't use variable names __fpu_context in your ISR code
- If you isr code will use fpu registers, and this interrupt is nested.
Then you can do it like this:
@code 
void eclic_mtip_handler(void)
{
    // !!!Interrupt is enabled here!!!
    // !!!Higher priority interrupt could nest it!!!

    // Necessary only when you need to use fpu registers
    // in this isr handler functions
    SAVE_FPU_CONTEXT();

    // put you own interrupt handling code here

    // pair of SAVE_FPU_CONTEXT()
    RESTORE_FPU_CONTEXT();
}
\endcode
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__FPU__Functions_1ga9a78b83eedadc42478e23a10aa8ebc07';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'RESTORE_FPU_CONTEXT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__RV_FLOAD(FREG(0),  __fpu_context, 0  << LOG_FPREGBYTES);          \
        __RV_FLOAD(FREG(1),  __fpu_context, 1  << LOG_FPREGBYTES);          \
        __RV_FLOAD(FREG(2),  __fpu_context, 2  << LOG_FPREGBYTES);          \
        __RV_FLOAD(FREG(3),  __fpu_context, 3  << LOG_FPREGBYTES);          \
        __RV_FLOAD(FREG(4),  __fpu_context, 4  << LOG_FPREGBYTES);          \
        __RV_FLOAD(FREG(5),  __fpu_context, 5  << LOG_FPREGBYTES);          \
        __RV_FLOAD(FREG(6),  __fpu_context, 6  << LOG_FPREGBYTES);          \
        __RV_FLOAD(FREG(7),  __fpu_context, 7  << LOG_FPREGBYTES);          \
        __RV_FLOAD(FREG(10), __fpu_context, 8  << LOG_FPREGBYTES);          \
        __RV_FLOAD(FREG(11), __fpu_context, 9  << LOG_FPREGBYTES);          \
        __RV_FLOAD(FREG(12), __fpu_context, 10 << LOG_FPREGBYTES);          \
        __RV_FLOAD(FREG(13), __fpu_context, 11 << LOG_FPREGBYTES);          \
        __RV_FLOAD(FREG(14), __fpu_context, 12 << LOG_FPREGBYTES);          \
        __RV_FLOAD(FREG(15), __fpu_context, 13 << LOG_FPREGBYTES);          \
        __RV_FLOAD(FREG(16), __fpu_context, 14 << LOG_FPREGBYTES);          \
        __RV_FLOAD(FREG(17), __fpu_context, 15 << LOG_FPREGBYTES);          \
        __RV_FLOAD(FREG(28), __fpu_context, 16 << LOG_FPREGBYTES);          \
        __RV_FLOAD(FREG(29), __fpu_context, 17 << LOG_FPREGBYTES);          \
        __RV_FLOAD(FREG(30), __fpu_context, 18 << LOG_FPREGBYTES);          \
        __RV_FLOAD(FREG(31), __fpu_context, 19 << LOG_FPREGBYTES);
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_fpu.h';
      define-mem-desc-line = '276';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Restore necessary fpu registers from variables for interrupt nesting.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
This macro is used restore necessary fpu registers from pre-defined variables
in \ref SAVE_FPU_CONTEXT macro.
\remarks
- It need to be used together with \ref SAVE_FPU_CONTEXT
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    };
    typedef = {
    typedef-member = {
      typedef-mem-kind = 'typedef';
      typedef-mem-id   = 'group__NMSIS__Core__FPU__Functions_1ga2e1e58dd537699f8674a335d64c8705a';
      typedef-mem-virt = normal;
      typedef-mem-prot = public;
      typedef-mem-type = <<_EnD_oF_dEf_TeXt_
uint64_t
_EnD_oF_dEf_TeXt_;
      typedef-mem-name = 'rv_fpu_t';
      typedef-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_fpu.h';
      typedef-mem-desc-line = '213';
      typedef-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Type of FPU register, depends on the FLEN defined in RISC-V.
_EnD_oF_dEf_TeXt_;
      typedef-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* typedef-member */
    };
  file-full-name  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_fpu.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
FPU feature API header file for Nuclei N/NX Core.
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_



_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'core__feature__pmp_8h';
  file-name = 'core_feature_pmp.h';
    func = {
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__PMP__Functions_1gadf37b13460f0c2c0d7d2641f31ebbf72';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_INLINE uint8_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__get_PMPxCFG';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'idx';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_pmp.h';
      func-mem-desc-line = '63';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get 8bit PMPxCFG Register by PMP entry index.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Return the content of the PMPxCFG Register.
\param [in]    idx    PMP region index(0-15)
\return               PMPxCFG Register value
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '478';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga83987d4e9998a1cca46cd97cf8d809ed';
        func-mem-ref-line = '414';
        func-mem-ref-name = 'CSR_PMPCFG0';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga1a53dfb8b663fc41e8fd7c7b84471eec';
        func-mem-ref-line = '415';
        func-mem-ref-name = 'CSR_PMPCFG1';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga3103e79fb7dc1bc929b55b7daed624cb';
        func-mem-ref-line = '416';
        func-mem-ref-name = 'CSR_PMPCFG2';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga42e3b880f10fb42eb718446a2f3dfa5a';
        func-mem-ref-line = '417';
        func-mem-ref-name = 'CSR_PMPCFG3';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__PMP__Functions_1gae1905cc6904d78db702c1a0b72b326f5';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_INLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__set_PMPxCFG';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'idx';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'pmpxcfg';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_pmp.h';
      func-mem-desc-line = '105';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set 8bit PMPxCFG by pmp entry index.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Set the given pmpxcfg value to the PMPxCFG Register.
\param [in]    idx      PMPx region index(0-15)
\param [in]    pmpxcfg  PMPxCFG register value to set
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '478';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '496';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga83987d4e9998a1cca46cd97cf8d809ed';
        func-mem-ref-line = '414';
        func-mem-ref-name = 'CSR_PMPCFG0';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga1a53dfb8b663fc41e8fd7c7b84471eec';
        func-mem-ref-line = '415';
        func-mem-ref-name = 'CSR_PMPCFG1';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga3103e79fb7dc1bc929b55b7daed624cb';
        func-mem-ref-line = '416';
        func-mem-ref-name = 'CSR_PMPCFG2';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga42e3b880f10fb42eb718446a2f3dfa5a';
        func-mem-ref-line = '417';
        func-mem-ref-name = 'CSR_PMPCFG3';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__PMP__Functions_1gadca32ce47cd692eb2e7fe25abf36c103';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_INLINE rv_csr_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__get_PMPCFGx';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'idx';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_pmp.h';
      func-mem-desc-line = '165';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get PMPCFGx Register by index.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Return the content of the PMPCFGx Register.
\param [in]    idx    PMPCFG CSR index(0-3)
\return               PMPCFGx Register value
\remark
- For RV64, only idx = 0 and idx = 2 is allowed.
  pmpcfg0 and pmpcfg2 hold the configurations
  for the 16 PMP entries, pmpcfg1 and pmpcfg3 are illegal
- For RV32, pmpcfg0–pmpcfg3, hold the configurations
  pmp0cfg–pmp15cfg for the 16 PMP entries
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '478';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga83987d4e9998a1cca46cd97cf8d809ed';
        func-mem-ref-line = '414';
        func-mem-ref-name = 'CSR_PMPCFG0';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga1a53dfb8b663fc41e8fd7c7b84471eec';
        func-mem-ref-line = '415';
        func-mem-ref-name = 'CSR_PMPCFG1';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga3103e79fb7dc1bc929b55b7daed624cb';
        func-mem-ref-line = '416';
        func-mem-ref-name = 'CSR_PMPCFG2';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga42e3b880f10fb42eb718446a2f3dfa5a';
        func-mem-ref-line = '417';
        func-mem-ref-name = 'CSR_PMPCFG3';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__PMP__Functions_1gaf509ec494237545e28812695aaaa30c8';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_INLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__set_PMPCFGx';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'idx';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'pmpcfg';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_pmp.h';
      func-mem-desc-line = '188';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set PMPCFGx by index.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Write the given value to the PMPCFGx Register.
\param [in]    idx      PMPCFG CSR index(0-3)
\param [in]    pmpcfg   PMPCFGx Register value to set
\remark
- For RV64, only idx = 0 and idx = 2 is allowed.
  pmpcfg0 and pmpcfg2 hold the configurations
  for the 16 PMP entries, pmpcfg1 and pmpcfg3 are illegal
- For RV32, pmpcfg0–pmpcfg3, hold the configurations
  pmp0cfg–pmp15cfg for the 16 PMP entries
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '496';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga83987d4e9998a1cca46cd97cf8d809ed';
        func-mem-ref-line = '414';
        func-mem-ref-name = 'CSR_PMPCFG0';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga1a53dfb8b663fc41e8fd7c7b84471eec';
        func-mem-ref-line = '415';
        func-mem-ref-name = 'CSR_PMPCFG1';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga3103e79fb7dc1bc929b55b7daed624cb';
        func-mem-ref-line = '416';
        func-mem-ref-name = 'CSR_PMPCFG2';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga42e3b880f10fb42eb718446a2f3dfa5a';
        func-mem-ref-line = '417';
        func-mem-ref-name = 'CSR_PMPCFG3';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__PMP__Functions_1ga0fc1168753b68d4105d6fc96b038b1fd';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_INLINE rv_csr_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__get_PMPADDRx';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'idx';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_pmp.h';
      func-mem-desc-line = '205';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get PMPADDRx Register by index.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Return the content of the PMPADDRx Register.
\param [in]    idx    PMP region index(0-15)
\return               PMPADDRx Register value
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '478';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gacecf7350c29d4d7b3eff9334a79eb151';
        func-mem-ref-line = '418';
        func-mem-ref-name = 'CSR_PMPADDR0';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga4b66ab86131f3f9abb77653d946fa801';
        func-mem-ref-line = '419';
        func-mem-ref-name = 'CSR_PMPADDR1';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gae23ceb6fb8cb498198b5dd89301527d6';
        func-mem-ref-line = '428';
        func-mem-ref-name = 'CSR_PMPADDR10';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga05cef37120eb5d71e1bb4a2eab968c1f';
        func-mem-ref-line = '429';
        func-mem-ref-name = 'CSR_PMPADDR11';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga4f95495aea52214e593217b25a2683c9';
        func-mem-ref-line = '430';
        func-mem-ref-name = 'CSR_PMPADDR12';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga782c2fb9aba26298db7123758c5932f4';
        func-mem-ref-line = '431';
        func-mem-ref-name = 'CSR_PMPADDR13';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga803fecb49fa82ceabd227df080f692c7';
        func-mem-ref-line = '432';
        func-mem-ref-name = 'CSR_PMPADDR14';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga27b523f4961b4e24098ba0b24aa079bb';
        func-mem-ref-line = '433';
        func-mem-ref-name = 'CSR_PMPADDR15';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga793ce1bc309da27c6f3406e63c990ca3';
        func-mem-ref-line = '420';
        func-mem-ref-name = 'CSR_PMPADDR2';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga429c14fe78dcfb064f8a2b40bcd0c6d5';
        func-mem-ref-line = '421';
        func-mem-ref-name = 'CSR_PMPADDR3';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga296a8dd56db1dbc9ce8d23e04a125f1b';
        func-mem-ref-line = '422';
        func-mem-ref-name = 'CSR_PMPADDR4';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga0fdee71fe744c3a76a4fe4566b6d30f7';
        func-mem-ref-line = '423';
        func-mem-ref-name = 'CSR_PMPADDR5';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga380f61e6b334d2f76d3f995c932032ff';
        func-mem-ref-line = '424';
        func-mem-ref-name = 'CSR_PMPADDR6';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga3c32a0bfe8f5558cf3680e865853bd7d';
        func-mem-ref-line = '425';
        func-mem-ref-name = 'CSR_PMPADDR7';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gad5ca2904320156ece2d409a6203833dd';
        func-mem-ref-line = '426';
        func-mem-ref-name = 'CSR_PMPADDR8';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga37480409a10aee34f38f372686d25c63';
        func-mem-ref-line = '427';
        func-mem-ref-name = 'CSR_PMPADDR9';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__PMP__Functions_1ga6341b28b3c2fe7c6e697a1adee7d4dd2';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_INLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '__set_PMPADDRx';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'idx';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
rv_csr_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'pmpaddr';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_pmp.h';
      func-mem-desc-line = '234';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set PMPADDRx by index.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Write the given value to the PMPADDRx Register.
\param [in]    idx      PMP region index(0-15)
\param [in]    pmpaddr  PMPADDRx Register value to set
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaa2d43f43f3f333cfd8e5a326a2aed413';
        func-mem-ref-line = '496';
        func-mem-ref-name = '__RV_CSR_WRITE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gacecf7350c29d4d7b3eff9334a79eb151';
        func-mem-ref-line = '418';
        func-mem-ref-name = 'CSR_PMPADDR0';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga4b66ab86131f3f9abb77653d946fa801';
        func-mem-ref-line = '419';
        func-mem-ref-name = 'CSR_PMPADDR1';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gae23ceb6fb8cb498198b5dd89301527d6';
        func-mem-ref-line = '428';
        func-mem-ref-name = 'CSR_PMPADDR10';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga05cef37120eb5d71e1bb4a2eab968c1f';
        func-mem-ref-line = '429';
        func-mem-ref-name = 'CSR_PMPADDR11';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga4f95495aea52214e593217b25a2683c9';
        func-mem-ref-line = '430';
        func-mem-ref-name = 'CSR_PMPADDR12';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga782c2fb9aba26298db7123758c5932f4';
        func-mem-ref-line = '431';
        func-mem-ref-name = 'CSR_PMPADDR13';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga803fecb49fa82ceabd227df080f692c7';
        func-mem-ref-line = '432';
        func-mem-ref-name = 'CSR_PMPADDR14';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga27b523f4961b4e24098ba0b24aa079bb';
        func-mem-ref-line = '433';
        func-mem-ref-name = 'CSR_PMPADDR15';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga793ce1bc309da27c6f3406e63c990ca3';
        func-mem-ref-line = '420';
        func-mem-ref-name = 'CSR_PMPADDR2';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga429c14fe78dcfb064f8a2b40bcd0c6d5';
        func-mem-ref-line = '421';
        func-mem-ref-name = 'CSR_PMPADDR3';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga296a8dd56db1dbc9ce8d23e04a125f1b';
        func-mem-ref-line = '422';
        func-mem-ref-name = 'CSR_PMPADDR4';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga0fdee71fe744c3a76a4fe4566b6d30f7';
        func-mem-ref-line = '423';
        func-mem-ref-name = 'CSR_PMPADDR5';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga380f61e6b334d2f76d3f995c932032ff';
        func-mem-ref-line = '424';
        func-mem-ref-name = 'CSR_PMPADDR6';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga3c32a0bfe8f5558cf3680e865853bd7d';
        func-mem-ref-line = '425';
        func-mem-ref-name = 'CSR_PMPADDR7';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1gad5ca2904320156ece2d409a6203833dd';
        func-mem-ref-line = '426';
        func-mem-ref-name = 'CSR_PMPADDR8';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga37480409a10aee34f38f372686d25c63';
        func-mem-ref-line = '427';
        func-mem-ref-name = 'CSR_PMPADDR9';
    };
    }; /* func-member */
    };
  file-full-name  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_pmp.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
PMP feature API header file for Nuclei N/NX Core.
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_



_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'core__feature__timer_8h';
  file-name = 'core_feature_timer.h';
    define = {
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__SysTimer__Registers_1ga54ecde494dc735799ed978b91bf709d8';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SysTimer_MTIMECTL_TIMESTOP_Pos';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0U
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      define-mem-desc-line = '65';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SysTick Timer MTIMECTL: TIMESTOP bit Position.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__SysTimer__Registers_1gaab93093166696848e52d055a2e139e9f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SysTimer_MTIMECTL_TIMESTOP_Msk';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1UL << SysTimer_MTIMECTL_TIMESTOP_Pos)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      define-mem-desc-line = '66';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SysTick Timer MTIMECTL: TIMESTOP Mask.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__timer_8h_1ga95360ac7f66badad67c57d540a1ae4e1';
        define-mem-ref-line = '234';
        define-mem-ref-name = 'SysTimer_Start';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__timer_8h_1gaf74222f6d8c603f61571884732726e91';
        define-mem-ref-line = '245';
        define-mem-ref-name = 'SysTimer_Stop';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__SysTimer__Registers_1gac0cd51358c944397328146b6f4a4a8a5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SysTimer_MTIMECTL_CMPCLREN_Pos';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
1U
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      define-mem-desc-line = '67';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SysTick Timer MTIMECTL: CMPCLREN bit Position.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__SysTimer__Registers_1ga5d372de2d560f90d8ed8306277068cf1';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SysTimer_MTIMECTL_CMPCLREN_Msk';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1UL << SysTimer_MTIMECTL_CMPCLREN_Pos)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      define-mem-desc-line = '68';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SysTick Timer MTIMECTL: CMPCLREN Mask.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__SysTimer__Registers_1ga4ee15edaeadcd48a5aaab1aa9ec20496';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SysTimer_MTIMECTL_CLKSRC_Pos';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
2U
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      define-mem-desc-line = '69';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SysTick Timer MTIMECTL: CLKSRC bit Position.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__SysTimer__Registers_1ga2513c82f2ce2811952b83f6d1c8e4172';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SysTimer_MTIMECTL_CLKSRC_Msk';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1UL << SysTimer_MTIMECTL_CLKSRC_Pos)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      define-mem-desc-line = '70';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SysTick Timer MTIMECTL: CLKSRC Mask.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__SysTimer__Registers_1gad756a0be76154b3f64f6790663581c52';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SysTimer_MSIP_MSIP_Pos';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0U
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      define-mem-desc-line = '72';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SysTick Timer MSIP: MSIP bit Position.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__SysTimer__Registers_1ga62b819dc444c74f1424c50cf13fcb2a0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SysTimer_MSIP_MSIP_Msk';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1UL << SysTimer_MSIP_MSIP_Pos)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      define-mem-desc-line = '73';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SysTick Timer MSIP: MSIP Mask.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__timer_8h_1ga57b4f64ed87262daf831573e704b12c8';
        define-mem-ref-line = '311';
        define-mem-ref-name = 'SysTimer_ClearSWIRQ';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__timer_8h_1gaa4d13cddf35ef77fd3b3b59e82eb1d47';
        define-mem-ref-line = '291';
        define-mem-ref-name = 'SysTimer_SetSWIRQ';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__SysTimer__Registers_1gacffb8ad26cdd32cef2ee67bde9ddb122';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SysTimer_MTIMER_Msk';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0xFFFFFFFFFFFFFFFFULL)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      define-mem-desc-line = '75';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SysTick Timer MTIMER value Mask.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__SysTimer__Registers_1ga0fb8a9811b2d773529fb0f7db866e5e5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SysTimer_MTIMERCMP_Msk';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0xFFFFFFFFFFFFFFFFULL)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      define-mem-desc-line = '76';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SysTick Timer MTIMERCMP value Mask.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__SysTimer__Registers_1ga9b50cbd77c10af62deca85e3d2509c72';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SysTimer_MTIMECTL_Msk';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0xFFFFFFFFUL)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      define-mem-desc-line = '77';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SysTick Timer MTIMECTL/MSTOP value Mask.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__timer_8h_1gafc922423699826bc5d833ab5d08219d2';
        define-mem-ref-line = '277';
        define-mem-ref-name = 'SysTimer_GetControlValue';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__timer_8h_1gaf0e25c3ad2965ce6cd523cd101cee16f';
        define-mem-ref-line = '264';
        define-mem-ref-name = 'SysTimer_SetControlValue';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__SysTimer__Registers_1ga40ba61e02d93e37ffbb6452b54806af6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SysTimer_MSIP_Msk';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0xFFFFFFFFUL)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      define-mem-desc-line = '78';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SysTick Timer MSIP   value Mask.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__timer_8h_1ga0431e3f4a44ca2265884c19096912729';
        define-mem-ref-line = '333';
        define-mem-ref-name = 'SysTimer_GetMsipValue';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__timer_8h_1gaa7f8e6c1423f582f958e151ce692395c';
        define-mem-ref-line = '350';
        define-mem-ref-name = 'SysTimer_SetMsipValue';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__SysTimer__Registers_1ga1028d9f654728860327c082a44b9f34f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SysTimer_MSFTRST_Msk';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0xFFFFFFFFUL)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      define-mem-desc-line = '79';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SysTick Timer MSFTRST value Mask.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__SysTimer__Registers_1ga181dffb1870282631f8858ea23d9b8fa';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SysTimer_MSFRST_KEY';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x80000A5FUL)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      define-mem-desc-line = '81';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SysTick Timer Software Reset Request Key.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__timer_8h_1gac41101f6eb4776148a05d1b02b643f8e';
        define-mem-ref-line = '371';
        define-mem-ref-name = 'SysTimer_SoftwareReset';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__SysTimer__Registers_1ga817932d6e04ff8eaac1433ff3e2ffdd5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SysTimer_CLINT_MSIP_OFS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x1000UL)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      define-mem-desc-line = '83';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Software interrupt register offset of clint mode in SysTick Timer.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__SysTimer__Registers_1gacd3c11b93de9b31480479b69955f9252';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SysTimer_CLINT_MTIMECMP_OFS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x5000UL)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      define-mem-desc-line = '84';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
MTIMECMP register offset of clint mode in SysTick Timer.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__SysTimer__Registers_1ga0a0f230930113b939560d5712da4929f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SysTimer_CLINT_MTIME_OFS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0xCFF8UL)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      define-mem-desc-line = '85';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
MTIME register offset of clint mode in SysTick Timer.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__SysTimer__Registers_1ga2107a0ae6d9deefff31edf506a6e1e91';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SysTimer_BASE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__SYSTIMER_BASEADDR
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      define-mem-desc-line = '92';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SysTick Base Address.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__SysTimer__Registers_1ga55d0982631fe5ecbcfbb808913f6ad99';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SysTimer';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
((SysTimer_Type *) SysTimer_BASE)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      define-mem-desc-line = '93';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
SysTick configuration struct.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__timer_8h_1ga57b4f64ed87262daf831573e704b12c8';
        define-mem-ref-line = '311';
        define-mem-ref-name = 'SysTimer_ClearSWIRQ';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__timer_8h_1ga515d63f4e4581430fb0bf6e864e5bca9';
        define-mem-ref-line = '206';
        define-mem-ref-name = 'SysTimer_GetCompareValue';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__timer_8h_1gafc922423699826bc5d833ab5d08219d2';
        define-mem-ref-line = '277';
        define-mem-ref-name = 'SysTimer_GetControlValue';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__timer_8h_1ga5b454e48769abd7a88c2cc65fe53ac7a';
        define-mem-ref-line = '139';
        define-mem-ref-name = 'SysTimer_GetLoadValue';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__timer_8h_1ga0431e3f4a44ca2265884c19096912729';
        define-mem-ref-line = '333';
        define-mem-ref-name = 'SysTimer_GetMsipValue';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__timer_8h_1ga52e85918789aa95fc4cd0d7238ca9b6c';
        define-mem-ref-line = '172';
        define-mem-ref-name = 'SysTimer_SetCompareValue';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__timer_8h_1gaf0e25c3ad2965ce6cd523cd101cee16f';
        define-mem-ref-line = '264';
        define-mem-ref-name = 'SysTimer_SetControlValue';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__timer_8h_1ga08c74ffae27d46218ae11321ff5e1673';
        define-mem-ref-line = '117';
        define-mem-ref-name = 'SysTimer_SetLoadValue';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__timer_8h_1gaa7f8e6c1423f582f958e151ce692395c';
        define-mem-ref-line = '350';
        define-mem-ref-name = 'SysTimer_SetMsipValue';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__timer_8h_1gaa4d13cddf35ef77fd3b3b59e82eb1d47';
        define-mem-ref-line = '291';
        define-mem-ref-name = 'SysTimer_SetSWIRQ';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__timer_8h_1gac41101f6eb4776148a05d1b02b643f8e';
        define-mem-ref-line = '371';
        define-mem-ref-name = 'SysTimer_SoftwareReset';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__timer_8h_1ga95360ac7f66badad67c57d540a1ae4e1';
        define-mem-ref-line = '234';
        define-mem-ref-name = 'SysTimer_Start';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__timer_8h_1gaf74222f6d8c603f61571884732726e91';
        define-mem-ref-line = '245';
        define-mem-ref-name = 'SysTimer_Stop';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__SysTimer__Registers_1ga9af174e29dc41968fffd97bd849ae2f9';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SysTimer_CLINT_MSIP_BASE';
      define-mem-param  = {
        define-mem-def-name = 'hartid';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(unsigned long)((SysTimer_BASE) + (SysTimer_CLINT_MSIP_OFS) + ((hartid) << 2))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      define-mem-desc-line = '96';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__timer_8h_1ga75378560287340bb6630fe31062a0dc9';
        define-mem-ref-line = '395';
        define-mem-ref-name = 'SysTimer_ClearIPI';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__timer_8h_1ga57b4f64ed87262daf831573e704b12c8';
        define-mem-ref-line = '311';
        define-mem-ref-name = 'SysTimer_ClearSWIRQ';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__timer_8h_1ga0431e3f4a44ca2265884c19096912729';
        define-mem-ref-line = '333';
        define-mem-ref-name = 'SysTimer_GetMsipValue';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__timer_8h_1ga6006f9ce9bd7e86b5ab503ffa85d2126';
        define-mem-ref-line = '383';
        define-mem-ref-name = 'SysTimer_SendIPI';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__timer_8h_1gaa7f8e6c1423f582f958e151ce692395c';
        define-mem-ref-line = '350';
        define-mem-ref-name = 'SysTimer_SetMsipValue';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__timer_8h_1gaa4d13cddf35ef77fd3b3b59e82eb1d47';
        define-mem-ref-line = '291';
        define-mem-ref-name = 'SysTimer_SetSWIRQ';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__SysTimer__Registers_1ga4c13654a03170936aed2200ddefb239d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SysTimer_CLINT_MTIMECMP_BASE';
      define-mem-param  = {
        define-mem-def-name = 'hartid';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(unsigned long)((SysTimer_BASE) + (SysTimer_CLINT_MTIMECMP_OFS) + ((hartid) << 3))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      define-mem-desc-line = '97';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__timer_8h_1ga515d63f4e4581430fb0bf6e864e5bca9';
        define-mem-ref-line = '206';
        define-mem-ref-name = 'SysTimer_GetCompareValue';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__timer_8h_1ga52e85918789aa95fc4cd0d7238ca9b6c';
        define-mem-ref-line = '172';
        define-mem-ref-name = 'SysTimer_SetCompareValue';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__SysTimer__Registers_1gad17f6dfe29eb659e5b7e0ec920ab325f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SysTimer_CLINT_MTIME_BASE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(unsigned long)((SysTimer_BASE) + (SysTimer_CLINT_MTIME_OFS))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      define-mem-desc-line = '98';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    };
    func = {
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SysTimer_1ga08c74ffae27d46218ae11321ff5e1673';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SysTimer_SetLoadValue';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint64_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'value';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      func-mem-desc-line = '117';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set system timer load value.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function set the system timer load value in MTIMER register.
\param [in]  value   value to set system timer MTIMER register.
\remarks
- Load value is 64bits wide.
- \ref SysTimer_GetLoadValue
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga9df58a7326fee34b546cae7d7d6e6de3';
        func-mem-ref-line = '983';
        func-mem-ref-name = '__SW';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga55d0982631fe5ecbcfbb808913f6ad99';
        func-mem-ref-line = '93';
        func-mem-ref-name = 'SysTimer';
    };
      func-mem-referenceby = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga9906dae1937eac222354df5a9069945a';
        func-mem-ref-line = '459';
        func-mem-ref-name = 'SysTick_Reload';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SysTimer_1ga5b454e48769abd7a88c2cc65fe53ac7a';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint64_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SysTimer_GetLoadValue';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      func-mem-desc-line = '139';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get system timer load value.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function get the system timer current value in MTIMER register.
\return  current value(64bit) of system timer MTIMER register.
\remarks
- Load value is 64bits wide.
- \ref SysTimer_SetLoadValue
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaf898279e3db81302391a698214744865';
        func-mem-ref-line = '931';
        func-mem-ref-name = '__LW';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga55d0982631fe5ecbcfbb808913f6ad99';
        func-mem-ref-line = '93';
        func-mem-ref-name = 'SysTimer';
    };
      func-mem-referenceby = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga349805c25d9aa753c6fd69b3c0151126';
        func-mem-ref-line = '426';
        func-mem-ref-name = 'SysTick_Config';
    };
      func-mem-referenceby = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga9906dae1937eac222354df5a9069945a';
        func-mem-ref-line = '459';
        func-mem-ref-name = 'SysTick_Reload';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SysTimer_1ga52e85918789aa95fc4cd0d7238ca9b6c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SysTimer_SetCompareValue';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint64_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'value';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      func-mem-desc-line = '172';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set system timer compare value.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function set the system Timer compare value in MTIMERCMP register.
\param [in]  value   compare value to set system timer MTIMERCMP register.
\remarks
- Compare value is 64bits wide.
- If compare value is larger than current value timer interrupt generate.
- Modify the load value or compare value less to clear the interrupt.
- \ref SysTimer_GetCompareValue
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '478';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga9df58a7326fee34b546cae7d7d6e6de3';
        func-mem-ref-line = '983';
        func-mem-ref-name = '__SW';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga50cb52c60a3472620a819765e593f67e';
        func-mem-ref-line = '506';
        func-mem-ref-name = 'CSR_MHARTID';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga55d0982631fe5ecbcfbb808913f6ad99';
        func-mem-ref-line = '93';
        func-mem-ref-name = 'SysTimer';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga4c13654a03170936aed2200ddefb239d';
        func-mem-ref-line = '97';
        func-mem-ref-name = 'SysTimer_CLINT_MTIMECMP_BASE';
    };
      func-mem-referenceby = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga349805c25d9aa753c6fd69b3c0151126';
        func-mem-ref-line = '426';
        func-mem-ref-name = 'SysTick_Config';
    };
      func-mem-referenceby = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga9906dae1937eac222354df5a9069945a';
        func-mem-ref-line = '459';
        func-mem-ref-name = 'SysTick_Reload';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SysTimer_1ga515d63f4e4581430fb0bf6e864e5bca9';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint64_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SysTimer_GetCompareValue';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      func-mem-desc-line = '206';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get system timer compare value.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function get the system timer compare value in MTIMERCMP register.
\return  compare value of system timer MTIMERCMP register.
\remarks
- Compare value is 64bits wide.
- \ref SysTimer_SetCompareValue
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaf898279e3db81302391a698214744865';
        func-mem-ref-line = '931';
        func-mem-ref-name = '__LW';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '478';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga50cb52c60a3472620a819765e593f67e';
        func-mem-ref-line = '506';
        func-mem-ref-name = 'CSR_MHARTID';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga55d0982631fe5ecbcfbb808913f6ad99';
        func-mem-ref-line = '93';
        func-mem-ref-name = 'SysTimer';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga4c13654a03170936aed2200ddefb239d';
        func-mem-ref-line = '97';
        func-mem-ref-name = 'SysTimer_CLINT_MTIMECMP_BASE';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SysTimer_1ga95360ac7f66badad67c57d540a1ae4e1';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SysTimer_Start';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      func-mem-desc-line = '234';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Enable system timer counter running.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Enable system timer counter running by clear
TIMESTOP bit in MTIMECTL register.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga55d0982631fe5ecbcfbb808913f6ad99';
        func-mem-ref-line = '93';
        func-mem-ref-name = 'SysTimer';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1gaab93093166696848e52d055a2e139e9f';
        func-mem-ref-line = '66';
        func-mem-ref-name = 'SysTimer_MTIMECTL_TIMESTOP_Msk';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SysTimer_1gaf74222f6d8c603f61571884732726e91';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SysTimer_Stop';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      func-mem-desc-line = '245';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Stop system timer counter running.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Stop system timer counter running by set
TIMESTOP bit in MTIMECTL register.
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga55d0982631fe5ecbcfbb808913f6ad99';
        func-mem-ref-line = '93';
        func-mem-ref-name = 'SysTimer';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1gaab93093166696848e52d055a2e139e9f';
        func-mem-ref-line = '66';
        func-mem-ref-name = 'SysTimer_MTIMECTL_TIMESTOP_Msk';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SysTimer_1gaf0e25c3ad2965ce6cd523cd101cee16f';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SysTimer_SetControlValue';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'mctl';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      func-mem-desc-line = '264';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set system timer control value.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function set the system timer MTIMECTL register value.
\param [in]  mctl    value to set MTIMECTL register
\remarks
- Bit TIMESTOP is used to start and stop timer.
  Clear TIMESTOP bit to 0 to start timer, otherwise to stop timer.
- Bit CMPCLREN is used to enable auto MTIMER clear to zero when MTIMER >= MTIMERCMP.
  Clear CMPCLREN bit to 0 to stop auto clear MTIMER feature, otherwise to enable it.
- Bit CLKSRC is used to select timer clock source.
  Clear CLKSRC bit to 0 to use <em>mtime_toggle_a</em>, otherwise use <em>core_clk_aon</em>
- \ref SysTimer_GetControlValue
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga55d0982631fe5ecbcfbb808913f6ad99';
        func-mem-ref-line = '93';
        func-mem-ref-name = 'SysTimer';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga9b50cbd77c10af62deca85e3d2509c72';
        func-mem-ref-line = '77';
        func-mem-ref-name = 'SysTimer_MTIMECTL_Msk';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SysTimer_1gafc922423699826bc5d833ab5d08219d2';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SysTimer_GetControlValue';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      func-mem-desc-line = '277';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get system timer control value.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function get the system timer MTIMECTL register value.
\return  MTIMECTL register value
\remarks
- \ref SysTimer_SetControlValue
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga55d0982631fe5ecbcfbb808913f6ad99';
        func-mem-ref-line = '93';
        func-mem-ref-name = 'SysTimer';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga9b50cbd77c10af62deca85e3d2509c72';
        func-mem-ref-line = '77';
        func-mem-ref-name = 'SysTimer_MTIMECTL_Msk';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SysTimer_1gaa4d13cddf35ef77fd3b3b59e82eb1d47';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SysTimer_SetSWIRQ';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      func-mem-desc-line = '291';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Trigger or set software interrupt via system timer.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function set the system timer MSIP bit in MSIP register.
\remarks
- Set system timer MSIP bit and generate a SW interrupt.
- \ref SysTimer_ClearSWIRQ
- \ref SysTimer_GetMsipValue
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '478';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga9df58a7326fee34b546cae7d7d6e6de3';
        func-mem-ref-line = '983';
        func-mem-ref-name = '__SW';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga50cb52c60a3472620a819765e593f67e';
        func-mem-ref-line = '506';
        func-mem-ref-name = 'CSR_MHARTID';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga55d0982631fe5ecbcfbb808913f6ad99';
        func-mem-ref-line = '93';
        func-mem-ref-name = 'SysTimer';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga9af174e29dc41968fffd97bd849ae2f9';
        func-mem-ref-line = '96';
        func-mem-ref-name = 'SysTimer_CLINT_MSIP_BASE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga62b819dc444c74f1424c50cf13fcb2a0';
        func-mem-ref-line = '73';
        func-mem-ref-name = 'SysTimer_MSIP_MSIP_Msk';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SysTimer_1ga57b4f64ed87262daf831573e704b12c8';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SysTimer_ClearSWIRQ';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      func-mem-desc-line = '311';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Clear system timer software interrupt pending request.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function clear the system timer MSIP bit in MSIP register.
\remarks
- Clear system timer MSIP bit in MSIP register to clear the software interrupt pending.
- \ref SysTimer_SetSWIRQ
- \ref SysTimer_GetMsipValue
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '478';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga9df58a7326fee34b546cae7d7d6e6de3';
        func-mem-ref-line = '983';
        func-mem-ref-name = '__SW';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga50cb52c60a3472620a819765e593f67e';
        func-mem-ref-line = '506';
        func-mem-ref-name = 'CSR_MHARTID';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga55d0982631fe5ecbcfbb808913f6ad99';
        func-mem-ref-line = '93';
        func-mem-ref-name = 'SysTimer';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga9af174e29dc41968fffd97bd849ae2f9';
        func-mem-ref-line = '96';
        func-mem-ref-name = 'SysTimer_CLINT_MSIP_BASE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga62b819dc444c74f1424c50cf13fcb2a0';
        func-mem-ref-line = '73';
        func-mem-ref-name = 'SysTimer_MSIP_MSIP_Msk';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SysTimer_1ga0431e3f4a44ca2265884c19096912729';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SysTimer_GetMsipValue';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      func-mem-desc-line = '333';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get system timer MSIP register value.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function get the system timer MSIP register value.
\return    Value of Timer MSIP register.
\remarks
- Bit0 is SW interrupt flag.
  Bit0 is 1 then SW interrupt set. Bit0 is 0 then SW interrupt clear.
- \ref SysTimer_SetSWIRQ
- \ref SysTimer_ClearSWIRQ
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1gaf898279e3db81302391a698214744865';
        func-mem-ref-line = '931';
        func-mem-ref-name = '__LW';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '478';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga50cb52c60a3472620a819765e593f67e';
        func-mem-ref-line = '506';
        func-mem-ref-name = 'CSR_MHARTID';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga55d0982631fe5ecbcfbb808913f6ad99';
        func-mem-ref-line = '93';
        func-mem-ref-name = 'SysTimer';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga9af174e29dc41968fffd97bd849ae2f9';
        func-mem-ref-line = '96';
        func-mem-ref-name = 'SysTimer_CLINT_MSIP_BASE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga40ba61e02d93e37ffbb6452b54806af6';
        func-mem-ref-line = '78';
        func-mem-ref-name = 'SysTimer_MSIP_Msk';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SysTimer_1gaa7f8e6c1423f582f958e151ce692395c';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SysTimer_SetMsipValue';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'msip';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      func-mem-desc-line = '350';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Set system timer MSIP register value.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function set the system timer MSIP register value.
\param [in]  msip   value to set MSIP register
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga355c96e5bd1ab3df0203e23a887c00c0';
        func-mem-ref-line = '478';
        func-mem-ref-name = '__RV_CSR_READ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga9df58a7326fee34b546cae7d7d6e6de3';
        func-mem-ref-line = '983';
        func-mem-ref-name = '__SW';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'riscv__encoding_8h_1ga50cb52c60a3472620a819765e593f67e';
        func-mem-ref-line = '506';
        func-mem-ref-name = 'CSR_MHARTID';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga55d0982631fe5ecbcfbb808913f6ad99';
        func-mem-ref-line = '93';
        func-mem-ref-name = 'SysTimer';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga9af174e29dc41968fffd97bd849ae2f9';
        func-mem-ref-line = '96';
        func-mem-ref-name = 'SysTimer_CLINT_MSIP_BASE';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga40ba61e02d93e37ffbb6452b54806af6';
        func-mem-ref-line = '78';
        func-mem-ref-name = 'SysTimer_MSIP_Msk';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SysTimer_1gac41101f6eb4776148a05d1b02b643f8e';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SysTimer_SoftwareReset';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      func-mem-desc-line = '371';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Do software reset request.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function will do software reset request through MTIMER
- Software need to write \ref SysTimer_MSFRST_KEY to generate software reset request
- The software request flag can be cleared by reset operation to clear
\remarks
- The software reset is sent to SoC, SoC need to generate reset signal and send back to Core
- This function will not return, it will do while(1) to wait the Core reset happened
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga55d0982631fe5ecbcfbb808913f6ad99';
        func-mem-ref-line = '93';
        func-mem-ref-name = 'SysTimer';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga181dffb1870282631f8858ea23d9b8fa';
        func-mem-ref-line = '81';
        func-mem-ref-name = 'SysTimer_MSFRST_KEY';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SysTimer_1ga6006f9ce9bd7e86b5ab503ffa85d2126';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SysTimer_SendIPI';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'hartid';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      func-mem-desc-line = '383';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
send ipi to target hart using Systimer Clint
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function send ipi using clint timer.
\param [in]  hart  target hart
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga9df58a7326fee34b546cae7d7d6e6de3';
        func-mem-ref-line = '983';
        func-mem-ref-name = '__SW';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga9af174e29dc41968fffd97bd849ae2f9';
        func-mem-ref-line = '96';
        func-mem-ref-name = 'SysTimer_CLINT_MSIP_BASE';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SysTimer_1ga75378560287340bb6630fe31062a0dc9';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SysTimer_ClearIPI';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'hartid';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      func-mem-desc-line = '395';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
clear ipi to target hart using Systimer Clint
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function clear ipi using Systimer clint timer.
\param [in]  hart  target hart
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__base_8h_1ga9df58a7326fee34b546cae7d7d6e6de3';
        func-mem-ref-line = '983';
        func-mem-ref-name = '__SW';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga9af174e29dc41968fffd97bd849ae2f9';
        func-mem-ref-line = '96';
        func-mem-ref-name = 'SysTimer_CLINT_MSIP_BASE';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SysTimer_1ga349805c25d9aa753c6fd69b3c0151126';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_INLINE uint32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SysTick_Config';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint64_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'ticks';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      func-mem-desc-line = '426';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
System Tick Configuration.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Initializes the System Timer and its non-vector interrupt, and starts the System Tick Timer.

 In our default implementation, the timer counter will be set to zero, and it will start a timer compare non-vector interrupt
 when it matchs the ticks user set, during the timer interrupt user should reload the system tick using \ref SysTick_Reload function
 or similar function written by user, so it can produce period timer interrupt.
\param [in]  ticks  Number of ticks between two interrupts.
\return          0  Function succeeded.
\return          1  Function failed.
\remarks
- For \ref __NUCLEI_N_REV >= 0x0104, the CMPCLREN bit in MTIMECTL is introduced,
  but we assume that the CMPCLREN bit is set to 0, so MTIMER register will not be
  auto cleared to 0 when MTIMER >= MTIMERCMP.
- When the variable \ref __Vendor_SysTickConfig is set to 1, then the
  function \ref SysTick_Config is not included.
- In this case, the file <b><Device>.h</b> must contain a vendor-specific implementation
  of this function.
- If user need this function to start a period timer interrupt, then in timer interrupt handler
  routine code, user should call \ref SysTick_Reload with ticks to reload the timer.
- This function only available when __SYSTIMER_PRESENT == 1 and __ECLIC_PRESENT == 1 and __Vendor_SysTickConfig == 0
\sa
- \ref SysTimer_SetCompareValue; SysTimer_SetLoadValue
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gaef478ada8e8906c9fe8d4dc2311a39e1';
        func-mem-ref-line = '221';
        func-mem-ref-name = 'ECLIC_EnableIRQ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga6a01697e0ba89c691f98fee801f4a25c';
        func-mem-ref-line = '124';
        func-mem-ref-name = 'ECLIC_NON_VECTOR_INTERRUPT';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gad6f35a2f69908b97b083c5e31c1c5aad';
        func-mem-ref-line = '233';
        func-mem-ref-name = 'ECLIC_SetLevelIRQ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1ga0bd2875fbd02a00bec78735940704c13';
        func-mem-ref-line = '229';
        func-mem-ref-name = 'ECLIC_SetShvIRQ';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga5b454e48769abd7a88c2cc65fe53ac7a';
        func-mem-ref-line = '139';
        func-mem-ref-name = 'SysTimer_GetLoadValue';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__eclic_8h_1gga7e1129cd8a196f4284d41db3e82ad5c8a1c65f7884cf42cfc70b0016245780dc9';
        func-mem-ref-line = '184';
        func-mem-ref-name = 'SysTimer_IRQn';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga52e85918789aa95fc4cd0d7238ca9b6c';
        func-mem-ref-line = '172';
        func-mem-ref-name = 'SysTimer_SetCompareValue';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SysTimer_1ga9906dae1937eac222354df5a9069945a';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
__STATIC_FORCEINLINE uint32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SysTick_Reload';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint64_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'ticks';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
      func-mem-desc-line = '459';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
System Tick Reload.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Reload the System Timer Tick when the MTIMECMP reached TIME value

\param [in]  ticks  Number of ticks between two interrupts.
\return          0  Function succeeded.
\return          1  Function failed.
\remarks
- For \ref __NUCLEI_N_REV >= 0x0104, the CMPCLREN bit in MTIMECTL is introduced,
  but for this \ref SysTick_Config function, we assume this CMPCLREN bit is set to 0,
  so in interrupt handler function, user still need to set the MTIMERCMP or MTIMER to reload
  the system tick, if vendor want to use this timer's auto clear feature, they can define
  \ref __Vendor_SysTickConfig to 1, and implement \ref SysTick_Config and \ref SysTick_Reload functions.
- When the variable \ref __Vendor_SysTickConfig is set to 1, then the
  function \ref SysTick_Reload is not included.
- In this case, the file <b><Device>.h</b> must contain a vendor-specific implementation
  of this function.
- This function only available when __SYSTIMER_PRESENT == 1 and __ECLIC_PRESENT == 1 and __Vendor_SysTickConfig == 0
- Since the MTIMERCMP value might overflow, if overflowed, MTIMER will be set to 0, and MTIMERCMP set to ticks
\sa
- \ref SysTimer_SetCompareValue
- \ref SysTimer_SetLoadValue
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'nmsis__gcc_8h_1ga399dde24635692b7740781dc9cc067e0';
        func-mem-ref-line = '177';
        func-mem-ref-name = '__USUALLY';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga5b454e48769abd7a88c2cc65fe53ac7a';
        func-mem-ref-line = '139';
        func-mem-ref-name = 'SysTimer_GetLoadValue';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga52e85918789aa95fc4cd0d7238ca9b6c';
        func-mem-ref-line = '172';
        func-mem-ref-name = 'SysTimer_SetCompareValue';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'core__feature__timer_8h_1ga08c74ffae27d46218ae11321ff5e1673';
        func-mem-ref-line = '117';
        func-mem-ref-name = 'SysTimer_SetLoadValue';
    };
    }; /* func-member */
    };
  file-full-name  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/core_feature_timer.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
System Timer feature API header file for Nuclei N/NX Core.
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_



_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'nmsis__compiler_8h';
  file-name = 'nmsis_compiler.h';
  file-full-name  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_compiler.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
NMSIS compiler generic header file.
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_



_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'nmsis__core_8h';
  file-name = 'nmsis_core.h';
  file-full-name  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_core.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'nmsis__core_8txt';
  file-name = 'nmsis_core.txt';
  file-full-name  = '/home/runner/work/NMSIS/NMSIS/NMSIS/doc/source/doxygen/nmsis_core.txt';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'nmsis__gcc_8h';
  file-name = 'nmsis_gcc.h';
    define = {
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CompilerControl_1ga447121dcab4275b7839a56082b7a1ab8';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__has_builtin';
      define-mem-param  = {
        define-mem-def-name = 'x';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_gcc.h';
      define-mem-desc-line = '49';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__ASM';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__asm
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_gcc.h';
      define-mem-desc-line = '55';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Pass information from the compiler to the assembler.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
  
_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1gac12ad95ec020f1c2c83c46231468a40e';
        define-mem-ref-line = '1052';
        define-mem-ref-name = '__AMOADD_W';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1ga927482a006985e82d90512f19ea68f67';
        define-mem-ref-line = '1068';
        define-mem-ref-name = '__AMOAND_W';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1ga13034a453b85372f85974b178bd3ee6f';
        define-mem-ref-line = '1132';
        define-mem-ref-name = '__AMOMAX_W';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1ga75a6dc5418991df25ef66de5e16dbd46';
        define-mem-ref-line = '1116';
        define-mem-ref-name = '__AMOMAXU_W';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1gadd554cdf00f5417208433154e9c9228e';
        define-mem-ref-line = '1164';
        define-mem-ref-name = '__AMOMIN_W';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1ga75515ac6719d3abca5030cb4fd2f4c2a';
        define-mem-ref-line = '1148';
        define-mem-ref-name = '__AMOMINU_W';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1gaa6f71a398756f05bbc1ef4b4a548174f';
        define-mem-ref-line = '1084';
        define-mem-ref-name = '__AMOOR_W';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1ga68f1ebfff49ba330ac04996d3e2b9df8';
        define-mem-ref-line = '1036';
        define-mem-ref-name = '__AMOSWAP_W';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1ga69a2e79b90f42d82c236fae1aced5c73';
        define-mem-ref-line = '1100';
        define-mem-ref-name = '__AMOXOR_W';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1ga8dab656e3251b574311b852efa785109';
        define-mem-ref-line = '1012';
        define-mem-ref-name = '__CAS_W';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1ga2d22b9286eefbf1e1b73ed50ce443183';
        define-mem-ref-line = '744';
        define-mem-ref-name = '__EBREAK';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1ga639ad274fdb079a1219006725d772c6c';
        define-mem-ref-line = '755';
        define-mem-ref-name = '__ECALL';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1ga5b4c34e720fb0c9e939540333dd640e6';
        define-mem-ref-line = '869';
        define-mem-ref-name = '__FENCE_I';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1ga7f225699061594cd9a4d905a39cb9ae8';
        define-mem-ref-line = '903';
        define-mem-ref-name = '__LB';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1ga08a0019225f8ecc2e0a5bdcefa77ec6f';
        define-mem-ref-line = '917';
        define-mem-ref-name = '__LH';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1gaf898279e3db81302391a698214744865';
        define-mem-ref-line = '931';
        define-mem-ref-name = '__LW';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1ga3113efdf11b109a9cbd50fae783d1adc';
        define-mem-ref-line = '703';
        define-mem-ref-name = '__NOP';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gacacca4e304ad42fc68a96c785f2a0b69';
        define-mem-ref-line = '488';
        define-mem-ref-name = '__RV_ADD16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gac67bdd2881a8f2c648cf191c9279ffa2';
        define-mem-ref-line = '13807';
        define-mem-ref-name = '__RV_ADD32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga886e1cf9d61d72c7b6028f2e58ad9f5d';
        define-mem-ref-line = '541';
        define-mem-ref-name = '__RV_ADD64';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga502647bb2462e3bb724ba292a16e62ef';
        define-mem-ref-line = '447';
        define-mem-ref-name = '__RV_ADD8';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga3a4b869f2df434f7e9f3f35e79715c6c';
        define-mem-ref-line = '580';
        define-mem-ref-name = '__RV_AVE';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga5061e392780b3bea521580befe37556f';
        define-mem-ref-line = '621';
        define-mem-ref-name = '__RV_BITREV';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga0e9da2de29b3f47f38a315ca8f3e5f18';
        define-mem-ref-line = '704';
        define-mem-ref-name = '__RV_BPICK';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga00c822eb5d2a5b1ff5bc88790a43103c';
        define-mem-ref-line = '962';
        define-mem-ref-name = '__RV_CLO16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga9a3bb8538cb1c67d747dbcf77d50b1f0';
        define-mem-ref-line = '1009';
        define-mem-ref-name = '__RV_CLO32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gaf9e26b273480fb62dd48b315270fb3d1';
        define-mem-ref-line = '915';
        define-mem-ref-name = '__RV_CLO8';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga0198a8fa03f62716f0b4d0cec311dfd2';
        define-mem-ref-line = '729';
        define-mem-ref-name = '__RV_CLROV';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga368e2f49b0007ec1776f04ba5a850226';
        define-mem-ref-line = '821';
        define-mem-ref-name = '__RV_CLRS16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga4f68c42f5bf770045469f5cc5b8dd80c';
        define-mem-ref-line = '868';
        define-mem-ref-name = '__RV_CLRS32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga439f0189dfb52d89887cd8905d4f5695';
        define-mem-ref-line = '774';
        define-mem-ref-name = '__RV_CLRS8';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga862e937fdf95c754472d41ab2df392f2';
        define-mem-ref-line = '1103';
        define-mem-ref-name = '__RV_CLZ16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga5250b89ea0959cf4f02534c5cd30b79c';
        define-mem-ref-line = '1150';
        define-mem-ref-name = '__RV_CLZ32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gac034821a27f8ab322a689b24ce1257a0';
        define-mem-ref-line = '1056';
        define-mem-ref-name = '__RV_CLZ8';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga751703d59ea5e8737f21ba152f348293';
        define-mem-ref-line = '1234';
        define-mem-ref-name = '__RV_CMPEQ16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gaf3b7bef50684b91cf3b8de6045ea9579';
        define-mem-ref-line = '1192';
        define-mem-ref-name = '__RV_CMPEQ8';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga96746dfb052a196b65217708b3d31bd8';
        define-mem-ref-line = '1280';
        define-mem-ref-name = '__RV_CRAS16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga3b9b82077d31deb6b0f88d434d6d3e0a';
        define-mem-ref-line = '13850';
        define-mem-ref-name = '__RV_CRAS32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gabbbc32ee11e188a042cd6f4bae5ae8ed';
        define-mem-ref-line = '1326';
        define-mem-ref-name = '__RV_CRSA16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga1d6af7d28c27dd44d2742cd873505a3c';
        define-mem-ref-line = '13892';
        define-mem-ref-name = '__RV_CRSA32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga7d5691b06128c42939278415561c2dc4';
        define-mem-ref-line = '18084';
        define-mem-ref-name = '__RV_DKABS16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga7279c1730c173384063a9bef9c986010';
        define-mem-ref-line = '18039';
        define-mem-ref-name = '__RV_DKABS8';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gaeb50cbc43674d8dd32e7455b6c25b394';
        define-mem-ref-line = '18295';
        define-mem-ref-name = '__RV_DKADD16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga7f2598c19678a959960b6c6d3379e465';
        define-mem-ref-line = '18248';
        define-mem-ref-name = '__RV_DKADD8';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gae39257eb12a014d3059394217135b9fb';
        define-mem-ref-line = '17994';
        define-mem-ref-name = '__RV_DKHM16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga036660946bc3f379a731983caffca53b';
        define-mem-ref-line = '17939';
        define-mem-ref-name = '__RV_DKHM8';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga1b02a9f2e52abd456bfdadc1dac9e188';
        define-mem-ref-line = '18201';
        define-mem-ref-name = '__RV_DKSLRA16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga0f7b1184bde378bc5ae6e23f155ecb89';
        define-mem-ref-line = '18142';
        define-mem-ref-name = '__RV_DKSLRA8';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gaa5dfb634a380181e51e0636cb216fbb1';
        define-mem-ref-line = '18390';
        define-mem-ref-name = '__RV_DKSUB16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga5dbe06f7b351ff1477851894d6d0c927';
        define-mem-ref-line = '18342';
        define-mem-ref-name = '__RV_DKSUB8';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga1bdbaa4714d2052c162a076e676f4ea4';
        define-mem-ref-line = '18425';
        define-mem-ref-name = '__RV_EXPD80';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gad690c697580b52820282c03d6a6567c5';
        define-mem-ref-line = '18460';
        define-mem-ref-name = '__RV_EXPD81';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gafc4a523cfa64150d691bdc5d7d038810';
        define-mem-ref-line = '18495';
        define-mem-ref-name = '__RV_EXPD82';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga6d8dce49013b778d0290cd057cf45dd0';
        define-mem-ref-line = '18530';
        define-mem-ref-name = '__RV_EXPD83';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga2144ee330b7d084593a38bc98919399c';
        define-mem-ref-line = '1457';
        define-mem-ref-name = '__RV_KABS16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gadf701d97707e23112985581dc96763e3';
        define-mem-ref-line = '13952';
        define-mem-ref-name = '__RV_KABS32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga0316d69cb7b16fe8571d11d53af50918';
        define-mem-ref-line = '1412';
        define-mem-ref-name = '__RV_KABS8';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga1bdcf3e62c9328169f9052c3e01a0fd1';
        define-mem-ref-line = '1504';
        define-mem-ref-name = '__RV_KABSW';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gae514ac0875046449b9d45cd277d85063';
        define-mem-ref-line = '1598';
        define-mem-ref-name = '__RV_KADD16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gaa25d2d07545bb75c2d64a81c4c5115a3';
        define-mem-ref-line = '13998';
        define-mem-ref-name = '__RV_KADD32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gace8675089dafa59f5ba9114232ffe31d';
        define-mem-ref-line = '1664';
        define-mem-ref-name = '__RV_KADD64';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga64622c4cea6b25708edcf53511ac2846';
        define-mem-ref-line = '1551';
        define-mem-ref-name = '__RV_KADD8';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga3d272c3c6988c3c1c76ed6f5896c008e';
        define-mem-ref-line = '1711';
        define-mem-ref-name = '__RV_KADDH';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga9faead3db3c1ffb6a8566719b1f46ffa';
        define-mem-ref-line = '1759';
        define-mem-ref-name = '__RV_KADDW';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gabeee05c8c6965fc9955a62121324992c';
        define-mem-ref-line = '1816';
        define-mem-ref-name = '__RV_KCRAS16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga5e004a2f68b21b6cd06a5506b3752a23';
        define-mem-ref-line = '14049';
        define-mem-ref-name = '__RV_KCRAS32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga506f2d59400875aba65112bc6563fb08';
        define-mem-ref-line = '1873';
        define-mem-ref-name = '__RV_KCRSA16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga4e558d37a01694248417454240fdd58c';
        define-mem-ref-line = '14099';
        define-mem-ref-name = '__RV_KCRSA32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga1dfb3b7d81e19adc86e14e98971f3e42';
        define-mem-ref-line = '2103';
        define-mem-ref-name = '__RV_KDMABB';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga2ac7979002270bfa658be6a6e041c5f9';
        define-mem-ref-line = '14321';
        define-mem-ref-name = '__RV_KDMABB16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga15d10fbf27043451ffe312f61a7356d0';
        define-mem-ref-line = '2167';
        define-mem-ref-name = '__RV_KDMABT';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga180a49b034ce67949bc0db6bfbdce058';
        define-mem-ref-line = '14386';
        define-mem-ref-name = '__RV_KDMABT16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga64a75e6b0aecedf02afd2df4458a6ee1';
        define-mem-ref-line = '2231';
        define-mem-ref-name = '__RV_KDMATT';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga952ad06fdf63f05d19c3bc4a2a8cc9b8';
        define-mem-ref-line = '14451';
        define-mem-ref-name = '__RV_KDMATT16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga7e18b0f1cd5e9110bbb38a058eb01d97';
        define-mem-ref-line = '1928';
        define-mem-ref-name = '__RV_KDMBB';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga2ef54e3c36ac953d6b0c5505bcb82fa7';
        define-mem-ref-line = '14151';
        define-mem-ref-name = '__RV_KDMBB16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga067179bedfe1e3e48bbd8df87bed48dc';
        define-mem-ref-line = '1983';
        define-mem-ref-name = '__RV_KDMBT';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gaabd178e790fb3e2f172efe367869982e';
        define-mem-ref-line = '14203';
        define-mem-ref-name = '__RV_KDMBT16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gaeac5ef72f33c8014a3f045587046c5de';
        define-mem-ref-line = '2038';
        define-mem-ref-name = '__RV_KDMTT';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga05495c1787257dcc91b826929f7185c7';
        define-mem-ref-line = '14255';
        define-mem-ref-name = '__RV_KDMTT16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga4d6124229f1e4e1bef085b9a1fad5414';
        define-mem-ref-line = '2417';
        define-mem-ref-name = '__RV_KHM16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga4e14ca16506e0e4190fe003aba01d90f';
        define-mem-ref-line = '2292';
        define-mem-ref-name = '__RV_KHM8';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga26af5537e6aca0133b66832596728a8e';
        define-mem-ref-line = '2533';
        define-mem-ref-name = '__RV_KHMBB';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga58ec69e4c58f7cb34556ef4f4a153615';
        define-mem-ref-line = '14503';
        define-mem-ref-name = '__RV_KHMBB16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga96e244df43ec32a722a3562a0a59a6a6';
        define-mem-ref-line = '2586';
        define-mem-ref-name = '__RV_KHMBT';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga30da509f228f12e85fccc10646cebc28';
        define-mem-ref-line = '14556';
        define-mem-ref-name = '__RV_KHMBT16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga06a6deed6954a496ac381758e067e850';
        define-mem-ref-line = '2639';
        define-mem-ref-name = '__RV_KHMTT';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga93e865bc3f39a52053267fdce080a7a1';
        define-mem-ref-line = '14609';
        define-mem-ref-name = '__RV_KHMTT16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga99ca71b2ac7b14ff937d4ca9946be3d3';
        define-mem-ref-line = '2480';
        define-mem-ref-name = '__RV_KHMX16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga147c294001e28791aaf5d757add3ff29';
        define-mem-ref-line = '2354';
        define-mem-ref-name = '__RV_KHMX8';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga3a415f9cbeefb992bc791099e73c8794';
        define-mem-ref-line = '2703';
        define-mem-ref-name = '__RV_KMABB';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga085a8ed11950722dbf0822387c6624c2';
        define-mem-ref-line = '14672';
        define-mem-ref-name = '__RV_KMABB32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga3fe17f8a2e70a69f1751a1c0093c3158';
        define-mem-ref-line = '2766';
        define-mem-ref-name = '__RV_KMABT';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga04b5c41f73199a8722cae46a4d8ed12c';
        define-mem-ref-line = '14734';
        define-mem-ref-name = '__RV_KMABT32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga84ab72987eeee69e2392965d8d8944f4';
        define-mem-ref-line = '2893';
        define-mem-ref-name = '__RV_KMADA';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga11979b97e4c9c39a6207a233773ab2c6';
        define-mem-ref-line = '14852';
        define-mem-ref-name = '__RV_KMADA32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga13576aa03f836be838f491fe7cc483d9';
        define-mem-ref-line = '3101';
        define-mem-ref-name = '__RV_KMADRS';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga0e378131d68d54303123bd67263ac732';
        define-mem-ref-line = '15140';
        define-mem-ref-name = '__RV_KMADRS32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga6b9f5141c87a343051b03494705eeac8';
        define-mem-ref-line = '3029';
        define-mem-ref-name = '__RV_KMADS';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga03f7197d2d11120ff89858efb9a15781';
        define-mem-ref-line = '15076';
        define-mem-ref-name = '__RV_KMADS32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga9033dac220a33b6a89c2fa0200534e48';
        define-mem-ref-line = '3241';
        define-mem-ref-name = '__RV_KMAR64';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gad6267dd09022516bcd77ce742b8b40ab';
        define-mem-ref-line = '2829';
        define-mem-ref-name = '__RV_KMATT';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga0dd16ba83a434e451bbe33110acd8bf5';
        define-mem-ref-line = '14796';
        define-mem-ref-name = '__RV_KMATT32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga1cab84ebee0378b9c1069e17efdbfd69';
        define-mem-ref-line = '2957';
        define-mem-ref-name = '__RV_KMAXDA';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gad15b341acf9f631a3cf1bc188846bd3f';
        define-mem-ref-line = '14908';
        define-mem-ref-name = '__RV_KMAXDA32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga4649629156d0af6a2e64c30ae5bee381';
        define-mem-ref-line = '3173';
        define-mem-ref-name = '__RV_KMAXDS';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga9e65096c66f1b9d4137ffa769c8fd0f8';
        define-mem-ref-line = '15204';
        define-mem-ref-name = '__RV_KMAXDS32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga2de43c62af85225d40c1ac4210640925';
        define-mem-ref-line = '3291';
        define-mem-ref-name = '__RV_KMDA';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga02b187fe2c874439b89f7e4aaf1cfbd2';
        define-mem-ref-line = '14959';
        define-mem-ref-name = '__RV_KMDA32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gab418c1a557ddfedc1803594cb18fa293';
        define-mem-ref-line = '3404';
        define-mem-ref-name = '__RV_KMMAC';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga7d7e1eb9ab21e7f41722684804590f18';
        define-mem-ref-line = '3465';
        define-mem-ref-name = '__RV_KMMAC_U';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga10e2d0cb6ee70c6e603ce425a74a9b8a';
        define-mem-ref-line = '3527';
        define-mem-ref-name = '__RV_KMMAWB';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga19bd50c2b77b1749c9c63c64c1f5bb44';
        define-mem-ref-line = '3657';
        define-mem-ref-name = '__RV_KMMAWB2';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gac281461b8f0907d2d0c1a922ca5e65b8';
        define-mem-ref-line = '3725';
        define-mem-ref-name = '__RV_KMMAWB2_U';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga6385e945e25b69987eb34e8e9e862bcf';
        define-mem-ref-line = '3589';
        define-mem-ref-name = '__RV_KMMAWB_U';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga447a6dd6e573595ce930f8ba1ab135ca';
        define-mem-ref-line = '3787';
        define-mem-ref-name = '__RV_KMMAWT';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga60e15a6243014fd5b76b7cffa7275eb4';
        define-mem-ref-line = '3917';
        define-mem-ref-name = '__RV_KMMAWT2';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga30aa2050f5f50a26aedc28dfce398db8';
        define-mem-ref-line = '3985';
        define-mem-ref-name = '__RV_KMMAWT2_U';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga480bf71de56eefe132ae06a9bdeaf203';
        define-mem-ref-line = '3849';
        define-mem-ref-name = '__RV_KMMAWT_U';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga0e7c48c050ad2b2343ad2a8cf2e38ec3';
        define-mem-ref-line = '4045';
        define-mem-ref-name = '__RV_KMMSB';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gae1c27f8ba264508b78a0de566dd18a9b';
        define-mem-ref-line = '4105';
        define-mem-ref-name = '__RV_KMMSB_U';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gaaec865ab687a1764eb5b1e1f5603611d';
        define-mem-ref-line = '4160';
        define-mem-ref-name = '__RV_KMMWB2';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga9f55b328152b5b5b840931b5415b2865';
        define-mem-ref-line = '4216';
        define-mem-ref-name = '__RV_KMMWB2_U';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gaa83e41e92fe13e28b2509a0bf92224bf';
        define-mem-ref-line = '4272';
        define-mem-ref-name = '__RV_KMMWT2';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga1d59336d9cabde5ac5a646abcc0b25c9';
        define-mem-ref-line = '4328';
        define-mem-ref-name = '__RV_KMMWT2_U';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga3922fe2b6d47974c6bd85cba3f826b4b';
        define-mem-ref-line = '4391';
        define-mem-ref-name = '__RV_KMSDA';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga13d8c47ce9716d7ca5af629d0a81c0c7';
        define-mem-ref-line = '15259';
        define-mem-ref-name = '__RV_KMSDA32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gac89788561e034d44bea403fd22047a94';
        define-mem-ref-line = '4521';
        define-mem-ref-name = '__RV_KMSR64';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gaacebc28be147f66ab73162b37cc35ce0';
        define-mem-ref-line = '4453';
        define-mem-ref-name = '__RV_KMSXDA';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gaf92365cb63eca2c56201f0a0c054664b';
        define-mem-ref-line = '15314';
        define-mem-ref-name = '__RV_KMSXDA32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga37c752d6151fb29b43b01b2dd8af55d6';
        define-mem-ref-line = '3342';
        define-mem-ref-name = '__RV_KMXDA';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga708d857b175929adb849e6c7318bec61';
        define-mem-ref-line = '15011';
        define-mem-ref-name = '__RV_KMXDA32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gae0d8b0f00c558d5a7f1119b9d261779f';
        define-mem-ref-line = '4775';
        define-mem-ref-name = '__RV_KSLL16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga4f3e9c4c72aaa40f0fb4b143933178ce';
        define-mem-ref-line = '15365';
        define-mem-ref-name = '__RV_KSLL32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gafed94424b7e8431a31632ac1f9097e35';
        define-mem-ref-line = '4669';
        define-mem-ref-name = '__RV_KSLL8';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga44edf9b602fc9cdd1d679dccf979ee92';
        define-mem-ref-line = '15416';
        define-mem-ref-name = '__RV_KSLLI32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gab5dc82aa8b7514f882979a71d88fb154';
        define-mem-ref-line = '4568';
        define-mem-ref-name = '__RV_KSLLW';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gaa85a466f43c98b2a2b34dc19e9c8e9d2';
        define-mem-ref-line = '5029';
        define-mem-ref-name = '__RV_KSLRA16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gae5b84af52b3d277117a4ee509df1504d';
        define-mem-ref-line = '5096';
        define-mem-ref-name = '__RV_KSLRA16_U';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gaac9d8fddae94b97c09f59f93f01b81c9';
        define-mem-ref-line = '15482';
        define-mem-ref-name = '__RV_KSLRA32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gaf432cd440b93dcd519459b4107691173';
        define-mem-ref-line = '15548';
        define-mem-ref-name = '__RV_KSLRA32_U';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga748809588c9a563b78102b3a4e7ae0f5';
        define-mem-ref-line = '4895';
        define-mem-ref-name = '__RV_KSLRA8';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga5e46b6bd44f57528f3dd1a4f509fdb12';
        define-mem-ref-line = '4962';
        define-mem-ref-name = '__RV_KSLRA8_U';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga3a01ea385d7d505ab86f7db697567e5b';
        define-mem-ref-line = '5156';
        define-mem-ref-name = '__RV_KSLRAW';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga9f23cd90864721f831fefd87acd4182e';
        define-mem-ref-line = '5219';
        define-mem-ref-name = '__RV_KSLRAW_U';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga5623725bde47550878158bc9a52dd0aa';
        define-mem-ref-line = '5276';
        define-mem-ref-name = '__RV_KSTAS16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gabfa35c8c4da10b658fc4f9f295945c40';
        define-mem-ref-line = '15600';
        define-mem-ref-name = '__RV_KSTAS32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga8feffb9748de700f30a52c93302be55d';
        define-mem-ref-line = '5333';
        define-mem-ref-name = '__RV_KSTSA16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gafcc677fb6b75c7ae82abbec436bf5ae1';
        define-mem-ref-line = '15651';
        define-mem-ref-name = '__RV_KSTSA32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga062dbffd606488852b1e4aabcf6369b4';
        define-mem-ref-line = '5428';
        define-mem-ref-name = '__RV_KSUB16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga2c48127c84b6c0ec441cab1d048d2082';
        define-mem-ref-line = '15698';
        define-mem-ref-name = '__RV_KSUB32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gad703720a47f05b3e322caffbcc45298a';
        define-mem-ref-line = '5494';
        define-mem-ref-name = '__RV_KSUB64';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga872cc2823228c92d1004bd859af27147';
        define-mem-ref-line = '5380';
        define-mem-ref-name = '__RV_KSUB8';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gae30012cd8914b62f2fb84236b138f54f';
        define-mem-ref-line = '5541';
        define-mem-ref-name = '__RV_KSUBH';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga2a28907bd6cda3a2caa1e2200eafaec3';
        define-mem-ref-line = '5589';
        define-mem-ref-name = '__RV_KSUBW';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga37ef876bfb8f2a063dd2d6554086efe4';
        define-mem-ref-line = '5645';
        define-mem-ref-name = '__RV_KWMMUL';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga5fc98cdba6f2dda6fc65d4c3a836c20f';
        define-mem-ref-line = '5701';
        define-mem-ref-name = '__RV_KWMMUL_U';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga1e5062cc77c31e898d6a85e7768a7b2d';
        define-mem-ref-line = '5747';
        define-mem-ref-name = '__RV_MADDR32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga636b734793493bbcf7a61dfa55749e82';
        define-mem-ref-line = '5786';
        define-mem-ref-name = '__RV_MAXW';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga60a38a5ee2cab1dd916cf4745c86a77e';
        define-mem-ref-line = '5822';
        define-mem-ref-name = '__RV_MINW';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga8260760ab7c146507ec4507862534332';
        define-mem-ref-line = '5869';
        define-mem-ref-name = '__RV_MSUBR32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gab76bac5299a9c41ce034594a704a126b';
        define-mem-ref-line = '5920';
        define-mem-ref-name = '__RV_MULR64';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga70bfdde5df211d5aa20cf406736d2ea1';
        define-mem-ref-line = '5972';
        define-mem-ref-name = '__RV_MULSR64';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga4d0a417bfde5846e13d2ae5a2da2dbb3';
        define-mem-ref-line = '6011';
        define-mem-ref-name = '__RV_PBSAD';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gab29c8817a341834901b676f1be7e6279';
        define-mem-ref-line = '6053';
        define-mem-ref-name = '__RV_PBSADA';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gabd698d8de29ab162d919a182b9c6779c';
        define-mem-ref-line = '6103';
        define-mem-ref-name = '__RV_PKBB16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga56dff3ebca8b83c5b6fafc649a564fe9';
        define-mem-ref-line = '15746';
        define-mem-ref-name = '__RV_PKBB32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gaf10c9bb0704694903991a3a77e4134a1';
        define-mem-ref-line = '6154';
        define-mem-ref-name = '__RV_PKBT16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga469c59f0918b6427ce1e84834969f975';
        define-mem-ref-line = '15794';
        define-mem-ref-name = '__RV_PKBT32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gacb5418972db5061d6f993f3b4a3a131e';
        define-mem-ref-line = '6256';
        define-mem-ref-name = '__RV_PKTB16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gaf8183f498b9d4e3f7cc20e3452f6d194';
        define-mem-ref-line = '15890';
        define-mem-ref-name = '__RV_PKTB32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga2d33235fc87cd78798e5824e3b84054d';
        define-mem-ref-line = '6205';
        define-mem-ref-name = '__RV_PKTT16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga89607536fe1c8fca11131ea66b909507';
        define-mem-ref-line = '15842';
        define-mem-ref-name = '__RV_PKTT32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga53762c95c79e336f330d308b64b4c40e';
        define-mem-ref-line = '6346';
        define-mem-ref-name = '__RV_RADD16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gae5b48cbde9950674461afbfb0037943c';
        define-mem-ref-line = '15936';
        define-mem-ref-name = '__RV_RADD32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga152f18d1ef922b3104cc763d00611511';
        define-mem-ref-line = '6399';
        define-mem-ref-name = '__RV_RADD64';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga270f185315a2f3d5da8d14e9a89e716b';
        define-mem-ref-line = '6301';
        define-mem-ref-name = '__RV_RADD8';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga162b41b571bd84dcd8860437417544dd';
        define-mem-ref-line = '6447';
        define-mem-ref-name = '__RV_RADDW';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga425c896839da2d7162fd68f53a50a9f9';
        define-mem-ref-line = '6496';
        define-mem-ref-name = '__RV_RCRAS16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga2ec462dcdc30cdad71726efe43ee34b0';
        define-mem-ref-line = '15983';
        define-mem-ref-name = '__RV_RCRAS32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga98d239e879270c5e4c8dd575e9cb6529';
        define-mem-ref-line = '6545';
        define-mem-ref-name = '__RV_RCRSA16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga33061b2476bd16965e249987b8ccf74b';
        define-mem-ref-line = '16030';
        define-mem-ref-name = '__RV_RCRSA32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gaff8e2c883c492aff917d183ae7097535';
        define-mem-ref-line = '6572';
        define-mem-ref-name = '__RV_RDOV';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gaec8b94f14dfbcab9f1230e3d43047de9';
        define-mem-ref-line = '6621';
        define-mem-ref-name = '__RV_RSTAS16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gaced91aec5bed74368de805e174999475';
        define-mem-ref-line = '16077';
        define-mem-ref-name = '__RV_RSTAS32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gaf9b70a84f1b52fd578ffe432f7bb0492';
        define-mem-ref-line = '6670';
        define-mem-ref-name = '__RV_RSTSA16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga93aba0996a17d19ad3cc1e67288b3270';
        define-mem-ref-line = '16123';
        define-mem-ref-name = '__RV_RSTSA32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gabb7544dfa512a408384621aee3956fe0';
        define-mem-ref-line = '6764';
        define-mem-ref-name = '__RV_RSUB16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga816e85e762afdbbbf6073ccdd84dab9d';
        define-mem-ref-line = '16169';
        define-mem-ref-name = '__RV_RSUB32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gafc5f4bf4b712ae2559a30356fc9773a8';
        define-mem-ref-line = '6818';
        define-mem-ref-name = '__RV_RSUB64';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gae3a2b016b3af39c178ef275c7e939bb3';
        define-mem-ref-line = '6717';
        define-mem-ref-name = '__RV_RSUB8';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gad19388580ce1a2cc1afee60f9d73e60c';
        define-mem-ref-line = '6866';
        define-mem-ref-name = '__RV_RSUBW';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gad86adb4c738c71d2b9c07e44fb02113c';
        define-mem-ref-line = '7093';
        define-mem-ref-name = '__RV_SCMPLE16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga0b086037e48ff8891523b74b07154810';
        define-mem-ref-line = '7053';
        define-mem-ref-name = '__RV_SCMPLE8';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga18887b352c5dbe9535424bee83bf7d42';
        define-mem-ref-line = '7171';
        define-mem-ref-name = '__RV_SCMPLT16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga7a01ed10478504e9703dafdccc415ab6';
        define-mem-ref-line = '7132';
        define-mem-ref-name = '__RV_SCMPLT8';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga567ef612a72bcfbdc3a12a55bafb3b8c';
        define-mem-ref-line = '7294';
        define-mem-ref-name = '__RV_SLL16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gada1903a81ca0df7a3c28c169a85a1dab';
        define-mem-ref-line = '16209';
        define-mem-ref-name = '__RV_SLL32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga99febdacba921c09aff588332a658fba';
        define-mem-ref-line = '7212';
        define-mem-ref-name = '__RV_SLL8';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga989aaff6c47185a5239f55519b28e8bb';
        define-mem-ref-line = '16248';
        define-mem-ref-name = '__RV_SLLI32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga4161cf3c9857cbef8d23b6a8e09b49d2';
        define-mem-ref-line = '7395';
        define-mem-ref-name = '__RV_SMAL';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gaceb791bc1a33f08f2abc7c5ec16c1a8f';
        define-mem-ref-line = '7478';
        define-mem-ref-name = '__RV_SMALBB';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga74fe212140384150726143f2f43c900f';
        define-mem-ref-line = '7560';
        define-mem-ref-name = '__RV_SMALBT';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga8320e2679cb96ee46fcaf761925b8708';
        define-mem-ref-line = '7726';
        define-mem-ref-name = '__RV_SMALDA';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga9e334955371767a38c1e7069a42025c8';
        define-mem-ref-line = '7992';
        define-mem-ref-name = '__RV_SMALDRS';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga68b7e1927e142a46a1e3132a7e04b777';
        define-mem-ref-line = '7901';
        define-mem-ref-name = '__RV_SMALDS';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga39331e38421eb5f882a615941cf00444';
        define-mem-ref-line = '7642';
        define-mem-ref-name = '__RV_SMALTT';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga18e89f90f0b3e3d8c34ceb33b671a61b';
        define-mem-ref-line = '7810';
        define-mem-ref-name = '__RV_SMALXDA';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gaf31ec8bdff7f1f55254aaeb13979c70c';
        define-mem-ref-line = '8083';
        define-mem-ref-name = '__RV_SMALXDS';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga08927c1a80a7e90b4bf485ece9ff01f3';
        define-mem-ref-line = '8179';
        define-mem-ref-name = '__RV_SMAQA';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga7354acb478473376227c883968d8b78d';
        define-mem-ref-line = '8224';
        define-mem-ref-name = '__RV_SMAQA_SU';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga89c1afcd9898226795ae2112d2fbea40';
        define-mem-ref-line = '8135';
        define-mem-ref-name = '__RV_SMAR64';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga9fefb44ce69dae8452a1f78462b36ace';
        define-mem-ref-line = '8301';
        define-mem-ref-name = '__RV_SMAX16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga7ebc0969cd46664712766e7acd3cba73';
        define-mem-ref-line = '16286';
        define-mem-ref-name = '__RV_SMAX32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gafc3ca4c25f1796c6c129b0a72fdb4ddc';
        define-mem-ref-line = '8262';
        define-mem-ref-name = '__RV_SMAX8';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga6078c3498de77bbaeabbf7017fa023ab';
        define-mem-ref-line = '8353';
        define-mem-ref-name = '__RV_SMBB16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga67f3972b5510e84004471785925aa25b';
        define-mem-ref-line = '16335';
        define-mem-ref-name = '__RV_SMBB32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga2f8364cbb057b9952017ad1bd3230a5e';
        define-mem-ref-line = '8405';
        define-mem-ref-name = '__RV_SMBT16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gaba92f1975a35bbd2d6dd3d4c684a0e88';
        define-mem-ref-line = '16384';
        define-mem-ref-name = '__RV_SMBT32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gafab251aa9c5e64dc004c9dc3b8c7c0dd';
        define-mem-ref-line = '8575';
        define-mem-ref-name = '__RV_SMDRS';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga211678cfa93e9cc7155746a699a457ba';
        define-mem-ref-line = '16539';
        define-mem-ref-name = '__RV_SMDRS32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga056df0d47cc4dcef5739bb15f2a324ac';
        define-mem-ref-line = '8516';
        define-mem-ref-name = '__RV_SMDS';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga10d42564124518365b51ba8fc999e42d';
        define-mem-ref-line = '16486';
        define-mem-ref-name = '__RV_SMDS32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga5b8419c5f8c624d1a0e16c43efb798eb';
        define-mem-ref-line = '8712';
        define-mem-ref-name = '__RV_SMIN16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gaeef74d8a0d235bffb4e1a05204d90494';
        define-mem-ref-line = '16630';
        define-mem-ref-name = '__RV_SMIN32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga3b9ace3565fb4cea93a55736046498e7';
        define-mem-ref-line = '8673';
        define-mem-ref-name = '__RV_SMIN8';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga17b1cc8cce90ea3852050e9ec0b28795';
        define-mem-ref-line = '8763';
        define-mem-ref-name = '__RV_SMMUL';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga18c56b42dfb546e0a39ee1a0554e6e0b';
        define-mem-ref-line = '8814';
        define-mem-ref-name = '__RV_SMMUL_U';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga9842af8b6adf990ea70a5261e546a26c';
        define-mem-ref-line = '8864';
        define-mem-ref-name = '__RV_SMMWB';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga4b7617e39d73f38ac27a24644008aacd';
        define-mem-ref-line = '8914';
        define-mem-ref-name = '__RV_SMMWB_U';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga92298c74bc685e608de8c743f4348940';
        define-mem-ref-line = '8964';
        define-mem-ref-name = '__RV_SMMWT';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga75f579bae285694b96c319bd0c0daffa';
        define-mem-ref-line = '9014';
        define-mem-ref-name = '__RV_SMMWT_U';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gac49482a84d29e662acb7438c5821cc8b';
        define-mem-ref-line = '9097';
        define-mem-ref-name = '__RV_SMSLDA';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gad6cb1fab36698a107205e10b5ae71436';
        define-mem-ref-line = '9179';
        define-mem-ref-name = '__RV_SMSLXDA';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga97d5fc417db0b47d8ee805ef3eb9d8a2';
        define-mem-ref-line = '9232';
        define-mem-ref-name = '__RV_SMSR64';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gab253cabd0fb5ac51b6b897cd3e8d6e0f';
        define-mem-ref-line = '8457';
        define-mem-ref-name = '__RV_SMTT16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga655719f1d3c7ef9ac168ef81838feaee';
        define-mem-ref-line = '16433';
        define-mem-ref-name = '__RV_SMTT32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gad0ccc8d1d7b5b8c0c2b7133b7243dc91';
        define-mem-ref-line = '9482';
        define-mem-ref-name = '__RV_SMUL16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gaa89f0815a309bf7e0c79c8ac9030c209';
        define-mem-ref-line = '9314';
        define-mem-ref-name = '__RV_SMUL8';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga2eb023a945b38fad971202a788f3899c';
        define-mem-ref-line = '9567';
        define-mem-ref-name = '__RV_SMULX16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga6960884895453cad6b8ac126b66ee892';
        define-mem-ref-line = '9397';
        define-mem-ref-name = '__RV_SMULX8';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga45c60f7cb5ae0e2ddaeca68e0a76283b';
        define-mem-ref-line = '8634';
        define-mem-ref-name = '__RV_SMXDS';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga1f2c26b1da4fb4329ecde53421e18c78';
        define-mem-ref-line = '16592';
        define-mem-ref-name = '__RV_SMXDS32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gab98c44f440802e210dd48403997977fa';
        define-mem-ref-line = '9947';
        define-mem-ref-name = '__RV_SRA16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga044ea66eee35c4d3ae3cb3d8e7aa3aa2';
        define-mem-ref-line = '10001';
        define-mem-ref-name = '__RV_SRA16_U';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga0de6fada321c089b1d6eb655a5b5085d';
        define-mem-ref-line = '16683';
        define-mem-ref-name = '__RV_SRA32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gaedf16a534575de0f435869923c6b536a';
        define-mem-ref-line = '16736';
        define-mem-ref-name = '__RV_SRA32_U';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga60b24db284bacbf2ab9de45e0881b011';
        define-mem-ref-line = '9731';
        define-mem-ref-name = '__RV_SRA8';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gad6421547bda7f5c8b4ab42d0e771daf3';
        define-mem-ref-line = '9785';
        define-mem-ref-name = '__RV_SRA8_U';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gac34824012cfe56f0a6fb9baf2fb1ba33';
        define-mem-ref-line = '9621';
        define-mem-ref-name = '__RV_SRA_U';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga1339130e1d377a8ed99ca71e2fe4d1d9';
        define-mem-ref-line = '16789';
        define-mem-ref-name = '__RV_SRAI32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga0ef645ccad1604a6ce8f2ab0747293c3';
        define-mem-ref-line = '16842';
        define-mem-ref-name = '__RV_SRAI32_U';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga1aceb08da08096a9affa783aa9f54dcf';
        define-mem-ref-line = '16887';
        define-mem-ref-name = '__RV_SRAIW_U';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gad077385854832151e700839fb03cfcfe';
        define-mem-ref-line = '10375';
        define-mem-ref-name = '__RV_SRL16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga9b9494b2d305f51510e789484cbfd60b';
        define-mem-ref-line = '10427';
        define-mem-ref-name = '__RV_SRL16_U';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gaa527b5f65f359f77a0d667fb5e99cf73';
        define-mem-ref-line = '16940';
        define-mem-ref-name = '__RV_SRL32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga1f6513e3a91fab5673495cdb5cdd0a1b';
        define-mem-ref-line = '16993';
        define-mem-ref-name = '__RV_SRL32_U';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga2aae7328ef4464ec4ee58147b4c3be26';
        define-mem-ref-line = '10164';
        define-mem-ref-name = '__RV_SRL8';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga60905852cd03af20f29f226cfe99b87c';
        define-mem-ref-line = '10217';
        define-mem-ref-name = '__RV_SRL8_U';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gae9dfa0e06789bbdccc6147d120392239';
        define-mem-ref-line = '17044';
        define-mem-ref-name = '__RV_SRLI32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gace93ecbca53aa585ef4b05b41cb11b0c';
        define-mem-ref-line = '17095';
        define-mem-ref-name = '__RV_SRLI32_U';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gafdb722620fddf1c66759a8f46cd34a16';
        define-mem-ref-line = '10579';
        define-mem-ref-name = '__RV_STAS16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gadd4e3651aa97d430e2eed42cbcb61c3f';
        define-mem-ref-line = '17138';
        define-mem-ref-name = '__RV_STAS32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga4c4ac88f3a4a3db0834b880ad8548543';
        define-mem-ref-line = '10625';
        define-mem-ref-name = '__RV_STSA16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga8f25a6df3979e6e3ced2876ad7aee194';
        define-mem-ref-line = '17180';
        define-mem-ref-name = '__RV_STSA32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga2ba13d5be91378558bac3add7c314a44';
        define-mem-ref-line = '10707';
        define-mem-ref-name = '__RV_SUB16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga6ce1575be07d2858f589016578743160';
        define-mem-ref-line = '17220';
        define-mem-ref-name = '__RV_SUB32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga02ed3c841b85e58d5a40d78fa2f5519f';
        define-mem-ref-line = '10761';
        define-mem-ref-name = '__RV_SUB64';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga9c75e931e8703babf9e8d29f6dfcf280';
        define-mem-ref-line = '10666';
        define-mem-ref-name = '__RV_SUB8';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gaecdd51db17293a1d12d85a6bb0cd4abe';
        define-mem-ref-line = '10807';
        define-mem-ref-name = '__RV_SUNPKD810';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga922f7523e4d512fe391795edd7a81239';
        define-mem-ref-line = '10853';
        define-mem-ref-name = '__RV_SUNPKD820';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga8d213189a39651f3bcad77da2eb1f530';
        define-mem-ref-line = '10899';
        define-mem-ref-name = '__RV_SUNPKD830';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gad3da1a88ec99f6c5733a3035d26b3bbf';
        define-mem-ref-line = '10945';
        define-mem-ref-name = '__RV_SUNPKD831';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga869283b10c6656ef6b529487d244449c';
        define-mem-ref-line = '10991';
        define-mem-ref-name = '__RV_SUNPKD832';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gadab9655b01398363507f94180fd41ba4';
        define-mem-ref-line = '11065';
        define-mem-ref-name = '__RV_SWAP16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gaaea4771a7ac766be7bfec89c7bf6cda8';
        define-mem-ref-line = '11028';
        define-mem-ref-name = '__RV_SWAP8';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga1c90d69f90f54607d8b137b8efafdc88';
        define-mem-ref-line = '11292';
        define-mem-ref-name = '__RV_UCMPLE16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga7bb0f1ec7077c679107517472935145d';
        define-mem-ref-line = '11252';
        define-mem-ref-name = '__RV_UCMPLE8';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga566fff4ed2e21cc7e247ecb8b2258bd2';
        define-mem-ref-line = '11370';
        define-mem-ref-name = '__RV_UCMPLT16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga6d69bc358f1d79a21f67027a3fcf2320';
        define-mem-ref-line = '11331';
        define-mem-ref-name = '__RV_UCMPLT8';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga5ab8ad2484f1d4b0ffbbd48443be73d0';
        define-mem-ref-line = '11460';
        define-mem-ref-name = '__RV_UKADD16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga0ae6b98529fa5176cb906a4add123778';
        define-mem-ref-line = '17264';
        define-mem-ref-name = '__RV_UKADD32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga8f5a5ff9c41c49dfe0d7981c2e5ab139';
        define-mem-ref-line = '11522';
        define-mem-ref-name = '__RV_UKADD64';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga4b8d09eb6958b8eabea15a82ab8edef7';
        define-mem-ref-line = '11415';
        define-mem-ref-name = '__RV_UKADD8';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gaf5a82ca7a98ea1c06cd7a468d035abcd';
        define-mem-ref-line = '11564';
        define-mem-ref-name = '__RV_UKADDH';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga836b1f78407443c88b5958a7cfb3361f';
        define-mem-ref-line = '11607';
        define-mem-ref-name = '__RV_UKADDW';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga3d8ee80d3beca9f62d44d96a52037f92';
        define-mem-ref-line = '11663';
        define-mem-ref-name = '__RV_UKCRAS16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gadb9440a09e140829a1b0295b4171fa0b';
        define-mem-ref-line = '17317';
        define-mem-ref-name = '__RV_UKCRAS32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga469a05a9449e9ec44d89d5f37df09d04';
        define-mem-ref-line = '11718';
        define-mem-ref-name = '__RV_UKCRSA16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga32c3976c47a200878be3bbaaf28de26c';
        define-mem-ref-line = '17369';
        define-mem-ref-name = '__RV_UKCRSA32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gac196974cb320c6111c4708989d0e1e49';
        define-mem-ref-line = '11783';
        define-mem-ref-name = '__RV_UKMAR64';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga7feff7a2f338e3730f0af2f054cfdd71';
        define-mem-ref-line = '11848';
        define-mem-ref-name = '__RV_UKMSR64';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gac5ee1051a7643e3ed68a807f61665e7c';
        define-mem-ref-line = '11903';
        define-mem-ref-name = '__RV_UKSTAS16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga042afa2a6b552b4ef0c5258d8bf02461';
        define-mem-ref-line = '17422';
        define-mem-ref-name = '__RV_UKSTAS32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gaed116dce964990e1d8f0905a607b9541';
        define-mem-ref-line = '11958';
        define-mem-ref-name = '__RV_UKSTSA16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gaea266bb7b2d939d5cc49c50dca75be65';
        define-mem-ref-line = '17474';
        define-mem-ref-name = '__RV_UKSTSA32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gae159a5930299163247cc7704d2903c73';
        define-mem-ref-line = '12048';
        define-mem-ref-name = '__RV_UKSUB16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga169028d26efc2ec4eb0914a2da5354a6';
        define-mem-ref-line = '17518';
        define-mem-ref-name = '__RV_UKSUB32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga8c38b38409eba3d05396b9d09c1b8382';
        define-mem-ref-line = '12111';
        define-mem-ref-name = '__RV_UKSUB64';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga28d53441b9c0106fb6caed6dc77f89ad';
        define-mem-ref-line = '12003';
        define-mem-ref-name = '__RV_UKSUB8';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga8f7265e350aad977038169d60af14e55';
        define-mem-ref-line = '12157';
        define-mem-ref-name = '__RV_UKSUBH';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gae102902e2e1e3a606807064ab3ea763f';
        define-mem-ref-line = '12201';
        define-mem-ref-name = '__RV_UKSUBW';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga86598a907350dc26b358e7660f721482';
        define-mem-ref-line = '12299';
        define-mem-ref-name = '__RV_UMAQA';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gadfcd132e9036eac41fbe56909d8acaa4';
        define-mem-ref-line = '12255';
        define-mem-ref-name = '__RV_UMAR64';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gaa75623ba7f5f23a440782f47f62f1f6f';
        define-mem-ref-line = '12376';
        define-mem-ref-name = '__RV_UMAX16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga298ea777bdb92725501538d9db8c9364';
        define-mem-ref-line = '17556';
        define-mem-ref-name = '__RV_UMAX32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga83c4e6f30012da45ea00703d8aafccbe';
        define-mem-ref-line = '12337';
        define-mem-ref-name = '__RV_UMAX8';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gaa7c689ce557d35cb4847d43846579a40';
        define-mem-ref-line = '12454';
        define-mem-ref-name = '__RV_UMIN16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga65104f0f5fabadc6c8c2777571a66d74';
        define-mem-ref-line = '17594';
        define-mem-ref-name = '__RV_UMIN32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gaea0e139e2e2392c423aaf9f7f18056f2';
        define-mem-ref-line = '12415';
        define-mem-ref-name = '__RV_UMIN8';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga6011dd7028a2a50e4fac5a3a1da22d54';
        define-mem-ref-line = '12508';
        define-mem-ref-name = '__RV_UMSR64';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga0b8735b23131378b6bcad1dd67255513';
        define-mem-ref-line = '12760';
        define-mem-ref-name = '__RV_UMUL16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga119cf7edda88230d8d62fd642fff046b';
        define-mem-ref-line = '12591';
        define-mem-ref-name = '__RV_UMUL8';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga32ff52a5adf2d53a6d661c48ba6e58c4';
        define-mem-ref-line = '12845';
        define-mem-ref-name = '__RV_UMULX16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gab655cbf1d89adb8bc28a1600d6e770aa';
        define-mem-ref-line = '12675';
        define-mem-ref-name = '__RV_UMULX8';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga4bb70d87c28d883e2c4cdd71671076e4';
        define-mem-ref-line = '12939';
        define-mem-ref-name = '__RV_URADD16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga70ed498e86037d80ebe470cfb6591a57';
        define-mem-ref-line = '17640';
        define-mem-ref-name = '__RV_URADD32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga8458d1a5a3564b122ebe6b84115877e1';
        define-mem-ref-line = '12991';
        define-mem-ref-name = '__RV_URADD64';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga3024b858bfff004934d319dfa6b73102';
        define-mem-ref-line = '12892';
        define-mem-ref-name = '__RV_URADD8';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gad8c7e0a31ab014db941c83a0a704da8d';
        define-mem-ref-line = '13039';
        define-mem-ref-name = '__RV_URADDW';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga50231b389038f448ea1eb29b45c90b9e';
        define-mem-ref-line = '13088';
        define-mem-ref-name = '__RV_URCRAS16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gadb3203c272e4d13e1f6b0df92f575da7';
        define-mem-ref-line = '17687';
        define-mem-ref-name = '__RV_URCRAS32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gad4abe7a167aebc8b921be0e901c59f8d';
        define-mem-ref-line = '13137';
        define-mem-ref-name = '__RV_URCRSA16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gab4e8e05c30ec9907dce962832329817e';
        define-mem-ref-line = '17734';
        define-mem-ref-name = '__RV_URCRSA32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga972d51a1eebdd2a479b549286a2d8d92';
        define-mem-ref-line = '13186';
        define-mem-ref-name = '__RV_URSTAS16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga651311ceca6fb06dcdecc5a67b15a683';
        define-mem-ref-line = '17781';
        define-mem-ref-name = '__RV_URSTAS32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gadacb909a5ebc2d520bec4f86c0467a2c';
        define-mem-ref-line = '13235';
        define-mem-ref-name = '__RV_URSTSA16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga97737cc391f6eafc760c002866dc7ead';
        define-mem-ref-line = '17828';
        define-mem-ref-name = '__RV_URSTSA32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga34716b9076a8f42d4001047705447f1d';
        define-mem-ref-line = '13329';
        define-mem-ref-name = '__RV_URSUB16';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gaba8b5c1a6f91c0b19cdea558a76968d3';
        define-mem-ref-line = '17874';
        define-mem-ref-name = '__RV_URSUB32';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gabe20856e2f82d33c17ce4963ee2db286';
        define-mem-ref-line = '13383';
        define-mem-ref-name = '__RV_URSUB64';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gae016aa9f76f26a0e5ce7d3a0120e8afd';
        define-mem-ref-line = '13282';
        define-mem-ref-name = '__RV_URSUB8';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1gaf80c041da49050e0469a6e945f5df1fd';
        define-mem-ref-line = '13431';
        define-mem-ref-name = '__RV_URSUBW';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga92ce02b48c9b1f373c8b7e602c6bcc5f';
        define-mem-ref-line = '13535';
        define-mem-ref-name = '__RV_WEXT';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga0deca77382416530ac829ea0a18d36a5';
        define-mem-ref-line = '13581';
        define-mem-ref-name = '__RV_ZUNPKD810';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga0a124400d7a60b3f860c73b2ef10f753';
        define-mem-ref-line = '13627';
        define-mem-ref-name = '__RV_ZUNPKD820';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga2ffff9289e72fb5163731af36b82bd96';
        define-mem-ref-line = '13673';
        define-mem-ref-name = '__RV_ZUNPKD830';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga833374dc8db34294d48e728512a2068f';
        define-mem-ref-line = '13719';
        define-mem-ref-name = '__RV_ZUNPKD831';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga7fdf5939f3c0be0a64c2659b930a9faa';
        define-mem-ref-line = '13765';
        define-mem-ref-name = '__RV_ZUNPKD832';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1ga85ee6d049f3b807b7c5f37513f6b95bd';
        define-mem-ref-line = '961';
        define-mem-ref-name = '__SB';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1ga10e81b063600f3abb562f7a6efa3aaca';
        define-mem-ref-line = '972';
        define-mem-ref-name = '__SH';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1ga9df58a7326fee34b546cae7d7d6e6de3';
        define-mem-ref-line = '983';
        define-mem-ref-name = '__SW';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1gaca38170721a2eefd87017ed350162c4c';
        define-mem-ref-line = '730';
        define-mem-ref-name = '__WFE';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1ga8bc0687a967ccba8e8adbe7abe5fe2f7';
        define-mem-ref-line = '717';
        define-mem-ref-name = '__WFI';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CompilerControl_1gade2d8d7118f8ff49547f60aa0c3382bb';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__INLINE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
inline
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_gcc.h';
      define-mem-desc-line = '60';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Recommend that function should be inlined by the compiler.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
  
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CompilerControl_1gaba87361bfad2ae52cfe2f40c1a1dbf9c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__STATIC_INLINE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
static inline
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_gcc.h';
      define-mem-desc-line = '65';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Define a static function that may be inlined by the compiler.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
  
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__STATIC_FORCEINLINE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__attribute__((always_inline)) static inline
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_gcc.h';
      define-mem-desc-line = '70';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Define a static function that should be always inlined by the compiler.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
  
_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1gadd554cdf00f5417208433154e9c9228e';
        define-mem-ref-line = '1164';
        define-mem-ref-name = '__AMOMIN_W';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1gaf898279e3db81302391a698214744865';
        define-mem-ref-line = '931';
        define-mem-ref-name = '__LW';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__dsp_8h_1ga6d8dce49013b778d0290cd057cf45dd0';
        define-mem-ref-line = '18530';
        define-mem-ref-name = '__RV_EXPD83';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1ga9df58a7326fee34b546cae7d7d6e6de3';
        define-mem-ref-line = '983';
        define-mem-ref-name = '__SW';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__cache_8h_1gab30be00d8a0583adac5d786149db433f';
        define-mem-ref-line = '655';
        define-mem-ref-name = 'DisableDCache';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__cache_8h_1ga4a855b01222d0c42d413f168651616e5';
        define-mem-ref-line = '191';
        define-mem-ref-name = 'DisableICache';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CompilerControl_1ga153a4a31b276a9758959580538720a51';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__NO_RETURN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__attribute__((__noreturn__))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_gcc.h';
      define-mem-desc-line = '75';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Inform the compiler that a function does not return.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
  
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CompilerControl_1ga3e40e4c553fc11588f7a4c2a19e789e0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__USED';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__attribute__((used))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_gcc.h';
      define-mem-desc-line = '80';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Inform that a variable shall be retained in executable image.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
  
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CompilerControl_1gac607bf387b29162be6a9b77fc7999539';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__WEAK';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__attribute__((weak))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_gcc.h';
      define-mem-desc-line = '85';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
restrict pointer qualifier to enable additional optimizations.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
  
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CompilerControl_1gabc2f44e663e21720d6ef1be3693c85d9';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__VECTOR_SIZE';
      define-mem-param  = {
        define-mem-def-name = 'x';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__attribute__((vector_size(x)))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_gcc.h';
      define-mem-desc-line = '90';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
specified the vector size of the variable, measured in bytes
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CompilerControl_1gabe8996d3d985ee1529475443cc635bf1';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__PACKED';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__attribute__((packed, aligned(1)))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_gcc.h';
      define-mem-desc-line = '95';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Request smallest possible alignment.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
  
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CompilerControl_1ga4dbb70fab85207c27b581ecb6532b314';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__PACKED_STRUCT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
struct __attribute__((packed, aligned(1)))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_gcc.h';
      define-mem-desc-line = '100';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Request smallest possible alignment for a structure.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
  
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CompilerControl_1ga6fba34d08b0a526830b4231d2ea0b89a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__PACKED_UNION';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
union __attribute__((packed, aligned(1)))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_gcc.h';
      define-mem-desc-line = '105';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Request smallest possible alignment for a union.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
  
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CompilerControl_1ga5103fb373cae9837cc4a384be55dc87f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__UNALIGNED_UINT16_WRITE';
      define-mem-param  = {
        define-mem-def-name = 'addr';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'val';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(void)((((struct T_UINT16_WRITE *)(void *)(addr))->v) = (val))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_gcc.h';
      define-mem-desc-line = '118';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Pointer for unaligned write of a uint16_t variable.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
  
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CompilerControl_1gab71b66e5ce403158d3dee62a59f9175f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__UNALIGNED_UINT16_READ';
      define-mem-param  = {
        define-mem-def-name = 'addr';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(((const struct T_UINT16_READ *)(const void *)(addr))->v)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_gcc.h';
      define-mem-desc-line = '131';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Pointer for unaligned read of a uint16_t variable.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
  
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CompilerControl_1ga203f593d140ed88b81bc189edc861110';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__UNALIGNED_UINT32_WRITE';
      define-mem-param  = {
        define-mem-def-name = 'addr';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'val';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(void)((((struct T_UINT32_WRITE *)(void *)(addr))->v) = (val))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_gcc.h';
      define-mem-desc-line = '144';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Pointer for unaligned write of a uint32_t variable.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
  
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CompilerControl_1ga3b931f0b051b8c1a6377a3dcc7559b5e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__UNALIGNED_UINT32_READ';
      define-mem-param  = {
        define-mem-def-name = 'addr';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(((const struct T_UINT32_READ *)(const void *)(addr))->v)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_gcc.h';
      define-mem-desc-line = '157';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Pointer for unaligned read of a uint32_t variable.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
  
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CompilerControl_1gaa65ef8f7a5e8b7a6ea6c1d48b4c78e55';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__ALIGNED';
      define-mem-param  = {
        define-mem-def-name = 'x';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__attribute__((aligned(x)))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_gcc.h';
      define-mem-desc-line = '162';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Minimum <tt>x</tt> bytes alignment for a variable.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
  
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CompilerControl_1ga378ac21329d33f561f90265eef89f564';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RESTRICT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__restrict
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_gcc.h';
      define-mem-desc-line = '167';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
restrict pointer qualifier to enable additional optimizations.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
  
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CompilerControl_1ga6516fb12ab0dd45c734f8cef7d921af6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__COMPILER_BARRIER';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__ASM volatile("":::"memory")
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_gcc.h';
      define-mem-desc-line = '172';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Barrier to prevent compiler from reordering instructions.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
  
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CompilerControl_1ga399dde24635692b7740781dc9cc067e0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__USUALLY';
      define-mem-param  = {
        define-mem-def-name = 'exp';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__builtin_expect((exp), 1)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_gcc.h';
      define-mem-desc-line = '177';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
provide the compiler with branch prediction information, the branch is usually true
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__timer_8h_1ga9906dae1937eac222354df5a9069945a';
        define-mem-ref-line = '459';
        define-mem-ref-name = 'SysTick_Reload';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CompilerControl_1ga028e3d25bf1120ae0c644b4d7fbe0d25';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RARELY';
      define-mem-param  = {
        define-mem-def-name = 'exp';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__builtin_expect((exp), 0)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_gcc.h';
      define-mem-desc-line = '182';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
provide the compiler with branch prediction information, the branch is rarely true
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CompilerControl_1gad20602e0e7adfc925c1205d0d38d91f6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__INTERRUPT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__attribute__((interrupt))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_gcc.h';
      define-mem-desc-line = '187';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Use this attribute to indicate that the specified function is an interrupt handler.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
  
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__PeriphAccess_1gaf63697ed9952cc71e1225efe205f6cd3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__I';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
volatile const
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_gcc.h';
      define-mem-desc-line = '210';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Defines 'read only' permissions.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__PeriphAccess_1ga7e25d9380f9ef903923964322e71f2f6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__O';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
volatile
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_gcc.h';
      define-mem-desc-line = '213';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Defines 'write only' permissions.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__PeriphAccess_1gaec43007d9998a0a0e01faede4133d6be';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__IO';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
volatile
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_gcc.h';
      define-mem-desc-line = '215';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Defines 'read / write' permissions.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__PeriphAccess_1ga4cc1649793116d7c2d8afce7a4ffce43';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__IM';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
volatile const
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_gcc.h';
      define-mem-desc-line = '219';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Defines 'read only' structure member permissions.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__PeriphAccess_1ga0ea2009ed8fd9ef35b48708280fdb758';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__OM';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
volatile
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_gcc.h';
      define-mem-desc-line = '221';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Defines 'write only' structure member permissions.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__PeriphAccess_1gab6caba5853a60a17e8e04499b52bf691';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__IOM';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
volatile
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_gcc.h';
      define-mem-desc-line = '223';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Defines 'read/write' structure member permissions.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__PeriphAccess_1ga286e3b913dbd236c7f48ea70c8821f4e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '_VAL2FLD';
      define-mem-param  = {
        define-mem-def-name = 'field';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'value';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(((uint32_t)(value) << field ## _Pos) & field ## _Msk)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_gcc.h';
      define-mem-desc-line = '238';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Mask and shift a bit field value for use in a register bit range.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
The macro \ref _VAL2FLD uses the #define's _Pos and _Msk of the related bit
field to shift bit-field values for assigning to a register.

<strong>Example</strong>:
@code 
ECLIC->CFG = _VAL2FLD(CLIC_CLICCFG_NLBIT, 3);
\endcode
\param[in] field  Name of the register bit field.
\param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
\return           Masked and shifted value.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__PeriphAccess_1ga139b6e261c981f014f386927ca4a8444';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '_FLD2VAL';
      define-mem-param  = {
        define-mem-def-name = 'field';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'value';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_gcc.h';
      define-mem-desc-line = '253';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Mask and shift a register value to extract a bit filed value.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
The macro \ref _FLD2VAL uses the #define's _Pos and _Msk of the related bit
field to extract the value of a bit field from a register.

<strong>Example</strong>:
@code 
nlbits = _FLD2VAL(CLIC_CLICCFG_NLBIT, ECLIC->CFG);
\endcode
\param[in] field  Name of the register bit field.
\param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
\return           Masked and shifted bit field value.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    };
    var = {
    var-member = {
      var-mem-kind = 'variable';
      var-mem-id   = 'group__NMSIS__Core__CompilerControl_1gac962a9aa89cef6e5cde0fe6b067f7de3';
      var-mem-virt = normal;
      var-mem-prot = public;
      var-mem-type = <<_EnD_oF_dEf_TeXt_
__PACKED_STRUCT
_EnD_oF_dEf_TeXt_;
      var-mem-name = 'T_UINT16_WRITE';
      var-mem-initializer = <<_EnD_oF_dEf_TeXt_
{
      uint16_t v
_EnD_oF_dEf_TeXt_;
      var-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_gcc.h';
      var-mem-desc-line = '113';
      var-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Packed struct for unaligned uint16_t write access.
_EnD_oF_dEf_TeXt_;
      var-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* var-member */
    var-member = {
      var-mem-kind = 'variable';
      var-mem-id   = 'group__NMSIS__Core__CompilerControl_1ga86899dc41c5b3b9ce6b8014ee0e852b9';
      var-mem-virt = normal;
      var-mem-prot = public;
      var-mem-type = <<_EnD_oF_dEf_TeXt_
__PACKED_STRUCT
_EnD_oF_dEf_TeXt_;
      var-mem-name = 'T_UINT16_READ';
      var-mem-initializer = <<_EnD_oF_dEf_TeXt_
{
      uint16_t v
_EnD_oF_dEf_TeXt_;
      var-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_gcc.h';
      var-mem-desc-line = '126';
      var-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Packed struct for unaligned uint16_t read access.
_EnD_oF_dEf_TeXt_;
      var-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* var-member */
    var-member = {
      var-mem-kind = 'variable';
      var-mem-id   = 'group__NMSIS__Core__CompilerControl_1gabbd193dec7cb45f1fbd05ff7e366ffe2';
      var-mem-virt = normal;
      var-mem-prot = public;
      var-mem-type = <<_EnD_oF_dEf_TeXt_
__PACKED_STRUCT
_EnD_oF_dEf_TeXt_;
      var-mem-name = 'T_UINT32_WRITE';
      var-mem-initializer = <<_EnD_oF_dEf_TeXt_
{
      uint32_t v
_EnD_oF_dEf_TeXt_;
      var-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_gcc.h';
      var-mem-desc-line = '139';
      var-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Packed struct for unaligned uint32_t write access.
_EnD_oF_dEf_TeXt_;
      var-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* var-member */
    var-member = {
      var-mem-kind = 'variable';
      var-mem-id   = 'group__NMSIS__Core__CompilerControl_1ga9653a1cbf01ec418e8e940ee3996b8ca';
      var-mem-virt = normal;
      var-mem-prot = public;
      var-mem-type = <<_EnD_oF_dEf_TeXt_
__PACKED_STRUCT
_EnD_oF_dEf_TeXt_;
      var-mem-name = 'T_UINT32_READ';
      var-mem-initializer = <<_EnD_oF_dEf_TeXt_
{
      uint32_t v
_EnD_oF_dEf_TeXt_;
      var-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_gcc.h';
      var-mem-desc-line = '152';
      var-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Packed struct for unaligned uint32_t read access.
_EnD_oF_dEf_TeXt_;
      var-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* var-member */
    };
  file-full-name  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_gcc.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
NMSIS compiler GCC header file.
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_



_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'nmsis__version_8h';
  file-name = 'nmsis_version.h';
    define = {
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__VersionControl_1gab04e403f865e54d51a172e7b930e9450';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__NMSIS_VERSION_MAJOR';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1U)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_version.h';
      define-mem-desc-line = '58';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Represent the NMSIS major version.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
The NMSIS major version can be used to
differentiate between NMSIS major releases.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__VersionControl_1ga9162e103fa01a5f011fe168c6effcf21';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__NMSIS_VERSION_MINOR';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0U)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_version.h';
      define-mem-desc-line = '67';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Represent the NMSIS minor version.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
The NMSIS minor version can be used to
query a NMSIS release update including new features.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__VersionControl_1ga1993e491d2b47ffdbef86e1aeea73533';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__NMSIS_VERSION_PATCH';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(4U)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_version.h';
      define-mem-desc-line = '75';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Represent the NMSIS patch version.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
The NMSIS patch version can be used to
show bug fixes in this package.
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__VersionControl_1gab5a0b348cd079c5b07a64ea593e67b29';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__NMSIS_VERSION';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
((__NMSIS_VERSION_MAJOR << 16U) | (__NMSIS_VERSION_MINOR << 8) | __NMSIS_VERSION_PATCH)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_version.h';
      define-mem-desc-line = '84';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Represent the NMSIS Version.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
NMSIS Version format: <strong>MAJOR.MINOR.PATCH</strong>
* MAJOR: \ref __NMSIS_VERSION_MAJOR, stored in <tt>bits [31:16]</tt> of \ref __NMSIS_VERSION
* MINOR: \ref __NMSIS_VERSION_MINOR, stored in <tt>bits [15:8]</tt> of \ref __NMSIS_VERSION
* PATCH: \ref __NMSIS_VERSION_PATCH, stored in <tt>bits [7:0]</tt> of \ref __NMSIS_VERSION
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    };
  file-full-name  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/nmsis_version.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
NMSIS Version definitions.
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_



_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'riscv__bits_8h';
  file-name = 'riscv_bits.h';
    define = {
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'riscv__bits_8h_1a556725b82918b8d147c4f8682470ce52';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SLL32';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
sll
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_bits.h';
      define-mem-desc-line = '32';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'riscv__bits_8h_1ac677e3bf428ab129e0cc9153ad7f23c7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'STORE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
sw
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_bits.h';
      define-mem-desc-line = '33';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'riscv__bits_8h_1a0b674752cca6d434a1a69f40877eb2be';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'LOAD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
lw
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_bits.h';
      define-mem-desc-line = '34';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'riscv__bits_8h_1aefc8153bedbd7d3f60cdbddad43756fe';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'LWU';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
lw
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_bits.h';
      define-mem-desc-line = '35';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'riscv__bits_8h_1aa62dd562816b5fc787f69696032b8818';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'LOG_REGBYTES';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_bits.h';
      define-mem-desc-line = '36';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'riscv__bits_8h_1a4cbedf4d32de8a7fbc7474c72274d966';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'REGBYTES';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1 << LOG_REGBYTES)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_bits.h';
      define-mem-desc-line = '39';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'riscv__bits_8h_1addeb2f7c41b462f7d844cc845174c85c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__rv_likely';
      define-mem-param  = {
        define-mem-def-name = 'x';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__builtin_expect((x), 1)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_bits.h';
      define-mem-desc-line = '54';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'riscv__bits_8h_1a3e1ff9b072d2ca20a786c0940edad053';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__rv_unlikely';
      define-mem-param  = {
        define-mem-def-name = 'x';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__builtin_expect((x), 0)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_bits.h';
      define-mem-desc-line = '55';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'riscv__bits_8h_1aac19123f807da404e30bc39ff10a8fa7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_ROUNDUP';
      define-mem-param  = {
        define-mem-def-name = 'a';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'b';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
((((a)-1)/(b)+1)*(b))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_bits.h';
      define-mem-desc-line = '57';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'riscv__bits_8h_1a9c086014b11aa4064e5713b6e39fa71c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_ROUNDDOWN';
      define-mem-param  = {
        define-mem-def-name = 'a';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'b';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
((a)/(b)*(b))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_bits.h';
      define-mem-desc-line = '58';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'riscv__bits_8h_1a82309e468f2d8acd459ab04e84010559';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_MAX';
      define-mem-param  = {
        define-mem-def-name = 'a';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'b';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
((a) > (b) ? (a) : (b))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_bits.h';
      define-mem-desc-line = '60';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'riscv__bits_8h_1a1cdb6990ccddec341d1ae8269dbd6733';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_MIN';
      define-mem-param  = {
        define-mem-def-name = 'a';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'b';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
((a) < (b) ? (a) : (b))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_bits.h';
      define-mem-desc-line = '61';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'riscv__bits_8h_1a5417fbfe0f7e0d636f056bf33d2057eb';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_CLAMP';
      define-mem-param  = {
        define-mem-def-name = 'a';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'lo';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'hi';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
MIN(MAX(a, lo), hi)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_bits.h';
      define-mem-desc-line = '62';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'riscv__bits_8h_1af26c1704cc9d8ef65e4e6e8e535f10b9';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_EXTRACT_FIELD';
      define-mem-param  = {
        define-mem-def-name = 'val';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'which';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(((val) & (which)) / ((which) & ~((which)-1)))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_bits.h';
      define-mem-desc-line = '64';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'riscv__bits_8h_1a3a9d4dadbe1405b7f69044794e8837f6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__RV_INSERT_FIELD';
      define-mem-param  = {
        define-mem-def-name = 'val';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'which';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'fieldval';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(((val) & ~(which)) | ((fieldval) * ((which) & ~((which)-1))))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_bits.h';
      define-mem-desc-line = '65';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'riscv__bits_8h_1a929bd70ece66ba40d21354301fa5eb9d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__AC';
      define-mem-param  = {
        define-mem-def-name = 'X';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'Y';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(X##Y)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_bits.h';
      define-mem-desc-line = '71';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'riscv__bits_8h_1a807728c093518f6db61f62160774fb49';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '_AC';
      define-mem-param  = {
        define-mem-def-name = 'X';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'Y';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__AC(X,Y)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_bits.h';
      define-mem-desc-line = '72';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'riscv__bits_8h_1aea2262e4ba1c217633c1fae2d76213ad';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '_AT';
      define-mem-param  = {
        define-mem-def-name = 'T';
      }; /*        define-mem-def--param */
      define-mem-param  = {
        define-mem-def-name = 'X';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
((T)(X))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_bits.h';
      define-mem-desc-line = '73';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'riscv__bits_8h_1ac343685d452c94120a3653c845bee3c1';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '_UL';
      define-mem-param  = {
        define-mem-def-name = 'x';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(_AC(x, UL))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_bits.h';
      define-mem-desc-line = '76';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'riscv__bits_8h_1af10cae5f1474ee29ae0a7d8d00caa5f3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '_ULL';
      define-mem-param  = {
        define-mem-def-name = 'x';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(_AC(x, ULL))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_bits.h';
      define-mem-desc-line = '77';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'riscv__bits_8h_1aa81f86fca982061e1b93130846e26b85';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '_BITUL';
      define-mem-param  = {
        define-mem-def-name = 'x';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(_UL(1) << (x))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_bits.h';
      define-mem-desc-line = '79';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'riscv__bits_8h_1abd44204775984542b66b5e1cdd25340e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '_BITULL';
      define-mem-param  = {
        define-mem-def-name = 'x';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(_ULL(1) << (x))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_bits.h';
      define-mem-desc-line = '80';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'riscv__bits_8h_1a2d1ace2be4b6d58d3260b1b5fd1d63e0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'UL';
      define-mem-param  = {
        define-mem-def-name = 'x';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(_UL(x))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_bits.h';
      define-mem-desc-line = '82';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'riscv__bits_8h_1ae7289206560e57188eb393096c91e575';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'ULL';
      define-mem-param  = {
        define-mem-def-name = 'x';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(_ULL(x))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_bits.h';
      define-mem-desc-line = '83';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'riscv__bits_8h_1a18d295a837ac71add5578860b55e5502';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'STR';
      define-mem-param  = {
        define-mem-def-name = 'x';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
XSTR(x)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_bits.h';
      define-mem-desc-line = '85';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'riscv__bits_8h_1abe87b341f562fd1cf40b7672e4d759da';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'XSTR';
      define-mem-param  = {
        define-mem-def-name = 'x';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
#x
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_bits.h';
      define-mem-desc-line = '86';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'riscv__bits_8h_1ac43f8b52ae96a4e813d8df9022d7e2c3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = '__STR';
      define-mem-param  = {
        define-mem-def-name = 's';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
#s
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_bits.h';
      define-mem-desc-line = '87';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'riscv__bits_8h_1a4689212d5a549893cabb9d7782eecfb6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'STRINGIFY';
      define-mem-param  = {
        define-mem-def-name = 's';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
__STR(s)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_bits.h';
      define-mem-desc-line = '88';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    };
  file-full-name  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_bits.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'riscv__encoding_8h';
  file-name = 'riscv_encoding.h';
    define = {
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga3f4df6dc4219593cb6e8bd13d636e844';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MSTATUS_UIE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00000001
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '37';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga29a63dca3cfcf13877a0c354dc081505';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MSTATUS_SIE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00000002
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '38';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gab549408c2d03c2e09fbfab2898683097';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MSTATUS_HIE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00000004
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '39';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga225cb34e3b991318fa87f090cfc3fc5f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MSTATUS_MIE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00000008
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '40';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1ga2299877e4ba3e162ca9dbabd6e0abef6';
        define-mem-ref-line = '597';
        define-mem-ref-name = '__disable_irq';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1gae84bf4e95944e61937f4ed2453e5ef23';
        define-mem-ref-line = '586';
        define-mem-ref-name = '__enable_irq';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga17711b78183c43687036c60962c278cb';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MSTATUS_UPIE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00000010
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '41';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gac7fef7988d408f1f4ebe9e3849d68bb2';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MSTATUS_SPIE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00000020
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '42';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaa0f7327c94aa1210a819f1d47d3e1700';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MSTATUS_HPIE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00000040
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '43';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga05fc511bb3d22b5e1abe8b9ccb30e7b3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MSTATUS_MPIE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00000080
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '44';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gad4b09023ff5bcbb14192e845c0532944';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MSTATUS_SPP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00000100
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '45';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga2acf460f4ceda869c88c00878cb44314';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MSTATUS_MPP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00001800
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '46';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gab7b9c10a700f7570d44c49f369b6fcce';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MSTATUS_FS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00006000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '47';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga768db67b06c8341a4da264abcb7f3cfe';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MSTATUS_XS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00018000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '48';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gafa733f6d7aadab5b3c0318d005745a98';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MSTATUS_MPRV';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00020000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '49';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga035dd52dddf83c12b5e2bf7c819e54e6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MSTATUS_PUM';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00040000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '50';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga8f4b37cdd71162f5b7adb583010443cb';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MSTATUS_MXR';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00080000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '51';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaa4bb5c6a2a139c0bfd77d4d5de00e8b6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MSTATUS_VM';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1F000000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '52';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gacca6e5c4f8af666a9b299af295f43348';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MSTATUS32_SD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x80000000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '53';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga9d7df82e40e8cf00821e97a0bb8db04e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MSTATUS64_SD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x8000000000000000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '54';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga95a34cc78abc173fe829cf5b0daba397';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MSTATUS_FS_INITIAL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00002000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '56';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaef9ff6d95030e46ca86237a320898ca3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MSTATUS_FS_CLEAN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00004000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '57';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaa704a5aece9149a30cefae0a0f77f034';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MSTATUS_FS_DIRTY';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00006000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '58';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga431c67f7f0e4b5dbdf2048310ad814e0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSTATUS_UIE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00000001
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '60';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga1c1f1da0ecfca5bc4fc4db3acadf1bc8';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSTATUS_SIE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00000002
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '61';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga796ad1a8b2314776082e72e13f4a30cf';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSTATUS_UPIE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00000010
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '62';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga3f9373ba6db2ce5e5c7ea28c2a5b3df9';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSTATUS_SPIE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00000020
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '63';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga4d0820d6a8b0c5b0fef6875a985d3370';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSTATUS_SPP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00000100
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '64';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaff201911cccf15e446c43ba67b0f1aa7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSTATUS_FS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00006000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '65';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga2abef254823774927e3bf6b029fbad9d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSTATUS_XS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00018000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '66';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaf95f0e6f382a6cd93ba925c62d64fe97';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSTATUS_PUM';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00040000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '67';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga5f2248b3f4a648ce63c0468a92132971';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSTATUS32_SD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x80000000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '68';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga517c9ab9421f99b99f5da4d549177f38';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SSTATUS64_SD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x8000000000000000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '69';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga838be4fb6cc0796dfdab1d492c992e91';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MCACHE_CTL_IE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00000001
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '71';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__cache_8h_1ga4a855b01222d0c42d413f168651616e5';
        define-mem-ref-line = '191';
        define-mem-ref-name = 'DisableICache';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__cache_8h_1ga76dfd7aff65a6a7fa91b53dbe44f9ce5';
        define-mem-ref-line = '176';
        define-mem-ref-name = 'EnableICache';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaabaff1feb67c2351eb71e1b1c97565bf';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MCACHE_CTL_DE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00010000
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '72';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__cache_8h_1gab30be00d8a0583adac5d786149db433f';
        define-mem-ref-line = '655';
        define-mem-ref-name = 'DisableDCache';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__cache_8h_1gaf90783ed69b3589cde6fe7dbabeb17c0';
        define-mem-ref-line = '640';
        define-mem-ref-name = 'EnableDCache';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga966a5f66e8f82245a23754d953272e26';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'DCSR_XDEBUGVER';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(3U<<30)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '74';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga70f0772b052aba7d37433a6abc524a05';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'DCSR_NDRESET';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<29)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '75';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gae0060c3218daba2cfe6b3a74eaa8004e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'DCSR_FULLRESET';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<28)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '76';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaee469b64e88766dd85645de42b9f2a5c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'DCSR_EBREAKM';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<15)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '77';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga113e941ee7b34c40b794e5b39638f79c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'DCSR_EBREAKH';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<14)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '78';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaa06fd020c5e6a4bc5e97715763eb85ff';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'DCSR_EBREAKS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<13)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '79';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gac6c4bbab3051160066b73951e0c58e84';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'DCSR_EBREAKU';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<12)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '80';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga7367ccfe98195ecdf126ea1f26f85b37';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'DCSR_STOPCYCLE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<10)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '81';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga8e011fbc15f29c25a9197e306eefc4bc';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'DCSR_STOPTIME';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<9)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '82';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga81c7d48193a62ce9c189bb0d2d104230';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'DCSR_CAUSE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(7<<6)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '83';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gabf604fa800bf4ef6aa8e58e662c34317';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'DCSR_DEBUGINT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<5)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '84';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga1a6de95ef85a1337a6c9bbfb8588d137';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'DCSR_HALT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<3)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '85';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga5136c4da715d2aa79f23dab172db4fea';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'DCSR_STEP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<2)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '86';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga110f30f7c9d25c057e2dfe1477e5b742';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'DCSR_PRV';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(3<<0)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '87';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga4cf6a474d1cc251a206f9ab512794581';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'DCSR_CAUSE_NONE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '89';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga0ca8d97eb41a31351ea471e87a6cb383';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'DCSR_CAUSE_SWBP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '90';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga73fbd946de0ee961a37aef9cf0113c10';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'DCSR_CAUSE_HWBP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '91';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga28fc94b1080dd0151ad942fd38ecf04d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'DCSR_CAUSE_DEBUGINT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
3
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '92';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga47955acab2f0d71bde8d2dbacebc1ce1';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'DCSR_CAUSE_STEP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
4
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '93';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gabbe672c98c7614d6346e83e80ee0df18';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'DCSR_CAUSE_HALT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
5
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '94';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga4be6cc72618e21a3011b626aff83eae8';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCONTROL_TYPE';
      define-mem-param  = {
        define-mem-def-name = 'xlen';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0xfULL<<((xlen)-4))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '96';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gab0c4b6681fe0b3fba6d512a084e318b2';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCONTROL_DMODE';
      define-mem-param  = {
        define-mem-def-name = 'xlen';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1ULL<<((xlen)-5))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '97';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga9d2d58a19b42feb156d060c4860773e3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCONTROL_MASKMAX';
      define-mem-param  = {
        define-mem-def-name = 'xlen';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x3fULL<<((xlen)-11))
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '98';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gae3271344364caa6fdeedf62cad06ec32';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCONTROL_SELECT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<19)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '100';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga05f32197da7d4f4da6cd9ffd706f0181';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCONTROL_TIMING';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<18)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '101';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaa00ebcbad8ef4fd0b082ae955c70159a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCONTROL_ACTION';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x3f<<12)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '102';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga1ab44c2e81a1a31e766ec682cad96ea9';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCONTROL_CHAIN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<11)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '103';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga29db79af22f38eb123f1bf1c11c4c92a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCONTROL_MATCH';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0xf<<7)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '104';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga0b9146969080ec187962cbe3ee3f5aba';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCONTROL_M';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<6)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '105';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga02a3db7fdab9947d0c8239c011d1274e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCONTROL_H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<5)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '106';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gac9c0ad84304e51a07e42a9a70c210c95';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCONTROL_S';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<4)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '107';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga13c4a265729f4de2d9e7319e5aa29d8d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCONTROL_U';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<3)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '108';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga16ef1fd919fc1d8cce3e064aaf606a06';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCONTROL_EXECUTE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<2)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '109';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaeddbbc18f165aa8764e3b201e57958f7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCONTROL_STORE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<1)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '110';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga77472c8d179d5bf165e420aec140d1ad';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCONTROL_LOAD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<0)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '111';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga90057d3240f345a4c152667f336bb50f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCONTROL_TYPE_NONE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '113';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga510525cf4b02311be0f97070a0867e8e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCONTROL_TYPE_MATCH';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '114';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga48f74b38a5f172d576549d6ed3c2e9b0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCONTROL_ACTION_DEBUG_EXCEPTION';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '116';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga283b3199ea4bb5f6c27ccbe880d426df';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCONTROL_ACTION_DEBUG_MODE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '117';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga40674423a8d52e03f26a535f6833ebed';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCONTROL_ACTION_TRACE_START';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '118';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gad3f67c74ef8b33dbfcca678a3c381e62';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCONTROL_ACTION_TRACE_STOP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
3
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '119';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga227b2447936cd8f134d9ca084a233fe2';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCONTROL_ACTION_TRACE_EMIT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
4
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '120';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga9b67fcfd9cce0df82d2862dbf4e6e1e6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCONTROL_MATCH_EQUAL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '122';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga529552f378149e8b6a1d940f1279367b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCONTROL_MATCH_NAPOT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '123';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga161f7167c606c9e867af1bcba0cb8eab';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCONTROL_MATCH_GE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '124';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gafd67f3e374a7f912ec48d02a40730a1d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCONTROL_MATCH_LT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
3
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '125';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga9a5c571a197a84c425a54bfeeab76503';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCONTROL_MATCH_MASK_LOW';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
4
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '126';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gad53872401bc83df4c67017323ff47c29';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCONTROL_MATCH_MASK_HIGH';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
5
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '127';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga0bda37d26a2a610c14486b0cd367becc';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MIP_SSIP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1 << IRQ_S_SOFT)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '129';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gab8226593c790568a432eeb8ca7bb4270';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MIP_HSIP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1 << IRQ_H_SOFT)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '130';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga09c2dda94121d966560ac22fe6becdb3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MIP_MSIP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1 << IRQ_M_SOFT)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '131';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga40a54377f1fdb317c3f7397043874cae';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MIP_STIP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1 << IRQ_S_TIMER)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '132';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga15a22cfcd6f41aea04b9943a71d0a2ff';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MIP_HTIP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1 << IRQ_H_TIMER)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '133';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga51c044e20264a9e2a875b17482e8ff11';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MIP_MTIP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1 << IRQ_M_TIMER)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '134';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga3fdf03c28e7d1baba8fa6bb11eae8561';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MIP_SEIP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1 << IRQ_S_EXT)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '135';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga1c1ae7b718753753a5c99292450df837';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MIP_HEIP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1 << IRQ_H_EXT)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '136';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaa0b390526aa02e969ae64235b983069a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MIP_MEIP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1 << IRQ_M_EXT)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '137';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga581a15bf4b80b485ca87f80d3bcfe110';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MIE_SSIE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
MIP_SSIP
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '139';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga1663572390edca9da42c5cb7bfb48162';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MIE_HSIE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
MIP_HSIP
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '140';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gacdb82cffb46911d1a236dcf651b24b05';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MIE_MSIE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
MIP_MSIP
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '141';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gac5a9c8dcdb454fa5593b61b192b06c1d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MIE_STIE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
MIP_STIP
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '142';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaf09da2388826027bf56d8b0bd4729651';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MIE_HTIE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
MIP_HTIP
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '143';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga88f0c7a5a13f0570ecbaa43b912b0fe4';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MIE_MTIE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
MIP_MTIP
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '144';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga25eb65aea38f4aa1feeef2bf854cea74';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MIE_SEIE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
MIP_SEIP
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '145';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga92ca7b4341e5a046f312f5f0db077f44';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MIE_HEIE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
MIP_HEIP
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '146';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gab4e2e4b72ec1e13b315dcdc910f5595b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MIE_MEIE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
MIP_MEIP
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '147';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaf130720fd14133d4708424b7b858215e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'UCODE_OV';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x1)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '151';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga20aa60b214851659e139accdc108f131';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'WFE_WFE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x1)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '155';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1gaca38170721a2eefd87017ed350162c4c';
        define-mem-ref-line = '730';
        define-mem-ref-name = '__WFE';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1ga8bc0687a967ccba8e8adbe7abe5fe2f7';
        define-mem-ref-line = '717';
        define-mem-ref-name = '__WFI';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gade924168088e3928b41d450f8e3458f3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'TXEVT_TXEVT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x1)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '156';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga1248cd9846d593036d74cfd55a582632';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SLEEPVALUE_SLEEPVALUE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x1)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '157';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gae8693a1f795a0f752391c609ce011cbf';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCOUNTINHIBIT_IR';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<2)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '159';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1ga16f715797bba0ac2ed2e1820c63443cd';
        define-mem-ref-line = '846';
        define-mem-ref-name = '__disable_all_counter';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1gae1cb8d99e36d784e9071fec80e1f02fe';
        define-mem-ref-line = '826';
        define-mem-ref-name = '__disable_minstret_counter';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1ga1b25cc01665431cd509fd3c1be93a811';
        define-mem-ref-line = '836';
        define-mem-ref-name = '__enable_all_counter';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1gae7bb45974eee5b66ea6332ba0ccf23d5';
        define-mem-ref-line = '816';
        define-mem-ref-name = '__enable_minstret_counter';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga675e4d52a85bafc0a1663cf2f431583a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCOUNTINHIBIT_CY';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<0)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '160';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1ga16f715797bba0ac2ed2e1820c63443cd';
        define-mem-ref-line = '846';
        define-mem-ref-name = '__disable_all_counter';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1gaf9ada8a615338120fa38a6e193fd7517';
        define-mem-ref-line = '806';
        define-mem-ref-name = '__disable_mcycle_counter';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1ga1b25cc01665431cd509fd3c1be93a811';
        define-mem-ref-line = '836';
        define-mem-ref-name = '__enable_all_counter';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1gadba90c4a57befeb5e4f739295af55e73';
        define-mem-ref-line = '796';
        define-mem-ref-name = '__enable_mcycle_counter';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga58fdda659daafb923a409a1bbe0c6655';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MILM_CTL_ILM_BPA';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(((1ULL<<((__riscv_xlen)-10))-1)<<10)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '162';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga2abda317bca9ac8bf35368865830cd68';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MILM_CTL_ILM_RWECC';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<3)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '163';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga27d7dbd69da032a1abe3471fbb0345c3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MILM_CTL_ILM_ECC_EXCP_EN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<2)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '164';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga00f2ec5471765545572aef07793a676c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MILM_CTL_ILM_ECC_EN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<1)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '165';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga5c75afd05ea4349e7dc851589a2b4c60';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MILM_CTL_ILM_EN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<0)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '166';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga66efca6fe008b17b3e58f55cfc3454ba';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MDLM_CTL_DLM_BPA';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(((1ULL<<((__riscv_xlen)-10))-1)<<10)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '168';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gafcceffc59d674aedf08abbe9140f2f96';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MDLM_CTL_DLM_RWECC';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<3)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '169';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gade0e18fa462c3271b27acb36eae59d80';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MDLM_CTL_DLM_ECC_EXCP_EN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<2)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '170';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaef060f008524963c4e5556b378ab77f4';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MDLM_CTL_DLM_ECC_EN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<1)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '171';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga6cb4731642366eac4dfbba732abdf45c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MDLM_CTL_DLM_EN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<0)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '172';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gab1ea496c56aa682d757ee18f207898b2';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MSUBM_PTYP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x3<<8)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '174';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaeaa1f8b914ede4c086b0444b3a66c82d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MSUBM_TYP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x3<<6)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '175';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaa453deb1f8a1f3f3a5838ad4965ca766';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MDCAUSE_MDCAUSE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x3)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '177';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga247a92f76022992a457ec81a67eaed57';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MMISC_CTL_NMI_CAUSE_FFF';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<9)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '179';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaa6533a61bdf28dab6d97eaf8ac47e15a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MMISC_CTL_MISALIGN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<6)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '180';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gac62547380ae39bae590e77751554f8cd';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MMISC_CTL_BPU';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<3)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '181';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga1915bfad24b1100506412bd0f3c705e2';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCACHE_CTL_IC_EN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<0)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '183';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga1f23cac132dc4d543a0d33a336a7d858';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCACHE_CTL_IC_SCPD_MOD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<1)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '184';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gac212acd84f08a26197bc439bc58d5e58';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCACHE_CTL_IC_ECC_EN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<2)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '185';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga791603ffdcc47fbb787ac4c6ecd55f30';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCACHE_CTL_IC_ECC_EXCP_EN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<3)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '186';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga2752ea69ebad6ee1f8c806955efc3129';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCACHE_CTL_IC_RWTECC';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<4)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '187';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga9a6cc1c06bc9eae80ac1f5a0fd0e7584';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCACHE_CTL_IC_RWDECC';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<5)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '188';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gae82cbfc628bf4087720024122a9c9115';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCACHE_CTL_DC_EN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<16)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '189';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga24f8fec1fe980ff09a748634ded5f3ec';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCACHE_CTL_DC_ECC_EN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<17)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '190';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaa812767233bc30aa4f5e215a00e10a1a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCACHE_CTL_DC_ECC_EXCP_EN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<18)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '191';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gae416277ff67aa4f57eab23e249fe626a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCACHE_CTL_DC_RWTECC';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<19)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '192';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga5232185f012cc6338fbfe0a77dd39a34';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCACHE_CTL_DC_RWDECC';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<20)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '193';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga6065953ce222f53cb94ee8d6c336e26d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MTVT2_MTVT2EN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<0)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '195';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga2d61c1c8247bc82e209a8bbbaba1e44c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MTVT2_COMMON_CODE_ENTRY';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(((1ULL<<((__riscv_xlen)-2))-1)<<2)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '196';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga8b189b0faab8100190d9c0cb9457ab6b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCFG_INFO_TEE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<0)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '198';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga378777b74ffd0f62087c10d7cc83dba9';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCFG_INFO_ECC';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<1)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '199';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga8e6bfafb27d2142ee0035f76b887acca';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCFG_INFO_CLIC';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<2)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '200';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga29b6c2971cce93a78e9605e7e5276599';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCFG_INFO_PLIC';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<3)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '201';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga7987e805f4afa13b0d4f62a250cb2f34';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCFG_INFO_FIO';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<4)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '202';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga486d29134dd516cf80273bc1fff243c9';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCFG_INFO_PPI';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<5)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '203';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaf640e24726866e9b7f06360b93bf5800';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCFG_INFO_NICE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<6)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '204';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gabcbe04e4da52ab5fbbbbb10c6629cf32';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCFG_INFO_ILM';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<7)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '205';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga60e344b3401de3421dde506783b0f5e8';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCFG_INFO_DLM';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<8)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '206';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gade204165b105fd3fdcc50965cb23b83d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCFG_INFO_ICACHE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<9)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '207';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga95afd8455685713863d0be88485f5b40';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MCFG_INFO_DCACHE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<10)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '208';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga02f016ef1dd10d24c36ae0c691d89448';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MICFG_IC_SET';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0xF<<0)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '210';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga0d6540f439ca5b5c5961f987bfbe07c5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MICFG_IC_WAY';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x7<<4)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '211';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaea8b0d29e2f6bf87803471e8621b032f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MICFG_IC_LSIZE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x7<<7)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '212';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga434dea16ed0b3a6e0048c7aaa6946c58';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MICFG_IC_ECC';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x1<<10)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '213';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga2cb78b6241c78dc469250e707df3a572';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MICFG_ILM_SIZE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x1F<<16)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '214';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaaf286fc1a227c919d21f1d6e0e8cb3b9';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MICFG_ILM_XONLY';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x1<<21)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '215';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga0f19be02a99073685c5026a2fc5e907a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MICFG_ILM_ECC';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x1<<22)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '216';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gabbd7c817405f28c6e06e22e4fbda509b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MDCFG_DC_SET';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0xF<<0)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '218';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga6218dafc338a7ed0ad8bce7db11cbe69';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MDCFG_DC_WAY';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x7<<4)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '219';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gae0e3d905405aa26daa960ab7c9037093';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MDCFG_DC_LSIZE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x7<<7)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '220';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga716b71a4271e56713d384a5e4655244d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MDCFG_DC_ECC';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x1<<10)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '221';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gab515cedfce6a4e42b1419141f392e93f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MDCFG_DLM_SIZE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x1F<<16)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '222';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga5977c9cfabcbe276dc7b124f909e138e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MDCFG_DLM_ECC';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x1<<21)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '223';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga8e5e133ea59b83012cf28984321332f8';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MPPICFG_INFO_PPI_SIZE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x1F<<1)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '225';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaf10b969b50980388e673c8a398b74386';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MPPICFG_INFO_PPI_BPA';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(((1ULL<<((__riscv_xlen)-10))-1)<<10)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '226';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gab04aa3cb0d2fa864efe454ecffed5a93';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MFIOCFG_INFO_FIO_SIZE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x1F<<1)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '228';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaa5cb4135c597cdea3578ee7cd10953b2';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MFIOCFG_INFO_FIO_BPA';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(((1ULL<<((__riscv_xlen)-10))-1)<<10)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '229';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaa19b113c0348a4971044734f19db61bf';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MECC_LOCK_ECC_LOCK';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x1)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '231';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gab602b226ad42a3c2f180866eea000dc5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MECC_CODE_CODE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x1FF)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '233';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga758a640d86f2ca5fca2ef65ab9458305';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MECC_CODE_RAMID';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x1F<<16)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '234';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gab5ef9c56bb6ea7dfec131200d80f682a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MECC_CODE_SRAMID';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x1F<<24)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '235';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaf601ce7378adc2d28a3c1eece31c4948';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CCM_SUEN_SUEN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x1<<0)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '237';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gae3c1b6e3fb157b511fab5ffa16ada4fe';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CCM_DATA_DATA';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x7<<0)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '238';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaa5833eecca8b1a06a1fc89247919c6f7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CCM_COMMAND_COMMAND';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(0x1F<<0)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '239';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gacdfe2a4376d4c9873b865b878c6d5d2e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SIP_SSIP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
MIP_SSIP
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '241';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaa32b89e7176c6d37caa3ad78a600f4a1';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SIP_STIP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
MIP_STIP
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '242';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga0584431e22db30065abffb94459477c4';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PRV_U';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '244';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga3131c9addf7b5ecc1da9f7b0eff9815d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PRV_S';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '245';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaf11d40d5f172d3095bf39a23ba714552';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PRV_H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '246';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gafee966c8a48cb4075680eb0cc08ab32e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PRV_M';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
3
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '247';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga136d72c1560058c881e418d809313c4d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'VM_MBARE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '249';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaa14ac20603beff5cf88970ba9df3336d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'VM_MBB';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '250';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga393d622a8cfcc7d8ea5343fdfcd32d07';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'VM_MBBID';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '251';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga7ea29e1df0e38548df1183ec9ea9da44';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'VM_SV32';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
8
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '252';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gad246f74e1796b45a7f1675ed9aeb9ab1';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'VM_SV39';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
9
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '253';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga0b6c1ec7c117e3a245e09c635af9994b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'VM_SV48';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
10
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '254';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga1f426d6231a15fe1801b3206c712cf76';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'IRQ_S_SOFT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '256';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gac3fe3deef5576f320abc55464c9fb980';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'IRQ_H_SOFT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '257';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga02e2db32b33eb8cf23622150ac372200';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'IRQ_M_SOFT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
3
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '258';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gac7acfa6b0f632b9cd762a0e0abd1df08';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'IRQ_S_TIMER';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
5
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '259';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga9ea3c09e4c1dde4b1c9d1be6d7d82528';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'IRQ_H_TIMER';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
6
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '260';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaa5b87ef0a6024ad69009faff8fd6a9d5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'IRQ_M_TIMER';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
7
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '261';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaedc582eeff2cc10dcb000c5f08dda3c3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'IRQ_S_EXT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
9
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '262';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaa09fee2ca390c169c63b0c52475e38f7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'IRQ_H_EXT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
10
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '263';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga43fba639eb8d7ee37648cc0af12cf59b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'IRQ_M_EXT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
11
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '264';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga26e341b99075274d38face5be46579a6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'IRQ_COP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
12
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '265';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gab12a3e27140376a52c9f9999404a73f6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'IRQ_HOST';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
13
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '266';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga9c07e76cdec94f3adfc6acb1ac8a6e13';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FRM_RNDMODE_RNE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '271';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
FPU Round to Nearest, ties to Even.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaf8f4ab4175c2a4a8904a974c6ff64c8b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FRM_RNDMODE_RTZ';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '273';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
FPU Round Towards Zero.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga39034ebb32dd8119c8eba506caf5de5e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FRM_RNDMODE_RDN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '275';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
FPU Round Down (towards -inf)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaaa602e93ffb06696ae854de4ee239a51';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FRM_RNDMODE_RUP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '277';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
FPU Round Up (towards +inf)
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gad7e45e9570cf32e228c3268574925998';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FRM_RNDMODE_RMM';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x4
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '279';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
FPU Round to nearest, ties to Max Magnitude.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga4078cf4c03a56889c27f715fc0e61261';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FRM_RNDMODE_DYN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '283';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
In instruction's rm, selects dynamic rounding mode.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
In Rounding Mode register, Invalid  
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaca388fb5e681aec3e4dc0c3a22faa120';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FFLAGS_AE_NX';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<0)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '287';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
FPU Inexact.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga226c5ea510d1ccbef712b8cb5413d99c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FFLAGS_AE_UF';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<1)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '289';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
FPU Underflow.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaaf36cdc10ddced9c2316bd1f96a9b0c5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FFLAGS_AE_OF';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<2)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '291';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
FPU Overflow.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga3ee932ee487ef0a56d1a52c3941dd154';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FFLAGS_AE_DZ';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<3)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '293';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
FPU Divide by Zero.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga5aeba9c92e496d2705492d5bc6024873';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FFLAGS_AE_NV';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(1<<4)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '295';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
FPU Invalid Operation.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gab630278e8a24dd620cb6a512b51bc45f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'FREG';
      define-mem-param  = {
        define-mem-def-name = 'idx';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
f##idx
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '298';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Floating Point Register f0-f31, eg.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_
 f0 -> FREG(0)  
_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga383d3ee4d5727ef3fb4437d954be3b21';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PMP_R';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x01
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '302';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga5f34c98b252436e69ad95e766abf8482';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PMP_W';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x02
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '303';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaabfce7f7dde3e93eb596074b4d107bec';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PMP_X';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x04
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '304';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga47df3f6548f6106ad54d3def500db71f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PMP_A';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x18
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '305';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga7a8a129eac9815d251e7cc63e7358161';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PMP_A_TOR';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x08
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '306';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaa039949a5b36847e3d96be8730d41b97';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PMP_A_NA4';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x10
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '307';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga7941f68c06a33245450a89cd3153c856';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PMP_A_NAPOT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x18
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '308';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga68f26499e9a07ee23940bcd1ff49e51d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PMP_L';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x80
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '309';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaf5a33910ca1e7603b2c483a2966e2d53';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PMP_SHIFT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '311';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gafa6069fc693f6fa6353611c8211c155a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PMP_COUNT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
16
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '312';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga9a3c738182007bee471e44aae04c386f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PTE_V';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x001
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '315';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga3a188134a2cbd69e161521fb169ecd08';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PTE_R';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x002
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '316';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga058fcbcc3e1eab2c09c68b3e5221c545';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PTE_W';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x004
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '317';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gae20c834a93867eedc88007621c74ad55';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PTE_X';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x008
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '318';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gadced9836a1dc98d72849361e6ab03cda';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PTE_U';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x010
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '319';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga50cfccabb1927e67c7a0e3b90e8b0635';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PTE_G';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x020
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '320';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaf2d908a8af1d94a6aaf803ab40fe0951';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PTE_A';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x040
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '321';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gae80b38f12787d02087c4575c48c36d88';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PTE_D';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x080
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '322';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga8e71d0b15291edc78a3240cc667f9ad8';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PTE_SOFT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x300
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '323';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga5b5b713a1ec901153c786686d5962574';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PTE_PPN_SHIFT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
10
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '325';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaa0a707cf44e82dc9efa94304582586a6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'PTE_TABLE';
      define-mem-param  = {
        define-mem-def-name = 'PTE';
      }; /*        define-mem-def--param */
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(((PTE) & (PTE_V | PTE_R | PTE_W | PTE_X)) == PTE_V)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '327';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gac4b67373a4569a927b19779a30c619ba';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_USTATUS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '356';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaf25caf1486cedbc47afdd5afd81be307';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_FFLAGS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '357';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaab22a5666b6fd37cde09583f0ca66133';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_FRM';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '358';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gabba4da62b155cd22e3bd1a8ec402cf78';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_FCSR';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '359';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga9e9434c8a5b1f157f1a7b800c26321bb';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_CYCLE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc00
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '360';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga4bbdf33e8b20f4cb020869e7394e388a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_TIME';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc01
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '361';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1ga5f54b26adf57d254f6a589dab36bd28a';
        define-mem-ref-line = '663';
        define-mem-ref-name = '__get_rv_time';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga053f87dc2e911eb74a904232a0db20f5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_INSTRET';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc02
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '362';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gabc9ec186541e531bfb831892b656c48c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER3';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc03
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '363';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga0507aee7c7c34cc39be1dc2941537b8c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER4';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc04
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '364';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga74b3354177b841b8d40deab938f48cea';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER5';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc05
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '365';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga63284922fe78d5eb60d66785d6013ee0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER6';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc06
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '366';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gad9388484f19dc49696c304fb854f67e1';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER7';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc07
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '367';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaef2ced79d58eb46eb505bf1ebb45e78e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER8';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc08
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '368';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaaf606f32118480e5800c326dae3d072d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER9';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc09
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '369';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga45c1a1c5872f41cf6b769cac61c594e8';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER10';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc0a
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '370';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gac9c87c7b00208fd2cb1accb2bb06576b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER11';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc0b
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '371';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga1e4d4f948ba23d5e846ef9e33f548dc6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER12';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc0c
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '372';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gad60ed530218b142c78f9392ed3b5a4b3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER13';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc0d
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '373';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga461b98ee6107021836e54d298f73a61a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER14';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc0e
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '374';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga2ab1318ae5514940d4bc8e7bee1e5ce8';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER15';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc0f
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '375';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gacd75f71e43371488dcb86272ad86ccd9';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER16';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc10
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '376';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gabc1c35f08df6a93f999405649e8c8430';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER17';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc11
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '377';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gab9a663a327d52d10f6290b942490d4e9';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER18';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc12
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '378';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gafee1bc538c2d2f77151d9f44c842246a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER19';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc13
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '379';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga7cb9f35b141814b49a59211ef7277172';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER20';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc14
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '380';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga76e6ef2939cc2d66d7d2a6069a2910b1';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER21';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc15
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '381';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga9c2c0516473c50269bf9f8a5e0ba95a4';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER22';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc16
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '382';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gad3178937990f64a8da188ce408d96504';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER23';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc17
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '383';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga07ec0874b81903bed3a04ceaa90864bd';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER24';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc18
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '384';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaef51e7ffef082a9a4324ec8324af024f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER25';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc19
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '385';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gada87ee7cd70d82c940209049f88c9875';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER26';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc1a
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '386';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gad1c6f8cf4d163939eb9483d8ce10c88e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER27';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc1b
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '387';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga54b1bbdd4e89e1f5d2a6761dee9448fc';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER28';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc1c
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '388';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga07000fde1ab777a36de658ff34b5545e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER29';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc1d
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '389';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga170df914640e20d349898a6bfe4adaf6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER30';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc1e
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '390';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaac7b39ccaabe77e3f185aeb31424a13f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER31';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc1f
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '391';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga651e65251cc54d4a553702e4cf061ca7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SSTATUS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x100
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '392';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gafe9299d8a7d0f21e963ab621a6a5a5cf';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SIE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x104
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '393';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gab1718f56f1c135bcd02a707b7172301b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_STVEC';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x105
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '394';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga545aa444d12109ef8e961ba29eb3ea54';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SSCRATCH';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x140
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '395';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga3981cba40ee737a2f7cf4228b2bdbb67';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SEPC';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x141
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '396';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga49e424a4449b3192d35ca1133e8f5dc2';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SCAUSE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x142
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '397';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gac46f5b5ff617c14b42ed38307028217c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SBADADDR';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x143
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '398';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gac79e54d601a25a8eed4e0c985fd30315';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SIP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x144
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '399';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaad33afbadb5582d0603771fda6e04e6b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SPTBR';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x180
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '400';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga7086e667c65affe87d2c32115193d736';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MSTATUS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x300
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '401';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1ga2299877e4ba3e162ca9dbabd6e0abef6';
        define-mem-ref-line = '597';
        define-mem-ref-name = '__disable_irq';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1gae84bf4e95944e61937f4ed2453e5ef23';
        define-mem-ref-line = '586';
        define-mem-ref-name = '__enable_irq';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaaa62902f21282250fd975372f9e5e24e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MISA';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x301
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '402';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gab3139a6af26d85bf8d30330397d4a8c0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MEDELEG';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x302
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '403';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gae447b7b078204874a2606d32097e017a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MIDELEG';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x303
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '404';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gae75a38ea833c5507d942fad1c98132e1';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MIE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x304
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '405';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga22f5cd17199a966b4b840dd56d151216';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MTVEC';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x305
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '406';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1ga05bee6a5e41963ef1845c8a7e5a09c89';
        define-mem-ref-line = '782';
        define-mem-ref-name = '__get_exc_entry';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1ga2fe20dcdecc453c6709448944b1f5350';
        define-mem-ref-line = '821';
        define-mem-ref-name = '__get_nonvec_entry';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1gaec014abd3940e642f652b97b70d7ac8e';
        define-mem-ref-line = '764';
        define-mem-ref-name = '__set_exc_entry';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1gadbe0f14f32c5989304fd05faf0cff648';
        define-mem-ref-line = '799';
        define-mem-ref-name = '__set_nonvec_entry';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga0c406c25c8c80d7198f7bf457f38e21d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MCOUNTEREN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x306
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '407';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga26cdef6612f10a48ccfc34739ce70237';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MSCRATCH';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x340
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '408';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga53d62065ed74fd3583cca895e6157c5f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MEPC';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x341
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '409';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga2f9201d1d05c9fa66480065eda0b9e7f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MCAUSE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x342
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '410';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga0f1cc929954a8482a3e878943731a5c1';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MBADADDR';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x343
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '411';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga7e69e2d5c3618dc9274a39e57d54de8d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MTVAL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x343
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '412';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga38c553936313dfc3d00ff68083f7c7fa';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MIP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x344
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '413';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga83987d4e9998a1cca46cd97cf8d809ed';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPCFG0';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3a0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '414';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__pmp_8h_1gadca32ce47cd692eb2e7fe25abf36c103';
        define-mem-ref-line = '165';
        define-mem-ref-name = '__get_PMPCFGx';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__pmp_8h_1gadf37b13460f0c2c0d7d2641f31ebbf72';
        define-mem-ref-line = '63';
        define-mem-ref-name = '__get_PMPxCFG';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__pmp_8h_1gaf509ec494237545e28812695aaaa30c8';
        define-mem-ref-line = '188';
        define-mem-ref-name = '__set_PMPCFGx';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__pmp_8h_1gae1905cc6904d78db702c1a0b72b326f5';
        define-mem-ref-line = '105';
        define-mem-ref-name = '__set_PMPxCFG';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga1a53dfb8b663fc41e8fd7c7b84471eec';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPCFG1';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3a1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '415';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__pmp_8h_1gadca32ce47cd692eb2e7fe25abf36c103';
        define-mem-ref-line = '165';
        define-mem-ref-name = '__get_PMPCFGx';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__pmp_8h_1gadf37b13460f0c2c0d7d2641f31ebbf72';
        define-mem-ref-line = '63';
        define-mem-ref-name = '__get_PMPxCFG';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__pmp_8h_1gaf509ec494237545e28812695aaaa30c8';
        define-mem-ref-line = '188';
        define-mem-ref-name = '__set_PMPCFGx';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__pmp_8h_1gae1905cc6904d78db702c1a0b72b326f5';
        define-mem-ref-line = '105';
        define-mem-ref-name = '__set_PMPxCFG';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga3103e79fb7dc1bc929b55b7daed624cb';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPCFG2';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3a2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '416';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__pmp_8h_1gadca32ce47cd692eb2e7fe25abf36c103';
        define-mem-ref-line = '165';
        define-mem-ref-name = '__get_PMPCFGx';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__pmp_8h_1gadf37b13460f0c2c0d7d2641f31ebbf72';
        define-mem-ref-line = '63';
        define-mem-ref-name = '__get_PMPxCFG';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__pmp_8h_1gaf509ec494237545e28812695aaaa30c8';
        define-mem-ref-line = '188';
        define-mem-ref-name = '__set_PMPCFGx';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__pmp_8h_1gae1905cc6904d78db702c1a0b72b326f5';
        define-mem-ref-line = '105';
        define-mem-ref-name = '__set_PMPxCFG';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga42e3b880f10fb42eb718446a2f3dfa5a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPCFG3';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3a3
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '417';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__pmp_8h_1gadca32ce47cd692eb2e7fe25abf36c103';
        define-mem-ref-line = '165';
        define-mem-ref-name = '__get_PMPCFGx';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__pmp_8h_1gadf37b13460f0c2c0d7d2641f31ebbf72';
        define-mem-ref-line = '63';
        define-mem-ref-name = '__get_PMPxCFG';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__pmp_8h_1gaf509ec494237545e28812695aaaa30c8';
        define-mem-ref-line = '188';
        define-mem-ref-name = '__set_PMPCFGx';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__pmp_8h_1gae1905cc6904d78db702c1a0b72b326f5';
        define-mem-ref-line = '105';
        define-mem-ref-name = '__set_PMPxCFG';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gacecf7350c29d4d7b3eff9334a79eb151';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR0';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3b0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '418';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__pmp_8h_1ga0fc1168753b68d4105d6fc96b038b1fd';
        define-mem-ref-line = '205';
        define-mem-ref-name = '__get_PMPADDRx';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__pmp_8h_1ga6341b28b3c2fe7c6e697a1adee7d4dd2';
        define-mem-ref-line = '234';
        define-mem-ref-name = '__set_PMPADDRx';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga4b66ab86131f3f9abb77653d946fa801';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR1';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3b1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '419';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__pmp_8h_1ga0fc1168753b68d4105d6fc96b038b1fd';
        define-mem-ref-line = '205';
        define-mem-ref-name = '__get_PMPADDRx';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__pmp_8h_1ga6341b28b3c2fe7c6e697a1adee7d4dd2';
        define-mem-ref-line = '234';
        define-mem-ref-name = '__set_PMPADDRx';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga793ce1bc309da27c6f3406e63c990ca3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR2';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3b2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '420';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__pmp_8h_1ga0fc1168753b68d4105d6fc96b038b1fd';
        define-mem-ref-line = '205';
        define-mem-ref-name = '__get_PMPADDRx';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__pmp_8h_1ga6341b28b3c2fe7c6e697a1adee7d4dd2';
        define-mem-ref-line = '234';
        define-mem-ref-name = '__set_PMPADDRx';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga429c14fe78dcfb064f8a2b40bcd0c6d5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR3';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3b3
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '421';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__pmp_8h_1ga0fc1168753b68d4105d6fc96b038b1fd';
        define-mem-ref-line = '205';
        define-mem-ref-name = '__get_PMPADDRx';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__pmp_8h_1ga6341b28b3c2fe7c6e697a1adee7d4dd2';
        define-mem-ref-line = '234';
        define-mem-ref-name = '__set_PMPADDRx';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga296a8dd56db1dbc9ce8d23e04a125f1b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR4';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3b4
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '422';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__pmp_8h_1ga0fc1168753b68d4105d6fc96b038b1fd';
        define-mem-ref-line = '205';
        define-mem-ref-name = '__get_PMPADDRx';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__pmp_8h_1ga6341b28b3c2fe7c6e697a1adee7d4dd2';
        define-mem-ref-line = '234';
        define-mem-ref-name = '__set_PMPADDRx';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga0fdee71fe744c3a76a4fe4566b6d30f7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR5';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3b5
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '423';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__pmp_8h_1ga0fc1168753b68d4105d6fc96b038b1fd';
        define-mem-ref-line = '205';
        define-mem-ref-name = '__get_PMPADDRx';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__pmp_8h_1ga6341b28b3c2fe7c6e697a1adee7d4dd2';
        define-mem-ref-line = '234';
        define-mem-ref-name = '__set_PMPADDRx';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga380f61e6b334d2f76d3f995c932032ff';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR6';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3b6
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '424';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__pmp_8h_1ga0fc1168753b68d4105d6fc96b038b1fd';
        define-mem-ref-line = '205';
        define-mem-ref-name = '__get_PMPADDRx';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__pmp_8h_1ga6341b28b3c2fe7c6e697a1adee7d4dd2';
        define-mem-ref-line = '234';
        define-mem-ref-name = '__set_PMPADDRx';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga3c32a0bfe8f5558cf3680e865853bd7d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR7';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3b7
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '425';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__pmp_8h_1ga0fc1168753b68d4105d6fc96b038b1fd';
        define-mem-ref-line = '205';
        define-mem-ref-name = '__get_PMPADDRx';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__pmp_8h_1ga6341b28b3c2fe7c6e697a1adee7d4dd2';
        define-mem-ref-line = '234';
        define-mem-ref-name = '__set_PMPADDRx';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gad5ca2904320156ece2d409a6203833dd';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR8';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3b8
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '426';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__pmp_8h_1ga0fc1168753b68d4105d6fc96b038b1fd';
        define-mem-ref-line = '205';
        define-mem-ref-name = '__get_PMPADDRx';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__pmp_8h_1ga6341b28b3c2fe7c6e697a1adee7d4dd2';
        define-mem-ref-line = '234';
        define-mem-ref-name = '__set_PMPADDRx';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga37480409a10aee34f38f372686d25c63';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR9';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3b9
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '427';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__pmp_8h_1ga0fc1168753b68d4105d6fc96b038b1fd';
        define-mem-ref-line = '205';
        define-mem-ref-name = '__get_PMPADDRx';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__pmp_8h_1ga6341b28b3c2fe7c6e697a1adee7d4dd2';
        define-mem-ref-line = '234';
        define-mem-ref-name = '__set_PMPADDRx';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gae23ceb6fb8cb498198b5dd89301527d6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR10';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3ba
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '428';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__pmp_8h_1ga0fc1168753b68d4105d6fc96b038b1fd';
        define-mem-ref-line = '205';
        define-mem-ref-name = '__get_PMPADDRx';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__pmp_8h_1ga6341b28b3c2fe7c6e697a1adee7d4dd2';
        define-mem-ref-line = '234';
        define-mem-ref-name = '__set_PMPADDRx';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga05cef37120eb5d71e1bb4a2eab968c1f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR11';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3bb
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '429';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__pmp_8h_1ga0fc1168753b68d4105d6fc96b038b1fd';
        define-mem-ref-line = '205';
        define-mem-ref-name = '__get_PMPADDRx';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__pmp_8h_1ga6341b28b3c2fe7c6e697a1adee7d4dd2';
        define-mem-ref-line = '234';
        define-mem-ref-name = '__set_PMPADDRx';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga4f95495aea52214e593217b25a2683c9';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR12';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3bc
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '430';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__pmp_8h_1ga0fc1168753b68d4105d6fc96b038b1fd';
        define-mem-ref-line = '205';
        define-mem-ref-name = '__get_PMPADDRx';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__pmp_8h_1ga6341b28b3c2fe7c6e697a1adee7d4dd2';
        define-mem-ref-line = '234';
        define-mem-ref-name = '__set_PMPADDRx';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga782c2fb9aba26298db7123758c5932f4';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR13';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3bd
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '431';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__pmp_8h_1ga0fc1168753b68d4105d6fc96b038b1fd';
        define-mem-ref-line = '205';
        define-mem-ref-name = '__get_PMPADDRx';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__pmp_8h_1ga6341b28b3c2fe7c6e697a1adee7d4dd2';
        define-mem-ref-line = '234';
        define-mem-ref-name = '__set_PMPADDRx';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga803fecb49fa82ceabd227df080f692c7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR14';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3be
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '432';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__pmp_8h_1ga0fc1168753b68d4105d6fc96b038b1fd';
        define-mem-ref-line = '205';
        define-mem-ref-name = '__get_PMPADDRx';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__pmp_8h_1ga6341b28b3c2fe7c6e697a1adee7d4dd2';
        define-mem-ref-line = '234';
        define-mem-ref-name = '__set_PMPADDRx';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga27b523f4961b4e24098ba0b24aa079bb';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PMPADDR15';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3bf
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '433';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__pmp_8h_1ga0fc1168753b68d4105d6fc96b038b1fd';
        define-mem-ref-line = '205';
        define-mem-ref-name = '__get_PMPADDRx';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__pmp_8h_1ga6341b28b3c2fe7c6e697a1adee7d4dd2';
        define-mem-ref-line = '234';
        define-mem-ref-name = '__set_PMPADDRx';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga6568db85f99917ea87c730935c11bbec';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_TSELECT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7a0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '434';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaa19ec30b626fd32227442ef0391856a6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_TDATA1';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7a1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '435';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gabbf8e2faac7cd1dbe41efea8847dd5d9';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_TDATA2';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7a2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '436';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga35efdf3af946e5a33573d57075a5bc08';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_TDATA3';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7a3
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '437';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaa7948071dc3cc9b5b5be073037bafad3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_DCSR';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7b0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '438';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga8266449db67493cfa5d1d247a2258239';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_DPC';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7b1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '439';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga307a9d79a3ab1b4f4192cffabbf38705';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_DSCRATCH';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7b2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '440';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga5a7abfd3679706088142a50995c1bdb8';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MCYCLE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb00
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '441';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1ga0d524220141962c60352cfe0a219bdb4';
        define-mem-ref-line = '608';
        define-mem-ref-name = '__get_rv_cycle';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga204b84adcbccada25ecd7aff3c5a31f5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MINSTRET';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb02
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '442';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1ga0755f3835c1d5788f99547c185dab2d2';
        define-mem-ref-line = '635';
        define-mem-ref-name = '__get_rv_instret';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gab4ecf0c0a94e6890a7f66b24a3d90570';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER3';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb03
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '443';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaba211e449cb5c1f19d356d6aae77fed6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER4';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb04
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '444';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga49744f82c2fd9ba5952bee02fee31d4c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER5';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb05
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '445';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga44bebd12dfb75d1230904599bacfd084';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER6';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb06
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '446';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga33e5707deb3a7dc9e1de6b3f272ba482';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER7';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb07
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '447';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga947ebb26a8cedc08182e1dd1b12a5f52';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER8';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb08
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '448';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga96af9e0956e30a5c177526d32dec3da2';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER9';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb09
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '449';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gab595d3f65afc6cc114e9441a79a72eb5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER10';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb0a
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '450';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaa6c748eba850b6d58630a718f9e01b82';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER11';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb0b
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '451';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga76832c0780249855bcc916fe79e420b0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER12';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb0c
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '452';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gae389f784655a09fba7f6ec2899b70215';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER13';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb0d
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '453';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga3e2db0c2ff1141b64d8a56c1a31b77da';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER14';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb0e
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '454';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gadfd273016afeb9771172c9cbeb9887cb';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER15';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb0f
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '455';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga0b418296b63cdfe99dd9507cc778d14d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER16';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb10
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '456';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaa67f519b1e39b1868822afe663f497fb';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER17';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb11
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '457';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gacb72065967f51ecdd5a22122d572bb43';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER18';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb12
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '458';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gafd2f303ac1c97e4b17b4bdb6dae67a9d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER19';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb13
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '459';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga161acddb79ddb855b1656fe1df53a2c5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER20';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb14
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '460';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga31a807d6ee1b32481ca97966c92e65ef';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER21';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb15
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '461';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gae1cb810c77b3327c2b1e779fb7124ca1';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER22';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb16
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '462';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gad4027543fbea60925a8176cf89d3c7cb';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER23';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb17
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '463';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gad7959c95f4f7ecf46f5cb51fe107f472';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER24';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb18
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '464';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga15fe826bd77b6a1629dbae680a88ae48';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER25';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb19
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '465';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga3dfea6cfc090a5e550891fdab8c0528b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER26';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb1a
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '466';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaca3e84b0ed73b0953076df2f499ccb11';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER27';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb1b
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '467';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga18303fb4cc48e05ab7e437e44eafe039';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER28';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb1c
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '468';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaba156c344a498a4297a0cda3c0eba8e0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER29';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb1d
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '469';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gae87e12f28b2b84e3356cf2edb4995ddd';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER30';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb1e
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '470';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga19cf5f645d0ecfdaddabd24f3d24fad0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER31';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb1f
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '471';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga6ef2272b0c1c4d7086ed1bcef4d18f2d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MUCOUNTEREN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x320
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '472';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga42deb169fb8548705f184a6171eacf07';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MSCOUNTEREN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x321
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '473';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga5c0638be852bb8fe266552e903e5d086';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT3';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x323
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '474';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga938f602cf4785d7063da6c853c051c78';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT4';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x324
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '475';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga15162dd8d541a809e6fbeef1ed01d09a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT5';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x325
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '476';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga0185093eb5946c8137708e21916dc65e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT6';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x326
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '477';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaacfba0d92c494d8e83a7e13f183ebf2f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT7';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x327
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '478';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaa64bbdd12c51cc1bba742dac6dc4fd59';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT8';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x328
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '479';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga177a9b634120f0f0eb54e0469970d9c4';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT9';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x329
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '480';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaf45e26868117973a085e36d7eff5450e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT10';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x32a
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '481';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga92f0189e5bd365e0841d4e940873bb0e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT11';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x32b
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '482';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gac3be9181730b41f7569d3a02c0678476';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT12';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x32c
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '483';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga1bdcead9d6986e83ca841b77f1415221';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT13';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x32d
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '484';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga6402b2179f54e39374218708378ecb18';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT14';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x32e
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '485';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga88a2a649e6aa85e22c858ebfd4a66c90';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT15';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x32f
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '486';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga249efb1593f74ed9766c736e61355339';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT16';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x330
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '487';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga09f2b4ed516486729cb6db6086dd6ba6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT17';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x331
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '488';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga04248ecdb3aac0efecfbc223b2825234';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT18';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x332
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '489';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga7e9fd10959094ccdb2b39849d4f212ae';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT19';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x333
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '490';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga13974efd9157cf121ae2120665581f85';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT20';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x334
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '491';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga4eb02f09ac37938aa2d02d45055dbd6d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT21';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x335
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '492';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaef9531dd9a69b3954f4f190416e3ff3a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT22';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x336
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '493';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gafd99ce5c3b4ced37a6b5033ad6d122dc';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT23';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x337
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '494';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga28b1616c2743a2f9e3aa758ddeb40ad9';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT24';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x338
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '495';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gacd3ce65244335f6031e43511889ebb24';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT25';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x339
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '496';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga49d6c659bd31caa0940d6bccfe6cf690';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT26';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x33a
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '497';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga68721e96a48b16f479ed3b3d3f49f503';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT27';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x33b
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '498';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaffa9684a64c5f062c3021c3cdbabfd51';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT28';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x33c
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '499';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga03c74342e3b565bab5d4e9a2d24bc4c2';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT29';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x33d
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '500';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaf2942b3e343ffa1e98ef0c4e66a5c2cb';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT30';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x33e
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '501';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga05fceefba02c81fb7a391a39335b22b0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMEVENT31';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x33f
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '502';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gac3c7d7cddfa7dda613e4af9c2884fd1d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MVENDORID';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xf11
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '503';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga51da92996bc910f5ac5b654c8c376945';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MARCHID';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xf12
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '504';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga509d84168ac957db68248983ecfcc7ee';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MIMPID';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xf13
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '505';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga50cb52c60a3472620a819765e593f67e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHARTID';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xf14
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '506';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__timer_8h_1ga57b4f64ed87262daf831573e704b12c8';
        define-mem-ref-line = '311';
        define-mem-ref-name = 'SysTimer_ClearSWIRQ';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__timer_8h_1ga515d63f4e4581430fb0bf6e864e5bca9';
        define-mem-ref-line = '206';
        define-mem-ref-name = 'SysTimer_GetCompareValue';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__timer_8h_1ga0431e3f4a44ca2265884c19096912729';
        define-mem-ref-line = '333';
        define-mem-ref-name = 'SysTimer_GetMsipValue';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__timer_8h_1ga52e85918789aa95fc4cd0d7238ca9b6c';
        define-mem-ref-line = '172';
        define-mem-ref-name = 'SysTimer_SetCompareValue';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__timer_8h_1gaa7f8e6c1423f582f958e151ce692395c';
        define-mem-ref-line = '350';
        define-mem-ref-name = 'SysTimer_SetMsipValue';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__timer_8h_1gaa4d13cddf35ef77fd3b3b59e82eb1d47';
        define-mem-ref-line = '291';
        define-mem-ref-name = 'SysTimer_SetSWIRQ';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaf68e1fabef0868e0d41d8e69ba55cce9';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_CYCLEH';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc80
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '507';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga2e2ce9bac3d1ad2128a4eb9438a1022d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_TIMEH';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc81
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '508';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1ga5f54b26adf57d254f6a589dab36bd28a';
        define-mem-ref-line = '663';
        define-mem-ref-name = '__get_rv_time';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaf1e2e4353b163d307d974806a0031407';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_INSTRETH';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc82
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '509';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga315ee54d99aa0fbed5532e5bcf6e2d94';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER3H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc83
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '510';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga426e2ddee52a86c29a9829c66b5c0eb5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER4H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc84
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '511';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gac1e9d2a6cf60d54c39002292a21af314';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER5H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc85
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '512';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga5c7c0dc282f4787f6d7070331a3b9784';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER6H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc86
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '513';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gacac7fd3e7f29c8a8ed9c76647f4e1622';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER7H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc87
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '514';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gae2af5d7df5e784a4686d3cc941220cbe';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER8H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc88
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '515';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga4bd36c6e299b2a4460240f1076d23e29';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER9H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc89
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '516';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaf5581f64a316e30e7c3cbbb5922b1c11';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER10H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc8a
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '517';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaea60788a08d7b4ca7b53f420f603a379';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER11H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc8b
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '518';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga2c0f3bb461cf96900abe0cb838ecdd98';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER12H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc8c
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '519';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gac3a0bbad16bd85e6c94ae660c3385bf3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER13H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc8d
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '520';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga7652fab822b65fe3a34c6d9276e79be5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER14H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc8e
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '521';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga24960fa447bc0b97490e89affaf12175';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER15H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc8f
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '522';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga9f41e6d2a9a3ef8658ffb75ba556850d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER16H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc90
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '523';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga6085cb84939839a52d2d39a9fc3eda31';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER17H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc91
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '524';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga6b5ff85ac4148e421faf6ddf54ac4a9c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER18H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc92
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '525';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga2d88e7749d8af48f14354828ef7d035b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER19H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc93
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '526';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaa650b0fc0f2bb0961c67fbf7b4c36600';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER20H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc94
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '527';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga61086491d346e234d98ab1da45212282';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER21H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc95
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '528';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga1a8800b5b3d07b8c70077cbad166f34a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER22H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc96
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '529';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gab328b79481e61ccfdd857bc32bb20506';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER23H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc97
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '530';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaee69e1ac9c703f0240d254c278a1a272';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER24H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc98
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '531';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga0d672ac0d2799f037a31d2046a06b10b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER25H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc99
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '532';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gace878eb3ea306cca02cfafb6bab9ecc5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER26H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc9a
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '533';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga5e3ecbfe883c475f932c60c31d2dd1b3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER27H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc9b
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '534';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga91cecca4be8b810af5f12b65e211517a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER28H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc9c
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '535';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaf4a8369e4bbdb699385d39809a3a48b7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER29H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc9d
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '536';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gab57d8fe9cde11b9b07afa537a035ae38';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER30H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc9e
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '537';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga5308b7cbb7e2f51f193468164cbf2204';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_HPMCOUNTER31H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xc9f
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '538';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gae3368bea588a2fcdf2e7d24707ef4dda';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MCYCLEH';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb80
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '539';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1ga0d524220141962c60352cfe0a219bdb4';
        define-mem-ref-line = '608';
        define-mem-ref-name = '__get_rv_cycle';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaa59d1f570770dc3be6cd493cbb5a12e4';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MINSTRETH';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb82
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '540';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1ga0755f3835c1d5788f99547c185dab2d2';
        define-mem-ref-line = '635';
        define-mem-ref-name = '__get_rv_instret';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga723ef168d1e7ffe66875303075956376';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER3H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb83
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '541';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gad31a1402ff7146c42b2018c35f91fff8';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER4H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb84
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '542';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga60c30dce15b7a2be53a146006b555e89';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER5H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb85
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '543';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga9e13742a1cdd2859c114d53e957d1479';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER6H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb86
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '544';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga12c3fe1c5311dfddb62fc22f974979a5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER7H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb87
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '545';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga70fcf0b335621e50d6f717658c502ab7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER8H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb88
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '546';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga33e415199dbfe9bceb11b02fd05f05e2';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER9H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb89
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '547';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga3f9e5f23fba4ba95afe9062e6d0223a7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER10H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb8a
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '548';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga4996bb6dff4a8a8fba71fbbb32b24265';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER11H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb8b
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '549';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga4d7f86d7ae204e3b66e0613c62a9fc31';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER12H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb8c
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '550';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gacd5ef2cf1d55e5c3fcbb52775c7cd477';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER13H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb8d
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '551';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gab67d71859f9a6e6f8a5e451202c56cb2';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER14H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb8e
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '552';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gab017401b380bbcdada167739e3919fcd';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER15H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb8f
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '553';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaf6ea9d5fb6d713634806841349668001';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER16H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb90
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '554';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga05f60a41153dd6f018f5d04d3b3b63cd';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER17H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb91
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '555';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga1c58c573e08d2a34dfe351f176d06453';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER18H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb92
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '556';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaf5cfdbc7dae21c267f94defc1e3a1555';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER19H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb93
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '557';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga76e93d1d9471f643e3143697c6b707f1';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER20H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb94
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '558';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga1e0e9a36456b7da7b88093c83dd5a034';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER21H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb95
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '559';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaf39358f2113b1786aafa46fa377efe02';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER22H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb96
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '560';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaa4611c3b746127c7d163c77c795a1284';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER23H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb97
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '561';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga693b26559f45e12a02b4e0c3c30895f7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER24H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb98
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '562';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga553f8532cccee7b82a78ec77abc99291';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER25H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb99
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '563';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga5d702fc0207d53d7b5a04c83831a1f93';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER26H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb9a
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '564';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga13b74054c104d2cb7ee55257d1a812cf';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER27H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb9b
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '565';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga2fab81807863c7cd55737ab7a1b525f6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER28H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb9c
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '566';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga3b046d583c1f3e2f2f55c3b4d176598a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER29H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb9d
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '567';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaf9fdd0098699ae5c0b46405a7824795a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER30H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb9e
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '568';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga943048489f909d6abba06c7fd38075bd';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MHPMCOUNTER31H';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb9f
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '569';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga9ba401387323d3fdfbe93c901c080954';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SPMPCFG0';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1A0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '572';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaec59cd1e18d5fd43934e746643fd5d69';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SPMPCFG1';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1A1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '573';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gade3ff3f3d224893b183e254563c8c679';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SPMPCFG2';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1A2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '574';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga39ab50479a50302d271fb6b8f770d63c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SPMPCFG3';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1A3
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '575';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga444f463df25b264807a9a21586d3642f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SPMPADDR0';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1B0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '576';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga95916391349650863a75672f5ba09eff';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SPMPADDR1';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1B1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '577';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gac4a49927351f9bd03afafd1280c6c7e5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SPMPADDR2';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1B2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '578';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gae768d2adffb36a40d02f3a637db7c5be';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SPMPADDR3';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1B3
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '579';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaffecb65da22b2a02c085423187bf19da';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SPMPADDR4';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1B4
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '580';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gafd6dc07656b6d6e3f72e6d0bb1a69f45';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SPMPADDR5';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1B5
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '581';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gad460161f33c9d9781b8164f0c66f4a54';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SPMPADDR6';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1B6
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '582';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gac9c1812274f86f3e3fc9716c4bb24bf2';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SPMPADDR7';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1B7
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '583';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gac4916c1385a8999ca73ef115b97ee330';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SPMPADDR8';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1B8
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '584';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga3f6df6ed01d22da0b3ac69d668b04953';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SPMPADDR9';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1B9
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '585';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga3e214be18ea7b9ec4811884972e40b02';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SPMPADDR10';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1BA
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '586';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga61d4943ae12afe4758d8ec688378e677';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SPMPADDR11';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1BB
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '587';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga8de51987aed0c374e533e6e03701b98d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SPMPADDR12';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1BC
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '588';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gadccdc1394f893014a3016dd63da11746';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SPMPADDR13';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1BD
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '589';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga70ce11868eae64e10395760ee9ba45cf';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SPMPADDR14';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1BE
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '590';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gafae126e7cad1ec9bf4cbcd7d98728f7d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SPMPADDR15';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1BF
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '591';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga5e44edb3f3d95986c92f8efad5db0c2c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MTVT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x307
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '594';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1ga7b8025dd8eac9993066d730cee6475a0';
        define-mem-ref-line = '742';
        define-mem-ref-name = '__ECLIC_GetVector';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1ga2e80049df57b285d4dd43454377c0845';
        define-mem-ref-line = '710';
        define-mem-ref-name = '__ECLIC_SetVector';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gacc09c434f52be7b1d5f715b9e7c87a81';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MNXTI';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x345
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '595';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga45bf722f7c1099ed2861045c00003379';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MINTSTATUS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x346
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '596';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga0e69a0c75e594c7801fce720de10fdbe';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MSCRATCHCSW';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x348
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '597';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gae205d4db7d1975b8a8accf904cb6feda';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MSCRATCHCSWL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x349
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '598';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gafa653e51ce2be6aa201caa8d36337e0f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MCLICBASE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x350
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '599';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gae76e6d643aed4d6ea0b986dc7e0c7171';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_UCODE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x801
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '602';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga9643607a23d4bc6a50a562d0a1f5a8f3';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MCOUNTINHIBIT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x320
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '605';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1ga16f715797bba0ac2ed2e1820c63443cd';
        define-mem-ref-line = '846';
        define-mem-ref-name = '__disable_all_counter';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1gaf9ada8a615338120fa38a6e193fd7517';
        define-mem-ref-line = '806';
        define-mem-ref-name = '__disable_mcycle_counter';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1gae1cb8d99e36d784e9071fec80e1f02fe';
        define-mem-ref-line = '826';
        define-mem-ref-name = '__disable_minstret_counter';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1ga1b25cc01665431cd509fd3c1be93a811';
        define-mem-ref-line = '836';
        define-mem-ref-name = '__enable_all_counter';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1gadba90c4a57befeb5e4f739295af55e73';
        define-mem-ref-line = '796';
        define-mem-ref-name = '__enable_mcycle_counter';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1gae7bb45974eee5b66ea6332ba0ccf23d5';
        define-mem-ref-line = '816';
        define-mem-ref-name = '__enable_minstret_counter';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga76a5574122af1a8da6e2bd68c39da922';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MILM_CTL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7C0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '606';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga4958637ace7ceaea76e4fa4467fd6cd6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MDLM_CTL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7C1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '607';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga96f8a7b9feee05fcd5c69fbdcbec85cd';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MECC_CODE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7C2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '608';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga13df3ff8aec804cae346b61b2643c589';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MNVEC';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7C3
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '609';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1gac5b9521ea1bd5260330714b8032d04d5';
        define-mem-ref-line = '841';
        define-mem-ref-name = '__get_nmi_entry';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga14e293d39955a4a033d7393c3a3ab1ef';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MSUBM';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7C4
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '610';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gab4dafad459e3db3ae835b0de8053f481';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MDCAUSE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7C9
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '611';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga6e79ed96b3346ea75923126b7c4d9d67';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MCACHE_CTL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7CA
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '612';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__cache_8h_1gab30be00d8a0583adac5d786149db433f';
        define-mem-ref-line = '655';
        define-mem-ref-name = 'DisableDCache';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__cache_8h_1ga4a855b01222d0c42d413f168651616e5';
        define-mem-ref-line = '191';
        define-mem-ref-name = 'DisableICache';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__cache_8h_1gaf90783ed69b3589cde6fe7dbabeb17c0';
        define-mem-ref-line = '640';
        define-mem-ref-name = 'EnableDCache';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__cache_8h_1ga76dfd7aff65a6a7fa91b53dbe44f9ce5';
        define-mem-ref-line = '176';
        define-mem-ref-name = 'EnableICache';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gabec3fb75f542861f5dcd5a1cda1df932';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MMISC_CTL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7D0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '613';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaf14ed5e74ef3587e1f4fb0ce13920a89';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MSAVESTATUS';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7D6
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '614';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga32cb2c1b8fd77e4b9adea487b471f208';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MSAVEEPC1';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7D7
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '615';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga7b5df9537bc15eabe8f3d6ef39be8b36';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MSAVECAUSE1';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7D8
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '616';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gacff440cb8477cb8b00f27754ad821483';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MSAVEEPC2';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7D9
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '617';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga3606225699568343f04cd121aa971ede';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MSAVECAUSE2';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7DA
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '618';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga1e4d5a334aed1b5875b26ec0f3e3d276';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MSAVEDCAUSE1';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7DB
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '619';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga1f6ce77bc9e71911b53ae6e01f72436a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MSAVEDCAUSE2';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7DC
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '620';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga46a43f3b5904ab91dfbb714e819985f6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MTLB_CTL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7DD
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '621';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga1c4771760dc892e5a41c3dd57450b9f8';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MECC_LOCK';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7DE
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '622';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga32468267a54a3a2f0c173c0906897d86';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MFP16MODE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7E2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '623';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaf247842cff2eec5771c1ec6dd573b693';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_LSTEPFORC';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7E9
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '624';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaff94c16a48ec14f09e8b5ccd4a644c1e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PUSHMSUBM';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7EB
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '625';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga7d9dcb2dd7d7c764aab4b68033b383f2';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MTVT2';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7EC
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '626';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1ga2fe20dcdecc453c6709448944b1f5350';
        define-mem-ref-line = '821';
        define-mem-ref-name = '__get_nonvec_entry';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__eclic_8h_1gadbe0f14f32c5989304fd05faf0cff648';
        define-mem-ref-line = '799';
        define-mem-ref-name = '__set_nonvec_entry';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gafdc52ae6a2e10e010475ace51f98ccd6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_JALMNXTI';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7ED
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '627';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga0f754877b0b80651f35cb6916d0bcb2f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PUSHMCAUSE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7EE
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '628';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga255f0d4104534561a35308c7b6fcd2cd';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PUSHMEPC';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7EF
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '629';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga0982460f88e5af9a34c17c86c1db564a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MPPICFG_INFO';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7F0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '630';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga48dbc3afead74482181fcbc2fad7c19c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MFIOCFG_INFO';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7F1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '631';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga607b2a489cfb1b1faf0b3b76ce39cb84';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MDEVB';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7F3
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '632';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gac9ce6e10f1ec073de69ee82b2831f890';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MDEVM';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7F4
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '633';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga198af23be4801bfb74a2358fbc1bb799';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MNOCB';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7F5
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '634';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaea387b72a8faf293ec7def1b8e4aeb1a';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MNOCM';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7F6
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '635';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga5b68282dddd32e9b64a994a59b939acd';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MSMPCFG_INFO';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7F7
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '636';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga7ee7f2cce602b8b3e2943bc2d0ca65cb';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SLEEPVALUE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x811
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '637';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1ga1a1db7d1454df1cf7b1214d18349cac1';
        define-mem-ref-line = '775';
        define-mem-ref-name = '__set_wfi_sleepmode';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga730f164e5d79c6b27d2187a1e7a17e25';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_TXEVT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x812
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '638';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1gaa60612c5e378681f32e815743823ba15';
        define-mem-ref-line = '786';
        define-mem-ref-name = '__TXEVT';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga9852d0d6221b272f8f5290c3445ee1ba';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_WFE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x810
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '639';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1gaca38170721a2eefd87017ed350162c4c';
        define-mem-ref-line = '730';
        define-mem-ref-name = '__WFE';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__base_8h_1ga8bc0687a967ccba8e8adbe7abe5fe2f7';
        define-mem-ref-line = '717';
        define-mem-ref-name = '__WFI';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaf155881e9097545a4a31041c4d51d05c';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_JALSNXTI';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x947
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '640';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaa66cb3b9c23d77dc064e8bd7d40be93b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_STVT2';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x948
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '641';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga3d425d8171680f0e4f65fd1db1cba669';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PUSHSCAUSE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x949
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '642';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga4c6a337995365a2a0a626b61f75f12e0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_PUSHSEPC';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x94A
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '643';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaaf31400609977385346bcecf18911174';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_SDCAUSE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x9C0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '644';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga3401036463f597de22658714115bed5b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MICFG_INFO';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xFC0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '645';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__cache_8h_1ga4a855b01222d0c42d413f168651616e5';
        define-mem-ref-line = '191';
        define-mem-ref-name = 'DisableICache';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gacb31b31285f7ea1d527a19f4388b01bd';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MDCFG_INFO';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xFC1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '646';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__cache_8h_1gab30be00d8a0583adac5d786149db433f';
        define-mem-ref-line = '655';
        define-mem-ref-name = 'DisableDCache';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga7fd083b254f2438fe5cbf9d667468324';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MCFG_INFO';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xFC2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '647';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga2cbdbf90ba3dff2b8c187d3154969aff';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_MTLBCFG_INFO';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xFC3
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '648';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga4faa0c15728837765ec9aaf28f14c09b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_CCM_MBEGINADDR';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7CB
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '651';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__cache_8h_1gab30be00d8a0583adac5d786149db433f';
        define-mem-ref-line = '655';
        define-mem-ref-name = 'DisableDCache';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__cache_8h_1ga4a855b01222d0c42d413f168651616e5';
        define-mem-ref-line = '191';
        define-mem-ref-name = 'DisableICache';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga09b6c06fdc71424566c30bad5470c0c1';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_CCM_MCOMMAND';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7CC
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '652';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__cache_8h_1gab30be00d8a0583adac5d786149db433f';
        define-mem-ref-line = '655';
        define-mem-ref-name = 'DisableDCache';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__cache_8h_1ga4a855b01222d0c42d413f168651616e5';
        define-mem-ref-line = '191';
        define-mem-ref-name = 'DisableICache';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga68f7537cd8e79434b1a191053d09d5f7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_CCM_MDATA';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7CD
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '653';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__cache_8h_1gab30be00d8a0583adac5d786149db433f';
        define-mem-ref-line = '655';
        define-mem-ref-name = 'DisableDCache';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__cache_8h_1ga4a855b01222d0c42d413f168651616e5';
        define-mem-ref-line = '191';
        define-mem-ref-name = 'DisableICache';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga59e75e3573eb567358b1037a7076de37';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_CCM_SUEN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7CE
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '654';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gab508f4dfbd649a25f7eaa8ac5b88a8c0';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_CCM_SBEGINADDR';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x5CB
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '655';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__cache_8h_1gab30be00d8a0583adac5d786149db433f';
        define-mem-ref-line = '655';
        define-mem-ref-name = 'DisableDCache';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__cache_8h_1ga4a855b01222d0c42d413f168651616e5';
        define-mem-ref-line = '191';
        define-mem-ref-name = 'DisableICache';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga19b9cf123424b131c5ba30946c54c2fd';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_CCM_SCOMMAND';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x5CC
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '656';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__cache_8h_1gab30be00d8a0583adac5d786149db433f';
        define-mem-ref-line = '655';
        define-mem-ref-name = 'DisableDCache';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__cache_8h_1ga4a855b01222d0c42d413f168651616e5';
        define-mem-ref-line = '191';
        define-mem-ref-name = 'DisableICache';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga58c7d8ca64fe96544d85e57f4b6a3bca';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_CCM_SDATA';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x5CD
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '657';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__cache_8h_1gab30be00d8a0583adac5d786149db433f';
        define-mem-ref-line = '655';
        define-mem-ref-name = 'DisableDCache';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__cache_8h_1ga4a855b01222d0c42d413f168651616e5';
        define-mem-ref-line = '191';
        define-mem-ref-name = 'DisableICache';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gaca251c4a3f81dd257831ac6407088e52';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_CCM_UBEGINADDR';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x4CB
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '658';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__cache_8h_1gab30be00d8a0583adac5d786149db433f';
        define-mem-ref-line = '655';
        define-mem-ref-name = 'DisableDCache';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__cache_8h_1ga4a855b01222d0c42d413f168651616e5';
        define-mem-ref-line = '191';
        define-mem-ref-name = 'DisableICache';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga53c64245d173eed1d1622cfac509ff60';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_CCM_UCOMMAND';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x4CC
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '659';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__cache_8h_1gab30be00d8a0583adac5d786149db433f';
        define-mem-ref-line = '655';
        define-mem-ref-name = 'DisableDCache';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__cache_8h_1ga4a855b01222d0c42d413f168651616e5';
        define-mem-ref-line = '191';
        define-mem-ref-name = 'DisableICache';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1gad18936febc391b50b6ba078eb605758e';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_CCM_UDATA';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x4CD
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '660';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__cache_8h_1gab30be00d8a0583adac5d786149db433f';
        define-mem-ref-line = '655';
        define-mem-ref-name = 'DisableDCache';
    };
      define-mem-referenceby = {
        define-mem-ref-id = 'core__feature__cache_8h_1ga4a855b01222d0c42d413f168651616e5';
        define-mem-ref-line = '191';
        define-mem-ref-name = 'DisableICache';
    };
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Registers_1ga7f214054147ffd229cc1aba320cf8405';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CSR_CCM_FPIPE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x4CF
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '661';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaa0f507b2b11ba1d8f9e1675775646919';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CAUSE_MISALIGNED_FETCH';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x0
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '666';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
End of Doxygen Group NMSIS_Core_CSR_Registers.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaba5d094c7796286978fe05ceedb89863';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CAUSE_FAULT_FETCH';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '667';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga0b365435966c2ba620824668ecd09006';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CAUSE_ILLEGAL_INSTRUCTION';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '668';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaabd6ef7192e2092f6914447d808f838d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CAUSE_BREAKPOINT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '669';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga12723f26b86c321bdde190c119aee4be';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CAUSE_MISALIGNED_LOAD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x4
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '670';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga1ec6d35d2f96397da81e293b82a3f06f';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CAUSE_FAULT_LOAD';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x5
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '671';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gad9517090b55edb5b56751c969280f17d';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CAUSE_MISALIGNED_STORE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x6
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '672';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga78208819b398959ba50a913f8bbb44f4';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CAUSE_FAULT_STORE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x7
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '673';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gad313934ea20c1ab3491e2d52d4ad558b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CAUSE_USER_ECALL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x8
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '674';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gac3c506d6261a143953d856b85a47b707';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CAUSE_SUPERVISOR_ECALL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x9
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '675';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga9127266f95abeacd50926e1ac29c0885';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CAUSE_HYPERVISOR_ECALL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xa
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '676';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga19461c8df4bce8af932c6bcbcdc302ea';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'CAUSE_MACHINE_ECALL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xb
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '677';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gad891aa30fc0af385a8ccd22d5bb9ed49';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'DCAUSE_FAULT_FETCH_PMP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '680';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga5564fb5c006efb9f6e670303f3887b1b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'DCAUSE_FAULT_FETCH_INST';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '681';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gad5c25083d866714730e56ea5322765fc';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'DCAUSE_FAULT_LOAD_PMP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '683';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gae80781100324a8152d5a9f895873fcde';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'DCAUSE_FAULT_LOAD_INST';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '684';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga1d9ccec8b3c313f10bab146c5d71e061';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'DCAUSE_FAULT_LOAD_NICE';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x3
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '685';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1gaebd23612a7b2e1c261bbdc8004fdd5d5';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'DCAUSE_FAULT_STORE_PMP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x1
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '687';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__CSR__Encoding_1ga8e47cb5b31685d6ceef0051a8bee7708';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'DCAUSE_FAULT_STORE_INST';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x2
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
      define-mem-desc-line = '688';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    };
  file-full-name  = '/home/runner/work/NMSIS/NMSIS/NMSIS/Core/Include/riscv_encoding.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'system__Device_8c';
  file-name = 'system_Device.c';
    define = {
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'system__Device_8c_1a3cad0f9b3c40159bd2fbd7f5e60f2fff';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'XTAL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(12000000U)       /* Oscillator frequency             */
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      define-mem-desc-line = '35';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'system__Device_8c_1a95982eccb57c2ae35f8ba3d8f0b05653';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'SYSTEM_CLOCK';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
(5 * XTAL)
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      define-mem-desc-line = '37';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'group__NMSIS__Core__IntExcNMI__Handling_1ga10f1bcf88d4be44d559c79485f16dd24';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'MAX_SYSTEM_EXCEPTION_NUM';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
12
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      define-mem-desc-line = '144';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Max exception handler number, don't include the NMI(0xFFF) one.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    };
    typedef = {
    typedef-member = {
      typedef-mem-kind = 'typedef';
      typedef-mem-id   = 'group__NMSIS__Core__IntExcNMI__Handling_1gacdea0407312bb8428c98044b5aef3e23';
      typedef-mem-virt = normal;
      typedef-mem-prot = public;
      typedef-mem-type = <<_EnD_oF_dEf_TeXt_
void(*
_EnD_oF_dEf_TeXt_;
      typedef-mem-name = 'EXC_HANDLER';
      typedef-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      typedef-mem-desc-line = '161';
      typedef-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Exception Handler Function Typedef.
_EnD_oF_dEf_TeXt_;
      typedef-mem-documentation = <<_EnD_oF_dEf_TeXt_
\note
This typedef is only used internal in this system_<Device>.c file.
It is used to do type conversion for registered exception handler before calling it.
_EnD_oF_dEf_TeXt_;
    }; /* typedef-member */
    };
    func = {
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SystemConfig_1gae0c36a9591fe6e9c45ecb21a794f0f0f';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SystemCoreClockUpdate';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      func-mem-desc-line = '106';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Function to update the variable \ref SystemCoreClock.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Updates the variable \ref SystemCoreClock and must be called whenever the core clock is changed
during program execution. The function evaluates the clock register settings and calculates
the current core clock.
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SystemConfig_1ga93f514700ccf00d08dbdcff7f1224eb2';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'SystemInit';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      func-mem-desc-line = '124';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Function to Initialize the system.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
Initializes the microcontroller system. Typically, this function configures the
oscillator (PLL) that is part of the microcontroller device. For systems
with a variable clock speed, it updates the variable \ref SystemCoreClock.
SystemInit is called from the file <b>startup<i>_device</i></b>.
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExcNMI__Handling_1ga97971400b10d2cdd33f0d1fb59f9d0c8';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
static void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'system_default_exception_handler';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'mcause';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'sp';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      func-mem-desc-line = '169';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
System Default Exception Handler.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function provided a default exception and NMI handling code for all exception ids.
By default, It will just print some information for debug, Vendor can customize it according to its requirements.
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExcNMI__Handling_1gab6afbaed495af51eeeb4eb7d1c5da420';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
static void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'Exception_Init';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      func-mem-desc-line = '187';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Initialize all the default core exception handlers.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
The core exception handler for each exception id will be initialized to \ref system_default_exception_handler.
\note
Called in \ref _init function, used to initialize default exception handlers for all exception IDs
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExcNMI__Handling_1gab5562a5efa39f9027a6c580f950e2157';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'Exception_DumpFrame';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'sp';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      func-mem-desc-line = '199';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Dump Exception Frame.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function provided feature to dump exception frame stored in stack.
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExcNMI__Handling_1ga9df7d45dd6f418ba31b6cec6c4958490';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'Exception_Register_EXC';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'EXCn';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'exc_handler';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      func-mem-desc-line = '227';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Register an exception handler for exception code EXCn.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
* For EXCn < \ref MAX_SYSTEM_EXCEPTION_NUM, it will be registered into SystemExceptionHandlers[EXCn-1].
* For EXCn == NMI_EXCn, it will be registered into SystemExceptionHandlers[MAX_SYSTEM_EXCEPTION_NUM].
\param   EXCn    See \ref EXCn_Type
\param   exc_handler     The exception handler for this exception code EXCn
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExcNMI__Handling_1ga84df4676c5284f0ea383eeba33e9aa40';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'Exception_Get_EXC';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'EXCn';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      func-mem-desc-line = '244';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Get current exception handler for exception code EXCn.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
* For EXCn < \ref MAX_SYSTEM_EXCEPTION_NUM, it will return SystemExceptionHandlers[EXCn-1].
* For EXCn == NMI_EXCn, it will return SystemExceptionHandlers[MAX_SYSTEM_EXCEPTION_NUM].
\param   EXCn    See \ref EXCn_Type
\return  Current exception handler for exception code EXCn, if not found, return 0.
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExcNMI__Handling_1gac7f5b810aee623f65822bac1efe2006d';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
uint32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'core_exception_handler';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'mcause';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
unsigned long
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'sp';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      func-mem-desc-line = '266';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Common NMI and Exception handler entry.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function provided a command entry for NMI and exception. Silicon Vendor could modify
this template implementation according to requirement.
\remarks
- RISCV provided common entry for all types of exception. This is proposed code template
  for exception entry function, Silicon Vendor could modify the implementation.
- For the core_exception_handler template, we provided exception register function \ref Exception_Register_EXCn
  which can help developer to register your exception handler for specific exception number.
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExcNMI__Handling_1ga2d2e27f47287f5d28cc26f2cb214337f';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'ECLIC_Init';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      func-mem-desc-line = '291';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Initialize Global ECLIC Config.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
ECLIC needs be initialized after boot up,
Vendor could also change the initialization
configuration.
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__IntExcNMI__Handling_1ga52cbc8fa60b210b75ac79baa25ac74bb';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
int32_t
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'ECLIC_Register_IRQ';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
IRQn_Type
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'IRQn';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'shv';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
ECLIC_TRIGGER_Type
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'trig_mode';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'lvl';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'priority';
      }; /*        func-mem-param--param */
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void *
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'handler';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      func-mem-desc-line = '319';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Initialize a specific IRQ and register the handler.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function set vector mode, trigger mode and polarity, interrupt level and priority,
assign handler for specific IRQn.
\param [in]  IRQn        NMI interrupt handler address
\param [in]  shv         \ref ECLIC_NON_VECTOR_INTERRUPT means non-vector mode, and \ref ECLIC_VECTOR_INTERRUPT is vector mode
\param [in]  trig_mode   see \ref ECLIC_TRIGGER_Type
\param [in]  lvl         interupt level
\param [in]  priority    interrupt priority
\param [in]  handler     interrupt handler, if NULL, handler will not be installed

\return       -1 means invalid input parameter. 0 means successful.
\remarks
- This function use to configure specific eclic interrupt and register its interrupt handler and enable its interrupt.
- If the vector table is placed in read-only section(FLASHXIP mode), handler could not be installed
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SystemConfig_1gad13ba247efe59bbe2b6004d9bd0f10db';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '_premain_init';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      func-mem-desc-line = '352';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
early init function before main
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This function is executed right before main function.
For RISC-V gnu toolchain, _init function might not be called
by __libc_init_array function, so we defined a new function
to do initialization
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SystemConfig_1ga6eb76a75cf67b543443efc82ecf33713';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '_postmain_fini';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        func-mem-param-declname = 'status';
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      func-mem-desc-line = '381';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
finish function after main
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
\param [in]  status     status code return from main



This function is executed right after main function.
For RISC-V gnu toolchain, _fini function might not be called
by __libc_fini_array function, so we defined a new function
to do initialization
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SystemConfig_1gad1cbc4315ef293463e6057dfb24c8115';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '_init';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      func-mem-desc-line = '395';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
_init function called in __libc_init_array()
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This <tt>__libc_init_array()</tt> function is called during startup code,
user need to implement this function, otherwise when link it will
error init.c:(.text.__libc_init_array+0x26): undefined reference to `_init'
\note
Please use \ref _premain_init function now
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'group__NMSIS__Core__SystemConfig_1ga173a20f19acf36985bbac6786a02b544';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      func-mem-name = '_fini';
      func-mem-param = {
        func-mem-param-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      }; /*        func-mem-param--param */
      func-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      func-mem-desc-line = '409';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
_fini function called in __libc_fini_array()
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
This <tt>__libc_fini_array()</tt> function is called when exit main.
user need to implement this function, otherwise when link it will
error fini.c:(.text.__libc_fini_array+0x28): undefined reference to `_fini'
\note
Please use \ref _postmain_fini function now
_EnD_oF_dEf_TeXt_;
    }; /* func-member */
    };
    var = {
    var-member = {
      var-mem-kind = 'variable';
      var-mem-id   = 'group__NMSIS__Core__SystemConfig_1ga0814e683179ebb031663c192f7e9b579';
      var-mem-virt = normal;
      var-mem-prot = public;
      var-mem-type = <<_EnD_oF_dEf_TeXt_
volatile uint32_t
_EnD_oF_dEf_TeXt_;
      var-mem-name = 'SystemCoreClock';
      var-mem-initializer = <<_EnD_oF_dEf_TeXt_
= SYSTEM_CLOCK
_EnD_oF_dEf_TeXt_;
      var-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      var-mem-desc-line = '92';
      var-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Variable to hold the system core clock value.
_EnD_oF_dEf_TeXt_;
      var-mem-documentation = <<_EnD_oF_dEf_TeXt_
Holds the system core clock, which is the system clock frequency supplied to the SysTick
timer and the processor core clock. This variable can be used by debuggers to query the
frequency of the debug timer or to configure the trace clock speed.

\attention
Compilers must be configured to avoid removing this variable in case the application
program is not using it. Debugging systems require the variable to be physically
present in memory so that it can be examined to configure the debugger.
_EnD_oF_dEf_TeXt_;
    }; /* var-member */
    var-member = {
      var-mem-kind = 'variable';
      var-mem-id   = 'group__NMSIS__Core__IntExcNMI__Handling_1gaedd77e0eba0ea9872a4375893480b420';
      var-mem-virt = normal;
      var-mem-prot = public;
      var-mem-type = <<_EnD_oF_dEf_TeXt_
static unsigned long
_EnD_oF_dEf_TeXt_;
      var-mem-name = 'SystemExceptionHandlers';
      var-mem-desc-file = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
      var-mem-desc-line = '153';
      var-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Store the exception handlers for each exception ID.
_EnD_oF_dEf_TeXt_;
      var-mem-documentation = <<_EnD_oF_dEf_TeXt_
\note
- This SystemExceptionHandlers are used to store all the handlers for all
the exception codes Nuclei N/NX core provided.
- Exception code 0 - 11, totally 12 exceptions are mapped to SystemExceptionHandlers[0:11]
- Exception for NMI is also re-routed to exception handling(exception code 0xFFF) in startup code configuration, the handler itself is mapped to SystemExceptionHandlers[MAX_SYSTEM_EXCEPTION_NUM]
_EnD_oF_dEf_TeXt_;
    }; /* var-member */
    };
  file-full-name  = '/home/runner/work/NMSIS/NMSIS/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
